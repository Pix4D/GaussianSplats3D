{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/LoaderStatus.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/LogLevel.js","../src/OrbitControls.js","../src/RenderMode.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/SceneRevealMode.js","../src/SplatRenderMode.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/splatmesh/SplatMesh.js","../src/ui/InfoPanel.js","../src/ui/LoadingProgressBar.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/webxr/ARButton.js","../src/webxr/VRButton.js","../src/webxr/WebXRMode.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let resolver;\n        let rejecter;\n        this.promise = new Promise((resolve, reject) => {\n            resolver = resolve;\n            rejecter = reject;\n        });\n\n        const promiseResolve = resolver.bind(this);\n        const promiseReject = rejecter.bind(this);\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort(reason) {\n        if (this.abortHandler) this.abortHandler(reason);\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const makeProgressiveFetchFunction =\n  (get = fetch) => \n  (path, onProgress, saveChunks = true) => {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    const abortHandler = (reason) => {\n        abortController.abort(reason);\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        get(path, { signal })\n        .then(async (data) => {\n            // Handle error conditions where data is still returned\n            if (!data.ok) {\n                const errorText = await data.text();\n                reject(new Error(`Fetch failed: ${data.status} ${data.statusText} ${errorText}`));\n                return;\n            }\n\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) {\n                        chunks.push(chunk);\n                    }\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk, fileSize);\n                    }\n                } catch (error) {\n                    reject(error);\n                    return;\n                }\n            }\n        })\n        .catch((error) => {\n            reject(new AbortedPromiseError(error));\n        });\n    }, abortHandler);\n\n};\n\nexport const fetchWithProgress = makeProgressiveFetchFunction();\n\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n\n\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\n    switch (sphericalHarmonicsDegree) {\n        case 1:\n            return 9;\n        case 2:\n            return 24;\n    }\n    return 0;\n};\n\nexport const nativePromiseWithExtractedComponents = () => {\n    let resolver;\n    let rejecter;\n    const promise = new Promise((resolve, reject) => {\n        resolver = resolve;\n        rejecter = reject;\n    });\n    return {\n        'promise': promise,\n        'resolve': resolver,\n        'reject': rejecter\n    };\n};\n\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\n    let resolver;\n    let rejecter;\n    if (!abortHandler) {\n        abortHandler = () => {};\n    }\n    const promise = new AbortablePromise((resolve, reject) => {\n        resolver = resolve;\n        rejecter = reject;\n    }, abortHandler);\n    return {\n        'promise': promise,\n        'resolve': resolver,\n        'reject': rejecter\n    };\n};\n\nclass Semver {\n    constructor(major, minor, patch) {\n        this.major = major;\n        this.minor = minor;\n        this.patch = patch;\n    }\n\n    toString() {\n        return `${this.major}_${this.minor}_${this.patch}`;\n    }\n}\n\nexport function isIOS() {\n    const ua = navigator.userAgent;\n    return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\n}\n\nexport function getIOSSemever() {\n    if (isIOS()) {\n        const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n        return new Semver(\n            parseInt(extract[1] || 0, 10),\n            parseInt(extract[2] || 0, 10),\n            parseInt(extract[3] || 0, 10)\n        );\n    } else {\n        return null; // or [0,0,0]\n    }\n}\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13,\n        FRC0: 14,\n        FRC1: 15,\n        FRC2: 16,\n        FRC3: 17,\n        FRC4: 18,\n        FRC5: 19,\n        FRC6: 20,\n        FRC7: 21,\n        FRC8: 22,\n        FRC9: 23,\n        FRC10: 24,\n        FRC11: 25,\n        FRC12: 26,\n        FRC13: 27,\n        FRC14: 28,\n        FRC15: 29,\n        FRC16: 30,\n        FRC17: 31,\n        FRC18: 32,\n        FRC19: 33,\n        FRC20: 34,\n        FRC21: 35,\n        FRC22: 36,\n        FRC23: 37\n    };\n\n    constructor(sphericalHarmonicsDegree = 0) {\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat(sphericalHarmonicsDegree = 0) {\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n        return baseSplat;\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n            newSplat[i] = rest[i];\n        }\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n            newSplat[i] = srcSplat[i];\n        }\n        this.addSplat(newSplat);\n    }\n}\n","export class Constants {\n\n    static DefaultSplatSortDistanceMapPrecision = 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static ProgressiveLoadSectionSize = 262144;\n    static ProgressiveLoadSectionDelayDuration = 15;\n    static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst DefaultSphericalHarmonics8BitCompressionRange = Constants.SphericalHarmonics8BitCompressionRange;\nconst DefaultSphericalHarmonics8BitCompressionHalfRange = DefaultSphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst toUncompressedFloat = (f, compressionLevel, isSH = false, range8BitMin, range8BitMax) => {\n    if (compressionLevel === 0) {\n        return f;\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return THREE.DataUtils.fromHalfFloat(f);\n    } else if (compressionLevel === 2) {\n        return fromUint8(f, range8BitMin, range8BitMax);\n    }\n};\n\nconst toUint8 = (v, rangeMin, rangeMax) => {\n    v = clamp(v, rangeMin, rangeMax);\n    const range = (rangeMax - rangeMin);\n    return clamp(Math.floor((v - rangeMin) / range * 255), 0, 255);\n};\n\nconst fromUint8 = (v, rangeMin, rangeMax) => {\n    const range = (rangeMax - rangeMin);\n    return (v / 255 * range + rangeMin);\n};\n\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\n    return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\n};\n\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\n    return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\n};\n\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\n    if (compressionLevel === 0) {\n        return dataView.getFloat32(floatIndex * 4, true);\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\n        return dataView.getUint16(floatIndex * 2, true);\n    } else {\n        return dataView.getUint8(floatIndex, true);\n    }\n};\n\nconst convertBetweenCompressionLevels = function() {\n\n    const noop = (v) => v;\n\n    return function(val, fromLevel, toLevel, isSH = false) {\n        if (fromLevel === toLevel) return val;\n        let outputConversionFunc = noop;\n\n        if (fromLevel === 2 && isSH) {\n            if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\n            else if (toLevel == 0) {\n                outputConversionFunc = fromUint8;\n            }\n        } else if (fromLevel === 2 || fromLevel === 1) {\n            if (toLevel === 0) outputConversionFunc = fromHalfFloat;\n            else if (toLevel == 2) {\n                if (!isSH) outputConversionFunc = noop;\n                else outputConversionFunc = fromHalfFloatToUint8;\n            }\n        } else if (fromLevel === 0) {\n            if (toLevel === 1) outputConversionFunc = toHalfFloat;\n            else if (toLevel == 2) {\n                if (!isSH) outputConversionFunc = toHalfFloat;\n                else outputConversionFunc = toUint8;\n            }\n        }\n\n        return outputConversionFunc(val);\n    };\n\n}();\n\nconst copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\n    const src = new Uint8Array(srcBuffer, srcOffset);\n    const dest = new Uint8Array(destBuffer, destOffset);\n    for (let i = 0; i < byteCount; i++) {\n        dest[i] = src[i];\n    }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 12,\n            RotationffsetBytes: 24,\n            ColorOffsetBytes: 40,\n            SphericalHarmonicsOffsetBytes: 44,\n            ScaleRange: 1,\n            BytesPerSphericalHarmonicsComponent: 4,\n            SphericalHarmonicsOffsetFloat: 11,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 44 },\n                1: { BytesPerSplat: 80 },\n                2: { BytesPerSplat: 140 }\n            },\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 2,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 42 },\n                2: { BytesPerSplat: 72 }\n            },\n        },\n        2: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerColor: 4,\n            ScaleOffsetBytes: 6,\n            RotationffsetBytes: 12,\n            ColorOffsetBytes: 20,\n            SphericalHarmonicsOffsetBytes: 24,\n            ScaleRange: 32767,\n            BytesPerSphericalHarmonicsComponent: 1,\n            SphericalHarmonicsOffsetFloat: 12,\n            SphericalHarmonicsDegrees: {\n                0: { BytesPerSplat: 24 },\n                1: { BytesPerSplat: 33 },\n                2: { BytesPerSplat: 48 }\n            },\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getMinSphericalHarmonicsDegree() {\n        let minSphericalHarmonicsDegree = 0;\n        for (let i = 0; i < this.sections.length; i++) {\n            const section = this.sections[i];\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n            }\n        }\n        return minSphericalHarmonicsDegree;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n        if (this.compressionLevel >= 1) {\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            outCenter.x = x;\n            outCenter.y = y;\n            outCenter.z = z;\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        return function(index, outScale, outRotation, transform, scaleOverride) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n            if (scaleOverride) {\n                if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\n                if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\n                if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\n            }\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            if (transform) {\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                rotationMatrix.makeRotationFromQuaternion(rotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            } else {\n                outScale.copy(scale);\n                outRotation.copy(rotation);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\n\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\n                     splatColorsArray[2], splatColorsArray[3]);\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\n\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n            if (this.compressionLevel >= 1) {\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                center.x = x;\n                center.y = y;\n                center.z = z;\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    fillSplatScaleRotationArray = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const tempPosition = new THREE.Vector3();\n\n        const ensurePositiveW = (quaternion) => {\n            const flip = quaternion.w < 0 ? -1 : 1;\n            quaternion.x *= flip;\n            quaternion.y *= flip;\n            quaternion.z *= flip;\n            quaternion.w *= flip;\n        };\n\n        return function(outScaleArray, outRotationArray, transform, srcFrom, srcTo, destFrom,\n                        desiredOutputCompressionLevel, scaleOverride) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            const outputConversion = (value, srcCompressionLevel) => {\n                if (srcCompressionLevel === undefined) srcCompressionLevel = this.compressionLevel;\n                return convertBetweenCompressionLevels(value, srcCompressionLevel, desiredOutputCompressionLevel);\n            };\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n                const scaleDestBase = (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\n                const rotationDestBase = (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n                const srcScaleX = (scaleOverride && scaleOverride.x !== undefined) ? scaleOverride.x :\n                                   dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\n                const srcScaleY = (scaleOverride && scaleOverride.y !== undefined) ? scaleOverride.y :\n                                   dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\n                const srcScaleZ = (scaleOverride && scaleOverride.z !== undefined) ? scaleOverride.z :\n                                   dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\n\n                const srcRotationW = dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel);\n                const srcRotationX = dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel);\n                const srcRotationY = dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel);\n                const srcRotationZ = dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel);\n\n                scale.set(toUncompressedFloat(srcScaleX, this.compressionLevel),\n                          toUncompressedFloat(srcScaleY, this.compressionLevel),\n                          toUncompressedFloat(srcScaleZ, this.compressionLevel));\n\n                rotation.set(toUncompressedFloat(srcRotationX, this.compressionLevel),\n                             toUncompressedFloat(srcRotationY, this.compressionLevel),\n                             toUncompressedFloat(srcRotationZ, this.compressionLevel),\n                             toUncompressedFloat(srcRotationW, this.compressionLevel)).normalize();\n\n                if (transform) {\n                    tempPosition.set(0, 0, 0);\n                    scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n                    rotationMatrix.makeRotationFromQuaternion(rotation);\n                    tempMatrix.identity().premultiply(scaleMatrix).premultiply(rotationMatrix);\n                    tempMatrix.premultiply(transform);\n                    tempMatrix.decompose(tempPosition, rotation, scale);\n                    rotation.normalize();\n                }\n\n                ensurePositiveW(rotation);\n\n                if (outScaleArray) {\n                    outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\n                    outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\n                    outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\n                }\n\n                if (outRotationArray) {\n                    outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\n                    outRotationArray[rotationDestBase + 1] = outputConversion(rotation.y, 0);\n                    outRotationArray[rotationDestBase + 2] = outputConversion(rotation.z, 0);\n                    outRotationArray[rotationDestBase + 3] = outputConversion(rotation.w, 0);\n                }\n            }\n        };\n    }();\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel >= 1) {\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\n\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\n\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\n\n            let alpha = dataView[3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = dataView[0];\n            outColorArray[colorDestBase + 1] = dataView[1];\n            outColorArray[colorDestBase + 2] = dataView[2];\n            outColorArray[colorDestBase + 3] = alpha;\n        }\n    }\n\n    fillSphericalHarmonicsArray = function() {\n\n        const sphericalHarmonicVectors = [];\n        for (let i = 0; i < 15; i++) {\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\n        }\n\n        const tempMatrix3 = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        const tempTranslation = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n\n        const sh11 = [];\n        const sh12 = [];\n        const sh13 = [];\n\n        const sh21 = [];\n        const sh22 = [];\n        const sh23 = [];\n        const sh24 = [];\n        const sh25 = [];\n\n        const shIn1 = [];\n        const shIn2 = [];\n        const shIn3 = [];\n        const shIn4 = [];\n        const shIn5 = [];\n\n        const shOut1 = [];\n        const shOut2 = [];\n        const shOut3 = [];\n        const shOut4 = [];\n        const shOut5 = [];\n\n        const noop = (v) => v;\n\n        const set3 = (array, val1, val2, val3) => {\n            array[0] = val1;\n            array[1] = val2;\n            array[2] = val3;\n        };\n\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\n        };\n\n        const copy3 = (srcArray, destArray) => {\n            destArray[0] = srcArray[0];\n            destArray[1] = srcArray[1];\n            destArray[2] = srcArray[2];\n        };\n\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n            destArray[destBase] = conversionFunc(srcArray[0]);\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\n        };\n\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel, range8BitMin, range8BitMax) => {\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true, range8BitMin, range8BitMax);\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true, range8BitMin, range8BitMax);\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true, range8BitMin, range8BitMax);\n            return dest;\n        };\n\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n            const splatCount = this.splatCount;\n\n            srcFrom = srcFrom || 0;\n            srcTo = srcTo || splatCount - 1;\n            if (destFrom === undefined) destFrom = srcFrom;\n\n            if (transform && outSphericalHarmonicsDegree >= 1) {\n                tempMatrix4.copy(transform);\n                tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\n                tempRotation.normalize();\n                tempMatrix4.makeRotationFromQuaternion(tempRotation);\n                tempMatrix3.setFromMatrix4(tempMatrix4);\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\n            }\n\n            const localFromHalfFloatToUint8 = (v) => {\n                return fromHalfFloatToUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\n            };\n\n            const localToUint8 = (v) => {\n                return toUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\n            };\n\n            for (let i = srcFrom; i <= srcTo; i++) {\n\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\n                const section = this.sections[sectionIndex];\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\n\n                const localSplatIndex = i - section.splatCountOffset;\n\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\n\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\n\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\n                let outputConversionFunc = noop;\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\n                    if (compressionLevelForOutputConversion === 1) {\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localFromHalfFloatToUint8;\n                    } else if (compressionLevelForOutputConversion === 0) {\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localToUint8;\n                    }\n                }\n\n                const minShCoeff = this.minSphericalHarmonicsCoeff;\n                const maxShCoeff = this.maxSphericalHarmonicsCoeff;\n\n                if (outSphericalHarmonicsDegree >= 1) {\n\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n                    if (transform) {\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\n                    } else {\n                        copy3(shIn1, shOut1);\n                        copy3(shIn2, shOut2);\n                        copy3(shIn3, shOut3);\n                    }\n\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\n\n                    if (outSphericalHarmonicsDegree >= 2) {\n\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n                        if (transform) {\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel, minShCoeff, maxShCoeff);\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel, minShCoeff, maxShCoeff);\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\n                        } else {\n                            copy3(shIn1, shOut1);\n                            copy3(shIn2, shOut2);\n                            copy3(shIn3, shOut3);\n                            copy3(shIn4, shOut4);\n                            copy3(shIn5, shOut5);\n                        }\n\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\n                    }\n                }\n            }\n        };\n\n    }();\n\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    };\n\n    static addInto3 = (val1, val2, val3, destArray) => {\n        destArray[0] = destArray[0] + val1;\n        destArray[1] = destArray[1] + val2;\n        destArray[2] = destArray[2] + val3;\n    };\n\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n        outArray[0] = outArray[1] = outArray[2] = 0;\n        const t0 = transformRow[0];\n        const t1 = transformRow[1];\n        const t2 = transformRow[2];\n        const t3 = transformRow[3];\n        const t4 = transformRow[4];\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n    };\n\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n    };\n\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\n\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n    };\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        const minSphericalHarmonicsCoeff = headerArrayFloat32[9] || -DefaultSphericalHarmonics8BitCompressionHalfRange;\n        const maxSphericalHarmonicsCoeff = headerArrayFloat32[10] || DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter,\n            minSphericalHarmonicsCoeff,\n            maxSphericalHarmonicsCoeff\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n        headerArrayFloat32[9] = header.minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\n        headerArrayFloat32[10] = header.maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\n\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                bytesPerSplat: bytesPerSplat,\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n        this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\n        this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\n                                                sphericalHarmonicsComponentsPerSplat;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\n        return {\n            bytesPerCenter,\n            bytesPerScale,\n            bytesPerRotation,\n            bytesPerColor,\n            sphericalHarmonicsComponentsPerSplat,\n            sphericalHarmonicsBytesPerSplat,\n            bytesPerSplat\n        };\n    }\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static writeSplatDataToSectionBuffer = function() {\n\n        const tempCenterBuffer = new ArrayBuffer(12);\n        const tempScaleBuffer = new ArrayBuffer(12);\n        const tempRotationBuffer = new ArrayBuffer(16);\n        const tempColorBuffer = new ArrayBuffer(4);\n        const tempSHBuffer = new ArrayBuffer(256);\n        const tempRot = new THREE.Quaternion();\n        const tempScale = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n\n        const {\n            X: OFFSET_X, Y: OFFSET_Y, Z: OFFSET_Z,\n            SCALE0: OFFSET_SCALE0, SCALE1: OFFSET_SCALE1, SCALE2: OFFSET_SCALE2,\n            ROTATION0: OFFSET_ROT0, ROTATION1: OFFSET_ROT1, ROTATION2: OFFSET_ROT2, ROTATION3: OFFSET_ROT3,\n            FDC0: OFFSET_FDC0, FDC1: OFFSET_FDC1, FDC2: OFFSET_FDC2, OPACITY: OFFSET_OPACITY,\n            FRC0: OFFSET_FRC0, FRC9: OFFSET_FRC9,\n        } = UncompressedSplatArray.OFFSET;\n\n        const compressPositionOffset = (v, compressionScaleFactor, compressionScaleRange) => {\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n            v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\n            return clamp(v, 0, doubleCompressionScaleRange);\n        };\n\n        return function(targetSplat, sectionBuffer, bufferOffset, compressionLevel, sphericalHarmonicsDegree,\n                        bucketCenter, compressionScaleFactor, compressionScaleRange,\n                        minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\n                        maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange) {\n\n            const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n            const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n            const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n            const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n            const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n\n            const centerBase = bufferOffset;\n            const scaleBase = centerBase + bytesPerCenter;\n            const rotationBase = scaleBase + bytesPerScale;\n            const colorBase = rotationBase + bytesPerRotation;\n            const sphericalHarmonicsBase = colorBase + bytesPerColor;\n\n            if (targetSplat[OFFSET_ROT0] !== undefined) {\n                tempRot.set(targetSplat[OFFSET_ROT0], targetSplat[OFFSET_ROT1], targetSplat[OFFSET_ROT2], targetSplat[OFFSET_ROT3]);\n                tempRot.normalize();\n            } else {\n                tempRot.set(1.0, 0.0, 0.0, 0.0);\n            }\n\n            if (targetSplat[OFFSET_SCALE0] !== undefined) {\n                tempScale.set(targetSplat[OFFSET_SCALE0] || 0,\n                              targetSplat[OFFSET_SCALE1] || 0,\n                              targetSplat[OFFSET_SCALE2] || 0);\n            } else {\n                tempScale.set(0, 0, 0);\n            }\n\n            if (compressionLevel === 0) {\n                const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n\n                rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\n                scale.set([tempScale.x, tempScale.y, tempScale.z]);\n                center.set([targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]]);\n\n                if (sphericalHarmonicsDegree > 0) {\n                    const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\n                    if (sphericalHarmonicsDegree >= 1) {\n                            for (let s = 0; s < 9; s++) shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\n                            if (sphericalHarmonicsDegree >= 2) {\n                                for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\n                            }\n                    }\n                }\n            } else {\n                const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\n                const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\n                const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\n\n                rot.set([toHalfFloat(tempRot.x), toHalfFloat(tempRot.y), toHalfFloat(tempRot.z), toHalfFloat(tempRot.w)]);\n                scale.set([toHalfFloat(tempScale.x), toHalfFloat(tempScale.y), toHalfFloat(tempScale.z)]);\n\n                bucketCenterDelta.set(targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]).sub(bucketCenter);\n                bucketCenterDelta.x = compressPositionOffset(bucketCenterDelta.x, compressionScaleFactor, compressionScaleRange);\n                bucketCenterDelta.y = compressPositionOffset(bucketCenterDelta.y, compressionScaleFactor, compressionScaleRange);\n                bucketCenterDelta.z = compressPositionOffset(bucketCenterDelta.z, compressionScaleFactor, compressionScaleRange);\n                center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n\n                if (sphericalHarmonicsDegree > 0) {\n                    const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n                    const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n                    const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\n                    if (sphericalHarmonicsDegree >= 1) {\n                        for (let s = 0; s < 9; s++) {\n                            const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\n                            shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) :\n                                       toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\n                        }\n                        const degree1ByteCount = 9 * bytesPerSHComponent;\n                        copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\n                        if (sphericalHarmonicsDegree >= 2) {\n                            for (let s = 0; s < 15; s++) {\n                                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\n                                shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) :\n                                               toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\n                            }\n                            copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\n                                               sphericalHarmonicsBase + degree1ByteCount, 15 * bytesPerSHComponent);\n                        }\n                    }\n                }\n\n                copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n                copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n                copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n            }\n\n            const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n            rgba.set([targetSplat[OFFSET_FDC0] || 0, targetSplat[OFFSET_FDC1] || 0, targetSplat[OFFSET_FDC2] || 0]);\n            rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\n\n            copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n        };\n\n    }();\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        let shDegree = 0;\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\n        }\n\n        let minSphericalHarmonicsCoeff;\n        let maxSphericalHarmonicsCoeff;\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            for (let i = 0; i < splatArray.splats.length; i++) {\n                const splat = splatArray.splats[i];\n                for (let sc = UncompressedSplatArray.OFFSET.FRC0; sc < UncompressedSplatArray.OFFSET.FRC23 && sc < splat.length; sc++) {\n                    if (!minSphericalHarmonicsCoeff || splat[sc] < minSphericalHarmonicsCoeff) {\n                        minSphericalHarmonicsCoeff = splat[sc];\n                    }\n                    if (!maxSphericalHarmonicsCoeff || splat[sc] > maxSphericalHarmonicsCoeff) {\n                        maxSphericalHarmonicsCoeff = splat[sc];\n                    }\n                }\n            }\n        }\n\n        minSphericalHarmonicsCoeff = minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\n        maxSphericalHarmonicsCoeff = maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n        const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, shDegree);\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n            const validSplats = new UncompressedSplatArray(shDegree);\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                if ((targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >= minimumAlpha) {\n                    validSplats.addSplat(targetSplat);\n                }\n            }\n\n            const sectionOptions = options[sa] || {};\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const compressionScaleFactor = compressionScaleRange / (sectionBlockSize * 0.5);\n            const bucketCenter = new THREE.Vector3();\n\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n                    const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    SplatBuffer.writeSplatDataToSectionBuffer(targetSplat, sectionBuffer, bufferOffset, compressionLevel, shDegree,\n                                                              bucketCenter, compressionScaleFactor, compressionScaleRange,\n                                                              minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel >= 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\n                sphericalHarmonicsDegree: shDegree\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter,\n            minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\n            maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class PlayCanvasCompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n      'sphericalHarmonicsDegree': 0\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, plyBuffer,\n                                                                  header.headerSizeBytes, null, null, propertyFilter);\n    PlayCanvasCompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\n      const outBase = i * outBytesPerSplat + outOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(tempSplat, outBuffer, outBase, 0, 0);\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                              vertexDataBuffer, veretxReadOffset, splatArray, propertyFilter = null) {\n\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      const tempSplat = UncompressedSplatArray.createSplat();\n      PlayCanvasCompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                                    scale, scaleExtremes, rotation, color, tempSplat);\n      splatArray.addSplat(tempSplat);\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      PlayCanvasCompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n","export const PlyFormat = {\n    'INRIAV1': 0,\n    'INRIAV2': 1,\n    'PlayCanvasCompressed': 2\n};\n","import { PlyFormat } from './PlyFormat.js';\n\nconst [\n        FieldSizeIdDouble, FieldSizeIdInt, FieldSizeIdUInt, FieldSizeIdFloat, FieldSizeIdShort, FieldSizeIdUShort, FieldSizeIdUChar\n      ] = [0, 1, 2, 3, 4, 5, 6];\n\nconst FieldSizeStringMap = {\n    'double': FieldSizeIdDouble,\n    'int': FieldSizeIdInt,\n    'uint': FieldSizeIdUInt,\n    'float': FieldSizeIdFloat,\n    'short': FieldSizeIdShort,\n    'ushort': FieldSizeIdUShort,\n    'uchar': FieldSizeIdUChar,\n};\n\nconst FieldSize = {\n    [FieldSizeIdDouble]: 8,\n    [FieldSizeIdInt]: 4,\n    [FieldSizeIdUInt]: 4,\n    [FieldSizeIdFloat]: 4,\n    [FieldSizeIdShort]: 2,\n    [FieldSizeIdUShort]: 2,\n    [FieldSizeIdUChar]: 1,\n};\n\nexport class PlyParserUtils {\n\n    static HeaderEndToken = 'end_header';\n\n    constructor() {\n    }\n\n    decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\n\n        const extractedLines = [];\n\n        let processingSection = false;\n        let headerEndLine = -1;\n        let vertexCount = 0;\n        let endOfHeader = false;\n        let sectionName = null;\n\n        const fieldIds = [];\n        const fieldTypes = [];\n        const allFieldNames = [];\n        const usedFieldNames = [];\n        const fieldTypesByName = {};\n\n        for (let i = headerStartLine; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element')) {\n                if (processingSection) {\n                    headerEndLine--;\n                    break;\n                } else {\n                    processingSection = true;\n                    headerStartLine = i;\n                    headerEndLine = i;\n                    const lineComponents = line.split(' ');\n                    let validComponents = 0;\n                    for (let lineComponent of lineComponents) {\n                        const trimmedComponent = lineComponent.trim();\n                        if (trimmedComponent.length > 0) {\n                            validComponents++;\n                            if (validComponents === 2) {\n                                sectionName = trimmedComponent;\n                            } else if (validComponents === 3) {\n                                vertexCount = parseInt(trimmedComponent);\n                            }\n                        }\n                    }\n                }\n            } else if (line.startsWith('property')) {\n                const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (fieldMatch) {\n                    const fieldTypeStr = fieldMatch[2];\n                    const fieldName = fieldMatch[3];\n                    allFieldNames.push(fieldName);\n                    const fieldId = fieldNameIdMap[fieldName];\n                    fieldTypesByName[fieldName] = fieldTypeStr;\n                    const fieldType = FieldSizeStringMap[fieldTypeStr];\n                    if (fieldId !== undefined) {\n                        usedFieldNames.push(fieldName);\n                        fieldIds.push(fieldId);\n                        fieldTypes[fieldId] = fieldType;\n                    }\n                }\n            }\n            if (line === PlyParserUtils.HeaderEndToken) {\n                endOfHeader = true;\n                break;\n            }\n            if (processingSection) {\n                extractedLines.push(line);\n                headerEndLine++;\n            }\n        }\n\n        const fieldOffsets = [];\n        let bytesPerVertex = 0;\n        for (let fieldName of allFieldNames) {\n            const fieldType = fieldTypesByName[fieldName];\n            if (fieldTypesByName.hasOwnProperty(fieldName)) {\n                const fieldId = fieldNameIdMap[fieldName];\n                if (fieldId !== undefined) {\n                    fieldOffsets[fieldId] = bytesPerVertex;\n                }\n            }\n            bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\n        }\n\n        const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(allFieldNames, fieldNameIdMap);\n\n        return {\n            'headerLines': extractedLines,\n            'headerStartLine': headerStartLine,\n            'headerEndLine': headerEndLine,\n            'fieldTypes': fieldTypes,\n            'fieldIds': fieldIds,\n            'fieldOffsets': fieldOffsets,\n            'bytesPerVertex': bytesPerVertex,\n            'vertexCount': vertexCount,\n            'dataSizeBytes': bytesPerVertex * vertexCount,\n            'endOfHeader': endOfHeader,\n            'sectionName': sectionName,\n            'sphericalHarmonicsDegree': sphericalHarmonics.degree,\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonics.coefficientsPerChannel,\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonics.degree1Fields,\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonics.degree2Fields\n        };\n\n    }\n\n    decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\n        let sphericalHarmonicsFieldCount = 0;\n        let coefficientsPerChannel = 0;\n        for (let fieldName of fieldNames) {\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n        }\n        coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n        let degree = 0;\n        if (coefficientsPerChannel >= 3) degree = 1;\n        if (coefficientsPerChannel >= 8) degree = 2;\n\n        let degree1Fields = [];\n        let degree2Fields = [];\n\n        for (let rgb = 0; rgb < 3; rgb++) {\n            if (degree >= 1) {\n                for (let i = 0; i < 3; i++) {\n                    degree1Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)]);\n                }\n            }\n            if (degree >= 2) {\n                for (let i = 0; i < 5; i++) {\n                    degree2Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)]);\n                }\n            }\n        }\n\n        return {\n            'degree': degree,\n            'coefficientsPerChannel': coefficientsPerChannel,\n            'degree1Fields': degree1Fields,\n            'degree2Fields': degree2Fields\n        };\n    }\n\n    static getHeaderSectionNames(headerLines) {\n        const sectionNames = [];\n        for (let headerLine of headerLines) {\n            if (headerLine.startsWith('element')) {\n                const lineComponents = headerLine.split(' ');\n                let validComponents = 0;\n                for (let lineComponent of lineComponents) {\n                    const trimmedComponent = lineComponent.trim();\n                    if (trimmedComponent.length > 0) {\n                        validComponents++;\n                        if (validComponents === 2) {\n                            sectionNames.push(trimmedComponent);\n                        }\n                    }\n                }\n            }\n        }\n        return sectionNames;\n    }\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static extractHeaderFromBufferToText(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return headerText;\n    }\n\n    readHeaderFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return headerText;\n    }\n\n    static convertHeaderTextToLines(headerText) {\n        const headerLines = headerText.split('\\n');\n        const prunedLines = [];\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line === PlyParserUtils.HeaderEndToken) {\n                break;\n            }\n        }\n        return prunedLines;\n    }\n\n    static determineHeaderFormatFromHeaderText(headertText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\n        let format = PlyFormat.INRIAV1;\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                format = PlyFormat.PlayCanvasCompressed;\n            } else if (line.startsWith('element codebook_centers')) {\n                format = PlyFormat.INRIAV2;\n            } else if (line === PlyParserUtils.HeaderEndToken) {\n                break;\n            }\n        }\n        return format;\n    }\n\n    static determineHeaderFormatFromPlyBuffer(plyBuffer) {\n        const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\n        return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\n    }\n\n    static readVertex(vertexData, header, row, dataOffset, fieldsToRead, rawVertex, normalize = true) {\n        const offset = row * header.bytesPerVertex + dataOffset;\n        const fieldOffsets = header.fieldOffsets;\n        const fieldTypes = header.fieldTypes;\n        for (let fieldId of fieldsToRead) {\n            const fieldType = fieldTypes[fieldId];\n            if (fieldType === FieldSizeIdFloat) {\n                rawVertex[fieldId] = vertexData.getFloat32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdShort) {\n                rawVertex[fieldId] = vertexData.getInt16(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUShort) {\n                rawVertex[fieldId] = vertexData.getUint16(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdInt) {\n                rawVertex[fieldId] = vertexData.getInt32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUInt) {\n                rawVertex[fieldId] = vertexData.getUint32(offset + fieldOffsets[fieldId], true);\n            } else if (fieldType === FieldSizeIdUChar) {\n                if (normalize) {\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\n                } else {\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]);\n                }\n            }\n        }\n    }\n}\n","import * as THREE from 'three';\nimport { clamp } from '../../Util.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nconst BaseFieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3', 'x', 'y', 'z',\n                              'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue', 'f_rest_0'];\n\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\n\nconst [\n        SCALE_0, SCALE_1, SCALE_2, ROT_0, ROT_1, ROT_2, ROT_3, X, Y, Z, F_DC_0, F_DC_1, F_DC_2, OPACITY, RED, GREEN, BLUE, F_REST_0\n      ] = BaseFieldsToReadIndexes;\n\nexport class INRIAV1PlyParser {\n\n    constructor() {\n        this.plyParserutils = new PlyParserUtils();\n    }\n\n    decodeHeaderLines(headerLines) {\n\n        let shLineCount = 0;\n        headerLines.forEach((line) => {\n            if (line.includes('f_rest_')) shLineCount++;\n        });\n\n        let shFieldsToReadCount = 0;\n        if (shLineCount >= 45) {\n            shFieldsToReadCount = 45;\n        } else if (shLineCount >= 24) {\n            shFieldsToReadCount = 24;\n        } else if (shLineCount >= 9) {\n            shFieldsToReadCount = 9;\n        }\n\n        const shFieldIndexesToMap = Array.from(Array(Math.max(shFieldsToReadCount - 1, 0)));\n        let shRemainingFieldNamesToRead = shFieldIndexesToMap.map((element, index) => `f_rest_${index + 1}`);\n\n        const fieldNamesToRead = [...BaseFieldNamesToRead, ...shRemainingFieldNamesToRead];\n        const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\n\n        const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\n            acc[fieldNamesToRead[element]] = element;\n            return acc;\n        }, {});\n        const header = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, 0);\n        header.splatCount = header.vertexCount;\n        header.bytesPerSplat = header.bytesPerVertex;\n        header.fieldsToReadIndexes = fieldsToReadIndexes;\n        return header;\n    }\n\n    decodeHeaderText(headerText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n        const header = this.decodeHeaderLines(headerLines);\n        header.headerText = headerText;\n        header.headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\n        return header;\n    }\n\n    decodeHeaderFromBuffer(plyBuffer) {\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n        return this.decodeHeaderText(headerText);\n    }\n\n    findSplatData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, splatData, splatDataOffset,\n                                          toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\n            const outBase = i * outBytesPerSplat + toOffset;\n            SplatBuffer.writeSplatDataToSectionBuffer(parsedSplat, toBuffer, outBase, 0, outSphericalHarmonicsDegree);\n        }\n    }\n\n    parseToUncompressedSplatArraySection(header, fromSplat, toSplat, splatData, splatDataOffset,\n                                         splatArray, outSphericalHarmonicsDegree = 0) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\n            splatArray.addSplat(parsedSplat);\n        }\n    }\n\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, outSphericalHarmonicsDegree) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let row = 0; row < splatCount; row++) {\n            const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader,\n                                                                       0, outSphericalHarmonicsDegree);\n            splatArray.addSplat(newSplat);\n        }\n        return splatArray;\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawSplat = [];\n        const tempRotation = new THREE.Quaternion();\n\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n        const OFFSET_FRC = [];\n\n        for (let i = 0; i < 45; i++) {\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n        }\n\n        return function(splatData, row, header, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            INRIAV1PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawSplat[SCALE_0] !== undefined) {\n                newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\n                newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\n                newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\n            } else {\n                newSplat[OFFSET_SCALE0] = 0.01;\n                newSplat[OFFSET_SCALE1] = 0.01;\n                newSplat[OFFSET_SCALE2] = 0.01;\n            }\n\n            if (rawSplat[F_DC_0] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\n                newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\n                newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\n            } else if (rawSplat[RED] !== undefined) {\n                newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\n                newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\n                newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\n            } else {\n                newSplat[OFFSET_FDC0] = 0;\n                newSplat[OFFSET_FDC1] = 0;\n                newSplat[OFFSET_FDC2] = 0;\n            }\n\n            if (rawSplat[OPACITY] !== undefined) {\n                newSplat[OFFSET_OPACITY] = (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\n            }\n\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1) {\n                if (rawSplat[F_REST_0] !== undefined) {\n                    for (let i = 0; i < 9; i++) {\n                        newSplat[OFFSET_FRC[i]] = rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\n                    }\n                    if (outSphericalHarmonicsDegree >= 2) {\n                        for (let i = 0; i < 15; i++) {\n                            newSplat[OFFSET_FRC[9 + i]] = rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\n                        }\n                    }\n                }\n            }\n\n            tempRotation.set(rawSplat[ROT_0], rawSplat[ROT_1], rawSplat[ROT_2], rawSplat[ROT_3]);\n            tempRotation.normalize();\n\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n            newSplat[OFFSET_X] = rawSplat[X];\n            newSplat[OFFSET_Y] = rawSplat[Y];\n            newSplat[OFFSET_Z] = rawSplat[Z];\n\n            return newSplat;\n        };\n\n    }();\n\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, header.fieldsToReadIndexes, rawSplat, true);\n    }\n\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n        const header = this.decodeHeaderFromBuffer(plyBuffer);\n        const splatCount = header.splatCount;\n        const splatData = this.findSplatData(plyBuffer, header);\n        const splatArray = this.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree);\n        return splatArray;\n    }\n}\n","import * as THREE from 'three';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { clamp } from '../../Util.js';\n\nconst CodeBookEntryNamesToRead = [\n    'features_dc', 'features_rest_0', 'features_rest_1', 'features_rest_2', 'features_rest_3', 'features_rest_4', 'features_rest_5',\n    'features_rest_6', 'features_rest_7', 'features_rest_8', 'features_rest_9', 'features_rest_10', 'features_rest_11', 'features_rest_12',\n    'features_rest_13', 'features_rest_14', 'opacity', 'scaling', 'rotation_re', 'rotation_im'\n];\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\n\nconst [\n        CB_FEATURES_DC, CB_FEATURES_REST_0, CB_FEATURES_REST_3, CB_OPACITY, CB_SCALING, CB_ROTATION_RE, CB_ROTATION_IM\n      ] = [0, 1, 4, 16, 17, 18, 19];\n\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7', 'f_rest_8',\n                          'f_rest_9', 'f_rest_10', 'f_rest_11', 'f_rest_12', 'f_rest_13', 'f_rest_14', 'f_rest_15', 'f_rest_16',\n                          'f_rest_17', 'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22', 'f_rest_23', 'f_rest_24',\n                          'f_rest_25', 'f_rest_26', 'f_rest_27', 'f_rest_28', 'f_rest_29', 'f_rest_30', 'f_rest_31', 'f_rest_32',\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37', 'f_rest_38', 'f_rest_39', 'f_rest_40',\n                          'f_rest_41', 'f_rest_42', 'f_rest_43', 'f_rest_44', 'f_rest_45'\n                         ];\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\n\nconst [\n        PLY_SCALE_0, PLY_SCALE_1, PLY_SCALE_2, PLY_ROT_0, PLY_ROT_1, PLY_ROT_2, PLY_ROT_3, PLY_X, PLY_Y, PLY_Z,\n        PLY_F_DC_0, PLY_F_DC_1, PLY_F_DC_2, PLY_OPACITY,\n      ] = FieldsToReadIndexes;\n\nconst PLY_RED = PLY_F_DC_0;\nconst PLY_GREEN = PLY_F_DC_1;\nconst PLY_BLUE = PLY_F_DC_2;\n\nconst fromHalfFloat = (hf) =>{\n    const t = (31744 & hf) >> 10;\n    const a = 1023 & hf;\n    return (hf >> 15 ? -1 : 1)*(t ? t === 31 ? a ? NaN : 1/0 : Math.pow(2, t - 15) *( 1 + a / 1024) : a / 1024*6103515625e-14);\n};\n\nexport class INRIAV2PlyParser {\n\n    constructor() {\n        this.plyParserutils = new PlyParserUtils();\n    }\n\n    decodeSectionHeadersFromHeaderLines(headerLines) {\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\n            acc[FieldNamesToRead[element]] = element;\n            return acc;\n        }, {});\n\n        const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce((acc, element) => {\n            acc[CodeBookEntryNamesToRead[element]] = element;\n            return acc;\n        }, {});\n\n        const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\n        let codeBookSectionIndex;\n        for (let s = 0; s < sectionNames.length; s++) {\n            const sectionName = sectionNames[s];\n            if (sectionName === 'codebook_centers') {\n                codeBookSectionIndex = s;\n            }\n        }\n\n        let currentStartLine = 0;\n        let lastSectionFound = false;\n        const sectionHeaders = [];\n        let sectionIndex = 0;\n        while (!lastSectionFound) {\n            let sectionHeader;\n            if (sectionIndex === codeBookSectionIndex) {\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, codeBookEntriesToReadIdMap, currentStartLine);\n            } else {\n                sectionHeader = this.plyParserutils.decodeSectionHeader(headerLines, fieldNameIdMap, currentStartLine);\n            }\n            lastSectionFound = sectionHeader.endOfHeader;\n            currentStartLine = sectionHeader.headerEndLine + 1;\n            if (!lastSectionFound) {\n                sectionHeader.splatCount = sectionHeader.vertexCount;\n                sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\n            }\n            sectionHeaders.push(sectionHeader);\n            sectionIndex++;\n        }\n        return sectionHeaders;\n    }\n\n    decodeSectionHeadersFromHeaderText(headerText) {\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n        return this.decodeSectionHeadersFromHeaderLines(headerLines);\n    }\n\n    getSplatCountFromSectionHeaders(sectionHeaders) {\n        let splatCount = 0;\n        for (let sectionHeader of sectionHeaders) {\n            if (sectionHeader.sectionName !== 'codebook_centers') {\n                splatCount += sectionHeader.vertexCount;\n            }\n        }\n        return splatCount;\n    }\n\n    decodeHeaderFromHeaderText(headerText) {\n        const headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\n        const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\n        const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\n        return {\n            'headerSizeBytes': headerSizeBytes,\n            'sectionHeaders': sectionHeaders,\n            'splatCount': splatCount\n        };\n    }\n\n    decodeHeaderFromBuffer(plyBuffer) {\n        const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n        return this.decodeHeaderFromHeaderText(headerText);\n    }\n\n    findVertexData(plyBuffer, header, targetSection) {\n        let byteOffset = header.headerSizeBytes;\n        for (let s = 0; s < targetSection && s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            byteOffset += sectionHeader.dataSizeBytes;\n        }\n        return new DataView(plyBuffer, byteOffset, header.sectionHeaders[targetSection].dataSizeBytes);\n    }\n\n    decodeCodeBook(codeBookData, sectionHeader) {\n\n        const rawVertex = [];\n        const codeBook = [];\n        for (let row = 0; row < sectionHeader.vertexCount; row++) {\n            PlyParserUtils.readVertex(codeBookData, sectionHeader, row, 0, CodeBookEntriesToReadIndexes, rawVertex);\n            for (let index of CodeBookEntriesToReadIndexes) {\n                const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\n                let codeBookPage = codeBook[codeBookElementOffset];\n                if (!codeBookPage) {\n                    codeBook[codeBookElementOffset] = codeBookPage = [];\n                }\n                codeBookPage.push(rawVertex[index]);\n            }\n        }\n        for (let page = 0; page < codeBook.length; page++) {\n            const codeBookPage = codeBook[page];\n            const SH_C0 = 0.28209479177387814;\n            for (let i = 0; i < codeBookPage.length; i++) {\n               const baseValue = fromHalfFloat(codeBookPage[i]);\n                if (page === CB_OPACITY) {\n                    codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\n                } else if (page === CB_FEATURES_DC) {\n                    codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\n                } else if (page === CB_SCALING) {\n                    codeBookPage[i] = Math.exp(baseValue);\n                } else {\n                    codeBookPage[i] = baseValue;\n                }\n            }\n        }\n        return codeBook;\n    }\n\n    decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, codeBook, outSphericalHarmonicsDegree) {\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let row = 0; row < splatCount; row++) {\n            const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader, codeBook,\n                                                                       0, outSphericalHarmonicsDegree);\n            splatArray.addSplat(newSplat);\n        }\n        return splatArray;\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawSplat = [];\n        const tempRotation = new THREE.Quaternion();\n\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n        const OFFSET_FRC = [];\n\n        for (let i = 0; i < 45; i++) {\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n        }\n\n        return function(splatData, row, header, codeBook, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n            INRIAV2PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\n            if (rawSplat[PLY_SCALE_0] !== undefined) {\n                newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\n                newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\n                newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\n            } else {\n                newSplat[OFFSET_SCALE0] = 0.01;\n                newSplat[OFFSET_SCALE1] = 0.01;\n                newSplat[OFFSET_SCALE2] = 0.01;\n            }\n\n            if (rawSplat[PLY_F_DC_0] !== undefined) {\n                newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\n                newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\n                newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\n            } else if (rawSplat[PLY_RED] !== undefined) {\n                newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\n                newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\n                newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\n            } else {\n                newSplat[OFFSET_FDC0] = 0;\n                newSplat[OFFSET_FDC1] = 0;\n                newSplat[OFFSET_FDC2] = 0;\n            }\n\n            if (rawSplat[PLY_OPACITY] !== undefined) {\n                newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\n            }\n\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\n\n            if (outSphericalHarmonicsDegree >= 1 && header.sphericalHarmonicsDegree >= 1) {\n                for (let i = 0; i < 9; i++) {\n                    const codeBookPage = codeBook[CB_FEATURES_REST_0 + i % 3];\n                    newSplat[OFFSET_FRC[i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\n                }\n                if (outSphericalHarmonicsDegree >= 2 && header.sphericalHarmonicsDegree >= 2) {\n                    for (let i = 0; i < 15; i++) {\n                        const codeBookPage = codeBook[CB_FEATURES_REST_3 + i % 5];\n                        newSplat[OFFSET_FRC[9 + i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\n                    }\n                }\n            }\n\n            const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\n            const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\n            const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\n            const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\n            tempRotation.set(rot0, rot1, rot2, rot3);\n            tempRotation.normalize();\n\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n            newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\n            newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\n            newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\n\n            return newSplat;\n        };\n\n    }();\n\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, false);\n    }\n\n    parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n        const splatArrays = [];\n        const header = this.decodeHeaderFromBuffer(plyBuffer, outSphericalHarmonicsDegree);\n        let codeBook;\n\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            if (sectionHeader.sectionName === 'codebook_centers') {\n                const codeBookData = this.findVertexData(plyBuffer, header, s);\n                codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\n            }\n        }\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\n            const sectionHeader = header.sectionHeaders[s];\n            if (sectionHeader.sectionName !== 'codebook_centers') {\n                const splatCount = sectionHeader.vertexCount;\n                const vertexData = this.findVertexData(plyBuffer, header, s);\n                const splatArray = this.decodeSectionSplatData(vertexData, splatCount, sectionHeader,\n                                                               codeBook, outSphericalHarmonicsDegree);\n                splatArrays.push(splatArray);\n            }\n        }\n\n        const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n        for (let splatArray of splatArrays) {\n            for (let splat of splatArray.splats) {\n                unified.addSplat(splat);\n            }\n        }\n\n        return unified;\n    }\n}\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { PlyFormat } from './PlyFormat.js';\n\nexport class PlyParser {\n\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\n\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n        } else if (plyFormat === PlyFormat.INRIAV1) {\n            return new INRIAV1PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\n        } else if (plyFormat === PlyFormat.INRIAV2) {\n            return new INRIAV2PlyParser().parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\n        }\n    }\n\n}\n","export class DirectLoadError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","export const InternalLoadType = {\n    DirectToSplatBuffer: 0,\n    DirectToSplatArray: 1,\n    DownloadBeforeProcessing: 2\n};\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplat(splatArray.splats[i]);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n\n        const partitionGenerator = (splatArray) => {\n\n            const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n            const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n            const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const center = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.forEach((splat) => {\n                center.set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z]).sub(sceneCenter);\n                clampPoint(center);\n                splat.centerDist = center.lengthSq();\n            });\n            splatArray.splats.sort((a, b) => {\n                let centerADist = a.centerDist;\n                let centerBDist = b.centerDist;\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport { fetchWithProgress as defaultFetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { PlyFormat } from './PlyFormat.js';\nimport { PlyParser } from './PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n    if (optimizeSplatData) {\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                               sectionSize, sceneCenter,\n                                                                               blockSize, bucketSize);\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n    } else {\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\n    }\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, loadDirectoToSplatBuffer, onProgressiveLoadSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData = true, outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize, fetchWithProgress = defaultFetchWithProgress) {\n\n        let internalLoadType = loadDirectoToSplatBuffer ? InternalLoadType.DirectToSplatBuffer : InternalLoadType.DirectToSplatArray;\n        if (optimizeSplatData) internalLoadType = InternalLoadType.DirectToSplatArray;\n\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let directLoadBufferIn;\n        let directLoadBufferOut;\n        let directLoadSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        const loadPromise = nativePromiseWithExtractedComponents();\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        let standardLoadUncompressedSplatArray;\n\n        const textDecoder = new TextDecoder();\n        const inriaV1PlyParser = new INRIAV1PlyParser();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n\n            if (chunkData) {\n                chunks.push({\n                    'data': chunkData,\n                    'sizeBytes': chunkData.byteLength,\n                    'startBytes': numBytesDownloaded,\n                    'endBytes': numBytesDownloaded + chunkData.byteLength\n                });\n                numBytesDownloaded += chunkData.byteLength;\n            }\n\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n                if (loadComplete) {\n                    loadPromise.resolve(chunks);\n                }\n            } else {\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParserUtils.checkTextForEndHeader(headerText)) {\n                        const plyFormat = PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\n                        if (plyFormat === PlyFormat.INRIAV1) {\n                            header = inriaV1PlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                            compressed = false;\n                        } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n                            header = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                            compressed = true;\n                        } else {\n                            if (loadDirectoToSplatBuffer) {\n                                throw new DirectLoadError('PlyLoader.loadFromURL() -> Selected Ply format cannot be directly loaded.');\n                            } else {\n                                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n                                return;\n                            }\n                        }\n                        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\n\n                        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                        const splatBufferSizeBytes = splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n\n                        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                            directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                            SplatBuffer.writeHeaderToBuffer({\n                                versionMajor: SplatBuffer.CurrentMajorVersion,\n                                versionMinor: SplatBuffer.CurrentMinorVersion,\n                                maxSectionCount: sectionCount,\n                                sectionCount: sectionCount,\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                compressionLevel: 0,\n                                sceneCenter: new THREE.Vector3()\n                            }, directLoadBufferOut);\n                        } else {\n                            standardLoadUncompressedSplatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n                        }\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer,\n                                                                    header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        directLoadBufferIn = storeChunksInBuffer(chunks, directLoadBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > directLoadSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(directLoadBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\n                            const outOffset = splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n                            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                                if (compressed) {\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement,\n                                                                                                        header.vertexElement, 0,\n                                                                                                        addedSplatCount - 1, splatCount,\n                                                                                                        dataToParse, 0,\n                                                                                                        directLoadBufferOut, outOffset);\n                                } else {\n                                    inriaV1PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1, dataToParse,\n                                                                                        0, directLoadBufferOut, outOffset,\n                                                                                        outSphericalHarmonicsDegree);\n                                }\n                            } else {\n                                if (compressed) {\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(header.chunkElement,\n                                                                                                    header.vertexElement, 0,\n                                                                                                    addedSplatCount - 1, splatCount,\n                                                                                                    dataToParse, 0,\n                                                                                                    standardLoadUncompressedSplatArray);\n                                } else {\n                                    inriaV1PlyParser.parseToUncompressedSplatArraySection(header, 0, addedSplatCount - 1, dataToParse,\n                                                                                        0, standardLoadUncompressedSplatArray,\n                                                                                        outSphericalHarmonicsDegree);\n                                }\n                            }\n\n                            splatCount = newSplatCount;\n\n                            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                                if (!directLoadSplatBuffer) {\n                                    SplatBuffer.writeSectionHeaderToBuffer({\n                                        maxSplatCount: maxSplatCount,\n                                        splatCount: splatCount,\n                                        bucketSize: 0,\n                                        bucketCount: 0,\n                                        bucketBlockSize: 0,\n                                        compressionScaleRange: 0,\n                                        storageSizeBytes: 0,\n                                        fullBucketCount: 0,\n                                        partiallyFilledBucketCount: 0,\n                                        sphericalHarmonicsDegree: outSphericalHarmonicsDegree\n                                    }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\n                                    directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\n                                }\n                                directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                                if (onProgressiveLoadSectionProgress) {\n                                    onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\n                                }\n                            }\n\n                            numBytesStreamed += directLoadSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                            loadPromise.resolve(directLoadSplatBuffer);\n                        } else {\n                            loadPromise.resolve(standardLoadUncompressedSplatArray);\n                        }\n                    }\n                }\n            }\n\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n        return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            return loadPromise.promise.then((splatData) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n                    const chunkDatas = chunks.map((chunk) => chunk.data);\n                    return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\n                        return PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                                                          outSphericalHarmonicsDegree, sectionSize, sceneCenter, blockSize, bucketSize);\n                    });\n                } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                    return splatData;\n                } else {\n                    return delayedExecute(() => {\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n                    });\n                }\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData, outSphericalHarmonicsDegree = 0,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\n        })\n        .then((splatArray) => {\n            return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\n                            sectionSize, sceneCenter, blockSize, bucketSize);\n        });\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseToUncompressedSplatArraySection(fromSplat, toSplat, fromBuffer, fromOffset, splatArray) {\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport { fetchWithProgress as defaultFetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatParser } from './SplatParser.js';\n\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n    if (optimizeSplatData) {\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                               sectionSize, sceneCenter,\n                                                                               blockSize, bucketSize);\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n    } else {\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\n    }\n}\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, loadDirectoToSplatBuffer, onProgressiveLoadSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData = true, sectionSize, sceneCenter, blockSize, bucketSize, fetchWithProgress = defaultFetchWithProgress) {\n\n        let internalLoadType = loadDirectoToSplatBuffer ? InternalLoadType.DirectToSplatBuffer : InternalLoadType.DirectToSplatArray;\n        if (optimizeSplatData) internalLoadType = InternalLoadType.DirectToSplatArray;\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n        const sectionCount = 1;\n\n        let directLoadBufferIn;\n        let directLoadBufferOut;\n        let directLoadSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let standardLoadUncompressedSplatArray;\n\n        const loadPromise = nativePromiseWithExtractedComponents();\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n\n            if (chunk) {\n                chunks.push(chunk);\n            }\n\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n                if (loadComplete) {\n                    loadPromise.resolve(chunks);\n                }\n                return;\n            }\n\n            if (!fileSize) {\n                if (loadDirectoToSplatBuffer) {\n                    throw new DirectLoadError('Cannon directly load .splat because no file size info is available.');\n                } else {\n                    internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n                    return;\n                }\n            }\n\n            if (!directLoadBufferIn) {\n                maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                directLoadBufferIn = new ArrayBuffer(fileSize);\n                const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\n                const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n\n                if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                    directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, directLoadBufferOut);\n                } else {\n                    standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\n                }\n            }\n\n            if (chunk) {\n                new Uint8Array(directLoadBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                numBytesLoaded += chunk.byteLength;\n\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                if (bytesLoadedSinceLastSection > directLoadSectionSizeBytes || loadComplete) {\n                    const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : directLoadSectionSizeBytes;\n                    const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                    const newSplatCount = splatCount + addedSplatCount;\n\n                    if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\n                                                                            directLoadBufferOut, splatDataOffsetBytes);\n                    } else {\n                        SplatParser.parseToUncompressedSplatArraySection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\n                                                                            standardLoadUncompressedSplatArray);\n                    }\n\n                    splatCount = newSplatCount;\n\n                    if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                        if (!directLoadSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\n                            directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\n                        }\n                        directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                        if (onProgressiveLoadSectionProgress) {\n                            onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\n                        }\n                    }\n\n                    numBytesStreamed += directLoadSectionSizeBytes;\n                }\n            }\n\n            if (loadComplete) {\n                if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                    loadPromise.resolve(directLoadSplatBuffer);\n                } else {\n                    loadPromise.resolve(standardLoadUncompressedSplatArray);\n                }\n            }\n\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n        return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            return loadPromise.promise.then((splatData) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n                    return new Blob(chunks).arrayBuffer().then((splatData) => {\n                        return SplatLoader.loadFromFileData(splatData, minimumAlpha, compressionLevel, optimizeSplatData,\n                                                            sectionSize, sceneCenter, blockSize, bucketSize);\n                    });\n                } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                    return splatData;\n                } else {\n                    return delayedExecute(() => {\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n                    });\n                }\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\n                            sectionSize, sceneCenter, blockSize, bucketSize);\n        });\n    }\n\n}\n","import { Constants } from '../../Constants.js';\nimport { fetchWithProgress as defaultFetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, externalOnProgress, loadDirectoToSplatBuffer, onSectionBuilt, fetchWithProgress=defaultFetchWithProgress) {\n        let directLoadBuffer;\n        let directLoadSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesProgressivelyLoaded = 0;\n        let totalBytesToDownload = 0;\n\n        let downloadComplete = false;\n        let loadComplete = false;\n        let loadSectionQueued = false;\n\n        let chunks = [];\n\n        const directLoadPromise = nativePromiseWithExtractedComponents();\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections();\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!directLoadBuffer) {\n                        directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (loadSectionQueued) return;\n            loadSectionQueued = true;\n            const checkAndLoadFunc = () => {\n                loadSectionQueued = false;\n                if (sectionHeadersLoaded) {\n\n                    if (loadComplete) return;\n\n                    downloadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                    let bytesLoadedSinceLastSection = numBytesLoaded - numBytesProgressivelyLoaded;\n                    if (bytesLoadedSinceLastSection > Constants.ProgressiveLoadSectionSize || downloadComplete) {\n\n                        numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\n                        loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\n\n                        if (!directLoadSplatBuffer) directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\n\n                        const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                        let sectionBase = 0;\n                        let reachedSections = 0;\n                        let loadedSplatCount = 0;\n                        for (let i = 0; i < header.maxSectionCount; i++) {\n                            const sectionHeader = sectionHeaders[i];\n                            const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                    sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                            const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                            if (numBytesProgressivelyLoaded >= bytesRequiredToReachSectionSplatData) {\n                                reachedSections++;\n                                const bytesPastSSectionSplatDataStart = numBytesProgressivelyLoaded - bytesRequiredToReachSectionSplatData;\n                                const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\n                                const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\n                                const bytesPerSplat = shDesc.BytesPerSplat;\n                                let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                                loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                                loadedSplatCount += loadedSplatsForSection;\n                                directLoadSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                                directLoadSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                            } else {\n                                break;\n                            }\n                            sectionBase += sectionHeader.storageSizeBytes;\n                        }\n\n                        onSectionBuilt(directLoadSplatBuffer, loadComplete);\n\n                        const percentComplete = numBytesProgressivelyLoaded / totalBytesToDownload * 100;\n                        const percentLabel = (percentComplete).toFixed(2) + '%';\n\n                        if (externalOnProgress) externalOnProgress(percentComplete, percentLabel, LoaderStatus.Downloading);\n\n                        if (loadComplete) {\n                            directLoadPromise.resolve(directLoadSplatBuffer);\n                        } else {\n                            checkAndLoadSections();\n                        }\n                    }\n                }\n            };\n            window.setTimeout(checkAndLoadFunc, Constants.ProgressiveLoadSectionDelayDuration);\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (directLoadBuffer) {\n                    new Uint8Array(directLoadBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (loadDirectoToSplatBuffer) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            } else {\n                if (externalOnProgress) externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\n            }\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !loadDirectoToSplatBuffer).then((fullBuffer) => {\n            if (externalOnProgress) externalOnProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = loadDirectoToSplatBuffer ? directLoadPromise.promise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (externalOnProgress) externalOnProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","export const LogLevel = {\n    None: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Debug: 4\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n            this.clearDampedRotation();\n            this.clearDampedPan();\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        this.clearDampedPan = function() {\n            panOffset.set(0, 0, 0);\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n","import * as THREE from 'three';\n\nconst _axis = new THREE.Vector3();\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n","export const SplatRenderMode = {\n    ThreeD: 0,\n    TwoD: 1\n};\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n\n                    const splatGlobalIndex = node.data.indexes[i];\n                    const splatSceneIndex = splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\n                    const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\n                    if (!splatScene.visible) continue;\n\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon ||\n                        splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD && tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        let radius = (tempScale.x + tempScale.y);\n                        let componentCount = 2;\n                        if (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD) {\n                            radius += tempScale.z;\n                            componentCount = 3;\n                        }\n                        radius = radius / componentCount;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\nimport { Constants } from '../Constants.js';\n\nexport class SplatMaterial {\n\n    static buildVertexShaderBase(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0, customVars = '') {\n        let vertexShaderSource = `\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    `;\n\n    if (enableOptionalEffects) {\n        vertexShaderSource += `\n            uniform float sceneOpacity[${Constants.MaxScenes}];\n            uniform int sceneVisibility[${Constants.MaxScenes}];\n        `;\n    }\n\n    if (dynamicMode) {\n        vertexShaderSource += `\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\n        `;\n    }\n\n    vertexShaderSource += `\n        ${customVars}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        void main () {\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `;\n\n        if (enableOptionalEffects) {\n            vertexShaderSource += `\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            `;\n        }\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = modelViewMatrix * transform;\n            `;\n        } else {\n            vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n        }\n\n        vertexShaderSource += `\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        `;\n\n        // Proceed to sampling and rendering 1st degree spherical harmonics\n        if (maxSphericalHarmonicsDegree >= 1) {\n\n            vertexShaderSource += `   \n            if (sphericalHarmonicsDegree >= 1) {\n            `;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                `;\n            } else {\n                vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                `;\n            }\n\n            vertexShaderSource += `\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            `;\n\n            if (maxSphericalHarmonicsDegree >= 2) {\n                vertexShaderSource += `\n                    vec3 sh4;\n                    vec3 sh5;\n                    vec3 sh6;\n                    vec3 sh7;\n                    vec3 sh8;\n                `;\n            }\n\n            // Determining how to sample spherical harmonics textures to get the coefficients for calculations for a given degree\n            // depends on how many total degrees (maxSphericalHarmonicsDegree) are present in the textures. This is because that\n            // number affects how they are packed in the textures, and therefore the offset & stride required to access them.\n\n            // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n            if (maxSphericalHarmonicsDegree === 1) {\n                vertexShaderSource += `\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                `;\n            // Sample spherical harmonics textures with 2 degrees worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n            } else if (maxSphericalHarmonicsDegree === 2) {\n                vertexShaderSource += `\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                `;\n            }\n\n            // Perform 1st degree spherical harmonics calculations\n            vertexShaderSource += `\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            `;\n\n            // Proceed to sampling and rendering 2nd degree spherical harmonics\n            if (maxSphericalHarmonicsDegree >= 2) {\n\n                vertexShaderSource += `\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n                `;\n\n                // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\n                // and store in sh4, sh5, sh6, sh7, and sh8\n                if (maxSphericalHarmonicsDegree === 2) {\n                    vertexShaderSource += `\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n                    `;\n                }\n\n                // Perform 2nd degree spherical harmonics calculations\n                vertexShaderSource += `\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n            }\n\n            `;\n        }\n\n        return vertexShaderSource;\n    }\n\n    static getVertexShaderFadeIn() {\n        return `\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        `;\n    }\n\n    static getUniforms(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0,\n                       splatScale = 1.0, pointCloudModeEnabled = false) {\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureR': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureG': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonicsTextureB': {\n                'type': 't',\n                'value': null\n            },\n            'sphericalHarmonics8BitCompressionRangeMin': {\n                'type': 'f',\n                'value': []\n            },\n            'sphericalHarmonics8BitCompressionRangeMax': {\n                'type': 'f',\n                'value': []\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonicsDegree': {\n                'type': 'i',\n                'value': maxSphericalHarmonicsDegree\n            },\n            'sphericalHarmonicsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sphericalHarmonics8BitMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'sphericalHarmonicsMultiTextureMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            },\n            'sceneIndexesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sceneIndexesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'sceneCount': {\n                'type': 'i',\n                'value': 1\n            }\n        };\n        for (let i = 0; i < Constants.MaxScenes; i++) {\n            uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(-Constants.SphericalHarmonics8BitCompressionRange / 2.0);\n            uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(Constants.SphericalHarmonics8BitCompressionRange / 2.0);\n        }\n\n        if (enableOptionalEffects) {\n            const sceneOpacity = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                sceneOpacity.push(1.0);\n            }\n            uniforms['sceneOpacity'] ={\n                'type': 'f',\n                'value': sceneOpacity\n            };\n\n            const sceneVisibility = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                sceneVisibility.push(1);\n            }\n            uniforms['sceneVisibility'] ={\n                'type': 'i',\n                'value': sceneVisibility\n            };\n        }\n\n        if (dynamicMode) {\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n        }\n\n        return uniforms;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial3D {\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n     *                                        such as opacity adjustment. Default is false for performance reasons.\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static build(dynamicMode = false, enableOptionalEffects = false, antialiased = false,\n                 maxScreenSpaceSplatSize = 2048, splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        const customVertexVars = `\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        `;\n\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\n        vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize);\n        const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\n\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\n\n        uniforms['covariancesTextureSize'] = {\n            'type': 'v2',\n            'value': new THREE.Vector2(1024, 1024)\n        };\n        uniforms['covariancesTexture'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['covariancesTextureHalfFloat'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['covariancesAreHalfFloat'] = {\n            'type': 'i',\n            'value': 0\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize) {\n        let vertexShaderSource = `\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            `;\n\n        if (antialiased) {\n            vertexShaderSource += `\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `;\n        } else {\n            vertexShaderSource += `\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n            `;\n        }\n\n        vertexShaderSource += `\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n            `;\n\n        if (enableOptionalEffects) {\n            vertexShaderSource += `\n                vColor.a *= splatOpacityFromScene;\n            `;\n        }\n\n        vertexShaderSource += `\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        `;\n\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n        vertexShaderSource += `}`;\n\n        return vertexShaderSource;\n    }\n\n    static buildFragmentShader() {\n        let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        `;\n\n        fragmentShaderSource += `\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        `;\n\n        return fragmentShaderSource;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial2D {\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n     *                                        such as opacity adjustment. Default is false for performance reasons.\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n     * @return {THREE.ShaderMaterial}\n     */\n    static build(dynamicMode = false, enableOptionalEffects = false, splatScale = 1.0,\n                 pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\n\n        const customVertexVars = `\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        `;\n\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\n        vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\n        const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\n\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\n\n        uniforms['scaleRotationsTexture'] = {\n            'type': 't',\n            'value': null\n        };\n        uniforms['scaleRotationsTextureSize'] = {\n            'type': 'v2',\n            'value': new THREE.Vector2(1024, 1024)\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildVertexShaderProjection() {\n\n        // Original CUDA code for calculating splat-to-screen transformation, for reference\n        /*\n            glm::mat3 R = quat_to_rotmat(rot);\n            glm::mat3 S = scale_to_mat(scale, mod);\n            glm::mat3 L = R * S;\n\n            // center of Gaussians in the camera coordinate\n            glm::mat3x4 splat2world = glm::mat3x4(\n                glm::vec4(L[0], 0.0),\n                glm::vec4(L[1], 0.0),\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\n            );\n\n            glm::mat4 world2ndc = glm::mat4(\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\n            );\n\n            glm::mat3x4 ndc2pix = glm::mat3x4(\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\n            );\n\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\n        */\n\n        // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\n        // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\n        let vertexShaderSource = `\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        `;\n\n        // Original CUDA code for projection to 2D, for reference\n        /*\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\n\n            // Compute AABB\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\n            float distance = sumf3(T3 * T3 * temp_point);\n            float3 f = (1 / distance) * temp_point;\n            if (distance == 0.0) return false;\n\n            point_image = {\n                sumf3(f * T0 * T3),\n                sumf3(f * T1 * T3)\n            };\n\n            float2 temp = {\n                sumf3(f * T0 * T0),\n                sumf3(f * T1 * T1)\n            };\n            float2 half_extend = point_image * point_image - temp;\n            extent = sqrtf2(maxf2(1e-4, half_extend));\n            return true;\n        */\n\n        // Computing the bounding box of the 2D Gaussian and its center\n        // The center of the bounding box is used to create a low pass filter.\n        // This code is based off the reference implementation and creates an AABB aligned\n        // with the screen for the quad to be rendered.\n        const referenceQuadGeneration = `\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        `;\n\n        const useRefImplementation = false;\n        if (useRefImplementation) {\n            vertexShaderSource += referenceQuadGeneration;\n        } else {\n            // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\n            // This is a different approach than the reference implementation, similar to how the rendering of\n            // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\n            // (smaller than a pixel), then revert to the reference implementation.\n            vertexShaderSource += `\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${referenceQuadGeneration}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `;\n        }\n\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n        vertexShaderSource += `}`;\n\n        return vertexShaderSource;\n    }\n\n    static buildFragmentShader() {\n\n        // Original CUDA code for splat intersection, for reference\n        /*\n            const float2 xy = collected_xy[j];\n            const float3 Tu = collected_Tu[j];\n            const float3 Tv = collected_Tv[j];\n            const float3 Tw = collected_Tw[j];\n            float3 k = pix.x * Tw - Tu;\n            float3 l = pix.y * Tw - Tv;\n            float3 p = cross(k, l);\n            if (p.z == 0.0) continue;\n            float2 s = {p.x / p.z, p.y / p.z};\n            float rho3d = (s.x * s.x + s.y * s.y);\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\n\n            // compute intersection and depth\n            float rho = min(rho3d, rho2d);\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\n            if (depth < near_n) continue;\n            float4 nor_o = collected_normal_opacity[j];\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n            float opa = nor_o.w;\n\n            float power = -0.5f * rho;\n            if (power > 0.0f)\n                continue;\n\n            // Eq. (2) from 3D Gaussian splatting paper.\n            // Obtain alpha by multiplying with Gaussian opacity\n            // and its exponential falloff from mean.\n            // Avoid numerical instabilities (see paper appendix).\n            float alpha = min(0.99f, opa * exp(power));\n            if (alpha < 1.0f / 255.0f)\n                continue;\n            float test_T = T * (1 - alpha);\n            if (test_T < 0.0001f)\n            {\n                done = true;\n                continue;\n            }\n\n            float w = alpha * T;\n        */\n        let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        `;\n\n        return fragmentShaderSource;\n    }\n}\n","import * as THREE from 'three';\n\nexport class SplatGeometry {\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static build(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene extends THREE.Object3D {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1, opacity = 1.0, visible = true) {\n        super();\n        this.splatBuffer = splatBuffer;\n        this.position.copy(position);\n        this.quaternion.copy(quaternion);\n        this.scale.copy(scale);\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.opacity = opacity;\n        this.visible = visible;\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform(dynamicMode) {\n        if (dynamicMode) {\n            if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\n            this.transform.copy(this.matrixWorld);\n        } else {\n            if (this.matrixAutoUpdate) this.updateMatrix();\n            this.transform.copy(this.matrix);\n        }\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","import * as THREE from 'three';\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\nimport { SplatGeometry } from './SplatGeometry.js';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from '../splattree/SplatTree.js';\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\nimport { Constants } from '../Constants.js';\nimport { SceneRevealMode } from '../SceneRevealMode.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\nimport { LogLevel } from '../LogLevel.js';\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\nconst MAX_TEXTURE_TEXELS = 16777216;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(splatRenderMode = SplatRenderMode.ThreeD, dynamicMode = false, enableOptionalEffects = false,\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true,\n                integerBasedDistancesComputation = false, antialiased = false, maxScreenSpaceSplatSize = 1024, logLevel = LogLevel.None,\n                sphericalHarmonicsDegree = 0, sceneFadeInRateMultiplier = 1.0) {\n        super(dummyGeometry, dummyMaterial);\n\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n\n        // Determine how the splats are rendered\n        this.splatRenderMode = splatRenderMode;\n\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n        // that are enabled by the 'dynamicScene' parameter.\n        this.enableOptionalEffects = enableOptionalEffects;\n\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n\n        // The verbosity of console logging\n        this.logLevel = logLevel;\n\n        // Degree 0 means no spherical harmonics\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n        this.minSphericalHarmonicsDegree = 0;\n\n        this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\n\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n\n        // Cache textures and the intermediate data used to populate them\n        this.splatDataTextures = {};\n\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'sceneIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'sceneIndexesLoc': -1,\n            'transformsLocs': []\n        };\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(parentObject, splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            const scene = SplatMesh.createScene(splatBuffer, position, rotation, scale,\n                                                options.splatAlphaRemovalThreshold || 1, options.opacity, options.visible);\n            parentObject.add(scene);\n            scenes[i] = scene;\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity = 1.0, visible = true) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity, visible);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                        avgSplatCount = avgSplatCount / nodeCount;\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\n                    }\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction, preserveVisibleRegion = true) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let minSphericalHarmonicsDegree = 3;\n        for (let splatBuffer of splatBuffers) {\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n            }\n        }\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            if (!preserveVisibleRegion) {\n                this.maxSplatDistanceFromSceneCenter = 0;\n                this.visibleRegionBufferRadius = 0;\n                this.visibleRegionRadius = 0;\n                this.visibleRegionFadeStartRadius = 0;\n                this.firstRenderTime = -1;\n            }\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatGeometry.build(maxSplatCount);\n            if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n                this.material = SplatMaterial3D.build(this.dynamicMode, this.enableOptionalEffects, this.antialiased,\n                                                      this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled,\n                                                      this.minSphericalHarmonicsDegree);\n            } else {\n                this.material = SplatMaterial2D.build(this.dynamicMode, this.enableOptionalEffects,\n                                                      this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\n            }\n\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        const splatBufferSplatCount = this.getSplatCount(true);\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n        this.lastBuildSplatCount = splatBufferSplatCount;\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n                this.onSplatTreeReadyCallback = null;\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return dataUpdateResults;\n    }\n\n    freeIntermediateSplatData() {\n\n        const deleteTextureData = (texture) => {\n            delete texture.source.data;\n            delete texture.image;\n            texture.onUpdate = null;\n        };\n\n        delete this.splatDataTextures.baseData.covariances;\n        delete this.splatDataTextures.baseData.centers;\n        delete this.splatDataTextures.baseData.colors;\n        delete this.splatDataTextures.baseData.sphericalHarmonics;\n\n        delete this.splatDataTextures.centerColors.data;\n        delete this.splatDataTextures.covariances.data;\n        if (this.splatDataTextures.sphericalHarmonics) {\n            delete this.splatDataTextures.sphericalHarmonics.data;\n        }\n        if (this.splatDataTextures.sceneIndexes) {\n            delete this.splatDataTextures.sceneIndexes.data;\n        }\n\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\n        this.splatDataTextures.centerColors.texture.onUpdate = () => {\n            deleteTextureData(this.splatDataTextures.centerColors.texture);\n        };\n\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\n        this.splatDataTextures.covariances.texture.onUpdate = () => {\n            deleteTextureData(this.splatDataTextures.covariances.texture);\n        };\n\n        if (this.splatDataTextures.sphericalHarmonics) {\n            if (this.splatDataTextures.sphericalHarmonics.texture) {\n                this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\n                this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\n                    deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\n                };\n            } else {\n                this.splatDataTextures.sphericalHarmonics.textures.forEach((texture) => {\n                    texture.needsUpdate = true;\n                    texture.onUpdate = () => {\n                        deleteTextureData(texture);\n                    };\n                });\n            }\n        }\n        if (this.splatDataTextures.sceneIndexes) {\n            this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\n            this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\n                deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\n            };\n        }\n    }\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'sceneIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'sceneIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        }\n        if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n\n    /**\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n     * @param {*} start The index at which to start copying data\n     * @param {*} end  The index at which to stop copying data\n     * @return {object}\n     */\n    getDataForDistancesComputation(start, end) {\n        const centers = this.integerBasedDistancesComputation ?\n                        this.getIntegerCenters(start, end, true) :\n                        this.getFloatCenters(start, end, true);\n        const sceneIndexes = this.getSceneIndexes(start, end);\n        return {\n            centers,\n            sceneIndexes\n        };\n    }\n\n    /**\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     * @return {object}\n     */\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount(true);\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\n        if (this.enableDistancesComputationOnGPU) {\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\n        }\n        return {\n            'from': updateStart,\n            'to': splatCount - 1,\n            'count': splatCount - updateStart,\n            'centers': centers,\n            'sceneIndexes': sceneIndexes\n        };\n    }\n\n    /**\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\n     * @param {Array<number>} centers Splat center positions\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n     */\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount(true);\n        const fromSplat = this.lastBuildSplatCount;\n        const toSplat = splatCount - 1;\n\n        if (!sinceLastBuildOnly) {\n            this.setupDataTextures();\n            this.updateBaseDataFromSplatBuffers();\n        } else {\n            this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\n        }\n\n        this.updateDataTexturesFromBaseData(fromSplat, toSplat);\n        this.updateVisibleRegion(sinceLastBuildOnly);\n    }\n\n    setupDataTextures() {\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount(true);\n\n        this.disposeTextures();\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplat) texSize.y *= 2;\n            return texSize;\n        };\n\n        const getCovariancesElementsPertexelStored = (compressionLevel) => {\n            return compressionLevel >= 1 ? COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED : COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\n        };\n\n        const getCovariancesInitialTextureSpecs = (compressionLevel) => {\n            const elementsPerTexelStored = getCovariancesElementsPertexelStored(compressionLevel);\n            const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\n            return {elementsPerTexelStored, texSize};\n        };\n\n        let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n        const scaleRotationCompressionLevel = 0;\n        const shCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\n\n        let covariances;\n        let scales;\n        let rotations;\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            const initialCovTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\n            if (initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y > MAX_TEXTURE_TEXELS && covarianceCompressionLevel === 0) {\n                covarianceCompressionLevel = 1;\n            }\n            covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n        } else {\n            scales = new Float32Array(maxSplatCount * 3);\n            rotations = new Float32Array(maxSplatCount * 4);\n        }\n\n        const centers = new Float32Array(maxSplatCount * 3);\n        const colors = new Uint8Array(maxSplatCount * 4);\n\n        let SphericalHarmonicsArrayType = Float32Array;\n        if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n        else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n        const shComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\n        const shData = this.minSphericalHarmonicsDegree ? new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) : undefined;\n\n        // set up centers/colors data texture\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount - 1, centers, colors, paddedCentersCols);\n\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColsTex.internalFormat = 'RGBA32UI';\n        centersColsTex.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'baseData': {\n                'covariances': covariances,\n                'scales': scales,\n                'rotations': rotations,\n                'centers': centers,\n                'colors': colors,\n                'sphericalHarmonics': shData\n            },\n            'centerColors': {\n                'data': paddedCentersCols,\n                'texture': centersColsTex,\n                'size': centersColsTexSize\n            }\n        };\n\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            // set up covariances data texture\n\n            const covTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\n            const covariancesElementsPerTexelStored = covTexSpecs.elementsPerTexelStored;\n            const covTexSize = covTexSpecs.texSize;\n\n            let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\n            const covariancesElementsPerTexelAllocated = covarianceCompressionLevel >= 1 ?\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\n            const covariancesTextureData = new CovariancesDataType(covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated);\n\n            if (covarianceCompressionLevel === 0) {\n                covariancesTextureData.set(covariances);\n            } else {\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(covariances, covariancesTextureData, 0, 0, covariances.length);\n            }\n\n            let covTex;\n            if (covarianceCompressionLevel >= 1) {\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y,\n                                               THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n                covTex.internalFormat = 'RGBA32UI';\n                this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\n            } else {\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y, THREE.RGBAFormat, THREE.FloatType);\n                this.material.uniforms.covariancesTexture.value = covTex;\n\n                // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\n                const dummyTex = new THREE.DataTexture(new Uint32Array(32), 2, 2, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n                dummyTex.internalFormat = 'RGBA32UI';\n                this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\n                dummyTex.needsUpdate = true;\n            }\n            covTex.needsUpdate = true;\n\n            this.material.uniforms.covariancesAreHalfFloat.value = (covarianceCompressionLevel >= 1) ? 1 : 0;\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n            this.splatDataTextures['covariances'] = {\n                'data': covariancesTextureData,\n                'texture': covTex,\n                'size': covTexSize,\n                'compressionLevel': covarianceCompressionLevel,\n                'elementsPerTexelStored': covariancesElementsPerTexelStored,\n                'elementsPerTexelAllocated': covariancesElementsPerTexelAllocated\n            };\n        } else {\n            // set up scale & rotations data texture\n            const elementsPerSplat = 6;\n            const scaleRotationsTexSize = computeDataTextureSize(SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat);\n            let ScaleRotationsDataType = scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\n            let scaleRotationsTextureType = scaleRotationCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\n            const paddedScaleRotations = new ScaleRotationsDataType(scaleRotationsTexSize.x * scaleRotationsTexSize.y *\n                                                                    SCALES_ROTATIONS_ELEMENTS_PER_TEXEL);\n\n            SplatMesh.updateScaleRotationsPaddedData(0, splatCount - 1, scales, rotations, paddedScaleRotations);\n\n            const scaleRotationsTex = new THREE.DataTexture(paddedScaleRotations, scaleRotationsTexSize.x, scaleRotationsTexSize.y,\n                                                            THREE.RGBAFormat, scaleRotationsTextureType);\n            scaleRotationsTex.needsUpdate = true;\n            this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\n            this.material.uniforms.scaleRotationsTextureSize.value.copy(scaleRotationsTexSize);\n\n            this.splatDataTextures['scaleRotations'] = {\n                'data': paddedScaleRotations,\n                'texture': scaleRotationsTex,\n                'size': scaleRotationsTexSize,\n                'compressionLevel': scaleRotationCompressionLevel\n            };\n        }\n\n        if (shData) {\n            const shTextureType = shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n\n            let paddedSHComponentCount = shComponentCount;\n            if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n            const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\n            const texelFormat = shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\n            let shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\n\n            // Use one texture for all spherical harmonics data\n            if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\n                const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n                for (let c = 0; c < splatCount; c++) {\n                    const srcBase = shComponentCount * c;\n                    const destBase = paddedSHComponentCount * c;\n                    for (let i = 0; i < shComponentCount; i++) {\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\n                    }\n                }\n\n                const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\n                shTexture.needsUpdate = true;\n                this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\n                this.splatDataTextures['sphericalHarmonics'] = {\n                    'componentCount': shComponentCount,\n                    'paddedComponentCount': paddedSHComponentCount,\n                    'data': paddedSHArray,\n                    'textureCount': 1,\n                    'texture': shTexture,\n                    'size': shTexSize,\n                    'compressionLevel': shCompressionLevel,\n                    'elementsPerTexel': shElementsPerTexel\n                };\n            // Use three textures for spherical harmonics data, one per color channel\n            } else {\n                const shComponentCountPerChannel = shComponentCount / 3;\n                paddedSHComponentCount = shComponentCountPerChannel;\n                if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n                shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\n\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\n                const textureUniforms = [this.material.uniforms.sphericalHarmonicsTextureR,\n                                         this.material.uniforms.sphericalHarmonicsTextureG,\n                                         this.material.uniforms.sphericalHarmonicsTextureB];\n                const paddedSHArrays = [];\n                const shTextures = [];\n                for (let t = 0; t < 3; t++) {\n                    const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\n                    paddedSHArrays.push(paddedSHArray);\n                    for (let c = 0; c < splatCount; c++) {\n                        const srcBase = shComponentCount * c;\n                        const destBase = paddedSHComponentCount * c;\n                        if (shComponentCountPerChannel >= 3) {\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n                            if (shComponentCountPerChannel >= 8) {\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\n                            }\n                        }\n                    }\n\n                    const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\n                    shTextures.push(shTexture);\n                    shTexture.needsUpdate = true;\n                    textureUniforms[t].value = shTexture;\n                }\n\n                this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\n                this.splatDataTextures['sphericalHarmonics'] = {\n                    'componentCount': shComponentCount,\n                    'componentCountPerChannel': shComponentCountPerChannel,\n                    'paddedComponentCount': paddedSHComponentCount,\n                    'data': paddedSHArrays,\n                    'textureCount': 3,\n                    'textures': shTextures,\n                    'size': shTexSize,\n                    'compressionLevel': shCompressionLevel,\n                    'elementsPerTexel': shElementsPerTexel\n                };\n            }\n\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(shTexSize);\n            this.material.uniforms.sphericalHarmonics8BitMode.value = shCompressionLevel === 2 ? 1 : 0;\n            for (let s = 0; s < this.scenes.length; s++) {\n                const splatBuffer = this.scenes[s].splatBuffer;\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[s] =\n                    splatBuffer.minSphericalHarmonicsCoeff;\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[s] =\n                    splatBuffer.maxSphericalHarmonicsCoeff;\n            }\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const sceneIndexesTexSize = computeDataTextureSize(SCENE_INDEXES_ELEMENTS_PER_TEXEL, 4);\n        const paddedTransformIndexes = new Uint32Array(sceneIndexesTexSize.x *\n                                                       sceneIndexesTexSize.y * SCENE_INDEXES_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n        const sceneIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, sceneIndexesTexSize.x, sceneIndexesTexSize.y,\n                                                          THREE.RedIntegerFormat, THREE.UnsignedIntType);\n        sceneIndexesTexture.internalFormat = 'R32UI';\n        sceneIndexesTexture.needsUpdate = true;\n        this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\n        this.material.uniforms.sceneIndexesTextureSize.value.copy(sceneIndexesTexSize);\n        this.material.uniformsNeedUpdate = true;\n        this.splatDataTextures['sceneIndexes'] = {\n            'data': paddedTransformIndexes,\n            'texture': sceneIndexesTexture,\n            'size': sceneIndexesTexSize\n        };\n        this.material.uniforms.sceneCount.value = this.scenes.length;\n    }\n\n    updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\n        const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const shCompressionLevel = shITextureDesc ? shITextureDesc.compressionLevel : 0;\n\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances, this.splatDataTextures.baseData.scales,\n                                 this.splatDataTextures.baseData.rotations, this.splatDataTextures.baseData.centers,\n                                 this.splatDataTextures.baseData.colors, this.splatDataTextures.baseData.sphericalHarmonics, undefined,\n                                 covarianceCompressionLevel, scaleRotationCompressionLevel, shCompressionLevel,\n                                 fromSplat, toSplat, fromSplat);\n    }\n\n    updateDataTexturesFromBaseData(fromSplat, toSplat) {\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\n\n        // Update center & color data texture\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\n        SplatMesh.updateCenterColorsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.centers,\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n            centerColorsTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor.texture, centerColorsTextureDescriptor.size,\n                                   centerColorsTextureProps, CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\n                                   fromSplat, toSplat);\n        }\n\n        // update covariance data texture\n        if (covarancesTextureDesc) {\n            const covariancesTexture = covarancesTextureDesc.texture;\n            const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n            const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n\n            if (covarianceCompressionLevel === 0) {\n                for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\n                    const covariance = this.splatDataTextures.baseData.covariances[i];\n                    covarancesTextureDesc.data[i] = covariance;\n                }\n            } else {\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,\n                                                                       covarancesTextureDesc.data,\n                                                                       fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\n                                                                       covarancesStartElement, covariancesEndElement);\n            }\n\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n                covariancesTexture.needsUpdate = true;\n            } else {\n                if (covarianceCompressionLevel === 0) {\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelStored,\n                                           COVARIANCES_ELEMENTS_PER_SPLAT, 4, fromSplat, toSplat);\n                } else {\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelAllocated,\n                                           covarancesTextureDesc.elementsPerTexelAllocated, 2, fromSplat, toSplat);\n                }\n            }\n        }\n\n        // update scale and rotation data texture\n        if (scaleRotationsTextureDesc) {\n            const paddedScaleRotations = scaleRotationsTextureDesc.data;\n            const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\n            const elementsPerSplat = 6;\n            const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\n\n            SplatMesh.updateScaleRotationsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.scales,\n                                                     this.splatDataTextures.baseData.rotations, paddedScaleRotations);\n            const scaleRotationsTextureProps = this.renderer ? this.renderer.properties.get(scaleRotationsTexture) : null;\n            if (!scaleRotationsTextureProps || !scaleRotationsTextureProps.__webglTexture) {\n                scaleRotationsTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedScaleRotations, scaleRotationsTextureDesc.texture, scaleRotationsTextureDesc.size,\n                                       scaleRotationsTextureProps, SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat, bytesPerElement,\n                                       fromSplat, toSplat);\n            }\n        }\n\n        // update spherical harmonics data texture\n        const shData = this.splatDataTextures.baseData.sphericalHarmonics;\n        if (shData) {\n            let shBytesPerElement = 4;\n            if (shCompressionLevel === 1) shBytesPerElement = 2;\n            else if (shCompressionLevel === 2) shBytesPerElement = 1;\n\n            const updateTexture = (shTexture, shTextureSize, elementsPerTexel, paddedSHArray, paddedSHComponentCount) => {\n                const shTextureProps = this.renderer ? this.renderer.properties.get(shTexture) : null;\n                if (!shTextureProps || !shTextureProps.__webglTexture) {\n                    shTexture.needsUpdate = true;\n                } else {\n                    this.updateDataTexture(paddedSHArray, shTexture, shTextureSize, shTextureProps, elementsPerTexel,\n                                           paddedSHComponentCount, shBytesPerElement, fromSplat, toSplat);\n                }\n            };\n\n            const shComponentCount = shTextureDesc.componentCount;\n            const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\n\n            // Update for the case of a single texture for all spherical harmonics data\n            if (shTextureDesc.textureCount === 1) {\n                const paddedSHArray = shTextureDesc.data;\n                for (let c = fromSplat; c <= toSplat; c++) {\n                    const srcBase = shComponentCount * c;\n                    const destBase = paddedSHComponentCount * c;\n                    for (let i = 0; i < shComponentCount; i++) {\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\n                    }\n                }\n                updateTexture(shTextureDesc.texture, shTextureDesc.size,\n                              shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\n            // Update for the case of spherical harmonics data split among three textures, one for each color channel\n            } else {\n                const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\n                for (let t = 0; t < 3; t++) {\n                    const paddedSHArray = shTextureDesc.data[t];\n                    for (let c = fromSplat; c <= toSplat; c++) {\n                        const srcBase = shComponentCount * c;\n                        const destBase = paddedSHComponentCount * c;\n                        if (shComponentCountPerChannel >= 3) {\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n                            if (shComponentCountPerChannel >= 8) {\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\n                            }\n                        }\n                    }\n                    updateTexture(shTextureDesc.textures[t], shTextureDesc.size,\n                                  shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\n                }\n            }\n        }\n\n        // update scene index & transform data\n        const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\n        const paddedSceneIndexes = sceneIndexesTexDesc.data;\n        for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\n            paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n        }\n        const sceneIndexesTexture = sceneIndexesTexDesc.texture;\n        const sceneIndexesTextureProps = this.renderer ? this.renderer.properties.get(sceneIndexesTexture) : null;\n        if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\n            sceneIndexesTexture.needsUpdate = true;\n        } else {\n            this.updateDataTexture(paddedSceneIndexes, sceneIndexesTexDesc.texture, sceneIndexesTexDesc.size,\n                                   sceneIndexesTextureProps, 1, 1, 1, this.lastBuildSplatCount, toSplat);\n        }\n    }\n\n    getTargetCovarianceCompressionLevel() {\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n    }\n\n    getTargetSphericalHarmonicsCompressionLevel() {\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n    }\n\n    getMaximumSplatBufferCompressionLevel() {\n        let maxCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n                maxCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return maxCompressionLevel;\n    }\n\n    getMinimumSplatBufferCompressionLevel() {\n        let minCompressionLevel;\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n                minCompressionLevel = splatBuffer.compressionLevel;\n            }\n        }\n        return minCompressionLevel;\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n    updateDataTexture(paddedData, texture, textureSize, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureSize.x, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const glType = this.webGLUtils.convert(texture.type);\n        const glFormat = this.webGLUtils.convert(texture.format, texture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureSize.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n    static updatePaddedCompressedCovariancesTextureData(sourceData, textureData, textureDataStartIndex, fromElement, toElement) {\n        let textureDataView = new DataView(textureData.buffer);\n        let textureDataIndex = textureDataStartIndex;\n        let sequentialCount = 0;\n        for (let i = fromElement; i <= toElement; i+=2) {\n            textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\n            textureDataView.setUint16(textureDataIndex * 2 + 2, sourceData[i + 1], true);\n            textureDataIndex += 2;\n            sequentialCount++;\n            if (sequentialCount >= 3) {\n                textureDataIndex += 2;\n                sequentialCount = 0;\n            }\n        }\n    }\n\n    static updateCenterColorsPaddedData(from, to, centers, colors, paddedCenterColors) {\n        for (let c = from; c <= to; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n    }\n\n    static updateScaleRotationsPaddedData(from, to, scales, rotations, paddedScaleRotations) {\n        const combinedSize = 6;\n        for (let c = from; c <= to; c++) {\n            const scaleBase = c * 3;\n            const rotationBase = c * 4;\n            const scaleRotationsBase = c * combinedSize;\n\n            paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\n            paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\n            paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\n\n            paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\n            paddedScaleRotations[scaleRotationsBase + 4] = rotations[rotationBase + 1];\n            paddedScaleRotations[scaleRotationsBase + 5] = rotations[rotationBase + 2];\n        }\n    }\n\n    updateVisibleRegion(sinceLastBuildOnly) {\n        const splatCount = this.getSplatCount(true);\n        const tempCenter = new THREE.Vector3();\n        if (!sinceLastBuildOnly) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, true);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n        geometry.setDrawRange(0, renderSplatCount);\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform(this.dynamicMode);\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                if (this.enableOptionalEffects) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.sceneOpacity.value[i] = clamp(this.getScene(i).opacity, 0.0, 1.0);\n                        this.material.uniforms.sceneVisibility.value[i] = this.getScene(i).visible ? 1 : 0;\n                        this.material.uniformsNeedUpdate = true;\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount(includeSinceLastBuild = false) {\n        if (!includeSinceLastBuild) return this.lastBuildSplatCount;\n        else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.sceneIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'sceneIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.sceneIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} centers The splat centers data\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = 16;\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(centers);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n     * @param {Array<number>} sceneIndexes The splat scene indexes\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, sceneIndexes, offsetSplats) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = offsetSplats * 4;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n\n        if (isUpdate) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(sceneIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {number} start Starting splat index to store\n     * @param {number} end Ending splat index to store\n     * @return {Uint32Array}\n     */\n    getSceneIndexes(start, end) {\n\n        let sceneIndexes;\n        const fillCount = end - start + 1;\n        sceneIndexes = new Uint32Array(fillCount);\n        for (let i = start; i <= end; i++) {\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n        }\n\n        return sceneIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} scales Target storage for splat scales\n     * @param {Float32Array} rotations Target storage for splat rotations\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n     * @param {number} srcStart The start location from which to pull source data\n     * @param {number} srcEnd The end location from which to pull source data\n     * @param {number} destStart The start location from which to write data\n     */\n    fillSplatDataArrays(covariances, scales, rotations, centers, colors, sphericalHarmonics, applySceneTransform,\n                        covarianceCompressionLevel = 0, scaleRotationCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1,\n                        srcStart, srcEnd, destStart = 0, sceneIndex) {\n        const scaleOverride = new THREE.Vector3();\n        scaleOverride.x = undefined;\n        scaleOverride.y = undefined;\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n            scaleOverride.z = undefined;\n        } else {\n            scaleOverride.z = 1;\n        }\n        const tempTransform = new THREE.Matrix4();\n\n        let startSceneIndex = 0;\n        let endSceneIndex = this.scenes.length - 1;\n        if (sceneIndex !== undefined && sceneIndex !== null && sceneIndex >= 0 && sceneIndex <= this.scenes.length) {\n            startSceneIndex = sceneIndex;\n            endSceneIndex = sceneIndex;\n        }\n        for (let i = startSceneIndex; i <= endSceneIndex; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            let sceneTransform;\n            if (applySceneTransform) {\n                this.getSceneTransform(i, tempTransform);\n                sceneTransform = tempTransform;\n            }\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform, srcStart, srcEnd, destStart, covarianceCompressionLevel);\n            }\n            if (scales || rotations) {\n                if (!scales || !rotations) {\n                    throw new Error('SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.');\n                }\n                splatBuffer.fillSplatScaleRotationArray(scales, rotations, sceneTransform,\n                                                        srcStart, srcEnd, destStart, scaleRotationCompressionLevel, scaleOverride);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\n            if (sphericalHarmonics) {\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\n            }\n            destStart += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Int32Array}\n     */\n    getIntegerCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} start The index at which to start retrieving data\n     * @param {number} end The index at which to stop retrieving data\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n     * @return {Float32Array}\n     */\n    getFloatCenters(start, end, padFour = false) {\n        const splatCount = end - start + 1;\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n        const scaleOverride = new THREE.Vector3();\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            scaleOverride.x = undefined;\n            scaleOverride.y = undefined;\n            scaleOverride.z = undefined;\n            if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation,\n                                                           paramsObj.sceneTransform, scaleOverride);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform(this.dynamicMode);\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSceneCount() {\n        return this.scenes.length;\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n\n    computeBoundingBox(applySceneTransforms = false, sceneIndex) {\n        let splatCount = this.getSplatCount();\n        if (sceneIndex !== undefined && sceneIndex !== null) {\n            if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n                throw new Error('SplatMesh::computeBoundingBox() -> Invalid scene index.');\n            }\n            splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\n        }\n\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, applySceneTransforms,\n                                 undefined, undefined, undefined, undefined, sceneIndex);\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const offset = i * 3;\n            const x = floatCenters[offset];\n            const y = floatCenters[offset + 1];\n            const z = floatCenters[offset + 2];\n            if (i === 0 || x < min.x) min.x = x;\n            if (i === 0 || y < min.y) min.y = y;\n            if (i === 0 || z < min.z) min.z = z;\n            if (i === 0 || x > max.x) max.x = x;\n            if (i === 0 || y > max.y) max.y = y;\n            if (i === 0 || z > max.z) max.z = z;\n        }\n\n        return new THREE.Box3(min, max);\n    }\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container && this.infoPanelContainer.parentElement === this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container && this.progressBarContainerOuter.parentElement === this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container && this.spinnerContainerOuter.parentElement === this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionOptions = {\n                ...sessionInit,\n                optionalFeatures: [\n                    'local-floor',\n                    'bounded-floor',\n                    'layers',\n                    ...( sessionInit.optionalFeatures || [] )\n                ],\n            };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionOptions )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionOptions )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\nimport { isIOS, getIOSSemever } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let sceneIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n    let distanceMapRange;\n    let uploadedSplatCount;\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, sceneIndexesOffset, transformsOffset, distanceMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            sceneIndexes = e.data.sceneIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, sceneIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(sceneIndexes));\n            }\n            uploadedSplatCount = e.data.range.from + e.data.range.count;\n        } else if (e.data.sort) {\n            const renderCount = Math.min(e.data.sort.splatRenderCount || 0, uploadedSplatCount);\n            const sortCount = Math.min(e.data.sort.splatSortCount || 0, uploadedSplatCount);\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n            distanceMapRange = e.data.init.distanceMapRange;\n            uploadedSplatCount = 0;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = integerBasedSort ? (distanceMapRange * Constants.BytesPerInt * 2) :\n                                                                                (distanceMapRange * Constants.BytesPerFloat * 2);\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired,\n                        maximum: totalPagesRequired,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                sceneIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = sceneIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, enableSIMDInSort, integerBasedSort, dynamicMode,\n                                 splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    let sourceWasm = SorterWasm;\n\n    // iOS makes choosing the right WebAssembly configuration tricky :(\n    const iOSSemVer = isIOS() ? getIOSSemever() : null;\n    if (!enableSIMDInSort && !useSharedMemory) {\n        sourceWasm = SorterWasmNoSIMD;\n        // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\n        // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n            sourceWasm = SorterWasmNoSIMDNonShared;\n        }\n    } else if (!enableSIMDInSort) {\n        sourceWasm = SorterWasmNoSIMD;\n    } else if (!useSharedMemory) {\n        // Same issue with shared memory as above on iOS devices\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n            sourceWasm = SorterWasmNonShared;\n        }\n    }\n\n    const sorterWasmBinaryString = atob(sourceWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            'distanceMapRange': 1 << splatSortDistanceMapPrecision,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { Constants } from './Constants.js';\nimport { LogLevel } from './LogLevel.js';\nimport { OrbitControls } from './OrbitControls.js';\nimport { RenderMode } from './RenderMode.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { SplatRenderMode } from './SplatRenderMode.js';\nimport { abortablePromiseWithExtractedComponents, clamp, delayedExecute, fetchWithProgress, getCurrentTime, getIOSSemever, isIOS, makeProgressiveFetchFunction } from './Util.js';\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { createSortWorker } from './worker/SortWorker.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n        this.webXRActive = false;\n\n        this.webXRSessionInit = options.webXRSessionInit || {};\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\n\n        // The verbosity of console logging\n        this.logLevel = options.logLevel || LogLevel.None;\n\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n        // Valid values are 0 - 2. Default value is 0.\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n        // that are enabled by the 'dynamicScene' parameter.\n        this.enableOptionalEffects = options.enableOptionalEffects || false;\n\n        // Enable the usage of SIMD WebAssembly instructions for the splat sort\n        if (options.enableSIMDInSort === undefined || options.enableSIMDInSort === null) options.enableSIMDInSort = true;\n        this.enableSIMDInSort = options.enableSIMDInSort;\n\n        // Level to compress non KSPLAT files when loading them for direct rendering\n        if (options.inMemoryCompressionLevel === undefined || options.inMemoryCompressionLevel === null) {\n            options.inMemoryCompressionLevel = 0;\n        }\n        this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\n\n        // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\n        // Does not apply if splat scene is progressively loaded.\n        if (options.optimizeSplatData === undefined || options.optimizeSplatData === null) {\n            options.optimizeSplatData = true;\n        }\n        this.optimizeSplatData = options.optimizeSplatData;\n\n        // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\n        // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\n        // it will need to be re-populated from the splat buffer(s). Default is false.\n        if (options.freeIntermediateSplatData === undefined || options.freeIntermediateSplatData === null) {\n            options.freeIntermediateSplatData = false;\n        }\n        this.freeIntermediateSplatData = options.freeIntermediateSplatData;\n\n        // It appears that for certain iOS versions, special actions need to be taken with the\n        // usage of SIMD instructions and shared memory\n        if (isIOS()) {\n            const semver = getIOSSemever();\n            if (semver.major < 17) {\n                this.enableSIMDInSort = false;\n            }\n            if (semver.major < 16) {\n                this.sharedMemoryForWorkers = false;\n            }\n        }\n\n        // Tell the viewer how to render the splats\n        if (options.splatRenderMode === undefined || options.splatRenderMode === null) {\n            options.splatRenderMode = SplatRenderMode.ThreeD;\n        }\n        this.splatRenderMode = options.splatRenderMode;\n\n        // Customize the speed at which the scene is revealed\n        this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\n\n        // Set the range for the depth map for the counting sort used to sort the splats\n        this.splatSortDistanceMapPrecision = options.splatSortDistanceMapPrecision || Constants.DefaultSplatSortDistanceMapPrecision;\n        const maxPrecision = this.integerBasedSort ? 20 : 24;\n        this.splatSortDistanceMapPrecision = clamp(this.splatSortDistanceMapPrecision, 10, maxPrecision);\n\n        this.onSplatMeshChangedCallback = null;\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.splatSortCount = 0;\n        this.lastSplatSortCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.preSortMessages = [];\n        this.runAfterNextSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.splatSceneDownloadPromises = {};\n        this.splatSceneDownloadAndBuildPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        this.disposePromise = null;\n\n        this.fetchWithProgress = options.fetch ? makeProgressiveFetchFunction(options.fetch) : fetchWithProgress;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.splatRenderMode, this.dynamicScene, this.enableOptionalEffects,\n                                       this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort,\n                                       this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize, this.logLevel,\n                                       this.sphericalHarmonicsDegree, this.sceneFadeInRateMultiplier);\n        this.splatMesh.frustumCulled = false;\n        if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        this.setupCamera();\n        this.setupRenderer();\n        this.setupWebXR(this.webXRSessionInit);\n        this.setupControls();\n        this.setupEventHandlers();\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    setupCamera() {\n        if (!this.usingExternalCamera) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupRenderer() {\n        if (!this.usingExternalRenderer) {\n            const renderDimensions = new THREE.Vector2();\n            this.getRenderDimensions(renderDimensions);\n\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    setupWebXR(webXRSessionInit) {\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer, webXRSessionInit));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer, webXRSessionInit));\n            }\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\n                this.webXRActive = true;\n            });\n            this.renderer.xr.addEventListener('sessionend', (e) => {\n                this.webXRActive = false;\n            });\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n    }\n\n    setupControls() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.orthographicControls, this.perspectiveControls,]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.maxPolarAngle = Math.PI * .75;\n                    controls.minPolarAngle = 0.1;\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                    controls.update();\n                }\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n            this.controls.update();\n        }\n    }\n\n    setupEventHandlers() {\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n        this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value = activeSphericalHarmonicsDegrees;\n        this.splatMesh.material.uniformsNeedUpdate = true;\n    }\n\n    onSplatMeshChanged(callback) {\n        this.onSplatMeshChangedCallback = callback;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n\n            const resetControls = (controls) => {\n                controls.saveState();\n                controls.reset();\n            };\n\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n\n            resetControls(toControls);\n            resetControls(fromControls);\n\n            toControls.target.copy(fromControls.target);\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.adjustForWebXRStereo(renderDimensions);\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    adjustForWebXRStereo(renderDimensions) {\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\n        if (this.camera && this.webXRActive) {\n            const xrCamera = this.renderer.xr.getCamera();\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\n        }\n    }\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n    addSplatSceneDownloadPromise(promise) {\n        this.splatSceneDownloadPromises[promise.id] = promise;\n    }\n\n    removeSplatSceneDownloadPromise(promise) {\n        delete this.splatSceneDownloadPromises[promise.id];\n    }\n\n    setSplatSceneDownloadAndBuildPromise(promise) {\n        this.splatSceneDownloadAndBuildPromise = promise;\n    }\n\n    clearSplatSceneDownloadAndBuildPromise() {\n        this.splatSceneDownloadAndBuildPromise = null;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        if (options.progressiveLoad && this.splatMesh.scenes && this.splatMesh.scenes.length > 0) {\n            console.log('addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes');\n            options.progressiveLoad = false;\n        }\n\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\n        const progressiveLoad = Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\n\n        let loadingUITaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    if (percentComplete == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\n                    } else {\n                        if (progressiveLoad) {\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\n                }\n            }\n        };\n\n        let downloadDone = false;\n        let downloadedPercentage = 0;\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n            if (showLoadingUI) {\n                if (firstBuild && progressiveLoad || finalBuild && !progressiveLoad) {\n                    this.loadingSpinner.removeTask(loadingUITaskId);\n                    if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                }\n                if (progressiveLoad) {\n                    if (finalBuild) {\n                        downloadDone = true;\n                        this.loadingProgressBar.hide();\n                    } else {\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\n                    }\n                }\n            }\n        };\n\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\n            downloadedPercentage = percentComplete;\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!progressiveLoad && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            const addSplatBufferOptions = {\n                'rotation': options.rotation || options.orientation,\n                'position': options.position,\n                'scale': options.scale,\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n            };\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI,\n                                         progressiveLoad, progressiveLoad).then(() => {\n                if (!progressiveLoad && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n            });\n        };\n\n        const loadFunc = progressiveLoad ? this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\n                                           this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n     * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\n     * and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneStandardLoad(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException) {\n\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                     onProgress, false, undefined, format);\n        const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(downloadPromise.abortHandler);\n\n        downloadPromise.then((splatBuffer) => {\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            return buildFunc(splatBuffer, true, true).then(() => {\n                downloadAndBuildPromise.resolve();\n                this.clearSplatSceneDownloadAndBuildPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(downloadPromise);\n            const error = (e instanceof AbortedPromiseError) ? e : new Error(`Viewer::addSplatScene -> Could not load file ${path}`);\n            downloadAndBuildPromise.reject(error);\n        });\n\n        this.addSplatSceneDownloadPromise(downloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\n\n        return downloadAndBuildPromise.promise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n     * @param {function} onDownloadProgress Function to be called as file data are received\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n     * @return {AbortablePromise}\n     */\n    downloadAndBuildSingleSplatSceneProgressiveLoad(path, format, splatAlphaRemovalThreshold, buildFunc,\n                                                    onDownloadProgress, onDownloadException) {\n        let progressiveLoadedSectionBuildCount = 0;\n        let progressiveLoadedSectionBuilding = false;\n        const queuedProgressiveLoadSectionBuilds = [];\n\n        const checkAndBuildProgressiveLoadSections = () => {\n            if (queuedProgressiveLoadSectionBuilds.length > 0 &&\n                !progressiveLoadedSectionBuilding &&\n                !this.isDisposingOrDisposed()) {\n                progressiveLoadedSectionBuilding = true;\n                const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    progressiveLoadedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        progressiveLoadFirstSectionBuildPromise.resolve();\n                    } else if (queuedBuild.finalBuild) {\n                        splatSceneDownloadAndBuildPromise.resolve();\n                        this.clearSplatSceneDownloadAndBuildPromise();\n                    }\n                    if (queuedProgressiveLoadSectionBuilds.length > 0) {\n                        delayedExecute(() => checkAndBuildProgressiveLoadSections());\n                    }\n                });\n            }\n        };\n\n        const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                if (finalBuild || queuedProgressiveLoadSectionBuilds.length === 0 ||\n                    splatBuffer.getSplatCount() > queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()) {\n                    queuedProgressiveLoadSectionBuilds.push({\n                        splatBuffer,\n                        firstBuild: progressiveLoadedSectionBuildCount === 0,\n                        finalBuild\n                    });\n                    progressiveLoadedSectionBuildCount++;\n                    checkAndBuildProgressiveLoadSections();\n                }\n            }\n        };\n\n        const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onDownloadProgress, true,\n                                                                               onProgressiveLoadSectionProgress, format);\n\n        const progressiveLoadFirstSectionBuildPromise = abortablePromiseWithExtractedComponents(splatSceneDownloadPromise.abortHandler);\n        const splatSceneDownloadAndBuildPromise = abortablePromiseWithExtractedComponents();\n\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise.promise);\n\n        splatSceneDownloadPromise.then(() => {\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        })\n        .catch((e) => {\n            this.clearSplatSceneDownloadAndBuildPromise();\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n            const error = (e instanceof AbortedPromiseError) ? e : new Error(`Viewer::addSplatScene -> Could not load one or more scenes`);\n            progressiveLoadFirstSectionBuildPromise.reject(error);\n            if (onDownloadException) onDownloadException(error);\n        });\n\n        return progressiveLoadFirstSectionBuildPromise.promise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n\n        let loadingUITaskId;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n\n        const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, totalPercent == 100 ?\n                                                          `Download complete!` : `Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\n        };\n\n        const baseDownloadPromises = [];\n        const nativeDownloadPromises = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n            const options = sceneOptions[i];\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\n            const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\n                                                                             onLoadProgress.bind(this, i), false, undefined, format);\n            baseDownloadPromises.push(baseDownloadPromise);\n            nativeDownloadPromises.push(baseDownloadPromise.promise);\n        }\n\n        const downloadAndBuildPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeDownloadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n                if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI, false, false).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    this.clearSplatSceneDownloadAndBuildPromise();\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n                this.clearSplatSceneDownloadAndBuildPromise();\n                const error = (e instanceof AbortedPromiseError) ? e :\n                               new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`);\n                reject(error);\n            })\n            .finally(() => {\n                this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\n            });\n        }, (reason) => {\n            for (let baseDownloadPromise of baseDownloadPromises) {\n                baseDownloadPromise.abort(reason);\n            }\n        });\n        this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\n        return downloadAndBuildPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                    progressiveBuild = false, onSectionBuilt = undefined, format) {\n\n        const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\n        try {\n            if (format === SceneFormat.Splat) {\n                return SplatLoader.loadFromURL(path, onProgress, progressiveBuild,\n                                               onSectionBuilt, splatAlphaRemovalThreshold,\n                                               this.inMemoryCompressionLevel, optimizeSplatData,\n                                               undefined, undefined, undefined, undefined,\n                                               this.fetchWithProgress );\n            } else if (format === SceneFormat.KSplat) {\n                return KSplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, this.fetchWithProgress);\n            } else if (format === SceneFormat.Ply) {\n                return PlyLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt,\n                                             splatAlphaRemovalThreshold, this.inMemoryCompressionLevel,\n                                             optimizeSplatData, this.sphericalHarmonicsDegree, undefined,\n                                             undefined, undefined, undefined,\n                                             this.fetchWithProgress );\n            }\n        } catch (e) {\n            if (e instanceof DirectLoadError) {\n                throw new Error('File type or server does not support progressive loading.');\n            } else {\n                throw e;\n            }\n        }\n\n        throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`);\n    }\n\n    static isProgressivelyLoadable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true, showLoadingUI = true,\n                        showLoadingUIForSplatTreeBuild = true, replaceExisting = false,\n                        enableRenderBeforeFirstSort = false, preserveVisibleRegion = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            let splatProcessingTaskId = null;\n            const removeSplatProcessingTask = () => {\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n            };\n\n            this.splatRenderReady = false;\n            return new Promise((resolve) => {\n                if (showLoadingUI) {\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                }\n                delayedExecute(() => {\n                    if (this.isDisposingOrDisposed()) {\n                        resolve();\n                    } else {\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild,\n                                                                        showLoadingUIForSplatTreeBuild, replaceExisting,\n                                                                        preserveVisibleRegion);\n\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\n                        // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\n                        // splat centers and transform indexes so that it can calculate those distance values.\n                        if (!this.gpuAcceleratedSort) {\n                            this.preSortMessages.push({\n                                'centers': buildResults.centers.buffer,\n                                'sceneIndexes': buildResults.sceneIndexes.buffer,\n                                'range': {\n                                    'from': buildResults.from,\n                                    'to': buildResults.to,\n                                    'count': buildResults.count\n                                }\n                            });\n                        }\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\n                        sortWorkerSetupPromise.then(() => {\n                            if (this.isDisposingOrDisposed()) return;\n                            this.runSplatSort(true, true).then((sortRunning) => {\n                                if (!this.sortWorker || !sortRunning) {\n                                    this.splatRenderReady = true;\n                                    removeSplatProcessingTask();\n                                    resolve();\n                                } else {\n                                    if (enableRenderBeforeFirstSort) {\n                                        this.splatRenderReady = true;\n                                    } else {\n                                        this.runAfterNextSort.push(() => {\n                                            this.splatRenderReady = true;\n                                        });\n                                    }\n                                    this.runAfterNextSort.push(() => {\n                                        removeSplatProcessingTask();\n                                        resolve();\n                                    });\n                                }\n                            });\n                        });\n                    }\n                }, true);\n            });\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\n     * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\n     * changed by passing 'true' for 'replaceExisting'.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh = function() {\n\n        let splatOptimizingTaskId;\n\n        return function(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false,\n                        replaceExisting = false, preserveVisibleRegion = true) {\n            if (this.isDisposingOrDisposed()) return;\n            let allSplatBuffers = [];\n            let allSplatBufferOptions = [];\n            if (!replaceExisting) {\n                allSplatBuffers = this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\n                allSplatBufferOptions = this.splatMesh.sceneOptions ? this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) : [];\n            }\n            allSplatBuffers.push(...splatBuffers);\n            allSplatBufferOptions.push(...splatBufferOptions);\n            if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n            const onSplatTreeIndexesUpload = (finished) => {\n                if (this.isDisposingOrDisposed()) return;\n                const splatCount = this.splatMesh.getSplatCount();\n                if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                    if (!finished && !splatOptimizingTaskId) {\n                        this.loadingSpinner.setMinimized(true, true);\n                        splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing data structures...');\n                    }\n                }\n            };\n            const onSplatTreeReady = (finished) => {\n                if (this.isDisposingOrDisposed()) return;\n                if (finished && splatOptimizingTaskId) {\n                    this.loadingSpinner.removeTask(splatOptimizingTaskId);\n                    splatOptimizingTaskId = null;\n                }\n            };\n            const buildResults = this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload,\n                                                      onSplatTreeReady, preserveVisibleRegion);\n            if (finalBuild && this.freeIntermediateSplatData) this.splatMesh.freeIntermediateSplatData();\n            return buildResults;\n        };\n\n    }();\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers, this.enableSIMDInSort,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode, this.splatSortDistanceMapPrecision);\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n\n                    this.lastSplatSortCount = this.splatSortCount;\n\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (this.runAfterNextSort.length > 0) {\n                        this.runAfterNextSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterNextSort.length = 0;\n                    }\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    if (this.logLevel >= LogLevel.Info) {\n                        console.log('Sorting web worker ready.');\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    }\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.preSortMessages = [];\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(indexToRemove, showLoadingUI = true) {\n        return this.removeSplatScenes([indexToRemove], showLoadingUI);\n    }\n\n    removeSplatScenes(indexesToRemove, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    let shouldRemove = false;\n                    for (let indexToRemove of indexesToRemove) {\n                        if (indexToRemove === i) {\n                            shouldRemove = true;\n                            break;\n                        }\n                    }\n                    if (!shouldRemove) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.sceneRevealMode = SceneRevealMode.Instant;\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n\n                    this.runSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(null);\n            } else {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        if (this.isDisposingOrDisposed()) return this.disposePromise;\n\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.splatSceneDownloadPromises) {\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n\n        this.disposing = true;\n        this.disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.orthographicControls) {\n                this.orthographicControls.dispose();\n                this.orthographicControls = null;\n            }\n            if (this.perspectiveControls) {\n                this.perspectiveControls.dispose();\n                this.perspectiveControls = null;\n            }\n            this.controls = null;\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n            this.disposePromise = null;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort('Scene disposed');\n        });\n        return this.disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return false;\n\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n\n        if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\n\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.runSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    runSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return function(force = false, forceSortAll = false) {\n            if (!this.initialized) return Promise.resolve(false);\n            if (this.sortRunning) return Promise.resolve(true);\n            if (this.splatMesh.getSplatCount() <= 0) {\n                this.splatRenderCount = 0;\n                return Promise.resolve(false);\n            }\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return Promise.resolve(false);\n                }\n            }\n\n            this.sortRunning = true;\n            let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            shouldSortAll = shouldSortAll || forceSortAll;\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            const mvpCamera = this.perspectiveCamera || this.camera;\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            let gpuAcceleratedSortPromise = Promise.resolve(true);\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            gpuAcceleratedSortPromise.then(() => {\n                if (queuedSorts.length === 0) {\n                    if (this.splatMesh.dynamicMode || shouldSortAll) {\n                        queuedSorts.push(this.splatRenderCount);\n                    } else {\n                            for (let partialSort of partialSorts) {\n                            if (angleDiff < partialSort.angleThreshold) {\n                                for (let sortFraction of partialSort.sortFractions) {\n                                    queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                                }\n                                break;\n                            }\n                        }\n                        queuedSorts.push(this.splatRenderCount);\n                    }\n                }\n                let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n                this.splatSortCount = sortCount;\n\n                cameraPositionArray[0] = this.camera.position.x;\n                cameraPositionArray[1] = this.camera.position.y;\n                cameraPositionArray[2] = this.camera.position.z;\n\n                const sortMessage = {\n                    'modelViewProj': mvpMatrix.elements,\n                    'cameraPosition': cameraPositionArray,\n                    'splatRenderCount': this.splatRenderCount,\n                    'splatSortCount': sortCount,\n                    'usePrecomputedDistances': this.gpuAcceleratedSort\n                };\n                if (this.splatMesh.dynamicMode) {\n                    this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n                }\n                if (!this.sharedMemoryForWorkers) {\n                    sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                    sortMessage.transforms = this.sortWorkerTransforms;\n                    if (this.gpuAcceleratedSort) {\n                        sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                    }\n                }\n\n                this.sortPromise = new Promise((resolve) => {\n                    this.sortPromiseResolver = resolve;\n                });\n\n                if (this.preSortMessages.length > 0) {\n                    this.preSortMessages.forEach((message) => {\n                        this.sortWorker.postMessage(message);\n                    });\n                    this.preSortMessages = [];\n                }\n                this.sortWorker.postMessage({\n                    'sort': sortMessage\n                });\n\n                if (queuedSorts.length === 0) {\n                    lastSortViewPos.copy(this.camera.position);\n                    lastSortViewDir.copy(sortViewDir);\n                }\n\n                return true;\n            });\n\n            return gpuAcceleratedSortPromise;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    getSceneCount() {\n        return this.splatMesh.getSceneCount();\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n        this.updateSplatMesh();\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n        this.viewer.onSplatMeshChanged(() => {\n            this.updateSplatMesh();\n        });\n\n    }\n\n    updateSplatMesh() {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        return this.viewer.removeSplatScene(index, showLoadingUI);\n    }\n\n    removeSplatScenes(indexes, showLoadingUI = true) {\n        return this.viewer.removeSplatScenes(indexes, showLoadingUI);\n    }\n\n    getSceneCount() {\n        return this.viewer.getSceneCount();\n    }\n\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n        this.viewer.setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees);\n    }\n\n    async dispose() {\n        return await this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","reason","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","makeProgressiveFetchFunction","get","fetch","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","async","data","ok","errorText","text","status","statusText","reader","body","getReader","bytesDownloaded","_fileSize","headers","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","fetchWithProgress","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","DefaultSphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","range8BitMin","range8BitMax","fromUint8","toUint8","v","rangeMin","rangeMax","range","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","localFromHalfFloatToUint8","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","localToUint8","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","minShCoeff","maxShCoeff","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sc","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArraySection","parseToUncompressedSplatArray","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","DirectLoadError","InternalLoadType","LoaderStatus","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","storeChunksInBuffer","inBytes","sizeBytes","finalize","optimizeSplatData","PlyLoader","loadFromURL","fileName","loadDirectoToSplatBuffer","onProgressiveLoadSectionProgress","defaultFetchWithProgress","internalLoadType","directLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","directLoadBufferIn","directLoadBufferOut","directLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","loadPromise","standardLoadUncompressedSplatArray","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","chunkDatas","plyFileData","loadFromFileData","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","directLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","directLoadPromise","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fullBuffer","splatBuffer","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","LogLevel","None","Warning","Info","Debug","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","RenderMode","Always","OnChange","Never","_axis","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","SceneRevealMode","Default","Gradual","Instant","SplatRenderMode","ThreeD","TwoD","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","splatScale","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","sphericalHarmonics8BitCompressionRangeMin","sphericalHarmonics8BitCompressionRangeMax","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneIndexesTexture","sceneIndexesTextureSize","sceneCount","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","antialiased","maxScreenSpaceSplatSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","copyTransformData","otherScene","updateTransform","matrixWorldAutoUpdate","updateWorldMatrix","updateMatrix","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","dummyGeometry","dummyMaterial","MAX_TEXTURE_TEXELS","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","sceneFadeInRateMultiplier","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","parentObject","splatBuffers","sceneOptions","scene","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","splatBufferSplatCount","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","setupDataTextures","updateDataTexturesFromBaseData","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","scales","rotations","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","shTextureType","UnsignedByteType","HalfFloatType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","RedIntegerFormat","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","fillSplatDataArrays","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","paddedSceneIndexes","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","fastFadeRate","gradualFadeRate","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","renderSplatCount","attributes","setDrawRange","updateTransforms","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","includeSinceLastBuild","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","tempTransform","startSceneIndex","endSceneIndex","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","getSceneCount","matrixElements","intMatrixArray","computeBoundingBox","applySceneTransforms","InfoPanel","container","infoCells","layout","infoPanelContainer","innerHTML","append","infoPanel","className","infoTable","display","layoutEntry","labelCell","classList","spacerCell","infoCell","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","sortTime","setContainer","parentElement","removeChild","zIndex","show","hide","LoadingProgressBar","tasks","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","LoadingSpinner","message","taskIDGen","elementID","elementIDGen","spinnerContainerOuter","spinnerContainerPrimary","spinnerPrimary","messageContainerPrimary","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","setMessage","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","ARButton","createButton","sessionInit","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","domOverlay","overlay","svg","createElementNS","currentSession","optionalFeatures","root","onSessionStarted","session","onSessionEnded","setReferenceSpaceType","setSession","textContent","requestSession","offerSession","err","showStartAR","exception","isSecureContext","location","replace","textDecoration","VRButton","sessionOptions","showEnterVR","xrSessionIsGranted","registerSessionGrantedListener","test","WebXRMode","VR","AR","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","distanceMapRange","uploadedSplatCount","BytesPerInt","BytesPerFloat","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","webXRSessionInit","renderMode","enableSIMDInSort","inMemoryCompressionLevel","semver","splatSortDistanceMapPrecision","DefaultSplatSortDistanceMapPrecision","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","lastSplatSortCount","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","preSortMessages","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","frustumCulled","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","setActiveSphericalHarmonicsDegrees","activeSphericalHarmonicsDegrees","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","progressiveLoad","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","downloadAndBuildPromise","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","baseDownloadPromises","nativeDownloadPromises","baseDownloadPromise","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","buildResults","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","runSplatSort","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","forceSortAll","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","gpuAcceleratedSortPromise","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}