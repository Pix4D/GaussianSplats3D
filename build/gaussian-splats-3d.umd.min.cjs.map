{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/LoaderStatus.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/LogLevel.js","../src/OrbitControls.js","../src/RenderMode.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/SceneRevealMode.js","../src/SplatRenderMode.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/splatmesh/SplatMesh.js","../src/ui/InfoPanel.js","../src/ui/LoadingProgressBar.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/webxr/ARButton.js","../src/webxr/VRButton.js","../src/webxr/WebXRMode.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n  static idGen = 0;\n\n  constructor(promiseFunc, abortHandler) {\n    let resolver;\n    let rejecter;\n    this.promise = new Promise((resolve, reject) => {\n      resolver = resolve;\n      rejecter = reject;\n    });\n\n    const promiseResolve = resolver.bind(this);\n    const promiseReject = rejecter.bind(this);\n\n    const resolve = (...args) => {\n      promiseResolve(...args);\n    };\n\n    const reject = (error) => {\n      promiseReject(error);\n    };\n\n    promiseFunc(resolve.bind(this), reject.bind(this));\n    this.abortHandler = abortHandler;\n    this.id = AbortablePromise.idGen++;\n  }\n\n  then(onResolve) {\n    return new AbortablePromise((resolve, reject) => {\n      this.promise = this.promise\n        .then((...args) => {\n          const onResolveResult = onResolve(...args);\n          if (\n            onResolveResult instanceof Promise ||\n            onResolveResult instanceof AbortablePromise\n          ) {\n            onResolveResult.then((...args2) => {\n              resolve(...args2);\n            });\n          } else {\n            resolve(onResolveResult);\n          }\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }, this.abortHandler);\n  }\n\n  catch(onFail) {\n    return new AbortablePromise((resolve) => {\n      this.promise = this.promise\n        .then((...args) => {\n          resolve(...args);\n        })\n        .catch(onFail);\n    }, this.abortHandler);\n  }\n\n  abort(reason) {\n    if (this.abortHandler) this.abortHandler(reason);\n  }\n}\n\nexport class AbortedPromiseError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(val) {\n    floatView[0] = val;\n    const x = int32View[0];\n\n    let bits = (x >> 16) & 0x8000;\n    let m = (x >> 12) & 0x07ff;\n    const e = (x >> 23) & 0xff;\n\n    if (e < 103) return bits;\n\n    if (e > 142) {\n      bits |= 0x7c00;\n      bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n      return bits;\n    }\n\n    if (e < 113) {\n      m |= 0x0800;\n      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n      return bits;\n    }\n\n    bits |= ((e - 112) << 10) | (m >> 1);\n    bits += m & 1;\n    return bits;\n  };\n})();\n\nexport const uintEncodedFloat = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(f) {\n    floatView[0] = f;\n    return int32View[0];\n  };\n})();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n  return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n  return (\n    arr[offset] +\n    (arr[offset + 1] << 8) +\n    (arr[offset + 2] << 16) +\n    (arr[offset + 3] << 24)\n  );\n};\n\nexport const makeProgressiveFetchFunction =\n  (get = fetch) =>\n  (path, onProgress, saveChunks = true) => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    const abortHandler = (reason) => {\n      abortController.abort(reason);\n      aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n      get(path, { signal })\n        .then(async (data) => {\n          // Handle error conditions where data is still returned\n          if (!data.ok) {\n            const errorText = await data.text();\n            reject(\n              new Error(\n                `Fetch failed: ${data.status} ${data.statusText} ${errorText}`,\n              ),\n            );\n            return;\n          }\n\n          const reader = data.body.getReader();\n          let bytesDownloaded = 0;\n          let _fileSize = data.headers.get('Content-Length');\n          let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n          const chunks = [];\n\n          while (!aborted) {\n            try {\n              const { value: chunk, done } = await reader.read();\n              if (done) {\n                if (onProgress) {\n                  onProgress(100, '100%', chunk, fileSize);\n                }\n                if (saveChunks) {\n                  const buffer = new Blob(chunks).arrayBuffer();\n                  resolve(buffer);\n                } else {\n                  resolve();\n                }\n                break;\n              }\n              bytesDownloaded += chunk.length;\n              let percent;\n              let percentLabel;\n              if (fileSize !== undefined) {\n                percent = (bytesDownloaded / fileSize) * 100;\n                percentLabel = `${percent.toFixed(2)}%`;\n              }\n              if (saveChunks) {\n                chunks.push(chunk);\n              }\n              if (onProgress) {\n                onProgress(percent, percentLabel, chunk, fileSize);\n              }\n            } catch (error) {\n              reject(error);\n              return;\n            }\n          }\n        })\n        .catch((error) => {\n          reject(new AbortedPromiseError(error));\n        });\n    }, abortHandler);\n  };\n\nexport const fetchWithProgress = makeProgressiveFetchFunction();\n\nexport const clamp = function(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n  return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n  if (object3D.geometry) {\n    object3D.geometry.dispose();\n    object3D.geometry = null;\n  }\n  if (object3D.material) {\n    object3D.material.dispose();\n    object3D.material = null;\n  }\n  if (object3D.children) {\n    for (let child of object3D.children) {\n      disposeAllMeshes(child);\n    }\n  }\n};\n\nexport const delayedExecute = (func, fast) => {\n  return new Promise((resolve) => {\n    window.setTimeout(\n      () => {\n        resolve(func());\n      },\n      fast ? 1 : 50,\n    );\n  });\n};\n\nexport const getSphericalHarmonicsComponentCountForDegree = (\n  sphericalHarmonicsDegree = 0,\n) => {\n  switch (sphericalHarmonicsDegree) {\n    case 1:\n      return 9;\n    case 2:\n      return 24;\n  }\n  return 0;\n};\n\nexport const nativePromiseWithExtractedComponents = () => {\n  let resolver;\n  let rejecter;\n  const promise = new Promise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  });\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\n  let resolver;\n  let rejecter;\n  if (!abortHandler) {\n    abortHandler = () => {};\n  }\n  const promise = new AbortablePromise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  }, abortHandler);\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nclass Semver {\n  constructor(major, minor, patch) {\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n  }\n\n  toString() {\n    return `${this.major}_${this.minor}_${this.patch}`;\n  }\n}\n\nexport function isIOS() {\n  const ua = navigator.userAgent;\n  return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\n}\n\nexport function getIOSSemever() {\n  if (isIOS()) {\n    const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    return new Semver(\n      parseInt(extract[1] || 0, 10),\n      parseInt(extract[2] || 0, 10),\n      parseInt(extract[3] || 0, 10),\n    );\n  } else {\n    return null; // or [0,0,0]\n  }\n}\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n  static OFFSET = {\n    X: 0,\n    Y: 1,\n    Z: 2,\n    SCALE0: 3,\n    SCALE1: 4,\n    SCALE2: 5,\n    ROTATION0: 6,\n    ROTATION1: 7,\n    ROTATION2: 8,\n    ROTATION3: 9,\n    FDC0: 10,\n    FDC1: 11,\n    FDC2: 12,\n    OPACITY: 13,\n    FRC0: 14,\n    FRC1: 15,\n    FRC2: 16,\n    FRC3: 17,\n    FRC4: 18,\n    FRC5: 19,\n    FRC6: 20,\n    FRC7: 21,\n    FRC8: 22,\n    FRC9: 23,\n    FRC10: 24,\n    FRC11: 25,\n    FRC12: 26,\n    FRC13: 27,\n    FRC14: 28,\n    FRC15: 29,\n    FRC16: 30,\n    FRC17: 31,\n    FRC18: 32,\n    FRC19: 33,\n    FRC20: 34,\n    FRC21: 35,\n    FRC22: 36,\n    FRC23: 37,\n  };\n\n  constructor(sphericalHarmonicsDegree = 0) {\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n    this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(\n      this.sphericalHarmonicsDegree,\n    );\n    this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n    this.defaultSphericalHarmonics = new Array(\n      this.sphericalHarmonicsCount,\n    ).fill(0);\n    this.splats = [];\n    this.splatCount = 0;\n  }\n\n  static createSplat(sphericalHarmonicsDegree = 0) {\n    const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let shEntries = getSphericalHarmonicsComponentCountForDegree(\n      sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n    return baseSplat;\n  }\n\n  addSplat(splat) {\n    this.splats.push(splat);\n    this.splatCount++;\n  }\n\n  getSplat(index) {\n    return this.splats[index];\n  }\n\n  addDefaultSplat() {\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromComonents(\n    x,\n    y,\n    z,\n    scale0,\n    scale1,\n    scale2,\n    rot0,\n    rot1,\n    rot2,\n    rot3,\n    r,\n    g,\n    b,\n    opacity,\n    ...rest\n  ) {\n    const newSplat = [\n      x,\n      y,\n      z,\n      scale0,\n      scale1,\n      scale2,\n      rot0,\n      rot1,\n      rot2,\n      rot3,\n      r,\n      g,\n      b,\n      opacity,\n      ...this.defaultSphericalHarmonics,\n    ];\n    for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n      newSplat[i] = rest[i];\n    }\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromArray(src, srcIndex) {\n    const srcSplat = src.splats[srcIndex];\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n      newSplat[i] = srcSplat[i];\n    }\n    this.addSplat(newSplat);\n  }\n}\n","export class Constants {\n  static DefaultSplatSortDistanceMapPrecision = 16;\n  static MemoryPageSize = 65536;\n  static BytesPerFloat = 4;\n  static BytesPerInt = 4;\n  static MaxScenes = 32;\n  static ProgressiveLoadSectionSize = 262144;\n  static ProgressiveLoadSectionDelayDuration = 15;\n  static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst DefaultSphericalHarmonics8BitCompressionRange =\n  Constants.SphericalHarmonics8BitCompressionRange;\nconst DefaultSphericalHarmonics8BitCompressionHalfRange =\n  DefaultSphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst toUncompressedFloat = (\n  f,\n  compressionLevel,\n  isSH = false,\n  range8BitMin,\n  range8BitMax,\n) => {\n  if (compressionLevel === 0) {\n    return f;\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return THREE.DataUtils.fromHalfFloat(f);\n  } else if (compressionLevel === 2) {\n    return fromUint8(f, range8BitMin, range8BitMax);\n  }\n};\n\nconst toUint8 = (v, rangeMin, rangeMax) => {\n  v = clamp(v, rangeMin, rangeMax);\n  const range = rangeMax - rangeMin;\n  return clamp(Math.floor(((v - rangeMin) / range) * 255), 0, 255);\n};\n\nconst fromUint8 = (v, rangeMin, rangeMax) => {\n  const range = rangeMax - rangeMin;\n  return (v / 255) * range + rangeMin;\n};\n\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\n  return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\n};\n\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\n  return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\n};\n\nconst dataViewFloatForCompressionLevel = (\n  dataView,\n  floatIndex,\n  compressionLevel,\n  isSH = false,\n) => {\n  if (compressionLevel === 0) {\n    return dataView.getFloat32(floatIndex * 4, true);\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return dataView.getUint16(floatIndex * 2, true);\n  } else {\n    return dataView.getUint8(floatIndex, true);\n  }\n};\n\nconst convertBetweenCompressionLevels = (function() {\n  const noop = (v) => v;\n\n  return function(val, fromLevel, toLevel, isSH = false) {\n    if (fromLevel === toLevel) return val;\n    let outputConversionFunc = noop;\n\n    if (fromLevel === 2 && isSH) {\n      if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\n      else if (toLevel == 0) {\n        outputConversionFunc = fromUint8;\n      }\n    } else if (fromLevel === 2 || fromLevel === 1) {\n      if (toLevel === 0) outputConversionFunc = fromHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = noop;\n        else outputConversionFunc = fromHalfFloatToUint8;\n      }\n    } else if (fromLevel === 0) {\n      if (toLevel === 1) outputConversionFunc = toHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = toHalfFloat;\n        else outputConversionFunc = toUint8;\n      }\n    }\n\n    return outputConversionFunc(val);\n  };\n})();\n\nconst copyBetweenBuffers = (\n  srcBuffer,\n  srcOffset,\n  destBuffer,\n  destOffset,\n  byteCount = 0,\n) => {\n  const src = new Uint8Array(srcBuffer, srcOffset);\n  const dest = new Uint8Array(destBuffer, destOffset);\n  for (let i = 0; i < byteCount; i++) {\n    dest[i] = src[i];\n  }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n  static CurrentMajorVersion = 0;\n  static CurrentMinorVersion = 1;\n\n  static CenterComponentCount = 3;\n  static ScaleComponentCount = 3;\n  static RotationComponentCount = 4;\n  static ColorComponentCount = 4;\n  static CovarianceComponentCount = 6;\n\n  static SplatScaleOffsetFloat = 3;\n  static SplatRotationOffsetFloat = 6;\n\n  static CompressionLevels = {\n    0: {\n      BytesPerCenter: 12,\n      BytesPerScale: 12,\n      BytesPerRotation: 16,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 12,\n      RotationffsetBytes: 24,\n      ColorOffsetBytes: 40,\n      SphericalHarmonicsOffsetBytes: 44,\n      ScaleRange: 1,\n      BytesPerSphericalHarmonicsComponent: 4,\n      SphericalHarmonicsOffsetFloat: 11,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 44 },\n        1: { BytesPerSplat: 80 },\n        2: { BytesPerSplat: 140 },\n      },\n    },\n    1: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 2,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 42 },\n        2: { BytesPerSplat: 72 },\n      },\n    },\n    2: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 1,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 33 },\n        2: { BytesPerSplat: 48 },\n      },\n    },\n  };\n\n  static CovarianceSizeFloats = 6;\n\n  static HeaderSizeBytes = 4096;\n  static SectionHeaderSizeBytes = 1024;\n\n  static BucketStorageSizeBytes = 12;\n  static BucketStorageSizeFloats = 3;\n\n  static BucketBlockSize = 5.0;\n  static BucketSize = 256;\n\n  constructor(bufferData, secLoadedCountsToMax = true) {\n    this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n  }\n\n  getSplatCount() {\n    return this.splatCount;\n  }\n\n  getMaxSplatCount() {\n    return this.maxSplatCount;\n  }\n\n  getMinSphericalHarmonicsDegree() {\n    let minSphericalHarmonicsDegree = 0;\n    for (let i = 0; i < this.sections.length; i++) {\n      const section = this.sections[i];\n      if (\n        i === 0 ||\n        section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree\n      ) {\n        minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n      }\n    }\n    return minSphericalHarmonicsDegree;\n  }\n\n  getBucketIndex(section, localSplatIndex) {\n    let bucketIndex;\n    const maxSplatIndexInFullBuckets =\n      section.fullBucketCount * section.bucketSize;\n    if (localSplatIndex < maxSplatIndexInFullBuckets) {\n      bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n    } else {\n      let bucketSplatIndex = maxSplatIndexInFullBuckets;\n      bucketIndex = section.fullBucketCount;\n      let partiallyFullBucketIndex = 0;\n      while (bucketSplatIndex < section.splatCount) {\n        let currentPartiallyFilledBucketSize =\n          section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n        if (\n          localSplatIndex >= bucketSplatIndex &&\n          localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize\n        ) {\n          break;\n        }\n        bucketSplatIndex += currentPartiallyFilledBucketSize;\n        bucketIndex++;\n        partiallyFullBucketIndex++;\n      }\n    }\n    return bucketIndex;\n  }\n\n  getSplatCenter(globalSplatIndex, outCenter, transform) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n    const dataView = new DataView(\n      this.bufferData,\n      section.dataBase + srcSplatCentersBase,\n    );\n\n    const x = dataViewFloatForCompressionLevel(\n      dataView,\n      0,\n      this.compressionLevel,\n    );\n    const y = dataViewFloatForCompressionLevel(\n      dataView,\n      1,\n      this.compressionLevel,\n    );\n    const z = dataViewFloatForCompressionLevel(\n      dataView,\n      2,\n      this.compressionLevel,\n    );\n    if (this.compressionLevel >= 1) {\n      const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n      const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n      const sf = section.compressionScaleFactor;\n      const sr = section.compressionScaleRange;\n      outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n      outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n      outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n    } else {\n      outCenter.x = x;\n      outCenter.y = y;\n      outCenter.z = z;\n    }\n    if (transform) outCenter.applyMatrix4(transform);\n  }\n\n  getSplatScaleAndRotation = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const tempPosition = new THREE.Vector3();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    return function(index, outScale, outRotation, transform, scaleOverride) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[index];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = index - section.splatCountOffset;\n\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n      if (scaleOverride) {\n        if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\n        if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\n        if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\n      }\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      if (transform) {\n        scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n        rotationMatrix.makeRotationFromQuaternion(rotation);\n        tempMatrix\n          .copy(scaleMatrix)\n          .multiply(rotationMatrix)\n          .multiply(transform);\n        tempMatrix.decompose(tempPosition, outRotation, outScale);\n      } else {\n        outScale.copy(scale);\n        outRotation.copy(rotation);\n      }\n    };\n  })();\n\n  getSplatColor(globalSplatIndex, outColor) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatColorsBase =\n      section.bytesPerSplat * localSplatIndex +\n      SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n    const splatColorsArray = new Uint8Array(\n      this.bufferData,\n      section.dataBase + srcSplatColorsBase,\n      4,\n    );\n\n    outColor.set(\n      splatColorsArray[0],\n      splatColorsArray[1],\n      splatColorsArray[2],\n      splatColorsArray[3],\n    );\n  }\n\n  fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    const center = new THREE.Vector3();\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n      const centerDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n      const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatCentersBase,\n      );\n\n      const x = dataViewFloatForCompressionLevel(\n        dataView,\n        0,\n        this.compressionLevel,\n      );\n      const y = dataViewFloatForCompressionLevel(\n        dataView,\n        1,\n        this.compressionLevel,\n      );\n      const z = dataViewFloatForCompressionLevel(\n        dataView,\n        2,\n        this.compressionLevel,\n      );\n      if (this.compressionLevel >= 1) {\n        const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n        const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n        const sf = section.compressionScaleFactor;\n        const sr = section.compressionScaleRange;\n        center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n        center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n        center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n      } else {\n        center.x = x;\n        center.y = y;\n        center.z = z;\n      }\n      if (transform) {\n        center.applyMatrix4(transform);\n      }\n      outCenterArray[centerDestBase] = center.x;\n      outCenterArray[centerDestBase + 1] = center.y;\n      outCenterArray[centerDestBase + 2] = center.z;\n    }\n  }\n\n  fillSplatScaleRotationArray = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n    const tempPosition = new THREE.Vector3();\n\n    const ensurePositiveW = (quaternion) => {\n      const flip = quaternion.w < 0 ? -1 : 1;\n      quaternion.x *= flip;\n      quaternion.y *= flip;\n      quaternion.z *= flip;\n      quaternion.w *= flip;\n    };\n\n    return function(\n      outScaleArray,\n      outRotationArray,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n      scaleOverride,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      const outputConversion = (value, srcCompressionLevel) => {\n        if (srcCompressionLevel === undefined) {\n          srcCompressionLevel = this.compressionLevel;\n        }\n        return convertBetweenCompressionLevels(\n          value,\n          srcCompressionLevel,\n          desiredOutputCompressionLevel,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatScalesBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n        const scaleDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\n        const rotationDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatScalesBase,\n        );\n\n        const srcScaleX =\n          scaleOverride && scaleOverride.x !== undefined ?\n            scaleOverride.x :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                0,\n                this.compressionLevel,\n              );\n        const srcScaleY =\n          scaleOverride && scaleOverride.y !== undefined ?\n            scaleOverride.y :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                1,\n                this.compressionLevel,\n              );\n        const srcScaleZ =\n          scaleOverride && scaleOverride.z !== undefined ?\n            scaleOverride.z :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                2,\n                this.compressionLevel,\n              );\n\n        const srcRotationW = dataViewFloatForCompressionLevel(\n          dataView,\n          3,\n          this.compressionLevel,\n        );\n        const srcRotationX = dataViewFloatForCompressionLevel(\n          dataView,\n          4,\n          this.compressionLevel,\n        );\n        const srcRotationY = dataViewFloatForCompressionLevel(\n          dataView,\n          5,\n          this.compressionLevel,\n        );\n        const srcRotationZ = dataViewFloatForCompressionLevel(\n          dataView,\n          6,\n          this.compressionLevel,\n        );\n\n        scale.set(\n          toUncompressedFloat(srcScaleX, this.compressionLevel),\n          toUncompressedFloat(srcScaleY, this.compressionLevel),\n          toUncompressedFloat(srcScaleZ, this.compressionLevel),\n        );\n\n        rotation\n          .set(\n            toUncompressedFloat(srcRotationX, this.compressionLevel),\n            toUncompressedFloat(srcRotationY, this.compressionLevel),\n            toUncompressedFloat(srcRotationZ, this.compressionLevel),\n            toUncompressedFloat(srcRotationW, this.compressionLevel),\n          )\n          .normalize();\n\n        if (transform) {\n          tempPosition.set(0, 0, 0);\n          scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n          rotationMatrix.makeRotationFromQuaternion(rotation);\n          tempMatrix\n            .identity()\n            .premultiply(scaleMatrix)\n            .premultiply(rotationMatrix);\n          tempMatrix.premultiply(transform);\n          tempMatrix.decompose(tempPosition, rotation, scale);\n          rotation.normalize();\n        }\n\n        ensurePositiveW(rotation);\n\n        if (outScaleArray) {\n          outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\n          outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\n          outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\n        }\n\n        if (outRotationArray) {\n          outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\n          outRotationArray[rotationDestBase + 1] = outputConversion(\n            rotation.y,\n            0,\n          );\n          outRotationArray[rotationDestBase + 2] = outputConversion(\n            rotation.z,\n            0,\n          );\n          outRotationArray[rotationDestBase + 3] = outputConversion(\n            rotation.w,\n            0,\n          );\n        }\n      }\n    };\n  })();\n\n  static computeCovariance = (function() {\n    const tempMatrix4 = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix3();\n    const rotationMatrix = new THREE.Matrix3();\n    const covarianceMatrix = new THREE.Matrix3();\n    const transformedCovariance = new THREE.Matrix3();\n    const transform3x3 = new THREE.Matrix3();\n    const transform3x3Transpose = new THREE.Matrix3();\n\n    return function(\n      scale,\n      rotation,\n      transform,\n      outCovariance,\n      outOffset = 0,\n      desiredOutputCompressionLevel,\n    ) {\n      tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n      scaleMatrix.setFromMatrix4(tempMatrix4);\n\n      tempMatrix4.makeRotationFromQuaternion(rotation);\n      rotationMatrix.setFromMatrix4(tempMatrix4);\n\n      covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n      transformedCovariance\n        .copy(covarianceMatrix)\n        .transpose()\n        .premultiply(covarianceMatrix);\n\n      if (transform) {\n        transform3x3.setFromMatrix4(transform);\n        transform3x3Transpose.copy(transform3x3).transpose();\n        transformedCovariance.multiply(transform3x3Transpose);\n        transformedCovariance.premultiply(transform3x3);\n      }\n\n      if (desiredOutputCompressionLevel >= 1) {\n        outCovariance[outOffset] = toHalfFloat(\n          transformedCovariance.elements[0],\n        );\n        outCovariance[outOffset + 1] = toHalfFloat(\n          transformedCovariance.elements[3],\n        );\n        outCovariance[outOffset + 2] = toHalfFloat(\n          transformedCovariance.elements[6],\n        );\n        outCovariance[outOffset + 3] = toHalfFloat(\n          transformedCovariance.elements[4],\n        );\n        outCovariance[outOffset + 4] = toHalfFloat(\n          transformedCovariance.elements[7],\n        );\n        outCovariance[outOffset + 5] = toHalfFloat(\n          transformedCovariance.elements[8],\n        );\n      } else {\n        outCovariance[outOffset] = transformedCovariance.elements[0];\n        outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n        outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n        outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n        outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n        outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n      }\n    };\n  })();\n\n  fillSplatCovarianceArray(\n    covarianceArray,\n    transform,\n    srcFrom,\n    srcTo,\n    destFrom,\n    desiredOutputCompressionLevel,\n  ) {\n    const splatCount = this.splatCount;\n\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const covarianceDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      SplatBuffer.computeCovariance(\n        scale,\n        rotation,\n        transform,\n        covarianceArray,\n        covarianceDestBase,\n        desiredOutputCompressionLevel,\n      );\n    }\n  }\n\n  fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const colorDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n      const srcSplatColorsBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n      const dataView = new Uint8Array(\n        this.bufferData,\n        section.dataBase + srcSplatColorsBase,\n      );\n\n      let alpha = dataView[3];\n      alpha = alpha >= minimumAlpha ? alpha : 0;\n\n      outColorArray[colorDestBase] = dataView[0];\n      outColorArray[colorDestBase + 1] = dataView[1];\n      outColorArray[colorDestBase + 2] = dataView[2];\n      outColorArray[colorDestBase + 3] = alpha;\n    }\n  }\n\n  fillSphericalHarmonicsArray = (function() {\n    const sphericalHarmonicVectors = [];\n    for (let i = 0; i < 15; i++) {\n      sphericalHarmonicVectors[i] = new THREE.Vector3();\n    }\n\n    const tempMatrix3 = new THREE.Matrix3();\n    const tempMatrix4 = new THREE.Matrix4();\n\n    const tempTranslation = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n\n    const sh11 = [];\n    const sh12 = [];\n    const sh13 = [];\n\n    const sh21 = [];\n    const sh22 = [];\n    const sh23 = [];\n    const sh24 = [];\n    const sh25 = [];\n\n    const shIn1 = [];\n    const shIn2 = [];\n    const shIn3 = [];\n    const shIn4 = [];\n    const shIn5 = [];\n\n    const shOut1 = [];\n    const shOut2 = [];\n    const shOut3 = [];\n    const shOut4 = [];\n    const shOut5 = [];\n\n    const noop = (v) => v;\n\n    const set3 = (array, val1, val2, val3) => {\n      array[0] = val1;\n      array[1] = val2;\n      array[2] = val3;\n    };\n\n    const set3FromArray = (\n      array,\n      srcDestView,\n      stride,\n      srcBase,\n      compressionLevel,\n    ) => {\n      array[0] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase,\n        compressionLevel,\n        true,\n      );\n      array[1] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride,\n        compressionLevel,\n        true,\n      );\n      array[2] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride + stride,\n        compressionLevel,\n        true,\n      );\n    };\n\n    const copy3 = (srcArray, destArray) => {\n      destArray[0] = srcArray[0];\n      destArray[1] = srcArray[1];\n      destArray[2] = srcArray[2];\n    };\n\n    const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n      destArray[destBase] = conversionFunc(srcArray[0]);\n      destArray[destBase + 1] = conversionFunc(srcArray[1]);\n      destArray[destBase + 2] = conversionFunc(srcArray[2]);\n    };\n\n    const toUncompressedFloatArray3 = (\n      src,\n      dest,\n      compressionLevel,\n      range8BitMin,\n      range8BitMax,\n    ) => {\n      dest[0] = toUncompressedFloat(\n        src[0],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      dest[1] = toUncompressedFloat(\n        src[1],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      dest[2] = toUncompressedFloat(\n        src[2],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      return dest;\n    };\n\n    return function(\n      outSphericalHarmonicsArray,\n      outSphericalHarmonicsDegree,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      if (transform && outSphericalHarmonicsDegree >= 1) {\n        tempMatrix4.copy(transform);\n        tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\n        tempRotation.normalize();\n        tempMatrix4.makeRotationFromQuaternion(tempRotation);\n        tempMatrix3.setFromMatrix4(tempMatrix4);\n        set3(\n          sh11,\n          tempMatrix3.elements[4],\n          -tempMatrix3.elements[7],\n          tempMatrix3.elements[1],\n        );\n        set3(\n          sh12,\n          -tempMatrix3.elements[5],\n          tempMatrix3.elements[8],\n          -tempMatrix3.elements[2],\n        );\n        set3(\n          sh13,\n          tempMatrix3.elements[3],\n          -tempMatrix3.elements[6],\n          tempMatrix3.elements[0],\n        );\n      }\n\n      const localFromHalfFloatToUint8 = (v) => {\n        return fromHalfFloatToUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      const localToUint8 = (v) => {\n        return toUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        outSphericalHarmonicsDegree = Math.min(\n          outSphericalHarmonicsDegree,\n          section.sphericalHarmonicsDegree,\n        );\n        const outSphericalHarmonicsComponentsCount =\n          getSphericalHarmonicsComponentCountForDegree(\n            outSphericalHarmonicsDegree,\n          );\n\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatSHBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel]\n            .SphericalHarmonicsOffsetBytes;\n\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatSHBase,\n        );\n\n        const shDestBase =\n          (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n        let compressionLevelForOutputConversion = transform ?\n          0 :\n          this.compressionLevel;\n        let outputConversionFunc = noop;\n        if (\n          compressionLevelForOutputConversion !== desiredOutputCompressionLevel\n        ) {\n          if (compressionLevelForOutputConversion === 1) {\n            if (desiredOutputCompressionLevel === 0) {\n              outputConversionFunc = fromHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localFromHalfFloatToUint8;\n            }\n          } else if (compressionLevelForOutputConversion === 0) {\n            if (desiredOutputCompressionLevel === 1) {\n              outputConversionFunc = toHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localToUint8;\n            }\n          }\n        }\n\n        const minShCoeff = this.minSphericalHarmonicsCoeff;\n        const maxShCoeff = this.maxSphericalHarmonicsCoeff;\n\n        if (outSphericalHarmonicsDegree >= 1) {\n          set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n          set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n          set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n          if (transform) {\n            toUncompressedFloatArray3(\n              shIn1,\n              shIn1,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            toUncompressedFloatArray3(\n              shIn2,\n              shIn2,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            toUncompressedFloatArray3(\n              shIn3,\n              shIn3,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            SplatBuffer.rotateSphericalHarmonics3(\n              shIn1,\n              shIn2,\n              shIn3,\n              sh11,\n              sh12,\n              sh13,\n              shOut1,\n              shOut2,\n              shOut3,\n            );\n          } else {\n            copy3(shIn1, shOut1);\n            copy3(shIn2, shOut2);\n            copy3(shIn3, shOut3);\n          }\n\n          setOutput3(\n            shOut1,\n            outSphericalHarmonicsArray,\n            shDestBase,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut2,\n            outSphericalHarmonicsArray,\n            shDestBase + 3,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut3,\n            outSphericalHarmonicsArray,\n            shDestBase + 6,\n            outputConversionFunc,\n          );\n\n          if (outSphericalHarmonicsDegree >= 2) {\n            set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n            set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n            set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n            set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n            set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n            if (transform) {\n              toUncompressedFloatArray3(\n                shIn1,\n                shIn1,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn2,\n                shIn2,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn3,\n                shIn3,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn4,\n                shIn4,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn5,\n                shIn5,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              SplatBuffer.rotateSphericalHarmonics5(\n                shIn1,\n                shIn2,\n                shIn3,\n                shIn4,\n                shIn5,\n                sh11,\n                sh12,\n                sh13,\n                sh21,\n                sh22,\n                sh23,\n                sh24,\n                sh25,\n                shOut1,\n                shOut2,\n                shOut3,\n                shOut4,\n                shOut5,\n              );\n            } else {\n              copy3(shIn1, shOut1);\n              copy3(shIn2, shOut2);\n              copy3(shIn3, shOut3);\n              copy3(shIn4, shOut4);\n              copy3(shIn5, shOut5);\n            }\n\n            setOutput3(\n              shOut1,\n              outSphericalHarmonicsArray,\n              shDestBase + 9,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut2,\n              outSphericalHarmonicsArray,\n              shDestBase + 12,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut3,\n              outSphericalHarmonicsArray,\n              shDestBase + 15,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut4,\n              outSphericalHarmonicsArray,\n              shDestBase + 18,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut5,\n              outSphericalHarmonicsArray,\n              shDestBase + 21,\n              outputConversionFunc,\n            );\n          }\n        }\n      }\n    };\n  })();\n\n  static dot3 = (v1, v2, v3, transformRow, outArray) => {\n    outArray[0] = outArray[1] = outArray[2] = 0;\n    const t0 = transformRow[0];\n    const t1 = transformRow[1];\n    const t2 = transformRow[2];\n    SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n    SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n    SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n  };\n\n  static addInto3 = (val1, val2, val3, destArray) => {\n    destArray[0] = destArray[0] + val1;\n    destArray[1] = destArray[1] + val2;\n    destArray[2] = destArray[2] + val3;\n  };\n\n  static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n    outArray[0] = outArray[1] = outArray[2] = 0;\n    const t0 = transformRow[0];\n    const t1 = transformRow[1];\n    const t2 = transformRow[2];\n    const t3 = transformRow[3];\n    const t4 = transformRow[4];\n    SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n    SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n    SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n    SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n  };\n\n  static rotateSphericalHarmonics3 = (\n    in1,\n    in2,\n    in3,\n    tsh11,\n    tsh12,\n    tsh13,\n    out1,\n    out2,\n    out3,\n  ) => {\n    SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n    SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n    SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n  };\n\n  static rotateSphericalHarmonics5 = (\n    in1,\n    in2,\n    in3,\n    in4,\n    in5,\n    tsh11,\n    tsh12,\n    tsh13,\n    tsh21,\n    tsh22,\n    tsh23,\n    tsh24,\n    tsh25,\n    out1,\n    out2,\n    out3,\n    out4,\n    out5,\n  ) => {\n    const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n    const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n    const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n    const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n    const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n    tsh21[0] =\n      kSqrt0104 *\n      (tsh13[2] * tsh11[0] +\n        tsh13[0] * tsh11[2] +\n        (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n    tsh21[1] = tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0];\n    tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n    tsh21[3] = tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2];\n    tsh21[4] =\n      kSqrt0104 *\n      (tsh13[2] * tsh11[2] -\n        tsh13[0] * tsh11[0] +\n        (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n    tsh22[0] =\n      kSqrt0104 *\n      (tsh12[2] * tsh11[0] +\n        tsh12[0] * tsh11[2] +\n        (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n    tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n    tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n    tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n    tsh22[4] =\n      kSqrt0104 *\n      (tsh12[2] * tsh11[2] -\n        tsh12[0] * tsh11[0] +\n        (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n    tsh23[0] =\n      kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) +\n      -kSqrt0112 *\n        (tsh13[2] * tsh13[0] +\n          tsh13[0] * tsh13[2] +\n          (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n    tsh23[1] =\n      kSqrt0403 * tsh12[1] * tsh12[0] +\n      -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n    tsh23[2] =\n      tsh12[1] * tsh12[1] +\n      -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n    tsh23[3] =\n      kSqrt0403 * tsh12[1] * tsh12[2] +\n      -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n    tsh23[4] =\n      kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) +\n      -kSqrt0112 *\n        (tsh13[2] * tsh13[2] -\n          tsh13[0] * tsh13[0] +\n          (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n    tsh24[0] =\n      kSqrt0104 *\n      (tsh12[2] * tsh13[0] +\n        tsh12[0] * tsh13[2] +\n        (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n    tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n    tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n    tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n    tsh24[4] =\n      kSqrt0104 *\n      (tsh12[2] * tsh13[2] -\n        tsh12[0] * tsh13[0] +\n        (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n    tsh25[0] =\n      kSqrt0104 *\n      (tsh13[2] * tsh13[0] +\n        tsh13[0] * tsh13[2] -\n        (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n    tsh25[1] = tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0];\n    tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n    tsh25[3] = tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2];\n    tsh25[4] =\n      kSqrt0104 *\n      (tsh13[2] * tsh13[2] -\n        tsh13[0] * tsh13[0] -\n        (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n  };\n\n  static parseHeader(buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const versionMajor = headerArrayUint8[0];\n    const versionMinor = headerArrayUint8[1];\n    const maxSectionCount = headerArrayUint32[1];\n    const sectionCount = headerArrayUint32[2];\n    const maxSplatCount = headerArrayUint32[3];\n    const splatCount = headerArrayUint32[4];\n    const compressionLevel = headerArrayUint16[10];\n    const sceneCenter = new THREE.Vector3(\n      headerArrayFloat32[6],\n      headerArrayFloat32[7],\n      headerArrayFloat32[8],\n    );\n\n    const minSphericalHarmonicsCoeff =\n      headerArrayFloat32[9] ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    const maxSphericalHarmonicsCoeff =\n      headerArrayFloat32[10] ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    return {\n      versionMajor,\n      versionMinor,\n      maxSectionCount,\n      sectionCount,\n      maxSplatCount,\n      splatCount,\n      compressionLevel,\n      sceneCenter,\n      minSphericalHarmonicsCoeff,\n      maxSphericalHarmonicsCoeff,\n    };\n  }\n\n  static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint32[2] = sectionCount;\n    headerArrayUint32[4] = splatCount;\n  }\n\n  static writeHeaderToBuffer(header, buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint8[0] = header.versionMajor;\n    headerArrayUint8[1] = header.versionMinor;\n    headerArrayUint8[2] = 0; // unused for now\n    headerArrayUint8[3] = 0; // unused for now\n    headerArrayUint32[1] = header.maxSectionCount;\n    headerArrayUint32[2] = header.sectionCount;\n    headerArrayUint32[3] = header.maxSplatCount;\n    headerArrayUint32[4] = header.splatCount;\n    headerArrayUint16[10] = header.compressionLevel;\n    headerArrayFloat32[6] = header.sceneCenter.x;\n    headerArrayFloat32[7] = header.sceneCenter.y;\n    headerArrayFloat32[8] = header.sceneCenter.z;\n    headerArrayFloat32[9] =\n      header.minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    headerArrayFloat32[10] =\n      header.maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n  }\n\n  static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n    const compressionLevel = header.compressionLevel;\n\n    const maxSectionCount = header.maxSectionCount;\n    const sectionHeaderArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 2,\n    );\n    const sectionHeaderArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n    const sectionHeaderArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n\n    const sectionHeaders = [];\n    let sectionHeaderBase = 0;\n    let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n    let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n    let sectionBase =\n      SplatBuffer.HeaderSizeBytes +\n      header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n    let splatCountOffset = 0;\n    for (let i = 0; i < maxSectionCount; i++) {\n      const maxSplatCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n      const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n      const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n      const bucketBlockSize =\n        sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n      const halfBucketBlockSize = bucketBlockSize / 2.0;\n      const bucketStorageSizeBytes =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n      const compressionScaleRange =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n        SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n      const fullBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n      const partiallyFilledBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketsStorageSizeBytes =\n        bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n      const sphericalHarmonicsDegree =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n      const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n        compressionLevel,\n        sphericalHarmonicsDegree,\n      );\n\n      const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n      const storageSizeBytes =\n        splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n      const sectionHeader = {\n        bytesPerSplat: bytesPerSplat,\n        splatCountOffset: splatCountOffset,\n        splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n        maxSplatCount: maxSplatCount,\n        bucketSize: bucketSize,\n        bucketCount: bucketCount,\n        bucketBlockSize: bucketBlockSize,\n        halfBucketBlockSize: halfBucketBlockSize,\n        bucketStorageSizeBytes: bucketStorageSizeBytes,\n        bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n        splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n        storageSizeBytes: storageSizeBytes,\n        compressionScaleRange: compressionScaleRange,\n        compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n        base: sectionBase,\n        bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n        dataBase: sectionBase + bucketsStorageSizeBytes,\n        fullBucketCount: fullBucketCount,\n        partiallyFilledBucketCount: partiallyFilledBucketCount,\n        sphericalHarmonicsDegree: sphericalHarmonicsDegree,\n      };\n      sectionHeaders[i] = sectionHeader;\n      sectionBase += storageSizeBytes;\n      sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n      sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n      sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n      splatCountOffset += maxSplatCount;\n    }\n\n    return sectionHeaders;\n  }\n\n  static writeSectionHeaderToBuffer(\n    sectionHeader,\n    compressionLevel,\n    buffer,\n    offset = 0,\n  ) {\n    const sectionHeadeArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 2,\n    );\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    const sectionHeadeArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n\n    sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n    sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n    sectionHeadeArrayUint32[2] =\n      compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n    sectionHeadeArrayUint32[3] =\n      compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n    sectionHeadeArrayFloat32[4] =\n      compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n    sectionHeadeArrayUint16[10] =\n      compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n    sectionHeadeArrayUint32[6] =\n      compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n    sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n    sectionHeadeArrayUint32[8] =\n      compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n    sectionHeadeArrayUint32[9] =\n      compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n  }\n\n  static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    sectionHeadeArrayUint32[0] = splatCount;\n  }\n\n  constructFromBuffer(bufferData, secLoadedCountsToMax) {\n    this.bufferData = bufferData;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSectionMap = [];\n\n    const header = SplatBuffer.parseHeader(this.bufferData);\n    this.versionMajor = header.versionMajor;\n    this.versionMinor = header.versionMinor;\n    this.maxSectionCount = header.maxSectionCount;\n    this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n    this.maxSplatCount = header.maxSplatCount;\n    this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n    this.compressionLevel = header.compressionLevel;\n    this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n    this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\n    this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\n\n    this.sections = SplatBuffer.parseSectionHeaders(\n      header,\n      this.bufferData,\n      SplatBuffer.HeaderSizeBytes,\n      secLoadedCountsToMax,\n    );\n\n    this.linkBufferArrays();\n    this.buildMaps();\n  }\n\n  static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n    const bytesPerCenter =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n    const bytesPerScale =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n    const bytesPerRotation =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n    const bytesPerColor =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n    const sphericalHarmonicsComponentsPerSplat =\n      getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n    const sphericalHarmonicsBytesPerSplat =\n      SplatBuffer.CompressionLevels[compressionLevel]\n        .BytesPerSphericalHarmonicsComponent *\n      sphericalHarmonicsComponentsPerSplat;\n    const bytesPerSplat =\n      bytesPerCenter +\n      bytesPerScale +\n      bytesPerRotation +\n      bytesPerColor +\n      sphericalHarmonicsBytesPerSplat;\n    return {\n      bytesPerCenter,\n      bytesPerScale,\n      bytesPerRotation,\n      bytesPerColor,\n      sphericalHarmonicsComponentsPerSplat,\n      sphericalHarmonicsBytesPerSplat,\n      bytesPerSplat,\n    };\n  }\n\n  linkBufferArrays() {\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      section.bucketArray = new Float32Array(\n        this.bufferData,\n        section.bucketsBase,\n        section.bucketCount * SplatBuffer.BucketStorageSizeFloats,\n      );\n      if (section.partiallyFilledBucketCount > 0) {\n        section.partiallyFilledBucketLengths = new Uint32Array(\n          this.bufferData,\n          section.base,\n          section.partiallyFilledBucketCount,\n        );\n      }\n    }\n  }\n\n  buildMaps() {\n    let cumulativeSplatCount = 0;\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      for (let j = 0; j < section.maxSplatCount; j++) {\n        const globalSplatIndex = cumulativeSplatCount + j;\n        this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n        this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n      }\n      cumulativeSplatCount += section.maxSplatCount;\n    }\n  }\n\n  updateLoadedCounts(newSectionCount, newSplatCount) {\n    SplatBuffer.writeHeaderCountsToBuffer(\n      newSectionCount,\n      newSplatCount,\n      this.bufferData,\n    );\n    this.sectionCount = newSectionCount;\n    this.splatCount = newSplatCount;\n  }\n\n  updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n    const sectionHeaderOffset =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n    SplatBuffer.writeSectionHeaderSplatCountToBuffer(\n      newSplatCount,\n      this.bufferData,\n      sectionHeaderOffset,\n    );\n    this.sections[sectionIndex].splatCount = newSplatCount;\n  }\n\n  static writeSplatDataToSectionBuffer = (function() {\n    const tempCenterBuffer = new ArrayBuffer(12);\n    const tempScaleBuffer = new ArrayBuffer(12);\n    const tempRotationBuffer = new ArrayBuffer(16);\n    const tempColorBuffer = new ArrayBuffer(4);\n    const tempSHBuffer = new ArrayBuffer(256);\n    const tempRot = new THREE.Quaternion();\n    const tempScale = new THREE.Vector3();\n    const bucketCenterDelta = new THREE.Vector3();\n\n    const {\n      X: OFFSET_X,\n      Y: OFFSET_Y,\n      Z: OFFSET_Z,\n      SCALE0: OFFSET_SCALE0,\n      SCALE1: OFFSET_SCALE1,\n      SCALE2: OFFSET_SCALE2,\n      ROTATION0: OFFSET_ROT0,\n      ROTATION1: OFFSET_ROT1,\n      ROTATION2: OFFSET_ROT2,\n      ROTATION3: OFFSET_ROT3,\n      FDC0: OFFSET_FDC0,\n      FDC1: OFFSET_FDC1,\n      FDC2: OFFSET_FDC2,\n      OPACITY: OFFSET_OPACITY,\n      FRC0: OFFSET_FRC0,\n      FRC9: OFFSET_FRC9,\n    } = UncompressedSplatArray.OFFSET;\n\n    const compressPositionOffset = (\n      v,\n      compressionScaleFactor,\n      compressionScaleRange,\n    ) => {\n      const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n      v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\n      return clamp(v, 0, doubleCompressionScaleRange);\n    };\n\n    return function(\n      targetSplat,\n      sectionBuffer,\n      bufferOffset,\n      compressionLevel,\n      sphericalHarmonicsDegree,\n      bucketCenter,\n      compressionScaleFactor,\n      compressionScaleRange,\n      minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\n      maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange,\n    ) {\n      const sphericalHarmonicsComponentsPerSplat =\n        getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n      const bytesPerCenter =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n      const bytesPerScale =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n      const bytesPerRotation =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n      const bytesPerColor =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n\n      const centerBase = bufferOffset;\n      const scaleBase = centerBase + bytesPerCenter;\n      const rotationBase = scaleBase + bytesPerScale;\n      const colorBase = rotationBase + bytesPerRotation;\n      const sphericalHarmonicsBase = colorBase + bytesPerColor;\n\n      if (targetSplat[OFFSET_ROT0] !== undefined) {\n        tempRot.set(\n          targetSplat[OFFSET_ROT0],\n          targetSplat[OFFSET_ROT1],\n          targetSplat[OFFSET_ROT2],\n          targetSplat[OFFSET_ROT3],\n        );\n        tempRot.normalize();\n      } else {\n        tempRot.set(1.0, 0.0, 0.0, 0.0);\n      }\n\n      if (targetSplat[OFFSET_SCALE0] !== undefined) {\n        tempScale.set(\n          targetSplat[OFFSET_SCALE0] || 0,\n          targetSplat[OFFSET_SCALE1] || 0,\n          targetSplat[OFFSET_SCALE2] || 0,\n        );\n      } else {\n        tempScale.set(0, 0, 0);\n      }\n\n      if (compressionLevel === 0) {\n        const center = new Float32Array(\n          sectionBuffer,\n          centerBase,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Float32Array(\n          sectionBuffer,\n          rotationBase,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Float32Array(\n          sectionBuffer,\n          scaleBase,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\n        scale.set([tempScale.x, tempScale.y, tempScale.z]);\n        center.set([\n          targetSplat[OFFSET_X],\n          targetSplat[OFFSET_Y],\n          targetSplat[OFFSET_Z],\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const shOut = new Float32Array(\n            sectionBuffer,\n            sphericalHarmonicsBase,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\n            }\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\n              }\n            }\n          }\n        }\n      } else {\n        const center = new Uint16Array(\n          tempCenterBuffer,\n          0,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Uint16Array(\n          tempRotationBuffer,\n          0,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Uint16Array(\n          tempScaleBuffer,\n          0,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([\n          toHalfFloat(tempRot.x),\n          toHalfFloat(tempRot.y),\n          toHalfFloat(tempRot.z),\n          toHalfFloat(tempRot.w),\n        ]);\n        scale.set([\n          toHalfFloat(tempScale.x),\n          toHalfFloat(tempScale.y),\n          toHalfFloat(tempScale.z),\n        ]);\n\n        bucketCenterDelta\n          .set(\n            targetSplat[OFFSET_X],\n            targetSplat[OFFSET_Y],\n            targetSplat[OFFSET_Z],\n          )\n          .sub(bucketCenter);\n        bucketCenterDelta.x = compressPositionOffset(\n          bucketCenterDelta.x,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.y = compressPositionOffset(\n          bucketCenterDelta.y,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.z = compressPositionOffset(\n          bucketCenterDelta.z,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        center.set([\n          bucketCenterDelta.x,\n          bucketCenterDelta.y,\n          bucketCenterDelta.z,\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n          const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n          const shOut = new SHArrayType(\n            tempSHBuffer,\n            0,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\n              shOut[s] =\n                compressionLevel === 1 ?\n                  toHalfFloat(srcVal) :\n                  toUint8(\n                      srcVal,\n                      minSphericalHarmonicsCoeff,\n                      maxSphericalHarmonicsCoeff,\n                    );\n            }\n            const degree1ByteCount = 9 * bytesPerSHComponent;\n            copyBetweenBuffers(\n              shOut.buffer,\n              0,\n              sectionBuffer,\n              sphericalHarmonicsBase,\n              degree1ByteCount,\n            );\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\n                shOut[s + 9] =\n                  compressionLevel === 1 ?\n                    toHalfFloat(srcVal) :\n                    toUint8(\n                        srcVal,\n                        minSphericalHarmonicsCoeff,\n                        maxSphericalHarmonicsCoeff,\n                      );\n              }\n              copyBetweenBuffers(\n                shOut.buffer,\n                degree1ByteCount,\n                sectionBuffer,\n                sphericalHarmonicsBase + degree1ByteCount,\n                15 * bytesPerSHComponent,\n              );\n            }\n          }\n        }\n\n        copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n        copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n        copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n      }\n\n      const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n      rgba.set([\n        targetSplat[OFFSET_FDC0] || 0,\n        targetSplat[OFFSET_FDC1] || 0,\n        targetSplat[OFFSET_FDC2] || 0,\n      ]);\n      rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\n\n      copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n    };\n  })();\n\n  static generateFromUncompressedSplatArrays(\n    splatArrays,\n    minimumAlpha,\n    compressionLevel,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    options = [],\n  ) {\n    let shDegree = 0;\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\n    }\n\n    let minSphericalHarmonicsCoeff;\n    let maxSphericalHarmonicsCoeff;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      for (let i = 0; i < splatArray.splats.length; i++) {\n        const splat = splatArray.splats[i];\n        for (\n          let sc = UncompressedSplatArray.OFFSET.FRC0;\n          sc < UncompressedSplatArray.OFFSET.FRC23 && sc < splat.length;\n          sc++\n        ) {\n          if (\n            !minSphericalHarmonicsCoeff ||\n            splat[sc] < minSphericalHarmonicsCoeff\n          ) {\n            minSphericalHarmonicsCoeff = splat[sc];\n          }\n          if (\n            !maxSphericalHarmonicsCoeff ||\n            splat[sc] > maxSphericalHarmonicsCoeff\n          ) {\n            maxSphericalHarmonicsCoeff = splat[sc];\n          }\n        }\n      }\n    }\n\n    minSphericalHarmonicsCoeff =\n      minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    maxSphericalHarmonicsCoeff =\n      maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n      compressionLevel,\n      shDegree,\n    );\n    const compressionScaleRange =\n      SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n    const sectionBuffers = [];\n    const sectionHeaderBuffers = [];\n    let totalSplatCount = 0;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      const validSplats = new UncompressedSplatArray(shDegree);\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        const targetSplat = splatArray.splats[i];\n        if (\n          (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >=\n          minimumAlpha\n        ) {\n          validSplats.addSplat(targetSplat);\n        }\n      }\n\n      const sectionOptions = options[sa] || {};\n      const sectionBlockSize =\n        (sectionOptions.blockSizeFactor || 1) *\n        (blockSize || SplatBuffer.BucketBlockSize);\n      const sectionBucketSize = Math.ceil(\n        (sectionOptions.bucketSizeFactor || 1) *\n          (bucketSize || SplatBuffer.BucketSize),\n      );\n\n      const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(\n        validSplats,\n        sectionBlockSize,\n        sectionBucketSize,\n      );\n      const fullBucketCount = bucketInfo.fullBuckets.length;\n      const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map(\n        (bucket) => bucket.splats.length,\n      );\n      const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n      const buckets = [\n        ...bucketInfo.fullBuckets,\n        ...bucketInfo.partiallyFullBuckets,\n      ];\n\n      const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n      const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketDataBytes =\n        compressionLevel >= 1 ?\n          buckets.length * SplatBuffer.BucketStorageSizeBytes +\n            bucketMetaDataSizeBytes :\n          0;\n      const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n      const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n      const compressionScaleFactor =\n        compressionScaleRange / (sectionBlockSize * 0.5);\n      const bucketCenter = new THREE.Vector3();\n\n      let outSplatCount = 0;\n      for (let b = 0; b < buckets.length; b++) {\n        const bucket = buckets[b];\n        bucketCenter.fromArray(bucket.center);\n        for (let i = 0; i < bucket.splats.length; i++) {\n          let row = bucket.splats[i];\n          const targetSplat = validSplats.splats[row];\n          const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\n          SplatBuffer.writeSplatDataToSectionBuffer(\n            targetSplat,\n            sectionBuffer,\n            bufferOffset,\n            compressionLevel,\n            shDegree,\n            bucketCenter,\n            compressionScaleFactor,\n            compressionScaleRange,\n            minSphericalHarmonicsCoeff,\n            maxSphericalHarmonicsCoeff,\n          );\n          outSplatCount++;\n        }\n      }\n      totalSplatCount += outSplatCount;\n\n      if (compressionLevel >= 1) {\n        const bucketMetaDataArray = new Uint32Array(\n          sectionBuffer,\n          0,\n          partiallyFullBucketLengths.length * 4,\n        );\n        for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb++) {\n          bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n        }\n        const bucketArray = new Float32Array(\n          sectionBuffer,\n          bucketMetaDataSizeBytes,\n          buckets.length * SplatBuffer.BucketStorageSizeFloats,\n        );\n        for (let b = 0; b < buckets.length; b++) {\n          const bucket = buckets[b];\n          const base = b * 3;\n          bucketArray[base] = bucket.center[0];\n          bucketArray[base + 1] = bucket.center[1];\n          bucketArray[base + 2] = bucket.center[2];\n        }\n      }\n      sectionBuffers.push(sectionBuffer);\n\n      const sectionHeaderBuffer = new ArrayBuffer(\n        SplatBuffer.SectionHeaderSizeBytes,\n      );\n      SplatBuffer.writeSectionHeaderToBuffer(\n        {\n          maxSplatCount: outSplatCount,\n          splatCount: outSplatCount,\n          bucketSize: sectionBucketSize,\n          bucketCount: buckets.length,\n          bucketBlockSize: sectionBlockSize,\n          compressionScaleRange: compressionScaleRange,\n          storageSizeBytes: sectionSizeBytes,\n          fullBucketCount: fullBucketCount,\n          partiallyFilledBucketCount: partiallyFilledBucketCount,\n          sphericalHarmonicsDegree: shDegree,\n        },\n        compressionLevel,\n        sectionHeaderBuffer,\n        0,\n      );\n      sectionHeaderBuffers.push(sectionHeaderBuffer);\n    }\n\n    let sectionsCumulativeSizeBytes = 0;\n    for (let sectionBuffer of sectionBuffers) {\n      sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n    }\n    const unifiedBufferSize =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length +\n      sectionsCumulativeSizeBytes;\n    const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n    SplatBuffer.writeHeaderToBuffer(\n      {\n        versionMajor: 0,\n        versionMinor: 1,\n        maxSectionCount: sectionBuffers.length,\n        sectionCount: sectionBuffers.length,\n        maxSplatCount: totalSplatCount,\n        splatCount: totalSplatCount,\n        compressionLevel: compressionLevel,\n        sceneCenter: sceneCenter,\n        minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\n        maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff,\n      },\n      unifiedBuffer,\n    );\n\n    let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n    for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        SplatBuffer.SectionHeaderSizeBytes,\n      ).set(new Uint8Array(sectionHeaderBuffer));\n      currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n    }\n\n    for (let sectionBuffer of sectionBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        sectionBuffer.byteLength,\n      ).set(new Uint8Array(sectionBuffer));\n      currentUnifiedBase += sectionBuffer.byteLength;\n    }\n\n    const splatBuffer = new SplatBuffer(unifiedBuffer);\n    return splatBuffer;\n  }\n\n  static computeBucketsForUncompressedSplatArray(\n    splatArray,\n    blockSize,\n    bucketSize,\n  ) {\n    let splatCount = splatArray.splatCount;\n    const halfBlockSize = blockSize / 2.0;\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      if (i === 0 || center[0] < min.x) min.x = center[0];\n      if (i === 0 || center[0] > max.x) max.x = center[0];\n      if (i === 0 || center[1] < min.y) min.y = center[1];\n      if (i === 0 || center[1] > max.y) max.y = center[1];\n      if (i === 0 || center[2] < min.z) min.z = center[2];\n      if (i === 0 || center[2] > max.z) max.z = center[2];\n    }\n\n    const dimensions = new THREE.Vector3().copy(max).sub(min);\n    const yBlocks = Math.ceil(dimensions.y / blockSize);\n    const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n    const blockCenter = new THREE.Vector3();\n    const fullBuckets = [];\n    const partiallyFullBuckets = {};\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      const xBlock = Math.floor((center[0] - min.x) / blockSize);\n      const yBlock = Math.floor((center[1] - min.y) / blockSize);\n      const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n      blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n      blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n      blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n      const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n      let bucket = partiallyFullBuckets[bucketId];\n      if (!bucket) {\n        partiallyFullBuckets[bucketId] = bucket = {\n          splats: [],\n          center: blockCenter.toArray(),\n        };\n      }\n\n      bucket.splats.push(i);\n      if (bucket.splats.length >= bucketSize) {\n        fullBuckets.push(bucket);\n        partiallyFullBuckets[bucketId] = null;\n      }\n    }\n\n    const partiallyFullBucketArray = [];\n    for (let bucketId in partiallyFullBuckets) {\n      if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n        const bucket = partiallyFullBuckets[bucketId];\n        if (bucket) {\n          partiallyFullBucketArray.push(bucket);\n        }\n      }\n    }\n\n    return {\n      fullBuckets: fullBuckets,\n      partiallyFullBuckets: partiallyFullBucketArray,\n    };\n  }\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([\n  10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10,\n]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)?.storage;\n};\n\nexport class PlayCanvasCompressedPlyParser {\n  static decodeHeaderText(headerText) {\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText\n      .split('\\n')\n      .filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0,\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`,\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') {\n            bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          }\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes,\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n          break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`,\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n      bytesPerSplat: bytesPerSplat,\n      headerSizeBytes:\n        headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n      sphericalHarmonicsDegree: 0,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (\n      buf.length >= HeaderMagicBytes.length &&\n      !startsWith(buf, HeaderMagicBytes)\n    ) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset),\n    );\n\n    const { chunkElement, vertexElement, bytesPerSplat } =\n      PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      headerSizeBytes: endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      bytesPerSplat: bytesPerSplat,\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n    };\n  }\n\n  static readElementData(\n    element,\n    readBuffer,\n    readOffset,\n    fromIndex,\n    toIndex,\n    propertyFilter = null,\n  ) {\n    let dataView =\n      readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes =\n          StorageType.BYTES_PER_ELEMENT * element.count;\n        if (\n          (!property.storage ||\n            property.storage.byteLength < requiredStorageSizeBytes) &&\n          (!propertyFilter || propertyFilter(property.name))\n        ) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(\n      header.chunkElement,\n      plyBuffer,\n      header.headerSizeBytes,\n      null,\n      null,\n      propertyFilter,\n    );\n    PlayCanvasCompressedPlyParser.readElementData(\n      header.vertexElement,\n      plyBuffer,\n      readIndex,\n      null,\n      null,\n      propertyFilter,\n    );\n\n    return {\n      chunkElement: header.chunkElement,\n      vertexElement: header.vertexElement,\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX,\n        maxX,\n        minY,\n        maxY,\n        minZ,\n        maxZ,\n      },\n      scaleExtremes: {\n        minScaleX,\n        maxScaleX,\n        minScaleY,\n        maxScaleY,\n        minScaleZ,\n        maxScaleZ,\n      },\n      position,\n      rotation,\n      scale,\n      color,\n    };\n  }\n\n  static decompressSplat = (function() {\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(\n      index,\n      chunkSplatIndexOffset,\n      positionArray,\n      positionExtremes,\n      scaleArray,\n      scaleExtremes,\n      rotationArray,\n      colorArray,\n      outSplat,\n    ) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(\n        positionExtremes.minX[chunkIndex],\n        positionExtremes.maxX[chunkIndex],\n        p.x,\n      );\n      outSplat[OFFSET.Y] = lerp(\n        positionExtremes.minY[chunkIndex],\n        positionExtremes.maxY[chunkIndex],\n        p.y,\n      );\n      outSplat[OFFSET.Z] = lerp(\n        positionExtremes.minZ[chunkIndex],\n        positionExtremes.maxZ[chunkIndex],\n        p.z,\n      );\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleX[chunkIndex],\n          scaleExtremes.maxScaleX[chunkIndex],\n          s.x,\n        ),\n      );\n      outSplat[OFFSET.SCALE1] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleY[chunkIndex],\n          scaleExtremes.maxScaleY[chunkIndex],\n          s.y,\n        ),\n      );\n      outSplat[OFFSET.SCALE2] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleZ[chunkIndex],\n          scaleExtremes.maxScaleZ[chunkIndex],\n          s.z,\n        ),\n      );\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n  })();\n\n  static parseToUncompressedSplatBufferSection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    outBuffer,\n    outOffset,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      const outBase = i * outBytesPerSplat + outOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        tempSplat,\n        outBuffer,\n        outBase,\n        0,\n        0,\n      );\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    splatArray,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      const tempSplat = UncompressedSplatArray.createSplat();\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      splatArray.addSplat(tempSplat);\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } =\n      PlayCanvasCompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        0,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        newSplat,\n      );\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n}\n","export const PlyFormat = {\n  INRIAV1: 0,\n  INRIAV2: 1,\n  PlayCanvasCompressed: 2,\n};\n","import { PlyFormat } from './PlyFormat.js';\n\nconst [\n  FieldSizeIdDouble,\n  FieldSizeIdInt,\n  FieldSizeIdUInt,\n  FieldSizeIdFloat,\n  FieldSizeIdShort,\n  FieldSizeIdUShort,\n  FieldSizeIdUChar,\n] = [0, 1, 2, 3, 4, 5, 6];\n\nconst FieldSizeStringMap = {\n  double: FieldSizeIdDouble,\n  int: FieldSizeIdInt,\n  uint: FieldSizeIdUInt,\n  float: FieldSizeIdFloat,\n  short: FieldSizeIdShort,\n  ushort: FieldSizeIdUShort,\n  uchar: FieldSizeIdUChar,\n};\n\nconst FieldSize = {\n  [FieldSizeIdDouble]: 8,\n  [FieldSizeIdInt]: 4,\n  [FieldSizeIdUInt]: 4,\n  [FieldSizeIdFloat]: 4,\n  [FieldSizeIdShort]: 2,\n  [FieldSizeIdUShort]: 2,\n  [FieldSizeIdUChar]: 1,\n};\n\nexport class PlyParserUtils {\n  static HeaderEndToken = 'end_header';\n\n  constructor() {}\n\n  decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\n    const extractedLines = [];\n\n    let processingSection = false;\n    let headerEndLine = -1;\n    let vertexCount = 0;\n    let endOfHeader = false;\n    let sectionName = null;\n\n    const fieldIds = [];\n    const fieldTypes = [];\n    const allFieldNames = [];\n    const usedFieldNames = [];\n    const fieldTypesByName = {};\n\n    for (let i = headerStartLine; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (line.startsWith('element')) {\n        if (processingSection) {\n          headerEndLine--;\n          break;\n        } else {\n          processingSection = true;\n          headerStartLine = i;\n          headerEndLine = i;\n          const lineComponents = line.split(' ');\n          let validComponents = 0;\n          for (let lineComponent of lineComponents) {\n            const trimmedComponent = lineComponent.trim();\n            if (trimmedComponent.length > 0) {\n              validComponents++;\n              if (validComponents === 2) {\n                sectionName = trimmedComponent;\n              } else if (validComponents === 3) {\n                vertexCount = parseInt(trimmedComponent);\n              }\n            }\n          }\n        }\n      } else if (line.startsWith('property')) {\n        const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n        if (fieldMatch) {\n          const fieldTypeStr = fieldMatch[2];\n          const fieldName = fieldMatch[3];\n          allFieldNames.push(fieldName);\n          const fieldId = fieldNameIdMap[fieldName];\n          fieldTypesByName[fieldName] = fieldTypeStr;\n          const fieldType = FieldSizeStringMap[fieldTypeStr];\n          if (fieldId !== undefined) {\n            usedFieldNames.push(fieldName);\n            fieldIds.push(fieldId);\n            fieldTypes[fieldId] = fieldType;\n          }\n        }\n      }\n      if (line === PlyParserUtils.HeaderEndToken) {\n        endOfHeader = true;\n        break;\n      }\n      if (processingSection) {\n        extractedLines.push(line);\n        headerEndLine++;\n      }\n    }\n\n    const fieldOffsets = [];\n    let bytesPerVertex = 0;\n    for (let fieldName of allFieldNames) {\n      const fieldType = fieldTypesByName[fieldName];\n      if (fieldTypesByName.hasOwnProperty(fieldName)) {\n        const fieldId = fieldNameIdMap[fieldName];\n        if (fieldId !== undefined) {\n          fieldOffsets[fieldId] = bytesPerVertex;\n        }\n      }\n      bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\n    }\n\n    const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(\n      allFieldNames,\n      fieldNameIdMap,\n    );\n\n    return {\n      headerLines: extractedLines,\n      headerStartLine: headerStartLine,\n      headerEndLine: headerEndLine,\n      fieldTypes: fieldTypes,\n      fieldIds: fieldIds,\n      fieldOffsets: fieldOffsets,\n      bytesPerVertex: bytesPerVertex,\n      vertexCount: vertexCount,\n      dataSizeBytes: bytesPerVertex * vertexCount,\n      endOfHeader: endOfHeader,\n      sectionName: sectionName,\n      sphericalHarmonicsDegree: sphericalHarmonics.degree,\n      sphericalHarmonicsCoefficientsPerChannel:\n        sphericalHarmonics.coefficientsPerChannel,\n      sphericalHarmonicsDegree1Fields: sphericalHarmonics.degree1Fields,\n      sphericalHarmonicsDegree2Fields: sphericalHarmonics.degree2Fields,\n    };\n  }\n\n  decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\n    let sphericalHarmonicsFieldCount = 0;\n    let coefficientsPerChannel = 0;\n    for (let fieldName of fieldNames) {\n      if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n    }\n    coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n    let degree = 0;\n    if (coefficientsPerChannel >= 3) degree = 1;\n    if (coefficientsPerChannel >= 8) degree = 2;\n\n    let degree1Fields = [];\n    let degree2Fields = [];\n\n    for (let rgb = 0; rgb < 3; rgb++) {\n      if (degree >= 1) {\n        for (let i = 0; i < 3; i++) {\n          degree1Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)],\n          );\n        }\n      }\n      if (degree >= 2) {\n        for (let i = 0; i < 5; i++) {\n          degree2Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)],\n          );\n        }\n      }\n    }\n\n    return {\n      degree: degree,\n      coefficientsPerChannel: coefficientsPerChannel,\n      degree1Fields: degree1Fields,\n      degree2Fields: degree2Fields,\n    };\n  }\n\n  static getHeaderSectionNames(headerLines) {\n    const sectionNames = [];\n    for (let headerLine of headerLines) {\n      if (headerLine.startsWith('element')) {\n        const lineComponents = headerLine.split(' ');\n        let validComponents = 0;\n        for (let lineComponent of lineComponents) {\n          const trimmedComponent = lineComponent.trim();\n          if (trimmedComponent.length > 0) {\n            validComponents++;\n            if (validComponents === 2) {\n              sectionNames.push(trimmedComponent);\n            }\n          }\n        }\n      }\n    }\n    return sectionNames;\n  }\n\n  static checkTextForEndHeader(endHeaderTestText) {\n    if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\n      return true;\n    }\n    return false;\n  }\n\n  static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n    const endHeaderTestChunk = new Uint8Array(\n      buffer,\n      Math.max(0, searchOfset - chunkSize),\n      chunkSize,\n    );\n    const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n    return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\n  }\n\n  static extractHeaderFromBufferToText(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  readHeaderFromBuffer(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  static convertHeaderTextToLines(headerText) {\n    const headerLines = headerText.split('\\n');\n    const prunedLines = [];\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      prunedLines.push(line);\n      if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return prunedLines;\n  }\n\n  static determineHeaderFormatFromHeaderText(headertText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\n    let format = PlyFormat.INRIAV1;\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (\n        line.startsWith('element chunk') ||\n        line.match(/[A-Za-z]*packed_[A-Za-z]*/)\n      ) {\n        format = PlyFormat.PlayCanvasCompressed;\n      } else if (line.startsWith('element codebook_centers')) {\n        format = PlyFormat.INRIAV2;\n      } else if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return format;\n  }\n\n  static determineHeaderFormatFromPlyBuffer(plyBuffer) {\n    const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\n    return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\n  }\n\n  static readVertex(\n    vertexData,\n    header,\n    row,\n    dataOffset,\n    fieldsToRead,\n    rawVertex,\n    normalize = true,\n  ) {\n    const offset = row * header.bytesPerVertex + dataOffset;\n    const fieldOffsets = header.fieldOffsets;\n    const fieldTypes = header.fieldTypes;\n    for (let fieldId of fieldsToRead) {\n      const fieldType = fieldTypes[fieldId];\n      if (fieldType === FieldSizeIdFloat) {\n        rawVertex[fieldId] = vertexData.getFloat32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdShort) {\n        rawVertex[fieldId] = vertexData.getInt16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUShort) {\n        rawVertex[fieldId] = vertexData.getUint16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdInt) {\n        rawVertex[fieldId] = vertexData.getInt32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUInt) {\n        rawVertex[fieldId] = vertexData.getUint32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUChar) {\n        if (normalize) {\n          rawVertex[fieldId] =\n            vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\n        } else {\n          rawVertex[fieldId] = vertexData.getUint8(\n            offset + fieldOffsets[fieldId],\n          );\n        }\n      }\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { clamp } from '../../Util.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nconst BaseFieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n];\n\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\n\nconst [\n  SCALE_0,\n  SCALE_1,\n  SCALE_2,\n  ROT_0,\n  ROT_1,\n  ROT_2,\n  ROT_3,\n  X,\n  Y,\n  Z,\n  F_DC_0,\n  F_DC_1,\n  F_DC_2,\n  OPACITY,\n  RED,\n  GREEN,\n  BLUE,\n  F_REST_0,\n] = BaseFieldsToReadIndexes;\n\nexport class INRIAV1PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeHeaderLines(headerLines) {\n    let shLineCount = 0;\n    headerLines.forEach((line) => {\n      if (line.includes('f_rest_')) shLineCount++;\n    });\n\n    let shFieldsToReadCount = 0;\n    if (shLineCount >= 45) {\n      shFieldsToReadCount = 45;\n    } else if (shLineCount >= 24) {\n      shFieldsToReadCount = 24;\n    } else if (shLineCount >= 9) {\n      shFieldsToReadCount = 9;\n    }\n\n    const shFieldIndexesToMap = Array.from(\n      Array(Math.max(shFieldsToReadCount - 1, 0)),\n    );\n    let shRemainingFieldNamesToRead = shFieldIndexesToMap.map(\n      (element, index) => `f_rest_${index + 1}`,\n    );\n\n    const fieldNamesToRead = [\n      ...BaseFieldNamesToRead,\n      ...shRemainingFieldNamesToRead,\n    ];\n    const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\n\n    const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\n      acc[fieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n    const header = this.plyParserutils.decodeSectionHeader(\n      headerLines,\n      fieldNameIdMap,\n      0,\n    );\n    header.splatCount = header.vertexCount;\n    header.bytesPerSplat = header.bytesPerVertex;\n    header.fieldsToReadIndexes = fieldsToReadIndexes;\n    return header;\n  }\n\n  decodeHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    const header = this.decodeHeaderLines(headerLines);\n    header.headerText = headerText;\n    header.headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    return header;\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderText(headerText);\n  }\n\n  findSplatData(plyBuffer, header) {\n    return new DataView(plyBuffer, header.headerSizeBytes);\n  }\n\n  parseToUncompressedSplatBufferSection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    toBuffer,\n    toOffset,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n        outSphericalHarmonicsDegree\n      ].BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      const outBase = i * outBytesPerSplat + toOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        parsedSplat,\n        toBuffer,\n        outBase,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n\n  parseToUncompressedSplatArraySection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    splatArray,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(parsedSplat);\n    }\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV1PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\n        newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\n        newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[F_DC_0] !== undefined) {\n        const SH_C0 = 0.28209479177387814;\n        newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\n        newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\n        newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\n      } else if (rawSplat[RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] =\n          (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (outSphericalHarmonicsDegree >= 1) {\n        if (rawSplat[F_REST_0] !== undefined) {\n          for (let i = 0; i < 9; i++) {\n            newSplat[OFFSET_FRC[i]] =\n              rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\n          }\n          if (outSphericalHarmonicsDegree >= 2) {\n            for (let i = 0; i < 15; i++) {\n              newSplat[OFFSET_FRC[9 + i]] =\n                rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\n            }\n          }\n        }\n      }\n\n      tempRotation.set(\n        rawSplat[ROT_0],\n        rawSplat[ROT_1],\n        rawSplat[ROT_2],\n        rawSplat[ROT_3],\n      );\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = rawSplat[X];\n      newSplat[OFFSET_Y] = rawSplat[Y];\n      newSplat[OFFSET_Z] = rawSplat[Z];\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      header.fieldsToReadIndexes,\n      rawSplat,\n      true,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const header = this.decodeHeaderFromBuffer(plyBuffer);\n    const splatCount = header.splatCount;\n    const splatData = this.findSplatData(plyBuffer, header);\n    const splatArray = this.decodeSectionSplatData(\n      splatData,\n      splatCount,\n      header,\n      outSphericalHarmonicsDegree,\n    );\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { clamp } from '../../Util.js';\n\nconst CodeBookEntryNamesToRead = [\n  'features_dc',\n  'features_rest_0',\n  'features_rest_1',\n  'features_rest_2',\n  'features_rest_3',\n  'features_rest_4',\n  'features_rest_5',\n  'features_rest_6',\n  'features_rest_7',\n  'features_rest_8',\n  'features_rest_9',\n  'features_rest_10',\n  'features_rest_11',\n  'features_rest_12',\n  'features_rest_13',\n  'features_rest_14',\n  'opacity',\n  'scaling',\n  'rotation_re',\n  'rotation_im',\n];\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\n\nconst [\n  CB_FEATURES_DC,\n  CB_FEATURES_REST_0,\n  CB_FEATURES_REST_3,\n  CB_OPACITY,\n  CB_SCALING,\n  CB_ROTATION_RE,\n  CB_ROTATION_IM,\n] = [0, 1, 4, 16, 17, 18, 19];\n\nconst FieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n  'f_rest_1',\n  'f_rest_2',\n  'f_rest_3',\n  'f_rest_4',\n  'f_rest_5',\n  'f_rest_6',\n  'f_rest_7',\n  'f_rest_8',\n  'f_rest_9',\n  'f_rest_10',\n  'f_rest_11',\n  'f_rest_12',\n  'f_rest_13',\n  'f_rest_14',\n  'f_rest_15',\n  'f_rest_16',\n  'f_rest_17',\n  'f_rest_18',\n  'f_rest_19',\n  'f_rest_20',\n  'f_rest_21',\n  'f_rest_22',\n  'f_rest_23',\n  'f_rest_24',\n  'f_rest_25',\n  'f_rest_26',\n  'f_rest_27',\n  'f_rest_28',\n  'f_rest_29',\n  'f_rest_30',\n  'f_rest_31',\n  'f_rest_32',\n  'f_rest_33',\n  'f_rest_34',\n  'f_rest_35',\n  'f_rest_36',\n  'f_rest_37',\n  'f_rest_38',\n  'f_rest_39',\n  'f_rest_40',\n  'f_rest_41',\n  'f_rest_42',\n  'f_rest_43',\n  'f_rest_44',\n  'f_rest_45',\n];\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\n\nconst [\n  PLY_SCALE_0,\n  PLY_SCALE_1,\n  PLY_SCALE_2,\n  PLY_ROT_0,\n  PLY_ROT_1,\n  PLY_ROT_2,\n  PLY_ROT_3,\n  PLY_X,\n  PLY_Y,\n  PLY_Z,\n  PLY_F_DC_0,\n  PLY_F_DC_1,\n  PLY_F_DC_2,\n  PLY_OPACITY,\n] = FieldsToReadIndexes;\n\nconst PLY_RED = PLY_F_DC_0;\nconst PLY_GREEN = PLY_F_DC_1;\nconst PLY_BLUE = PLY_F_DC_2;\n\nconst fromHalfFloat = (hf) => {\n  const t = (31744 & hf) >> 10;\n  const a = 1023 & hf;\n  return (\n    (hf >> 15 ? -1 : 1) *\n    (t ?\n      t === 31 ?\n        a ?\n          NaN :\n          1 / 0 :\n        Math.pow(2, t - 15) * (1 + a / 1024) :\n      (a / 1024) * 6103515625e-14)\n  );\n};\n\nexport class INRIAV2PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeSectionHeadersFromHeaderLines(headerLines) {\n    const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\n      acc[FieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n\n    const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce(\n      (acc, element) => {\n        acc[CodeBookEntryNamesToRead[element]] = element;\n        return acc;\n      },\n      {},\n    );\n\n    const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\n    let codeBookSectionIndex;\n    for (let s = 0; s < sectionNames.length; s++) {\n      const sectionName = sectionNames[s];\n      if (sectionName === 'codebook_centers') {\n        codeBookSectionIndex = s;\n      }\n    }\n\n    let currentStartLine = 0;\n    let lastSectionFound = false;\n    const sectionHeaders = [];\n    let sectionIndex = 0;\n    while (!lastSectionFound) {\n      let sectionHeader;\n      if (sectionIndex === codeBookSectionIndex) {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          codeBookEntriesToReadIdMap,\n          currentStartLine,\n        );\n      } else {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          fieldNameIdMap,\n          currentStartLine,\n        );\n      }\n      lastSectionFound = sectionHeader.endOfHeader;\n      currentStartLine = sectionHeader.headerEndLine + 1;\n      if (!lastSectionFound) {\n        sectionHeader.splatCount = sectionHeader.vertexCount;\n        sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\n      }\n      sectionHeaders.push(sectionHeader);\n      sectionIndex++;\n    }\n    return sectionHeaders;\n  }\n\n  decodeSectionHeadersFromHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    return this.decodeSectionHeadersFromHeaderLines(headerLines);\n  }\n\n  getSplatCountFromSectionHeaders(sectionHeaders) {\n    let splatCount = 0;\n    for (let sectionHeader of sectionHeaders) {\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        splatCount += sectionHeader.vertexCount;\n      }\n    }\n    return splatCount;\n  }\n\n  decodeHeaderFromHeaderText(headerText) {\n    const headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\n    const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\n    return {\n      headerSizeBytes: headerSizeBytes,\n      sectionHeaders: sectionHeaders,\n      splatCount: splatCount,\n    };\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderFromHeaderText(headerText);\n  }\n\n  findVertexData(plyBuffer, header, targetSection) {\n    let byteOffset = header.headerSizeBytes;\n    for (\n      let s = 0;\n      s < targetSection && s < header.sectionHeaders.length;\n      s++\n    ) {\n      const sectionHeader = header.sectionHeaders[s];\n      byteOffset += sectionHeader.dataSizeBytes;\n    }\n    return new DataView(\n      plyBuffer,\n      byteOffset,\n      header.sectionHeaders[targetSection].dataSizeBytes,\n    );\n  }\n\n  decodeCodeBook(codeBookData, sectionHeader) {\n    const rawVertex = [];\n    const codeBook = [];\n    for (let row = 0; row < sectionHeader.vertexCount; row++) {\n      PlyParserUtils.readVertex(\n        codeBookData,\n        sectionHeader,\n        row,\n        0,\n        CodeBookEntriesToReadIndexes,\n        rawVertex,\n      );\n      for (let index of CodeBookEntriesToReadIndexes) {\n        const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\n        let codeBookPage = codeBook[codeBookElementOffset];\n        if (!codeBookPage) {\n          codeBook[codeBookElementOffset] = codeBookPage = [];\n        }\n        codeBookPage.push(rawVertex[index]);\n      }\n    }\n    for (let page = 0; page < codeBook.length; page++) {\n      const codeBookPage = codeBook[page];\n      const SH_C0 = 0.28209479177387814;\n      for (let i = 0; i < codeBookPage.length; i++) {\n        const baseValue = fromHalfFloat(codeBookPage[i]);\n        if (page === CB_OPACITY) {\n          codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\n        } else if (page === CB_FEATURES_DC) {\n          codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\n        } else if (page === CB_SCALING) {\n          codeBookPage[i] = Math.exp(baseValue);\n        } else {\n          codeBookPage[i] = baseValue;\n        }\n      }\n    }\n    return codeBook;\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    codeBook,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        codeBook,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      codeBook,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV2PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[PLY_SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\n        newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\n        newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[PLY_F_DC_0] !== undefined) {\n        newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\n        newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\n        newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\n      } else if (rawSplat[PLY_RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[PLY_OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (\n        outSphericalHarmonicsDegree >= 1 &&\n        header.sphericalHarmonicsDegree >= 1\n      ) {\n        for (let i = 0; i < 9; i++) {\n          const codeBookPage = codeBook[CB_FEATURES_REST_0 + (i % 3)];\n          newSplat[OFFSET_FRC[i]] =\n            codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\n        }\n        if (\n          outSphericalHarmonicsDegree >= 2 &&\n          header.sphericalHarmonicsDegree >= 2\n        ) {\n          for (let i = 0; i < 15; i++) {\n            const codeBookPage = codeBook[CB_FEATURES_REST_3 + (i % 5)];\n            newSplat[OFFSET_FRC[9 + i]] =\n              codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\n          }\n        }\n      }\n\n      const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\n      const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\n      const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\n      const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\n      tempRotation.set(rot0, rot1, rot2, rot3);\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\n      newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\n      newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      FieldsToReadIndexes,\n      rawSplat,\n      false,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const splatArrays = [];\n    const header = this.decodeHeaderFromBuffer(\n      plyBuffer,\n      outSphericalHarmonicsDegree,\n    );\n    let codeBook;\n\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName === 'codebook_centers') {\n        const codeBookData = this.findVertexData(plyBuffer, header, s);\n        codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\n      }\n    }\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        const splatCount = sectionHeader.vertexCount;\n        const vertexData = this.findVertexData(plyBuffer, header, s);\n        const splatArray = this.decodeSectionSplatData(\n          vertexData,\n          splatCount,\n          sectionHeader,\n          codeBook,\n          outSphericalHarmonicsDegree,\n        );\n        splatArrays.push(splatArray);\n      }\n    }\n\n    const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let splatArray of splatArrays) {\n      for (let splat of splatArray.splats) {\n        unified.addSplat(splat);\n      }\n    }\n\n    return unified;\n  }\n}\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { PlyFormat } from './PlyFormat.js';\n\nexport class PlyParser {\n  static parseToUncompressedSplatArray(\n    plyBuffer,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    const plyFormat =\n      PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\n\n    if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n      return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(\n        plyBuffer,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV1) {\n      return new INRIAV1PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV2) {\n      return new INRIAV2PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n}\n","export class DirectLoadError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","export const InternalLoadType = {\n  DirectToSplatBuffer: 0,\n  DirectToSplatArray: 1,\n  DownloadBeforeProcessing: 2,\n};\n","export const LoaderStatus = {\n  Downloading: 0,\n  Processing: 1,\n  Done: 2,\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n  constructor(\n    sectionCount,\n    sectionFilters,\n    groupingParameters,\n    partitionGenerator,\n  ) {\n    this.sectionCount = sectionCount;\n    this.sectionFilters = sectionFilters;\n    this.groupingParameters = groupingParameters;\n    this.partitionGenerator = partitionGenerator;\n  }\n\n  partitionUncompressedSplatArray(splatArray) {\n    let groupingParameters;\n    let sectionCount;\n    let sectionFilters;\n    if (this.partitionGenerator) {\n      const results = this.partitionGenerator(splatArray);\n      groupingParameters = results.groupingParameters;\n      sectionCount = results.sectionCount;\n      sectionFilters = results.sectionFilters;\n    } else {\n      groupingParameters = this.groupingParameters;\n      sectionCount = this.sectionCount;\n      sectionFilters = this.sectionFilters;\n    }\n\n    const newArrays = [];\n    for (let s = 0; s < sectionCount; s++) {\n      const sectionSplats = new UncompressedSplatArray(\n        splatArray.sphericalHarmonicsDegree,\n      );\n      const sectionFilter = sectionFilters[s];\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        if (sectionFilter(i)) {\n          sectionSplats.addSplat(splatArray.splats[i]);\n        }\n      }\n      newArrays.push(sectionSplats);\n    }\n    return {\n      splatArrays: newArrays,\n      parameters: groupingParameters,\n    };\n  }\n\n  static getStandardPartitioner(\n    partitionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const partitionGenerator = (splatArray) => {\n      const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n      const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n      const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n      if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n      const center = new THREE.Vector3();\n      const clampDistance = 0.5;\n      const clampPoint = (point) => {\n        point.x = Math.floor(point.x / clampDistance) * clampDistance;\n        point.y = Math.floor(point.y / clampDistance) * clampDistance;\n        point.z = Math.floor(point.z / clampDistance) * clampDistance;\n      };\n      splatArray.splats.forEach((splat) => {\n        center\n          .set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z])\n          .sub(sceneCenter);\n        clampPoint(center);\n        splat.centerDist = center.lengthSq();\n      });\n      splatArray.splats.sort((a, b) => {\n        let centerADist = a.centerDist;\n        let centerBDist = b.centerDist;\n        if (centerADist > centerBDist) return 1;\n        else return -1;\n      });\n\n      const sectionFilters = [];\n      const groupingParameters = [];\n      partitionSize = Math.min(splatArray.splatCount, partitionSize);\n      const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n      let currentStartSplat = 0;\n      for (let i = 0; i < patitionCount; i++) {\n        let startSplat = currentStartSplat;\n        sectionFilters.push((splatIndex) => {\n          return (\n            splatIndex >= startSplat && splatIndex < startSplat + partitionSize\n          );\n        });\n        groupingParameters.push({\n          blocksSize: blockSize,\n          bucketSize: bucketSize,\n        });\n        currentStartSplat += partitionSize;\n      }\n      return {\n        sectionCount: sectionFilters.length,\n        sectionFilters,\n        groupingParameters,\n      };\n    };\n    return new SplatPartitioner(\n      undefined,\n      undefined,\n      undefined,\n      partitionGenerator,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n  constructor(\n    splatPartitioner,\n    alphaRemovalThreshold,\n    compressionLevel,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    this.splatPartitioner = splatPartitioner;\n    this.alphaRemovalThreshold = alphaRemovalThreshold;\n    this.compressionLevel = compressionLevel;\n    this.sectionSize = sectionSize;\n    this.sceneCenter = sceneCenter ?\n      new THREE.Vector3().copy(sceneCenter) :\n      undefined;\n    this.blockSize = blockSize;\n    this.bucketSize = bucketSize;\n  }\n\n  generateFromUncompressedSplatArray(splatArray) {\n    const partitionResults =\n      this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      partitionResults.splatArrays,\n      this.alphaRemovalThreshold,\n      this.compressionLevel,\n      this.sceneCenter,\n      this.blockSize,\n      this.bucketSize,\n      partitionResults.parameters,\n    );\n  }\n\n  static getStandardGenerator(\n    alphaRemovalThreshold = 1,\n    compressionLevel = 1,\n    sectionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const splatPartitioner = SplatPartitioner.getStandardPartitioner(\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return new SplatBufferGenerator(\n      splatPartitioner,\n      alphaRemovalThreshold,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { PlyFormat } from './PlyFormat.js';\nimport { PlyParser } from './PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n  let inBytes = 0;\n  for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n  if (!buffer || buffer.byteLength < inBytes) {\n    buffer = new ArrayBuffer(inBytes);\n  }\n\n  let offset = 0;\n  for (let chunk of chunks) {\n    new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n    offset += chunk.sizeBytes;\n  }\n\n  return buffer;\n}\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class PlyLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let compressedPlyHeaderChunksBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let headerLoaded = false;\n    let readyToLoadSplatData = false;\n    let compressed = false;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesParsed = 0;\n    let numBytesDownloaded = 0;\n    let headerText = '';\n    let header = null;\n    let chunks = [];\n\n    let standardLoadUncompressedSplatArray;\n\n    const textDecoder = new TextDecoder();\n    const inriaV1PlyParser = new INRIAV1PlyParser();\n\n    const localOnProgress = (percent, percentLabel, chunkData) => {\n      const loadComplete = percent >= 100;\n\n      if (chunkData) {\n        chunks.push({\n          data: chunkData,\n          sizeBytes: chunkData.byteLength,\n          startBytes: numBytesDownloaded,\n          endBytes: numBytesDownloaded + chunkData.byteLength,\n        });\n        numBytesDownloaded += chunkData.byteLength;\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n      } else {\n        if (!headerLoaded) {\n          headerText += textDecoder.decode(chunkData);\n          if (PlyParserUtils.checkTextForEndHeader(headerText)) {\n            const plyFormat =\n              PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\n            if (plyFormat === PlyFormat.INRIAV1) {\n              header = inriaV1PlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.splatCount;\n              readyToLoadSplatData = true;\n              compressed = false;\n            } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n              header =\n                PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.vertexElement.count;\n              compressed = true;\n            } else {\n              if (loadDirectoToSplatBuffer) {\n                throw new DirectLoadError(\n                  'PlyLoader.loadFromURL() -> Selected Ply format cannot be directly loaded.',\n                );\n              } else {\n                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n                return;\n              }\n            }\n            outSphericalHarmonicsDegree = Math.min(\n              outSphericalHarmonicsDegree,\n              header.sphericalHarmonicsDegree,\n            );\n\n            const shDescriptor =\n              SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                outSphericalHarmonicsDegree\n              ];\n            const splatBufferSizeBytes =\n              splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n              SplatBuffer.writeHeaderToBuffer(\n                {\n                  versionMajor: SplatBuffer.CurrentMajorVersion,\n                  versionMinor: SplatBuffer.CurrentMinorVersion,\n                  maxSectionCount: sectionCount,\n                  sectionCount: sectionCount,\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  compressionLevel: 0,\n                  sceneCenter: new THREE.Vector3(),\n                },\n                directLoadBufferOut,\n              );\n            } else {\n              standardLoadUncompressedSplatArray = new UncompressedSplatArray(\n                outSphericalHarmonicsDegree,\n              );\n            }\n\n            numBytesStreamed = header.headerSizeBytes;\n            numBytesParsed = header.headerSizeBytes;\n            headerLoaded = true;\n          }\n        } else if (compressed && !readyToLoadSplatData) {\n          const sizeRequiredForHeaderAndChunks =\n            header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n          compressedPlyHeaderChunksBuffer = storeChunksInBuffer(\n            chunks,\n            compressedPlyHeaderChunksBuffer,\n          );\n          if (\n            compressedPlyHeaderChunksBuffer.byteLength >=\n            sizeRequiredForHeaderAndChunks\n          ) {\n            PlayCanvasCompressedPlyParser.readElementData(\n              header.chunkElement,\n              compressedPlyHeaderChunksBuffer,\n              header.headerSizeBytes,\n            );\n            numBytesStreamed = sizeRequiredForHeaderAndChunks;\n            numBytesParsed = sizeRequiredForHeaderAndChunks;\n            readyToLoadSplatData = true;\n          }\n        }\n\n        if (headerLoaded && readyToLoadSplatData) {\n          if (chunks.length > 0) {\n            directLoadBufferIn = storeChunksInBuffer(\n              chunks,\n              directLoadBufferIn,\n            );\n\n            const bytesLoadedSinceLastStreamedSection =\n              numBytesDownloaded - numBytesStreamed;\n            if (\n              bytesLoadedSinceLastStreamedSection >\n                directLoadSectionSizeBytes ||\n              loadComplete\n            ) {\n              const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n              const addedSplatCount = Math.floor(\n                numBytesToProcess / header.bytesPerSplat,\n              );\n              const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n              const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n              const newSplatCount = splatCount + addedSplatCount;\n              const parsedDataViewOffset =\n                numBytesParsed - chunks[0].startBytes;\n              const dataToParse = new DataView(\n                directLoadBufferIn,\n                parsedDataViewOffset,\n                numBytesToParse,\n              );\n\n              const shDescriptor =\n                SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                  outSphericalHarmonicsDegree\n                ];\n              const outOffset =\n                splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatBufferSection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              } else {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatArraySection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              }\n\n              splatCount = newSplatCount;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (!directLoadSplatBuffer) {\n                  SplatBuffer.writeSectionHeaderToBuffer(\n                    {\n                      maxSplatCount: maxSplatCount,\n                      splatCount: splatCount,\n                      bucketSize: 0,\n                      bucketCount: 0,\n                      bucketBlockSize: 0,\n                      compressionScaleRange: 0,\n                      storageSizeBytes: 0,\n                      fullBucketCount: 0,\n                      partiallyFilledBucketCount: 0,\n                      sphericalHarmonicsDegree: outSphericalHarmonicsDegree,\n                    },\n                    0,\n                    directLoadBufferOut,\n                    SplatBuffer.HeaderSizeBytes,\n                  );\n                  directLoadSplatBuffer = new SplatBuffer(\n                    directLoadBufferOut,\n                    false,\n                  );\n                }\n                directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                if (onProgressiveLoadSectionProgress) {\n                  onProgressiveLoadSectionProgress(\n                    directLoadSplatBuffer,\n                    loadComplete,\n                  );\n                }\n              }\n\n              numBytesStreamed += directLoadSectionSizeBytes;\n              numBytesParsed += numBytesToParse;\n\n              if (numBytesLeftOver === 0) {\n                chunks = [];\n              } else {\n                let keepChunks = [];\n                let keepSize = 0;\n                for (let i = chunks.length - 1; i >= 0; i--) {\n                  const chunk = chunks[i];\n                  keepSize += chunk.sizeBytes;\n                  keepChunks.unshift(chunk);\n                  if (keepSize >= numBytesLeftOver) break;\n                }\n                chunks = keepChunks;\n              }\n            }\n          }\n\n          if (loadComplete) {\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              loadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              loadPromise.resolve(standardLoadUncompressedSplatArray);\n            }\n          }\n        }\n      }\n\n      if (onProgress) {\n        onProgress(percent, percentLabel, LoaderStatus.Downloading);\n      }\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          const chunkDatas = chunks.map((chunk) => chunk.data);\n          return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\n            return PlyLoader.loadFromFileData(\n              plyFileData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              outSphericalHarmonicsDegree,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    plyFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      return PlyParser.parseToUncompressedSplatArray(\n        plyFileData,\n        outSphericalHarmonicsDegree,\n      );\n    }).then((splatArray) => {\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n  static RowSizeBytes = 32;\n  static CenterSizeBytes = 12;\n  static ScaleSizeBytes = 12;\n  static RotationSizeBytes = 4;\n  static ColorSizeBytes = 4;\n\n  static parseToUncompressedSplatBufferSection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    toBuffer,\n    toOffset,\n  ) {\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation =\n      SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      const outBase = i * outBytesPerSplat + toOffset;\n      const outCenter = new Float32Array(toBuffer, outBase, 3);\n      const outScale = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter,\n        3,\n      );\n      const outRotation = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale,\n        4,\n      );\n      const outColor = new Uint8Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation,\n        4,\n      );\n\n      outCenter[0] = inCenter[0];\n      outCenter[1] = inCenter[1];\n      outCenter[2] = inCenter[2];\n\n      outScale[0] = inScale[0];\n      outScale[1] = inScale[1];\n      outScale[2] = inScale[2];\n\n      outRotation[0] = quat.w;\n      outRotation[1] = quat.x;\n      outRotation[2] = quat.y;\n      outRotation[3] = quat.z;\n\n      outColor[0] = inColor[0];\n      outColor[1] = inColor[1];\n      outColor[2] = inColor[2];\n      outColor[3] = inColor[3];\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    splatArray,\n  ) {\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n  }\n\n  static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n    // Standard .splat row layout:\n    // XYZ - Position (Float32)\n    // XYZ - Scale (Float32)\n    // RGBA - colors (uint8)\n    // IJKL - quaternion/rot (uint8)\n\n    const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n    const splatArray = new UncompressedSplatArray();\n\n    for (let i = 0; i < splatCount; i++) {\n      const inBase = i * SplatParser.RowSizeBytes;\n      const inCenter = new Float32Array(inBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        inBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.ColorSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatParser } from './SplatParser.js';\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class SplatLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let standardLoadUncompressedSplatArray;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesLoaded = 0;\n    let chunks = [];\n\n    const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n      const loadComplete = percent >= 100;\n\n      if (chunk) {\n        chunks.push(chunk);\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n        return;\n      }\n\n      if (!fileSize) {\n        if (loadDirectoToSplatBuffer) {\n          throw new DirectLoadError(\n            'Cannon directly load .splat because no file size info is available.',\n          );\n        } else {\n          internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n          return;\n        }\n      }\n\n      if (!directLoadBufferIn) {\n        maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n        directLoadBufferIn = new ArrayBuffer(fileSize);\n        const bytesPerSplat =\n          SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n            .BytesPerSplat;\n        const splatBufferSizeBytes =\n          splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n          SplatBuffer.writeHeaderToBuffer(\n            {\n              versionMajor: SplatBuffer.CurrentMajorVersion,\n              versionMinor: SplatBuffer.CurrentMinorVersion,\n              maxSectionCount: sectionCount,\n              sectionCount: sectionCount,\n              maxSplatCount: maxSplatCount,\n              splatCount: splatCount,\n              compressionLevel: 0,\n              sceneCenter: new THREE.Vector3(),\n            },\n            directLoadBufferOut,\n          );\n        } else {\n          standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\n        }\n      }\n\n      if (chunk) {\n        new Uint8Array(\n          directLoadBufferIn,\n          numBytesLoaded,\n          chunk.byteLength,\n        ).set(new Uint8Array(chunk));\n        numBytesLoaded += chunk.byteLength;\n\n        const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n        if (\n          bytesLoadedSinceLastSection > directLoadSectionSizeBytes ||\n          loadComplete\n        ) {\n          const bytesToUpdate = loadComplete ?\n            bytesLoadedSinceLastSection :\n            directLoadSectionSizeBytes;\n          const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n          const newSplatCount = splatCount + addedSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            SplatParser.parseToUncompressedSplatBufferSection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              directLoadBufferOut,\n              splatDataOffsetBytes,\n            );\n          } else {\n            SplatParser.parseToUncompressedSplatArraySection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              standardLoadUncompressedSplatArray,\n            );\n          }\n\n          splatCount = newSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            if (!directLoadSplatBuffer) {\n              SplatBuffer.writeSectionHeaderToBuffer(\n                {\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  bucketSize: 0,\n                  bucketCount: 0,\n                  bucketBlockSize: 0,\n                  compressionScaleRange: 0,\n                  storageSizeBytes: 0,\n                  fullBucketCount: 0,\n                  partiallyFilledBucketCount: 0,\n                },\n                0,\n                directLoadBufferOut,\n                SplatBuffer.HeaderSizeBytes,\n              );\n              directLoadSplatBuffer = new SplatBuffer(\n                directLoadBufferOut,\n                false,\n              );\n            }\n            directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n            if (onProgressiveLoadSectionProgress) {\n              onProgressiveLoadSectionProgress(\n                directLoadSplatBuffer,\n                loadComplete,\n              );\n            }\n          }\n\n          numBytesStreamed += directLoadSectionSizeBytes;\n        }\n      }\n\n      if (loadComplete) {\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          loadPromise.resolve(directLoadSplatBuffer);\n        } else {\n          loadPromise.resolve(standardLoadUncompressedSplatArray);\n        }\n      }\n\n      if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          return new Blob(chunks).arrayBuffer().then((splatData) => {\n            return SplatLoader.loadFromFileData(\n              splatData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    splatFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      const splatArray =\n        SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\n\nexport class KSplatLoader {\n  static checkVersion(buffer) {\n    const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n    const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n    const header = SplatBuffer.parseHeader(buffer);\n    if (\n      (header.versionMajor === minVersionMajor &&\n        header.versionMinor >= minVersionMinor) ||\n      header.versionMajor > minVersionMajor\n    ) {\n      return true;\n    } else {\n      throw new Error(\n        `KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n          `Minimum required: v${minVersionMajor}.${minVersionMinor}`,\n      );\n    }\n  }\n\n  static loadFromURL(\n    fileName,\n    externalOnProgress,\n    loadDirectoToSplatBuffer,\n    onSectionBuilt,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let directLoadBuffer;\n    let directLoadSplatBuffer;\n\n    let headerBuffer;\n    let header;\n    let headerLoaded = false;\n    let headerLoading = false;\n\n    let sectionHeadersBuffer;\n    let sectionHeaders = [];\n    let sectionHeadersLoaded = false;\n    let sectionHeadersLoading = false;\n\n    let numBytesLoaded = 0;\n    let numBytesProgressivelyLoaded = 0;\n    let totalBytesToDownload = 0;\n\n    let downloadComplete = false;\n    let loadComplete = false;\n    let loadSectionQueued = false;\n\n    let chunks = [];\n\n    const directLoadPromise = nativePromiseWithExtractedComponents();\n\n    const checkAndLoadHeader = () => {\n      if (\n        !headerLoaded &&\n        !headerLoading &&\n        numBytesLoaded >= SplatBuffer.HeaderSizeBytes\n      ) {\n        headerLoading = true;\n        const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n        headerAssemblyPromise.then((bufferData) => {\n          headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n          new Uint8Array(headerBuffer).set(\n            new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes),\n          );\n          KSplatLoader.checkVersion(headerBuffer);\n          headerLoading = false;\n          headerLoaded = true;\n          header = SplatBuffer.parseHeader(headerBuffer);\n          window.setTimeout(() => {\n            checkAndLoadSectionHeaders();\n          }, 1);\n        });\n      }\n    };\n\n    let queuedCheckAndLoadSectionsCount = 0;\n    const queueCheckAndLoadSections = () => {\n      if (queuedCheckAndLoadSectionsCount === 0) {\n        queuedCheckAndLoadSectionsCount++;\n        window.setTimeout(() => {\n          queuedCheckAndLoadSectionsCount--;\n          checkAndLoadSections();\n        }, 1);\n      }\n    };\n\n    const checkAndLoadSectionHeaders = () => {\n      const performLoad = () => {\n        sectionHeadersLoading = true;\n        const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n        sectionHeadersAssemblyPromise.then((bufferData) => {\n          sectionHeadersLoading = false;\n          sectionHeadersLoaded = true;\n          sectionHeadersBuffer = new ArrayBuffer(\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n          );\n          new Uint8Array(sectionHeadersBuffer).set(\n            new Uint8Array(\n              bufferData,\n              SplatBuffer.HeaderSizeBytes,\n              header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n            ),\n          );\n          sectionHeaders = SplatBuffer.parseSectionHeaders(\n            header,\n            sectionHeadersBuffer,\n            0,\n            false,\n          );\n          let totalSectionStorageStorageByes = 0;\n          for (let i = 0; i < header.maxSectionCount; i++) {\n            totalSectionStorageStorageByes +=\n              sectionHeaders[i].storageSizeBytes;\n          }\n          const totalStorageSizeBytes =\n            SplatBuffer.HeaderSizeBytes +\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes +\n            totalSectionStorageStorageByes;\n          if (!directLoadBuffer) {\n            directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\n            let offset = 0;\n            for (let i = 0; i < chunks.length; i++) {\n              const chunk = chunks[i];\n              new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(\n                new Uint8Array(chunk),\n              );\n              offset += chunk.byteLength;\n            }\n          }\n\n          totalBytesToDownload =\n            SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n          for (\n            let i = 0;\n            i <= sectionHeaders.length && i < header.maxSectionCount;\n            i++\n          ) {\n            totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n          }\n\n          queueCheckAndLoadSections();\n        });\n      };\n\n      if (\n        !sectionHeadersLoading &&\n        !sectionHeadersLoaded &&\n        headerLoaded &&\n        numBytesLoaded >=\n          SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount\n      ) {\n        performLoad();\n      }\n    };\n\n    const checkAndLoadSections = () => {\n      if (loadSectionQueued) return;\n      loadSectionQueued = true;\n      const checkAndLoadFunc = () => {\n        loadSectionQueued = false;\n        if (sectionHeadersLoaded) {\n          if (loadComplete) return;\n\n          downloadComplete = numBytesLoaded >= totalBytesToDownload;\n\n          let bytesLoadedSinceLastSection =\n            numBytesLoaded - numBytesProgressivelyLoaded;\n          if (\n            bytesLoadedSinceLastSection >\n              Constants.ProgressiveLoadSectionSize ||\n            downloadComplete\n          ) {\n            numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\n            loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\n\n            if (!directLoadSplatBuffer) {\n              directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\n            }\n\n            const baseDataOffset =\n              SplatBuffer.HeaderSizeBytes +\n              SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n            let sectionBase = 0;\n            let reachedSections = 0;\n            let loadedSplatCount = 0;\n            for (let i = 0; i < header.maxSectionCount; i++) {\n              const sectionHeader = sectionHeaders[i];\n              const bucketsDataOffset =\n                sectionBase +\n                sectionHeader.partiallyFilledBucketCount * 4 +\n                sectionHeader.bucketStorageSizeBytes *\n                  sectionHeader.bucketCount;\n              const bytesRequiredToReachSectionSplatData =\n                baseDataOffset + bucketsDataOffset;\n              if (\n                numBytesProgressivelyLoaded >=\n                bytesRequiredToReachSectionSplatData\n              ) {\n                reachedSections++;\n                const bytesPastSSectionSplatDataStart =\n                  numBytesProgressivelyLoaded -\n                  bytesRequiredToReachSectionSplatData;\n                const baseDescriptor =\n                  SplatBuffer.CompressionLevels[header.compressionLevel];\n                const shDesc =\n                  baseDescriptor.SphericalHarmonicsDegrees[\n                    sectionHeader.sphericalHarmonicsDegree\n                  ];\n                const bytesPerSplat = shDesc.BytesPerSplat;\n                let loadedSplatsForSection = Math.floor(\n                  bytesPastSSectionSplatDataStart / bytesPerSplat,\n                );\n                loadedSplatsForSection = Math.min(\n                  loadedSplatsForSection,\n                  sectionHeader.maxSplatCount,\n                );\n                loadedSplatCount += loadedSplatsForSection;\n                directLoadSplatBuffer.updateLoadedCounts(\n                  reachedSections,\n                  loadedSplatCount,\n                );\n                directLoadSplatBuffer.updateSectionLoadedCounts(\n                  i,\n                  loadedSplatsForSection,\n                );\n              } else {\n                break;\n              }\n              sectionBase += sectionHeader.storageSizeBytes;\n            }\n\n            onSectionBuilt(directLoadSplatBuffer, loadComplete);\n\n            const percentComplete =\n              (numBytesProgressivelyLoaded / totalBytesToDownload) * 100;\n            const percentLabel = percentComplete.toFixed(2) + '%';\n\n            if (externalOnProgress) {\n              externalOnProgress(\n                percentComplete,\n                percentLabel,\n                LoaderStatus.Downloading,\n              );\n            }\n\n            if (loadComplete) {\n              directLoadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              checkAndLoadSections();\n            }\n          }\n        }\n      };\n      window.setTimeout(\n        checkAndLoadFunc,\n        Constants.ProgressiveLoadSectionDelayDuration,\n      );\n    };\n\n    const localOnProgress = (percent, percentStr, chunk) => {\n      if (chunk) {\n        chunks.push(chunk);\n        if (directLoadBuffer) {\n          new Uint8Array(\n            directLoadBuffer,\n            numBytesLoaded,\n            chunk.byteLength,\n          ).set(new Uint8Array(chunk));\n        }\n        numBytesLoaded += chunk.byteLength;\n      }\n      if (loadDirectoToSplatBuffer) {\n        checkAndLoadHeader();\n        checkAndLoadSectionHeaders();\n        checkAndLoadSections();\n      } else {\n        if (externalOnProgress) {\n          externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\n        }\n      }\n    };\n\n    return fetchWithProgress(\n      fileName,\n      localOnProgress,\n      !loadDirectoToSplatBuffer,\n    ).then((fullBuffer) => {\n      if (externalOnProgress) {\n        externalOnProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const loadPromise = loadDirectoToSplatBuffer ?\n        directLoadPromise.promise :\n        KSplatLoader.loadFromFileData(fullBuffer);\n      return loadPromise.then((splatBuffer) => {\n        if (externalOnProgress) {\n          externalOnProgress(100, '100%', LoaderStatus.Done);\n        }\n        return splatBuffer;\n      });\n    });\n  }\n\n  static loadFromFileData(fileData) {\n    return delayedExecute(() => {\n      KSplatLoader.checkVersion(fileData);\n      return new SplatBuffer(fileData);\n    });\n  }\n\n  static downloadFile = (function() {\n    let downLoadLink;\n\n    return function(splatBuffer, fileName) {\n      const blob = new Blob([splatBuffer.bufferData], {\n        type: 'application/octet-stream',\n      });\n\n      if (!downLoadLink) {\n        downLoadLink = document.createElement('a');\n        document.body.appendChild(downLoadLink);\n      }\n      downLoadLink.download = fileName;\n      downLoadLink.href = URL.createObjectURL(blob);\n      downLoadLink.click();\n    };\n  })();\n}\n","export const SceneFormat = {\n  Splat: 0,\n  KSplat: 1,\n  Ply: 2,\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n  if (path.endsWith('.ply')) return SceneFormat.Ply;\n  else if (path.endsWith('.splat')) return SceneFormat.Splat;\n  else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n  return null;\n};\n","export const LogLevel = {\n  None: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Debug: 4,\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n  EventDispatcher,\n  MOUSE,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Plane,\n  Ray,\n  MathUtils,\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);\n\nclass OrbitControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n\n    this.object = object;\n    this.domElement = domElement;\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // \"target\" sets the location of focus, where the object orbits around\n    this.target = new Vector3();\n\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    // How far you can zoom in and out ( OrthographicCamera only )\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    this.enableDamping = false;\n    this.dampingFactor = 0.05;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    this.enableZoom = true;\n    this.zoomSpeed = 1.0;\n\n    // Set to false to disable rotating\n    this.enableRotate = true;\n    this.rotateSpeed = 1.0;\n\n    // Set to false to disable panning\n    this.enablePan = true;\n    this.panSpeed = 1.0;\n    this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    this.zoomToCursor = false;\n\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n    // The four arrow keys\n    this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n    // Mouse buttons\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN,\n    };\n\n    // Touch fingers\n    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n    // for reset\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n\n    // the target DOM element for key events\n    this._domElementKeyEvents = null;\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = function() {\n      return spherical.phi;\n    };\n\n    this.getAzimuthalAngle = function() {\n      return spherical.theta;\n    };\n\n    this.getDistance = function() {\n      return this.object.position.distanceTo(this.target);\n    };\n\n    this.listenToKeyEvents = function(domElement) {\n      domElement.addEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = domElement;\n    };\n\n    this.stopListenToKeyEvents = function() {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = null;\n    };\n\n    this.saveState = function() {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n\n    this.reset = function() {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      this.clearDampedRotation();\n      this.clearDampedPan();\n\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(_changeEvent);\n\n      scope.update();\n\n      state = STATE.NONE;\n    };\n\n    this.clearDampedRotation = function() {\n      sphericalDelta.theta = 0.0;\n      sphericalDelta.phi = 0.0;\n    };\n\n    this.clearDampedPan = function() {\n      panOffset.set(0, 0, 0);\n    };\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = (function() {\n      const offset = new Vector3();\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(\n        object.up,\n        new Vector3(0, 1, 0),\n      );\n      const quatInverse = quat.clone().invert();\n\n      const lastPosition = new Vector3();\n      const lastQuaternion = new Quaternion();\n      const lastTargetPosition = new Vector3();\n\n      const twoPI = 2 * Math.PI;\n\n      return function update() {\n        quat.setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n        quatInverse.copy(quat).invert();\n\n        const position = scope.object.position;\n\n        offset.copy(position).sub(scope.target);\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat);\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset);\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle;\n        let max = scope.maxAzimuthAngle;\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI;\n          else if (min > Math.PI) min -= twoPI;\n\n          if (max < -Math.PI) max += twoPI;\n          else if (max > Math.PI) max -= twoPI;\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ?\n                Math.max(min, spherical.theta) :\n                Math.min(max, spherical.theta);\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(\n          scope.minPolarAngle,\n          Math.min(scope.maxPolarAngle, spherical.phi),\n        );\n\n        spherical.makeSafe();\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (\n          (scope.zoomToCursor && performCursorZoom) ||\n          scope.object.isOrthographicCamera\n        ) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n\n        offset.setFromSpherical(spherical);\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse);\n\n        position.copy(scope.target).add(offset);\n\n        scope.object.lookAt(scope.target);\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n\n          panOffset.set(0, 0, 0);\n        }\n\n        // adjust camera position\n        let zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null;\n          if (scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n\n            const radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n\n            scope.object.zoom = Math.max(\n              scope.minZoom,\n              Math.min(scope.maxZoom, scope.object.zoom / scale),\n            );\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n\n            newRadius = offset.length();\n          } else {\n            console.warn(\n              'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.',\n            );\n            scope.zoomToCursor = false;\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (this.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position);\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position);\n              _ray.direction\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix);\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(\n                  scope.object.up,\n                  scope.target,\n                );\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object.isOrthographicCamera) {\n          scope.object.zoom = Math.max(\n            scope.minZoom,\n            Math.min(scope.maxZoom, scope.object.zoom / scale),\n          );\n          scope.object.updateProjectionMatrix();\n          zoomChanged = true;\n        }\n\n        scale = 1;\n        performCursorZoom = false;\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS ||\n          lastTargetPosition.distanceToSquared(scope.target) > 0\n        ) {\n          scope.dispatchEvent(_changeEvent);\n\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          lastTargetPosition.copy(scope.target);\n\n          zoomChanged = false;\n\n          return true;\n        }\n\n        return false;\n      };\n    })();\n\n    this.dispose = function() {\n      scope.domElement.removeEventListener('contextmenu', onContextMenu);\n\n      scope.domElement.removeEventListener('pointerdown', onPointerDown);\n      scope.domElement.removeEventListener('pointercancel', onPointerUp);\n      scope.domElement.removeEventListener('wheel', onMouseWheel);\n\n      scope.domElement.removeEventListener('pointermove', onPointerMove);\n      scope.domElement.removeEventListener('pointerup', onPointerUp);\n\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n        scope._domElementKeyEvents = null;\n      }\n    };\n\n    //\n    // internals\n    //\n\n    const scope = this;\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    };\n\n    let state = STATE.NONE;\n\n    const EPS = 0.000001;\n\n    // current position in spherical coordinates\n    const spherical = new Spherical();\n    const sphericalDelta = new Spherical();\n\n    let scale = 1;\n    const panOffset = new Vector3();\n\n    const rotateStart = new Vector2();\n    const rotateEnd = new Vector2();\n    const rotateDelta = new Vector2();\n\n    const panStart = new Vector2();\n    const panEnd = new Vector2();\n    const panDelta = new Vector2();\n\n    const dollyStart = new Vector2();\n    const dollyEnd = new Vector2();\n    const dollyDelta = new Vector2();\n\n    const dollyDirection = new Vector3();\n    const mouse = new Vector2();\n    let performCursorZoom = false;\n\n    const pointers = [];\n    const pointerPositions = {};\n\n    function getAutoRotationAngle() {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\n    }\n\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n\n    function rotateLeft(angle) {\n      sphericalDelta.theta -= angle;\n    }\n\n    function rotateUp(angle) {\n      sphericalDelta.phi -= angle;\n    }\n\n    const panLeft = (function() {\n      const v = new Vector3();\n\n      return function panLeft(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        v.multiplyScalar(-distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    const panUp = (function() {\n      const v = new Vector3();\n\n      return function panUp(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n\n        v.multiplyScalar(distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (function() {\n      const offset = new Vector3();\n\n      return function pan(deltaX, deltaY) {\n        const element = scope.domElement;\n\n        if (scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          let targetDistance = offset.length();\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(\n            ((scope.object.fov / 2) * Math.PI) / 180.0,\n          );\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft(\n            (2 * deltaX * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n          panUp(\n            (2 * deltaY * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n        } else if (scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) /\n              scope.object.zoom /\n              element.clientWidth,\n            scope.object.matrix,\n          );\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) /\n              scope.object.zoom /\n              element.clientHeight,\n            scope.object.matrix,\n          );\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn(\n            'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.',\n          );\n          scope.enablePan = false;\n        }\n      };\n    })();\n\n    function dollyOut(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale /= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function dollyIn(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale *= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor) {\n        return;\n      }\n\n      performCursorZoom = true;\n\n      const rect = scope.domElement.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const w = rect.width;\n      const h = rect.height;\n\n      mouse.x = (x / w) * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n\n      dollyDirection\n        .set(mouse.x, mouse.y, 1)\n        .unproject(object)\n        .sub(object.position)\n        .normalize();\n    }\n\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n\n      scope.update();\n    }\n\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n\n      scope.update();\n    }\n\n    function handleKeyDown(event) {\n      let needsUpdate = false;\n\n      switch (event.code) {\n        case scope.keys.UP:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.BOTTOM:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, -scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.LEFT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.RIGHT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(-scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n\n        scope.update();\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length === 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        rotateStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length === 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        panStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX;\n      const dy = pointers[0].pageY - pointers[1].pageY;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyStart.set(0, distance);\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enablePan) handleTouchStartPan();\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enableRotate) handleTouchStartRotate();\n    }\n\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        rotateEnd.set(x, y);\n      }\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n    }\n\n    function handleTouchMovePan(event) {\n      if (pointers.length === 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        panEnd.set(x, y);\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n    }\n\n    function handleTouchMoveDolly(event) {\n      const position = getSecondPointerPosition(event);\n\n      const dx = event.pageX - position.x;\n      const dy = event.pageY - position.y;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyEnd.set(0, distance);\n\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n\n      dollyOut(dollyDelta.y);\n\n      dollyStart.copy(dollyEnd);\n    }\n\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enablePan) handleTouchMovePan(event);\n    }\n\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event) {\n      if (scope.enabled === false) return;\n\n      if (pointers.length === 0) {\n        scope.domElement.setPointerCapture(event.pointerId);\n\n        scope.domElement.addEventListener('pointermove', onPointerMove);\n        scope.domElement.addEventListener('pointerup', onPointerUp);\n      }\n\n      //\n\n      addPointer(event);\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n\n    function onPointerUp(event) {\n      removePointer(event);\n\n      if (pointers.length === 0) {\n        scope.domElement.releasePointerCapture(event.pointerId);\n\n        scope.domElement.removeEventListener('pointermove', onPointerMove);\n        scope.domElement.removeEventListener('pointerup', onPointerUp);\n      }\n\n      scope.dispatchEvent(_endEvent);\n\n      state = STATE.NONE;\n    }\n\n    function onMouseDown(event) {\n      let mouseAction;\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n\n        default:\n          mouseAction = -1;\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseDownDolly(event);\n\n          state = STATE.DOLLY;\n\n          break;\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          }\n\n          break;\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onMouseMove(event) {\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleMouseMoveRotate(event);\n\n          break;\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseMoveDolly(event);\n\n          break;\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return;\n\n          handleMouseMovePan(event);\n\n          break;\n      }\n    }\n\n    function onMouseWheel(event) {\n      if (\n        scope.enabled === false ||\n        scope.enableZoom === false ||\n        state !== STATE.NONE\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n\n      scope.dispatchEvent(_startEvent);\n\n      handleMouseWheel(event);\n\n      scope.dispatchEvent(_endEvent);\n    }\n\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false) return;\n\n      handleKeyDown(event);\n    }\n\n    function onTouchStart(event) {\n      trackPointer(event);\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return;\n\n              handleTouchStartRotate();\n\n              state = STATE.TOUCH_ROTATE;\n\n              break;\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return;\n\n              handleTouchStartPan();\n\n              state = STATE.TOUCH_PAN;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) {\n                return;\n              }\n\n              handleTouchStartDollyPan();\n\n              state = STATE.TOUCH_DOLLY_PAN;\n\n              break;\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) {\n                return;\n              }\n\n              handleTouchStartDollyRotate();\n\n              state = STATE.TOUCH_DOLLY_ROTATE;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onTouchMove(event) {\n      trackPointer(event);\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleTouchMoveRotate(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return;\n\n          handleTouchMovePan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return;\n\n          handleTouchMoveDollyPan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) {\n            return;\n          }\n\n          handleTouchMoveDollyRotate(event);\n\n          scope.update();\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n    }\n\n    function onContextMenu(event) {\n      if (scope.enabled === false) return;\n\n      event.preventDefault();\n    }\n\n    function addPointer(event) {\n      pointers.push(event);\n    }\n\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n\n    function trackPointer(event) {\n      let position = pointerPositions[event.pointerId];\n\n      if (position === undefined) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n\n      position.set(event.pageX, event.pageY);\n    }\n\n    function getSecondPointerPosition(event) {\n      const pointer =\n        event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n\n      return pointerPositions[pointer.pointerId];\n    }\n\n    //\n\n    scope.domElement.addEventListener('contextmenu', onContextMenu);\n\n    scope.domElement.addEventListener('pointerdown', onPointerDown);\n    scope.domElement.addEventListener('pointercancel', onPointerUp);\n    scope.domElement.addEventListener('wheel', onMouseWheel, {\n      passive: false,\n    });\n\n    // force an update at start\n\n    this.update();\n  }\n}\n\nexport { OrbitControls };\n","export const RenderMode = {\n  Always: 0,\n  OnChange: 1,\n  Never: 2,\n};\n","import * as THREE from 'three';\n\nconst _axis = new THREE.Vector3();\n\nexport class ArrowHelper extends THREE.Object3D {\n  constructor(\n    dir = new THREE.Vector3(0, 0, 1),\n    origin = new THREE.Vector3(0, 0, 0),\n    length = 1,\n    radius = 0.1,\n    color = 0xffff00,\n    headLength = length * 0.2,\n    headRadius = headLength * 0.2,\n  ) {\n    super();\n\n    this.type = 'ArrowHelper';\n\n    const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n    lineGeometry.translate(0, length / 2.0, 0);\n    const coneGeometry = new THREE.CylinderGeometry(\n      0,\n      headRadius,\n      headLength,\n      32,\n    );\n    coneGeometry.translate(0, length, 0);\n\n    this.position.copy(origin);\n\n    this.line = new THREE.Mesh(\n      lineGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    this.cone = new THREE.Mesh(\n      coneGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n\n    this.setDirection(dir);\n  }\n\n  setDirection(dir) {\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      _axis.set(dir.z, 0, -dir.x).normalize();\n      const radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(_axis, radians);\n    }\n  }\n\n  setColor(color) {\n    this.line.material.color.set(color);\n    this.cone.material.color.set(color);\n  }\n\n  copy(source) {\n    super.copy(source, false);\n    this.line.copy(source.line);\n    this.cone.copy(source.cone);\n    return this;\n  }\n\n  dispose() {\n    this.line.geometry.dispose();\n    this.line.material.dispose();\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n  constructor(threeScene) {\n    this.threeScene = threeScene;\n    this.splatRenderTarget = null;\n    this.renderTargetCopyQuad = null;\n    this.renderTargetCopyCamera = null;\n    this.meshCursor = null;\n    this.focusMarker = null;\n    this.controlPlane = null;\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  updateSplatRenderTargetForRenderDimensions(width, height) {\n    this.destroySplatRendertarget();\n    this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n      format: THREE.RGBAFormat,\n      stencilBuffer: false,\n      depthBuffer: true,\n    });\n    this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n    this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n    this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n  }\n\n  destroySplatRendertarget() {\n    if (this.splatRenderTarget) {\n      this.splatRenderTarget = null;\n    }\n  }\n\n  setupRenderTargetCopyObjects() {\n    const uniforms = {\n      sourceColorTexture: {\n        type: 't',\n        value: null,\n      },\n      sourceDepthTexture: {\n        type: 't',\n        value: null,\n      },\n    };\n    const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n      vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n      fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n      uniforms: uniforms,\n      depthWrite: false,\n      depthTest: false,\n      transparent: true,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendSrcAlpha: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneMinusSrcAlphaFactor,\n      blendDstAlpha: THREE.OneMinusSrcAlphaFactor,\n    });\n    renderTargetCopyMaterial.extensions.fragDepth = true;\n    this.renderTargetCopyQuad = new THREE.Mesh(\n      new THREE.PlaneGeometry(2, 2),\n      renderTargetCopyMaterial,\n    );\n    this.renderTargetCopyCamera = new THREE.OrthographicCamera(\n      -1,\n      1,\n      1,\n      -1,\n      0,\n      1,\n    );\n  }\n\n  destroyRenderTargetCopyObjects() {\n    if (this.renderTargetCopyQuad) {\n      disposeAllMeshes(this.renderTargetCopyQuad);\n      this.renderTargetCopyQuad = null;\n    }\n  }\n\n  setupMeshCursor() {\n    if (!this.meshCursor) {\n      const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n      const coneMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n      const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      downArrow.rotation.set(0, 0, Math.PI);\n      downArrow.position.set(0, 1, 0);\n      const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      upArrow.position.set(0, -1, 0);\n      const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n      leftArrow.position.set(1, 0, 0);\n      const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n      rightArrow.position.set(-1, 0, 0);\n\n      this.meshCursor = new THREE.Object3D();\n      this.meshCursor.add(downArrow);\n      this.meshCursor.add(upArrow);\n      this.meshCursor.add(leftArrow);\n      this.meshCursor.add(rightArrow);\n      this.meshCursor.scale.set(0.1, 0.1, 0.1);\n      this.threeScene.add(this.meshCursor);\n      this.meshCursor.visible = false;\n    }\n  }\n\n  destroyMeshCursor() {\n    if (this.meshCursor) {\n      disposeAllMeshes(this.meshCursor);\n      this.threeScene.remove(this.meshCursor);\n      this.meshCursor = null;\n    }\n  }\n\n  setMeshCursorVisibility(visible) {\n    this.meshCursor.visible = visible;\n  }\n\n  getMeschCursorVisibility() {\n    return this.meshCursor.visible;\n  }\n\n  setMeshCursorPosition(position) {\n    this.meshCursor.position.copy(position);\n  }\n\n  positionAndOrientMeshCursor(position, camera) {\n    this.meshCursor.position.copy(position);\n    this.meshCursor.up.copy(camera.up);\n    this.meshCursor.lookAt(camera.position);\n  }\n\n  setupFocusMarker() {\n    if (!this.focusMarker) {\n      const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n      focusMarkerMaterial.depthTest = false;\n      focusMarkerMaterial.depthWrite = false;\n      focusMarkerMaterial.transparent = true;\n      this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n    }\n  }\n\n  destroyFocusMarker() {\n    if (this.focusMarker) {\n      disposeAllMeshes(this.focusMarker);\n      this.focusMarker = null;\n    }\n  }\n\n  updateFocusMarker = (function() {\n    const tempPosition = new THREE.Vector3();\n    const tempMatrix = new THREE.Matrix4();\n    const toCamera = new THREE.Vector3();\n\n    return function(position, camera, viewport) {\n      tempMatrix.copy(camera.matrixWorld).invert();\n      tempPosition.copy(position).applyMatrix4(tempMatrix);\n      tempPosition.normalize().multiplyScalar(10);\n      tempPosition.applyMatrix4(camera.matrixWorld);\n      toCamera.copy(camera.position).sub(position);\n      const toCameraDistance = toCamera.length();\n      this.focusMarker.position.copy(position);\n      this.focusMarker.scale.set(\n        toCameraDistance,\n        toCameraDistance,\n        toCameraDistance,\n      );\n      this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n      this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n      this.focusMarker.material.uniformsNeedUpdate = true;\n    };\n  })();\n\n  setFocusMarkerVisibility(visible) {\n    this.focusMarker.visible = visible;\n  }\n\n  setFocusMarkerOpacity(opacity) {\n    this.focusMarker.material.uniforms.opacity.value = opacity;\n    this.focusMarker.material.uniformsNeedUpdate = true;\n  }\n\n  getFocusMarkerOpacity() {\n    return this.focusMarker.material.uniforms.opacity.value;\n  }\n\n  setupControlPlane() {\n    if (!this.controlPlane) {\n      const planeGeometry = new THREE.PlaneGeometry(1, 1);\n      planeGeometry.rotateX(-Math.PI / 2);\n      const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      planeMaterial.transparent = true;\n      planeMaterial.opacity = 0.6;\n      planeMaterial.depthTest = false;\n      planeMaterial.depthWrite = false;\n      planeMaterial.side = THREE.DoubleSide;\n      const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      const arrowDir = new THREE.Vector3(0, 1, 0);\n      arrowDir.normalize();\n      const arrowOrigin = new THREE.Vector3(0, 0, 0);\n      const arrowLength = 0.5;\n      const arrowRadius = 0.01;\n      const arrowColor = 0x00dd00;\n      const arrowHelper = new ArrowHelper(\n        arrowDir,\n        arrowOrigin,\n        arrowLength,\n        arrowRadius,\n        arrowColor,\n        0.1,\n        0.03,\n      );\n\n      this.controlPlane = new THREE.Object3D();\n      this.controlPlane.add(planeMesh);\n      this.controlPlane.add(arrowHelper);\n    }\n  }\n\n  destroyControlPlane() {\n    if (this.controlPlane) {\n      disposeAllMeshes(this.controlPlane);\n      this.controlPlane = null;\n    }\n  }\n\n  setControlPlaneVisibility(visible) {\n    this.controlPlane.visible = visible;\n  }\n\n  positionAndOrientControlPlane = (function() {\n    const tempQuaternion = new THREE.Quaternion();\n    const defaultUp = new THREE.Vector3(0, 1, 0);\n\n    return function(position, up) {\n      tempQuaternion.setFromUnitVectors(defaultUp, up);\n      this.controlPlane.position.copy(position);\n      this.controlPlane.quaternion.copy(tempQuaternion);\n    };\n  })();\n\n  addDebugMeshes() {\n    this.debugRoot = this.createDebugMeshes();\n    this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n    this.threeScene.add(this.debugRoot);\n    this.threeScene.add(this.secondaryDebugRoot);\n  }\n\n  destroyDebugMeshes() {\n    for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n      if (debugRoot) {\n        disposeAllMeshes(debugRoot);\n        this.threeScene.remove(debugRoot);\n      }\n    }\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  createDebugMeshes(renderOrder) {\n    const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const debugMeshRoot = new THREE.Object3D();\n\n    const createMesh = (color, position) => {\n      let sphereMesh = new THREE.Mesh(\n        sphereGeometry,\n        SceneHelper.buildDebugMaterial(color),\n      );\n      sphereMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(sphereMesh);\n      sphereMesh.position.fromArray(position);\n    };\n\n    createMesh(0xff0000, [-50, 0, 0]);\n    createMesh(0xff0000, [50, 0, 0]);\n    createMesh(0x00ff00, [0, 0, -50]);\n    createMesh(0x00ff00, [0, 0, 50]);\n    createMesh(0xffaa00, [5, 0, 5]);\n\n    return debugMeshRoot;\n  }\n\n  createSecondaryDebugMeshes(renderOrder) {\n    const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n    const debugMeshRoot = new THREE.Object3D();\n\n    let boxColor = 0xbbbbbb;\n    const createMesh = (position) => {\n      let boxMesh = new THREE.Mesh(\n        boxGeometry,\n        SceneHelper.buildDebugMaterial(boxColor),\n      );\n      boxMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(boxMesh);\n      boxMesh.position.fromArray(position);\n    };\n\n    let separation = 10;\n    createMesh([-separation, 0, -separation]);\n    createMesh([-separation, 0, separation]);\n    createMesh([separation, 0, -separation]);\n    createMesh([separation, 0, separation]);\n\n    return debugMeshRoot;\n  }\n\n  static buildDebugMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: false,\n      depthTest: true,\n      depthWrite: true,\n      side: THREE.FrontSide,\n    });\n    material.extensions.fragDepth = true;\n\n    return material;\n  }\n\n  static buildFocusMarkerMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n      realFocusPosition: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      opacity: {\n        value: 0.0,\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      side: THREE.FrontSide,\n    });\n\n    return material;\n  }\n\n  dispose() {\n    this.destroyMeshCursor();\n    this.destroyFocusMarker();\n    this.destroyDebugMeshes();\n    this.destroyControlPlane();\n    this.destroyRenderTargetCopyObjects();\n    this.destroySplatRendertarget();\n  }\n}\n","export const SceneRevealMode = {\n  Default: 0,\n  Gradual: 1,\n  Instant: 2,\n};\n","export const SplatRenderMode = {\n  ThreeD: 0,\n  TwoD: 1,\n};\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n  constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n    this.origin = new THREE.Vector3();\n    this.direction = new THREE.Vector3();\n    this.setParameters(origin, direction);\n  }\n\n  setParameters(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction).normalize();\n  }\n\n  boxContainsPoint(box, point, epsilon) {\n    return point.x < box.min.x - epsilon ||\n      point.x > box.max.x + epsilon ||\n      point.y < box.min.y - epsilon ||\n      point.y > box.max.y + epsilon ||\n      point.z < box.min.z - epsilon ||\n      point.z > box.max.z + epsilon ?\n      false :\n      true;\n  }\n\n  intersectBox = (function() {\n    const planeIntersectionPoint = new THREE.Vector3();\n    const planeIntersectionPointArray = [];\n    const originArray = [];\n    const directionArray = [];\n\n    return function(box, outHit) {\n      originArray[0] = this.origin.x;\n      originArray[1] = this.origin.y;\n      originArray[2] = this.origin.z;\n      directionArray[0] = this.direction.x;\n      directionArray[1] = this.direction.y;\n      directionArray[2] = this.direction.z;\n\n      if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n        if (outHit) {\n          outHit.origin.copy(this.origin);\n          outHit.normal.set(0, 0, 0);\n          outHit.distance = -1;\n        }\n        return true;\n      }\n\n      for (let i = 0; i < 3; i++) {\n        if (directionArray[i] == 0.0) continue;\n\n        const hitNormal =\n          i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n        const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n        let multiplier = -Math.sign(directionArray[i]);\n        planeIntersectionPointArray[0] =\n          i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n        let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n        if (toSide * multiplier < 0) {\n          const idx1 = (i + 1) % 3;\n          const idx2 = (i + 2) % 3;\n          planeIntersectionPointArray[2] =\n            (directionArray[idx1] / directionArray[i]) * toSide +\n            originArray[idx1];\n          planeIntersectionPointArray[1] =\n            (directionArray[idx2] / directionArray[i]) * toSide +\n            originArray[idx2];\n          planeIntersectionPoint.set(\n            planeIntersectionPointArray[i],\n            planeIntersectionPointArray[idx2],\n            planeIntersectionPointArray[idx1],\n          );\n          if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n            if (outHit) {\n              outHit.origin.copy(planeIntersectionPoint);\n              outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n              outHit.distance = planeIntersectionPoint\n                .sub(this.origin)\n                .length();\n            }\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n  })();\n\n  intersectSphere = (function() {\n    const toSphereCenterVec = new THREE.Vector3();\n\n    return function(center, radius, outHit) {\n      toSphereCenterVec.copy(center).sub(this.origin);\n      const toClosestApproach = toSphereCenterVec.dot(this.direction);\n      const toClosestApproachSq = toClosestApproach * toClosestApproach;\n      const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n      const diffSq = toSphereCenterSq - toClosestApproachSq;\n      const radiusSq = radius * radius;\n\n      if (diffSq > radiusSq) return false;\n\n      const thc = Math.sqrt(radiusSq - diffSq);\n      const t0 = toClosestApproach - thc;\n      const t1 = toClosestApproach + thc;\n\n      if (t1 < 0) return false;\n      let t = t0 < 0 ? t1 : t0;\n\n      if (outHit) {\n        outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n        outHit.normal.copy(outHit.origin).sub(center).normalize();\n        outHit.distance = t;\n      }\n      return true;\n    };\n  })();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n  constructor() {\n    this.origin = new THREE.Vector3();\n    this.normal = new THREE.Vector3();\n    this.distance = 0;\n    this.splatIndex = 0;\n  }\n\n  set(origin, normal, distance, splatIndex) {\n    this.origin.copy(origin);\n    this.normal.copy(normal);\n    this.distance = distance;\n    this.splatIndex = splatIndex;\n  }\n\n  clone() {\n    const hitClone = new Hit();\n    hitClone.origin.copy(this.origin);\n    hitClone.normal.copy(this.normal);\n    hitClone.distance = this.distance;\n    hitClone.splatIndex = this.splatIndex;\n    return hitClone;\n  }\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\n\nexport class Raycaster {\n  constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n    this.ray = new Ray(origin, direction);\n    this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n  }\n\n  setFromCameraAndScreenPosition = (function() {\n    const ndcCoords = new THREE.Vector2();\n\n    return function(camera, screenPosition, screenDimensions) {\n      ndcCoords.x = (screenPosition.x / screenDimensions.x) * 2.0 - 1.0;\n      ndcCoords.y =\n        ((screenDimensions.y - screenPosition.y) / screenDimensions.y) * 2.0 -\n        1.0;\n      if (camera.isPerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction\n          .set(ndcCoords.x, ndcCoords.y, 0.5)\n          .unproject(camera)\n          .sub(this.ray.origin)\n          .normalize();\n        this.camera = camera;\n      } else if (camera.isOrthographicCamera) {\n        this.ray.origin\n          .set(\n            ndcCoords.x,\n            ndcCoords.y,\n            (camera.near + camera.far) / (camera.near - camera.far),\n          )\n          .unproject(camera);\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        this.camera = camera;\n      } else {\n        throw new Error(\n          'Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type',\n        );\n      }\n    };\n  })();\n\n  intersectSplatMesh = (function() {\n    const toLocal = new THREE.Matrix4();\n    const fromLocal = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const localRay = new Ray();\n    const tempPoint = new THREE.Vector3();\n\n    return function(splatMesh, outHits = []) {\n      const splatTree = splatMesh.getSplatTree();\n\n      if (!splatTree) return;\n\n      for (let s = 0; s < splatTree.subTrees.length; s++) {\n        const subTree = splatTree.subTrees[s];\n\n        fromLocal.copy(splatMesh.matrixWorld);\n        if (splatMesh.dynamicMode) {\n          splatMesh.getSceneTransform(s, sceneTransform);\n          fromLocal.multiply(sceneTransform);\n        }\n        toLocal.copy(fromLocal).invert();\n\n        localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n        localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n        localRay.direction\n          .applyMatrix4(toLocal)\n          .sub(localRay.origin)\n          .normalize();\n\n        const outHitsForSubTree = [];\n        if (subTree.rootNode) {\n          this.castRayAtSplatTreeNode(\n            localRay,\n            splatTree,\n            subTree.rootNode,\n            outHitsForSubTree,\n          );\n        }\n\n        outHitsForSubTree.forEach((hit) => {\n          hit.origin.applyMatrix4(fromLocal);\n          hit.normal.applyMatrix4(fromLocal).normalize();\n          hit.distance = tempPoint\n            .copy(hit.origin)\n            .sub(this.ray.origin)\n            .length();\n        });\n\n        outHits.push(...outHitsForSubTree);\n      }\n\n      outHits.sort((a, b) => {\n        if (a.distance > b.distance) return 1;\n        else return -1;\n      });\n\n      return outHits;\n    };\n  })();\n\n  castRayAtSplatTreeNode = (function() {\n    const tempColor = new THREE.Vector4();\n    const tempCenter = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n    const tempHit = new Hit();\n    const scaleEpsilon = 0.0000001;\n\n    const origin = new THREE.Vector3(0, 0, 0);\n    const uniformScaleMatrix = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const toSphereSpace = new THREE.Matrix4();\n    const fromSphereSpace = new THREE.Matrix4();\n    const tempRay = new Ray();\n\n    return function(ray, splatTree, node, outHits = []) {\n      if (!ray.intersectBox(node.boundingBox)) {\n        return;\n      }\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        for (let i = 0; i < node.data.indexes.length; i++) {\n          const splatGlobalIndex = node.data.indexes[i];\n          const splatSceneIndex =\n            splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\n          const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\n          if (!splatScene.visible) continue;\n\n          splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n          splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n          splatTree.splatMesh.getSplatScaleAndRotation(\n            splatGlobalIndex,\n            tempScale,\n            tempRotation,\n          );\n\n          if (\n            tempScale.x <= scaleEpsilon ||\n            tempScale.y <= scaleEpsilon ||\n            (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD &&\n              tempScale.z <= scaleEpsilon)\n          ) {\n            continue;\n          }\n\n          if (!this.raycastAgainstTrueSplatEllipsoid) {\n            let radius = tempScale.x + tempScale.y;\n            let componentCount = 2;\n            if (\n              splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD\n            ) {\n              radius += tempScale.z;\n              componentCount = 3;\n            }\n            radius = radius / componentCount;\n            if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              outHits.push(hitClone);\n            }\n          } else {\n            scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n            rotationMatrix.makeRotationFromQuaternion(tempRotation);\n            const uniformScale = Math.log10(tempColor.w) * 2.0;\n            uniformScaleMatrix.makeScale(\n              uniformScale,\n              uniformScale,\n              uniformScale,\n            );\n            fromSphereSpace\n              .copy(uniformScaleMatrix)\n              .multiply(rotationMatrix)\n              .multiply(scaleMatrix);\n            toSphereSpace.copy(fromSphereSpace).invert();\n            tempRay.origin\n              .copy(ray.origin)\n              .sub(tempCenter)\n              .applyMatrix4(toSphereSpace);\n            tempRay.direction\n              .copy(ray.origin)\n              .add(ray.direction)\n              .sub(tempCenter);\n            tempRay.direction\n              .applyMatrix4(toSphereSpace)\n              .sub(tempRay.origin)\n              .normalize();\n            if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n              outHits.push(hitClone);\n            }\n          }\n        }\n      }\n      if (node.children && node.children.length > 0) {\n        for (let child of node.children) {\n          this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n        }\n      }\n      return outHits;\n    };\n  })();\n}\n","import * as THREE from 'three';\nimport { Constants } from '../Constants.js';\n\nexport class SplatMaterial {\n  static buildVertexShaderBase(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    customVars = '',\n  ) {\n    let vertexShaderSource = `\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n            uniform float sceneOpacity[${Constants.MaxScenes}];\n            uniform int sceneVisibility[${Constants.MaxScenes}];\n        `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\n        `;\n    }\n\n    vertexShaderSource += `\n        ${customVars}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        void main () {\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = modelViewMatrix * transform;\n            `;\n    } else {\n      vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n    }\n\n    vertexShaderSource += `\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        `;\n\n    // Proceed to sampling and rendering 1st degree spherical harmonics\n    if (maxSphericalHarmonicsDegree >= 1) {\n      vertexShaderSource += `   \n            if (sphericalHarmonicsDegree >= 1) {\n            `;\n\n      if (dynamicMode) {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                `;\n      } else {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                `;\n      }\n\n      vertexShaderSource += `\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            `;\n\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n                    vec3 sh4;\n                    vec3 sh5;\n                    vec3 sh6;\n                    vec3 sh7;\n                    vec3 sh8;\n                `;\n      }\n\n      // Determining how to sample spherical harmonics textures to get the coefficients for calculations for a given degree\n      // depends on how many total degrees (maxSphericalHarmonicsDegree) are present in the textures. This is because that\n      // number affects how they are packed in the textures, and therefore the offset & stride required to access them.\n\n      // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n      if (maxSphericalHarmonicsDegree === 1) {\n        vertexShaderSource += `\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                `;\n        // Sample spherical harmonics textures with 2 degrees worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n      } else if (maxSphericalHarmonicsDegree === 2) {\n        vertexShaderSource += `\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                `;\n      }\n\n      // Perform 1st degree spherical harmonics calculations\n      vertexShaderSource += `\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            `;\n\n      // Proceed to sampling and rendering 2nd degree spherical harmonics\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n                `;\n\n        // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\n        // and store in sh4, sh5, sh6, sh7, and sh8\n        if (maxSphericalHarmonicsDegree === 2) {\n          vertexShaderSource += `\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n                    `;\n        }\n\n        // Perform 2nd degree spherical harmonics calculations\n        vertexShaderSource += `\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                `;\n      }\n\n      vertexShaderSource += `\n\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n            }\n\n            `;\n    }\n\n    return vertexShaderSource;\n  }\n\n  static getVertexShaderFadeIn() {\n    return `\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        `;\n  }\n\n  static getUniforms(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n  ) {\n    const uniforms = {\n      sceneCenter: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      fadeInComplete: {\n        type: 'i',\n        value: 0,\n      },\n      orthographicMode: {\n        type: 'i',\n        value: 0,\n      },\n      visibleRegionFadeStartRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      visibleRegionRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      currentTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      firstRenderTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      centersColorsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureR: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureG: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureB: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonics8BitCompressionRangeMin: {\n        type: 'f',\n        value: [],\n      },\n      sphericalHarmonics8BitCompressionRangeMax: {\n        type: 'f',\n        value: [],\n      },\n      focal: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      orthoZoom: {\n        type: 'f',\n        value: 1.0,\n      },\n      inverseFocalAdjustment: {\n        type: 'f',\n        value: 1.0,\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      basisViewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      debugColor: {\n        type: 'v3',\n        value: new THREE.Color(),\n      },\n      centersColorsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonicsDegree: {\n        type: 'i',\n        value: maxSphericalHarmonicsDegree,\n      },\n      sphericalHarmonicsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonics8BitMode: {\n        type: 'i',\n        value: 0,\n      },\n      sphericalHarmonicsMultiTextureMode: {\n        type: 'i',\n        value: 0,\n      },\n      splatScale: {\n        type: 'f',\n        value: splatScale,\n      },\n      pointCloudModeEnabled: {\n        type: 'i',\n        value: pointCloudModeEnabled ? 1 : 0,\n      },\n      sceneIndexesTexture: {\n        type: 't',\n        value: null,\n      },\n      sceneIndexesTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sceneCount: {\n        type: 'i',\n        value: 1,\n      },\n    };\n    for (let i = 0; i < Constants.MaxScenes; i++) {\n      uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(\n        -Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n      uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(\n        Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n    }\n\n    if (enableOptionalEffects) {\n      const sceneOpacity = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneOpacity.push(1.0);\n      }\n      uniforms['sceneOpacity'] = {\n        type: 'f',\n        value: sceneOpacity,\n      };\n\n      const sceneVisibility = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneVisibility.push(1);\n      }\n      uniforms['sceneVisibility'] = {\n        type: 'i',\n        value: sceneVisibility,\n      };\n    }\n\n    if (dynamicMode) {\n      const transformMatrices = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        transformMatrices.push(new THREE.Matrix4());\n      }\n      uniforms['transforms'] = {\n        type: 'mat4',\n        value: transformMatrices,\n      };\n    }\n\n    return uniforms;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial3D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n   *                              different resolution than that of their training\n   * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 2048,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(\n      antialiased,\n      enableOptionalEffects,\n      maxScreenSpaceSplatSize,\n    );\n    const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['covariancesTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n    uniforms['covariancesTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesTextureHalfFloat'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesAreHalfFloat'] = {\n      type: 'i',\n      value: 0,\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection(\n    antialiased,\n    enableOptionalEffects,\n    maxScreenSpaceSplatSize,\n  ) {\n    let vertexShaderSource = `\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            `;\n\n    if (antialiased) {\n      vertexShaderSource += `\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `;\n    } else {\n      vertexShaderSource += `\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n            `;\n    }\n\n    vertexShaderSource += `\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                vColor.a *= splatOpacityFromScene;\n            `;\n    }\n\n    vertexShaderSource += `\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        `;\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n        `;\n\n    fragmentShaderSource += `\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial2D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\n    const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['scaleRotationsTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['scaleRotationsTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection() {\n    // Original CUDA code for calculating splat-to-screen transformation, for reference\n    /*\n            glm::mat3 R = quat_to_rotmat(rot);\n            glm::mat3 S = scale_to_mat(scale, mod);\n            glm::mat3 L = R * S;\n\n            // center of Gaussians in the camera coordinate\n            glm::mat3x4 splat2world = glm::mat3x4(\n                glm::vec4(L[0], 0.0),\n                glm::vec4(L[1], 0.0),\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\n            );\n\n            glm::mat4 world2ndc = glm::mat4(\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\n            );\n\n            glm::mat3x4 ndc2pix = glm::mat3x4(\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\n            );\n\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\n        */\n\n    // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\n    // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\n    let vertexShaderSource = `\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        `;\n\n    // Original CUDA code for projection to 2D, for reference\n    /*\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\n\n            // Compute AABB\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\n            float distance = sumf3(T3 * T3 * temp_point);\n            float3 f = (1 / distance) * temp_point;\n            if (distance == 0.0) return false;\n\n            point_image = {\n                sumf3(f * T0 * T3),\n                sumf3(f * T1 * T3)\n            };\n\n            float2 temp = {\n                sumf3(f * T0 * T0),\n                sumf3(f * T1 * T1)\n            };\n            float2 half_extend = point_image * point_image - temp;\n            extent = sqrtf2(maxf2(1e-4, half_extend));\n            return true;\n        */\n\n    // Computing the bounding box of the 2D Gaussian and its center\n    // The center of the bounding box is used to create a low pass filter.\n    // This code is based off the reference implementation and creates an AABB aligned\n    // with the screen for the quad to be rendered.\n    const referenceQuadGeneration = `\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        `;\n\n    const useRefImplementation = false;\n    if (useRefImplementation) {\n      vertexShaderSource += referenceQuadGeneration;\n    } else {\n      // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\n      // This is a different approach than the reference implementation, similar to how the rendering of\n      // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\n      // (smaller than a pixel), then revert to the reference implementation.\n      vertexShaderSource += `\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${referenceQuadGeneration}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `;\n    }\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    // Original CUDA code for splat intersection, for reference\n    /*\n            const float2 xy = collected_xy[j];\n            const float3 Tu = collected_Tu[j];\n            const float3 Tv = collected_Tv[j];\n            const float3 Tw = collected_Tw[j];\n            float3 k = pix.x * Tw - Tu;\n            float3 l = pix.y * Tw - Tv;\n            float3 p = cross(k, l);\n            if (p.z == 0.0) continue;\n            float2 s = {p.x / p.z, p.y / p.z};\n            float rho3d = (s.x * s.x + s.y * s.y);\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\n\n            // compute intersection and depth\n            float rho = min(rho3d, rho2d);\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\n            if (depth < near_n) continue;\n            float4 nor_o = collected_normal_opacity[j];\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n            float opa = nor_o.w;\n\n            float power = -0.5f * rho;\n            if (power > 0.0f)\n                continue;\n\n            // Eq. (2) from 3D Gaussian splatting paper.\n            // Obtain alpha by multiplying with Gaussian opacity\n            // and its exponential falloff from mean.\n            // Avoid numerical instabilities (see paper appendix).\n            float alpha = min(0.99f, opa * exp(power));\n            if (alpha < 1.0f / 255.0f)\n                continue;\n            float test_T = T * (1 - alpha);\n            if (test_T < 0.0001f)\n            {\n                done = true;\n                continue;\n            }\n\n            float w = alpha * T;\n        */\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\n\nexport class SplatGeometry {\n  /**\n   * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n   * vertices for a single quad as well as an attribute buffer for the splat indexes.\n   * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n   * @return {THREE.InstancedBufferGeometry}\n   */\n  static build(maxSplatCount) {\n    const baseGeometry = new THREE.BufferGeometry();\n    baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n    // Vertices for the instanced quad\n    const positionsArray = new Float32Array(4 * 3);\n    const positions = new THREE.BufferAttribute(positionsArray, 3);\n    baseGeometry.setAttribute('position', positions);\n    positions.setXYZ(0, -1.0, -1.0, 0.0);\n    positions.setXYZ(1, -1.0, 1.0, 0.0);\n    positions.setXYZ(2, 1.0, 1.0, 0.0);\n    positions.setXYZ(3, 1.0, -1.0, 0.0);\n    positions.needsUpdate = true;\n\n    const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n    // Splat index buffer\n    const splatIndexArray = new Uint32Array(maxSplatCount);\n    const splatIndexes = new THREE.InstancedBufferAttribute(\n      splatIndexArray,\n      1,\n      false,\n    );\n    splatIndexes.setUsage(THREE.DynamicDrawUsage);\n    geometry.setAttribute('splatIndex', splatIndexes);\n\n    geometry.instanceCount = 0;\n\n    return geometry;\n  }\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene extends THREE.Object3D {\n  constructor(\n    splatBuffer,\n    position = new THREE.Vector3(),\n    quaternion = new THREE.Quaternion(),\n    scale = new THREE.Vector3(1, 1, 1),\n    minimumAlpha = 1,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    super();\n    this.splatBuffer = splatBuffer;\n    this.position.copy(position);\n    this.quaternion.copy(quaternion);\n    this.scale.copy(scale);\n    this.transform = new THREE.Matrix4();\n    this.minimumAlpha = minimumAlpha;\n    this.opacity = opacity;\n    this.visible = visible;\n  }\n\n  copyTransformData(otherScene) {\n    this.position.copy(otherScene.position);\n    this.quaternion.copy(otherScene.quaternion);\n    this.scale.copy(otherScene.scale);\n    this.transform.copy(otherScene.transform);\n  }\n\n  updateTransform(dynamicMode) {\n    if (dynamicMode) {\n      if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\n      this.transform.copy(this.matrixWorld);\n    } else {\n      if (this.matrixAutoUpdate) this.updateMatrix();\n      this.transform.copy(this.matrix);\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n  static idGen = 0;\n\n  constructor(min, max, depth, id) {\n    this.min = new THREE.Vector3().copy(min);\n    this.max = new THREE.Vector3().copy(max);\n    this.boundingBox = new THREE.Box3(this.min, this.max);\n    this.center = new THREE.Vector3()\n      .copy(this.max)\n      .sub(this.min)\n      .multiplyScalar(0.5)\n      .add(this.min);\n    this.depth = depth;\n    this.children = [];\n    this.data = null;\n    this.id = id || SplatTreeNode.idGen++;\n  }\n}\n\nclass SplatSubTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.sceneDimensions = new THREE.Vector3();\n    this.sceneMin = new THREE.Vector3();\n    this.sceneMax = new THREE.Vector3();\n    this.rootNode = null;\n    this.nodesWithIndexes = [];\n    this.splatMesh = null;\n  }\n\n  static convertWorkerSubTreeNode(workerSubTreeNode) {\n    const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n    const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n    const convertedNode = new SplatTreeNode(\n      minVector,\n      maxVector,\n      workerSubTreeNode.depth,\n      workerSubTreeNode.id,\n    );\n    if (workerSubTreeNode.data.indexes) {\n      convertedNode.data = {\n        indexes: [],\n      };\n      for (let index of workerSubTreeNode.data.indexes) {\n        convertedNode.data.indexes.push(index);\n      }\n    }\n    if (workerSubTreeNode.children) {\n      for (let child of workerSubTreeNode.children) {\n        convertedNode.children.push(\n          SplatSubTree.convertWorkerSubTreeNode(child),\n        );\n      }\n    }\n    return convertedNode;\n  }\n\n  static convertWorkerSubTree(workerSubTree, splatMesh) {\n    const convertedSubTree = new SplatSubTree(\n      workerSubTree.maxDepth,\n      workerSubTree.maxCentersPerNode,\n    );\n    convertedSubTree.sceneMin = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMin,\n    );\n    convertedSubTree.sceneMax = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMax,\n    );\n\n    convertedSubTree.splatMesh = splatMesh;\n    convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(\n      workerSubTree.rootNode,\n    );\n\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    convertedSubTree.nodesWithIndexes = [];\n    visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        convertedSubTree.nodesWithIndexes.push(node);\n      }\n    });\n\n    return convertedSubTree;\n  }\n}\n\nfunction createSplatTreeWorker(self) {\n  let WorkerSplatTreeNodeIDGen = 0;\n\n  class WorkerBox3 {\n    constructor(min, max) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n    }\n\n    containsPoint(point) {\n      return (\n        point[0] >= this.min[0] &&\n        point[0] <= this.max[0] &&\n        point[1] >= this.min[1] &&\n        point[1] <= this.max[1] &&\n        point[2] >= this.min[2] &&\n        point[2] <= this.max[2]\n      );\n    }\n  }\n\n  class WorkerSplatSubTree {\n    constructor(maxDepth, maxCentersPerNode) {\n      this.maxDepth = maxDepth;\n      this.maxCentersPerNode = maxCentersPerNode;\n      this.sceneDimensions = [];\n      this.sceneMin = [];\n      this.sceneMax = [];\n      this.rootNode = null;\n      this.addedIndexes = {};\n      this.nodesWithIndexes = [];\n      this.splatMesh = null;\n      this.disposed = false;\n    }\n  }\n\n  class WorkerSplatTreeNode {\n    constructor(min, max, depth, id) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n      this.center = [\n        (max[0] - min[0]) * 0.5 + min[0],\n        (max[1] - min[1]) * 0.5 + min[1],\n        (max[2] - min[2]) * 0.5 + min[2],\n      ];\n      this.depth = depth;\n      this.children = [];\n      this.data = null;\n      this.id = id || WorkerSplatTreeNodeIDGen++;\n    }\n  }\n\n  processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n    const splatCount = node.data.indexes.length;\n\n    if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n      const newIndexes = [];\n      for (let i = 0; i < node.data.indexes.length; i++) {\n        if (!tree.addedIndexes[node.data.indexes[i]]) {\n          newIndexes.push(node.data.indexes[i]);\n          tree.addedIndexes[node.data.indexes[i]] = true;\n        }\n      }\n      node.data.indexes = newIndexes;\n      node.data.indexes.sort((a, b) => {\n        if (a > b) return 1;\n        else return -1;\n      });\n      tree.nodesWithIndexes.push(node);\n      return;\n    }\n\n    const nodeDimensions = [\n      node.max[0] - node.min[0],\n      node.max[1] - node.min[1],\n      node.max[2] - node.min[2],\n    ];\n    const halfDimensions = [\n      nodeDimensions[0] * 0.5,\n      nodeDimensions[1] * 0.5,\n      nodeDimensions[2] * 0.5,\n    ];\n    const nodeCenter = [\n      node.min[0] + halfDimensions[0],\n      node.min[1] + halfDimensions[1],\n      node.min[2] + halfDimensions[2],\n    ];\n\n    const childrenBounds = [\n      // top section, clockwise from upper-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n\n      // bottom section, clockwise from lower-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]],\n      ),\n    ];\n\n    const splatCounts = [];\n    const baseIndexes = [];\n    for (let i = 0; i < childrenBounds.length; i++) {\n      splatCounts[i] = 0;\n      baseIndexes[i] = [];\n    }\n\n    const center = [0, 0, 0];\n    for (let i = 0; i < splatCount; i++) {\n      const splatGlobalIndex = node.data.indexes[i];\n      const centerBase = indexToCenter[splatGlobalIndex];\n      center[0] = sceneCenters[centerBase];\n      center[1] = sceneCenters[centerBase + 1];\n      center[2] = sceneCenters[centerBase + 2];\n      for (let j = 0; j < childrenBounds.length; j++) {\n        if (childrenBounds[j].containsPoint(center)) {\n          splatCounts[j]++;\n          baseIndexes[j].push(splatGlobalIndex);\n        }\n      }\n    }\n\n    for (let i = 0; i < childrenBounds.length; i++) {\n      const childNode = new WorkerSplatTreeNode(\n        childrenBounds[i].min,\n        childrenBounds[i].max,\n        node.depth + 1,\n      );\n      childNode.data = {\n        indexes: baseIndexes[i],\n      };\n      node.children.push(childNode);\n    }\n\n    node.data = {};\n    for (let child of node.children) {\n      processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n    }\n    return;\n  };\n\n  const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n    const sceneMin = [0, 0, 0];\n    const sceneMax = [0, 0, 0];\n    const indexes = [];\n    const centerCount = Math.floor(sceneCenters.length / 4);\n    for (let i = 0; i < centerCount; i++) {\n      const base = i * 4;\n      const x = sceneCenters[base];\n      const y = sceneCenters[base + 1];\n      const z = sceneCenters[base + 2];\n      const index = Math.round(sceneCenters[base + 3]);\n      if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n      if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n      if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n      if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n      if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n      if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n      indexes.push(index);\n    }\n    const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n    subTree.sceneMin = sceneMin;\n    subTree.sceneMax = sceneMax;\n    subTree.rootNode = new WorkerSplatTreeNode(\n      subTree.sceneMin,\n      subTree.sceneMax,\n      0,\n    );\n    subTree.rootNode.data = {\n      indexes: indexes,\n    };\n\n    return subTree;\n  };\n\n  function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n    const indexToCenter = [];\n    for (let sceneCenters of allCenters) {\n      const centerCount = Math.floor(sceneCenters.length / 4);\n      for (let i = 0; i < centerCount; i++) {\n        const base = i * 4;\n        const index = Math.round(sceneCenters[base + 3]);\n        indexToCenter[index] = base;\n      }\n    }\n    const subTrees = [];\n    for (let sceneCenters of allCenters) {\n      const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n      subTrees.push(subTree);\n      processSplatTreeNode(\n        subTree,\n        subTree.rootNode,\n        indexToCenter,\n        sceneCenters,\n      );\n    }\n    self.postMessage({\n      subTrees: subTrees,\n    });\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.process) {\n      createSplatTree(\n        e.data.process.centers,\n        e.data.process.maxDepth,\n        e.data.process.maxCentersPerNode,\n      );\n    }\n  };\n}\n\nfunction workerProcessCenters(\n  splatTreeWorker,\n  centers,\n  transferBuffers,\n  maxDepth,\n  maxCentersPerNode,\n) {\n  splatTreeWorker.postMessage(\n    {\n      process: {\n        centers: centers,\n        maxDepth: maxDepth,\n        maxCentersPerNode: maxCentersPerNode,\n      },\n    },\n    transferBuffers,\n  );\n}\n\nfunction checkAndCreateWorker() {\n  const splatTreeWorker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n  return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.subTrees = [];\n    this.splatMesh = null;\n  }\n\n  dispose() {\n    this.diposeSplatTreeWorker();\n    this.disposed = true;\n  }\n\n  diposeSplatTreeWorker() {\n    if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n    this.splatTreeWorker = null;\n  }\n\n  /**\n   * Construct this instance of SplatTree from an instance of SplatMesh.\n   *\n   * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n   * @param {function} filterFunc Optional function to filter out unwanted splats.\n   * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                   builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {undefined}\n   */\n  processSplatMesh = function(\n    splatMesh,\n    filterFunc = () => true,\n    onIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n    this.splatMesh = splatMesh;\n    this.subTrees = [];\n    const center = new THREE.Vector3();\n\n    const addCentersForScene = (splatOffset, splatCount) => {\n      const sceneCenters = new Float32Array(splatCount * 4);\n      let addedCount = 0;\n      for (let i = 0; i < splatCount; i++) {\n        const globalSplatIndex = i + splatOffset;\n        if (filterFunc(globalSplatIndex)) {\n          splatMesh.getSplatCenter(globalSplatIndex, center);\n          const addBase = addedCount * 4;\n          sceneCenters[addBase] = center.x;\n          sceneCenters[addBase + 1] = center.y;\n          sceneCenters[addBase + 2] = center.z;\n          sceneCenters[addBase + 3] = globalSplatIndex;\n          addedCount++;\n        }\n      }\n      return sceneCenters;\n    };\n\n    return new Promise((resolve) => {\n      const checkForEarlyExit = () => {\n        if (this.disposed) {\n          this.diposeSplatTreeWorker();\n          resolve();\n          return true;\n        }\n        return false;\n      };\n\n      if (onIndexesUpload) onIndexesUpload(false);\n\n      delayedExecute(() => {\n        if (checkForEarlyExit()) return;\n\n        const allCenters = [];\n        if (splatMesh.dynamicMode) {\n          let splatOffset = 0;\n          for (let s = 0; s < splatMesh.scenes.length; s++) {\n            const scene = splatMesh.getScene(s);\n            const splatCount = scene.splatBuffer.getSplatCount();\n            const sceneCenters = addCentersForScene(splatOffset, splatCount);\n            allCenters.push(sceneCenters);\n            splatOffset += splatCount;\n          }\n        } else {\n          const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n          allCenters.push(sceneCenters);\n        }\n\n        this.splatTreeWorker.onmessage = (e) => {\n          if (checkForEarlyExit()) return;\n\n          if (e.data.subTrees) {\n            if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n            delayedExecute(() => {\n              if (checkForEarlyExit()) return;\n\n              for (let workerSubTree of e.data.subTrees) {\n                const convertedSubTree = SplatSubTree.convertWorkerSubTree(\n                  workerSubTree,\n                  splatMesh,\n                );\n                this.subTrees.push(convertedSubTree);\n              }\n              this.diposeSplatTreeWorker();\n\n              if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n              delayedExecute(() => {\n                resolve();\n              });\n            });\n          }\n        };\n\n        delayedExecute(() => {\n          if (checkForEarlyExit()) return;\n          if (onIndexesUpload) onIndexesUpload(true);\n          const transferBuffers = allCenters.map((array) => array.buffer);\n          workerProcessCenters(\n            this.splatTreeWorker,\n            allCenters,\n            transferBuffers,\n            this.maxDepth,\n            this.maxCentersPerNode,\n          );\n        });\n      });\n    });\n  };\n\n  countLeaves() {\n    let leafCount = 0;\n    this.visitLeaves(() => {\n      leafCount++;\n    });\n\n    return leafCount;\n  }\n\n  visitLeaves(visitFunc) {\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    for (let subTree of this.subTrees) {\n      visitLeavesFromNode(subTree.rootNode, visitFunc);\n    }\n  }\n}\n","function WebGLExtensions(gl) {\n  const extensions = {};\n\n  function getExtension(name) {\n    if (extensions[name] !== undefined) {\n      return extensions[name];\n    }\n\n    let extension;\n\n    switch (name) {\n      case 'WEBGL_depth_texture':\n        extension =\n          gl.getExtension('WEBGL_depth_texture') ||\n          gl.getExtension('MOZ_WEBGL_depth_texture') ||\n          gl.getExtension('WEBKIT_WEBGL_depth_texture');\n        break;\n\n      case 'EXT_texture_filter_anisotropic':\n        extension =\n          gl.getExtension('EXT_texture_filter_anisotropic') ||\n          gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n          gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        break;\n\n      case 'WEBGL_compressed_texture_s3tc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n        break;\n\n      case 'WEBGL_compressed_texture_pvrtc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_pvrtc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n        break;\n\n      default:\n        extension = gl.getExtension(name);\n    }\n\n    extensions[name] = extension;\n\n    return extension;\n  }\n\n  return {\n    has: function(name) {\n      return getExtension(name) !== null;\n    },\n\n    init: function(capabilities) {\n      if (capabilities.isWebGL2) {\n        getExtension('EXT_color_buffer_float');\n        getExtension('WEBGL_clip_cull_distance');\n      } else {\n        getExtension('WEBGL_depth_texture');\n        getExtension('OES_texture_float');\n        getExtension('OES_texture_half_float');\n        getExtension('OES_texture_half_float_linear');\n        getExtension('OES_standard_derivatives');\n        getExtension('OES_element_index_uint');\n        getExtension('OES_vertex_array_object');\n        getExtension('ANGLE_instanced_arrays');\n      }\n\n      getExtension('OES_texture_float_linear');\n      getExtension('EXT_color_buffer_half_float');\n      getExtension('WEBGL_multisampled_render_to_texture');\n    },\n\n    get: function(name) {\n      const extension = getExtension(name);\n\n      if (extension === null) {\n        console.warn(\n          'THREE.WebGLRenderer: ' + name + ' extension not supported.',\n        );\n      }\n\n      return extension;\n    },\n  };\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities(gl, extensions, parameters) {\n  let maxAnisotropy;\n\n  function getMaxAnisotropy() {\n    if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    } else {\n      maxAnisotropy = 0;\n    }\n\n    return maxAnisotropy;\n  }\n\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision >\n          0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n          .precision > 0\n      ) {\n        return 'highp';\n      }\n\n      precision = 'mediump';\n    }\n\n    if (precision === 'mediump') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0\n      ) {\n        return 'mediump';\n      }\n    }\n\n    return 'lowp';\n  }\n\n  const isWebGL2 =\n    typeof WebGL2RenderingContext !== 'undefined' &&\n    gl.constructor.name === 'WebGL2RenderingContext';\n\n  let precision =\n    parameters.precision !== undefined ? parameters.precision : 'highp';\n  const maxPrecision = getMaxPrecision(precision);\n\n  if (maxPrecision !== precision) {\n    console.warn(\n      'THREE.WebGLRenderer:',\n      precision,\n      'not supported, using',\n      maxPrecision,\n      'instead.',\n    );\n    precision = maxPrecision;\n  }\n\n  const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\n  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n  const vertexTextures = maxVertexTextures > 0;\n  const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n  const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n  const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\n  return {\n    isWebGL2: isWebGL2,\n\n    drawBuffers: drawBuffers,\n\n    getMaxAnisotropy: getMaxAnisotropy,\n    getMaxPrecision: getMaxPrecision,\n\n    precision: precision,\n    logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    maxTextures: maxTextures,\n    maxVertexTextures: maxVertexTextures,\n    maxTextureSize: maxTextureSize,\n    maxCubemapSize: maxCubemapSize,\n\n    maxAttributes: maxAttributes,\n    maxVertexUniforms: maxVertexUniforms,\n    maxVaryings: maxVaryings,\n    maxFragmentUniforms: maxFragmentUniforms,\n\n    vertexTextures: vertexTextures,\n    floatFragmentTextures: floatFragmentTextures,\n    floatVertexTextures: floatVertexTextures,\n\n    maxSamples: maxSamples,\n  };\n}\n\nexport { WebGLCapabilities };\n","import * as THREE from 'three';\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\nimport { SplatGeometry } from './SplatGeometry.js';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from '../splattree/SplatTree.js';\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\nimport { Constants } from '../Constants.js';\nimport { SceneRevealMode } from '../SceneRevealMode.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\nimport { LogLevel } from '../LogLevel.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\nconst MAX_TEXTURE_TEXELS = 16777216;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n  constructor(\n    splatRenderMode = SplatRenderMode.ThreeD,\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    halfPrecisionCovariancesOnGPU = false,\n    devicePixelRatio = 1,\n    enableDistancesComputationOnGPU = true,\n    integerBasedDistancesComputation = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 1024,\n    logLevel = LogLevel.None,\n    sphericalHarmonicsDegree = 0,\n    sceneFadeInRateMultiplier = 1.0,\n  ) {\n    super(dummyGeometry, dummyMaterial);\n\n    // Reference to a Three.js renderer\n    this.renderer = undefined;\n\n    // Determine how the splats are rendered\n    this.splatRenderMode = splatRenderMode;\n\n    // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n    // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n    // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n    // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n    this.dynamicMode = dynamicMode;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = enableOptionalEffects;\n\n    // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n\n    // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n    this.devicePixelRatio = devicePixelRatio;\n\n    // Use a transform feedback to calculate splat distances from the camera\n    this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n\n    // Use a faster integer-based approach for calculating splat distances from the camera\n    this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = antialiased;\n\n    // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n\n    // The verbosity of console logging\n    this.logLevel = logLevel;\n\n    // Degree 0 means no spherical harmonics\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n    this.minSphericalHarmonicsDegree = 0;\n\n    this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\n\n    // The individual splat scenes stored in this splat mesh, each containing their own transform\n    this.scenes = [];\n\n    // Special octree tailored to SplatMesh instances\n    this.splatTree = null;\n    this.baseSplatTree = null;\n\n    // Cache textures and the intermediate data used to populate them\n    this.splatDataTextures = {};\n\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = false;\n    this.lastRenderer = null;\n    this.visible = false;\n  }\n\n  /**\n   * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n   * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n   * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n   * @param {Array<object>} sceneOptions Array of options objects: {\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @return {Array<THREE.Matrix4>}\n   */\n  static buildScenes(parentObject, splatBuffers, sceneOptions) {\n    const scenes = [];\n    scenes.length = splatBuffers.length;\n    for (let i = 0; i < splatBuffers.length; i++) {\n      const splatBuffer = splatBuffers[i];\n      const options = sceneOptions[i] || {};\n      let positionArray = options['position'] || [0, 0, 0];\n      let rotationArray = options['rotation'] || [0, 0, 0, 1];\n      let scaleArray = options['scale'] || [1, 1, 1];\n      const position = new THREE.Vector3().fromArray(positionArray);\n      const rotation = new THREE.Quaternion().fromArray(rotationArray);\n      const scale = new THREE.Vector3().fromArray(scaleArray);\n      const scene = SplatMesh.createScene(\n        splatBuffer,\n        position,\n        rotation,\n        scale,\n        options.splatAlphaRemovalThreshold || 1,\n        options.opacity,\n        options.visible,\n      );\n      parentObject.add(scene);\n      scenes[i] = scene;\n    }\n    return scenes;\n  }\n\n  static createScene(\n    splatBuffer,\n    position,\n    rotation,\n    scale,\n    minimumAlpha,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    return new SplatScene(\n      splatBuffer,\n      position,\n      rotation,\n      scale,\n      minimumAlpha,\n      opacity,\n      visible,\n    );\n  }\n\n  /**\n   * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n   * local data within a single scene.\n   * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n   * @return {object}\n   */\n  static buildSplatIndexMaps(splatBuffers) {\n    const localSplatIndexMap = [];\n    const sceneIndexMap = [];\n    let totalSplatCount = 0;\n    for (let s = 0; s < splatBuffers.length; s++) {\n      const splatBuffer = splatBuffers[s];\n      const maxSplatCount = splatBuffer.getMaxSplatCount();\n      for (let i = 0; i < maxSplatCount; i++) {\n        localSplatIndexMap[totalSplatCount] = i;\n        sceneIndexMap[totalSplatCount] = s;\n        totalSplatCount++;\n      }\n    }\n    return {\n      localSplatIndexMap,\n      sceneIndexMap,\n    };\n  }\n\n  /**\n   * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n   * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {SplatTree}\n   */\n  buildSplatTree = function(\n    minAlphas = [],\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    return new Promise((resolve) => {\n      this.disposeSplatTree();\n      // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n      // be configured on a per-scene basis\n      this.baseSplatTree = new SplatTree(8, 1000);\n      const buildStartTime = performance.now();\n      const splatColor = new THREE.Vector4();\n      this.baseSplatTree\n        .processSplatMesh(\n          this,\n          (splatIndex) => {\n            this.getSplatColor(splatIndex, splatColor);\n            const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n            const minAlpha = minAlphas[sceneIndex] || 1;\n            return splatColor.w >= minAlpha;\n          },\n          onSplatTreeIndexesUpload,\n          onSplatTreeConstruction,\n        )\n        .then(() => {\n          const buildTime = performance.now() - buildStartTime;\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('SplatTree build: ' + buildTime + ' ms');\n          }\n          if (this.disposed) {\n            resolve();\n          } else {\n            this.splatTree = this.baseSplatTree;\n            this.baseSplatTree = null;\n\n            let leavesWithVertices = 0;\n            let avgSplatCount = 0;\n            let maxSplatCount = 0;\n            let nodeCount = 0;\n\n            this.splatTree.visitLeaves((node) => {\n              const nodeSplatCount = node.data.indexes.length;\n              if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n              }\n            });\n            if (this.logLevel >= LogLevel.Info) {\n              console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n              console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n              avgSplatCount = avgSplatCount / nodeCount;\n              console.log(`Avg splat count per node: ${avgSplatCount}`);\n              console.log(`Total splat count: ${this.getSplatCount()}`);\n            }\n            resolve();\n          }\n        });\n    });\n  };\n\n  /**\n   * Construct this instance of SplatMesh.\n   * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n   * @param {Array<object>} sceneOptions Dynamic options for each scene {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   * }\n   * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n   *                                      says to keep the transform from the existing scene.\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  build(\n    splatBuffers,\n    sceneOptions,\n    keepSceneTransforms = true,\n    finalBuild = false,\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n    preserveVisibleRegion = true,\n  ) {\n    this.sceneOptions = sceneOptions;\n    this.finalBuild = finalBuild;\n\n    const maxSplatCount =\n      SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n    const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\n    if (keepSceneTransforms) {\n      for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n        const newScene = newScenes[i];\n        const existingScene = this.getScene(i);\n        newScene.copyTransformData(existingScene);\n      }\n    }\n    this.scenes = newScenes;\n\n    let minSphericalHarmonicsDegree = 3;\n    for (let splatBuffer of splatBuffers) {\n      const splatBufferSphericalHarmonicsDegree =\n        splatBuffer.getMinSphericalHarmonicsDegree();\n      if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n        minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n      }\n    }\n    this.minSphericalHarmonicsDegree = Math.min(\n      minSphericalHarmonicsDegree,\n      this.sphericalHarmonicsDegree,\n    );\n\n    let splatBuffersChanged = false;\n    if (splatBuffers.length !== this.lastBuildScenes.length) {\n      splatBuffersChanged = true;\n    } else {\n      for (let i = 0; i < splatBuffers.length; i++) {\n        const splatBuffer = splatBuffers[i];\n        if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n          splatBuffersChanged = true;\n          break;\n        }\n      }\n    }\n\n    let isUpdateBuild = true;\n    if (\n      this.scenes.length !== 1 ||\n      this.lastBuildSceneCount !== this.scenes.length ||\n      this.lastBuildMaxSplatCount !== maxSplatCount ||\n      splatBuffersChanged\n    ) {\n      isUpdateBuild = false;\n    }\n\n    if (!isUpdateBuild) {\n      this.boundingBox = new THREE.Box3();\n      if (!preserveVisibleRegion) {\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.firstRenderTime = -1;\n      }\n      this.lastBuildScenes = [];\n      this.lastBuildSplatCount = 0;\n      this.lastBuildMaxSplatCount = 0;\n      this.disposeMeshData();\n      this.geometry = SplatGeometry.build(maxSplatCount);\n      if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n        this.material = SplatMaterial3D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.antialiased,\n          this.maxScreenSpaceSplatSize,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.minSphericalHarmonicsDegree,\n        );\n      } else {\n        this.material = SplatMaterial2D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.minSphericalHarmonicsDegree,\n        );\n      }\n\n      const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n      this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n      this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n    }\n\n    const splatBufferSplatCount = this.getSplatCount(true);\n    if (this.enableDistancesComputationOnGPU) {\n      this.setupDistancesComputationTransformFeedback();\n    }\n    const dataUpdateResults =\n      this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n    for (let i = 0; i < this.scenes.length; i++) {\n      this.lastBuildScenes[i] = this.scenes[i];\n    }\n    this.lastBuildSplatCount = splatBufferSplatCount;\n    this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n    this.lastBuildSceneCount = this.scenes.length;\n\n    if (finalBuild && this.scenes.length > 0) {\n      this.buildSplatTree(\n        sceneOptions.map((options) => options.splatAlphaRemovalThreshold || 1),\n        onSplatTreeIndexesUpload,\n        onSplatTreeConstruction,\n      ).then(() => {\n        if (this.onSplatTreeReadyCallback) {\n          this.onSplatTreeReadyCallback(this.splatTree);\n        }\n        this.onSplatTreeReadyCallback = null;\n      });\n    }\n\n    this.visible = this.scenes.length > 0;\n\n    return dataUpdateResults;\n  }\n\n  freeIntermediateSplatData() {\n    const deleteTextureData = (texture) => {\n      delete texture.source.data;\n      delete texture.image;\n      texture.onUpdate = null;\n    };\n\n    delete this.splatDataTextures.baseData.covariances;\n    delete this.splatDataTextures.baseData.centers;\n    delete this.splatDataTextures.baseData.colors;\n    delete this.splatDataTextures.baseData.sphericalHarmonics;\n\n    delete this.splatDataTextures.centerColors.data;\n    delete this.splatDataTextures.covariances.data;\n    if (this.splatDataTextures.sphericalHarmonics) {\n      delete this.splatDataTextures.sphericalHarmonics.data;\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      delete this.splatDataTextures.sceneIndexes.data;\n    }\n\n    this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    this.splatDataTextures.centerColors.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.centerColors.texture);\n    };\n\n    this.splatDataTextures.covariances.texture.needsUpdate = true;\n    this.splatDataTextures.covariances.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.covariances.texture);\n    };\n\n    if (this.splatDataTextures.sphericalHarmonics) {\n      if (this.splatDataTextures.sphericalHarmonics.texture) {\n        this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\n        this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\n          deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\n        };\n      } else {\n        this.splatDataTextures.sphericalHarmonics.textures.forEach(\n          (texture) => {\n            texture.needsUpdate = true;\n            texture.onUpdate = () => {\n              deleteTextureData(texture);\n            };\n          },\n        );\n      }\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\n      this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\n        deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\n      };\n    }\n  }\n  /**\n   * Dispose all resources held by the splat mesh\n   */\n  dispose() {\n    this.disposeMeshData();\n    this.disposeTextures();\n    this.disposeSplatTree();\n    if (this.enableDistancesComputationOnGPU) {\n      if (this.computeDistancesOnGPUSyncTimeout) {\n        clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n        this.computeDistancesOnGPUSyncTimeout = null;\n      }\n      this.disposeDistancesComputationGPUResources();\n    }\n    this.scenes = [];\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n    this.renderer = null;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = true;\n    this.lastRenderer = null;\n    this.visible = false;\n  }\n\n  /**\n   * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n   */\n  disposeMeshData() {\n    if (this.geometry && this.geometry !== dummyGeometry) {\n      this.geometry.dispose();\n      this.geometry = null;\n    }\n    if (this.material) {\n      this.material.dispose();\n      this.material = null;\n    }\n  }\n\n  disposeTextures() {\n    for (let textureKey in this.splatDataTextures) {\n      if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n        const textureContainer = this.splatDataTextures[textureKey];\n        if (textureContainer.texture) {\n          textureContainer.texture.dispose();\n          textureContainer.texture = null;\n        }\n      }\n    }\n    this.splatDataTextures = null;\n  }\n\n  disposeSplatTree() {\n    if (this.splatTree) {\n      this.splatTree.dispose();\n      this.splatTree = null;\n    }\n    if (this.baseSplatTree) {\n      this.baseSplatTree.dispose();\n      this.baseSplatTree = null;\n    }\n  }\n\n  getSplatTree() {\n    return this.splatTree;\n  }\n\n  onSplatTreeReady(callback) {\n    this.onSplatTreeReadyCallback = callback;\n  }\n\n  /**\n   * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n   * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n   * @param {*} start The index at which to start copying data\n   * @param {*} end  The index at which to stop copying data\n   * @return {object}\n   */\n  getDataForDistancesComputation(start, end) {\n    const centers = this.integerBasedDistancesComputation ?\n      this.getIntegerCenters(start, end, true) :\n      this.getFloatCenters(start, end, true);\n    const sceneIndexes = this.getSceneIndexes(start, end);\n    return {\n      centers,\n      sceneIndexes,\n    };\n  }\n\n  /**\n   * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   * @return {object}\n   */\n  refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n    const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n      updateStart,\n      splatCount - 1,\n    );\n    if (this.enableDistancesComputationOnGPU) {\n      this.refreshGPUBuffersForDistancesComputation(\n        centers,\n        sceneIndexes,\n        sinceLastBuildOnly,\n      );\n    }\n    return {\n      from: updateStart,\n      to: splatCount - 1,\n      count: splatCount - updateStart,\n      centers: centers,\n      sceneIndexes: sceneIndexes,\n    };\n  }\n\n  /**\n   * Update the GPU buffers that are used for computing splat distances on the GPU.\n   * @param {Array<number>} centers Splat center positions\n   * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshGPUBuffersForDistancesComputation(\n    centers,\n    sceneIndexes,\n    sinceLastBuildOnly = false,\n  ) {\n    const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    this.updateGPUCentersBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      centers,\n      offset,\n    );\n    this.updateGPUTransformIndexesBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      sceneIndexes,\n      offset,\n    );\n  }\n\n  /**\n   * Refresh data textures with data from the splat buffers for this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const fromSplat = this.lastBuildSplatCount;\n    const toSplat = splatCount - 1;\n\n    if (!sinceLastBuildOnly) {\n      this.setupDataTextures();\n      this.updateBaseDataFromSplatBuffers();\n    } else {\n      this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\n    }\n\n    this.updateDataTexturesFromBaseData(fromSplat, toSplat);\n    this.updateVisibleRegion(sinceLastBuildOnly);\n  }\n\n  setupDataTextures() {\n    const maxSplatCount = this.getMaxSplatCount();\n    const splatCount = this.getSplatCount(true);\n\n    this.disposeTextures();\n\n    const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\n      const texSize = new THREE.Vector2(4096, 1024);\n      while (\n        texSize.x * texSize.y * elementsPerTexel <\n        maxSplatCount * elementsPerSplat\n      ) {\n        texSize.y *= 2;\n      }\n      return texSize;\n    };\n\n    const getCovariancesElementsPertexelStored = (compressionLevel) => {\n      return compressionLevel >= 1 ?\n        COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED :\n        COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\n    };\n\n    const getCovariancesInitialTextureSpecs = (compressionLevel) => {\n      const elementsPerTexelStored =\n        getCovariancesElementsPertexelStored(compressionLevel);\n      const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\n      return { elementsPerTexelStored, texSize };\n    };\n\n    let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n    const scaleRotationCompressionLevel = 0;\n    const shCompressionLevel =\n      this.getTargetSphericalHarmonicsCompressionLevel();\n\n    let covariances;\n    let scales;\n    let rotations;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      const initialCovTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      if (\n        initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y >\n          MAX_TEXTURE_TEXELS &&\n        covarianceCompressionLevel === 0\n      ) {\n        covarianceCompressionLevel = 1;\n      }\n      covariances = new Float32Array(\n        maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT,\n      );\n    } else {\n      scales = new Float32Array(maxSplatCount * 3);\n      rotations = new Float32Array(maxSplatCount * 4);\n    }\n\n    const centers = new Float32Array(maxSplatCount * 3);\n    const colors = new Uint8Array(maxSplatCount * 4);\n\n    let SphericalHarmonicsArrayType = Float32Array;\n    if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n    else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n    const shComponentCount = getSphericalHarmonicsComponentCountForDegree(\n      this.minSphericalHarmonicsDegree,\n    );\n    const shData = this.minSphericalHarmonicsDegree ?\n      new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) :\n      undefined;\n\n    // set up centers/colors data texture\n    const centersColsTexSize = computeDataTextureSize(\n      CENTER_COLORS_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedCentersCols = new Uint32Array(\n      centersColsTexSize.x *\n        centersColsTexSize.y *\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n    );\n    SplatMesh.updateCenterColorsPaddedData(\n      0,\n      splatCount - 1,\n      centers,\n      colors,\n      paddedCentersCols,\n    );\n\n    const centersColsTex = new THREE.DataTexture(\n      paddedCentersCols,\n      centersColsTexSize.x,\n      centersColsTexSize.y,\n      THREE.RGBAIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    centersColsTex.internalFormat = 'RGBA32UI';\n    centersColsTex.needsUpdate = true;\n    this.material.uniforms.centersColorsTexture.value = centersColsTex;\n    this.material.uniforms.centersColorsTextureSize.value.copy(\n      centersColsTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n\n    this.splatDataTextures = {\n      baseData: {\n        covariances: covariances,\n        scales: scales,\n        rotations: rotations,\n        centers: centers,\n        colors: colors,\n        sphericalHarmonics: shData,\n      },\n      centerColors: {\n        data: paddedCentersCols,\n        texture: centersColsTex,\n        size: centersColsTexSize,\n      },\n    };\n\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      // set up covariances data texture\n\n      const covTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      const covariancesElementsPerTexelStored =\n        covTexSpecs.elementsPerTexelStored;\n      const covTexSize = covTexSpecs.texSize;\n\n      let CovariancesDataType =\n        covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\n      const covariancesElementsPerTexelAllocated =\n        covarianceCompressionLevel >= 1 ?\n          COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\n          COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\n      const covariancesTextureData = new CovariancesDataType(\n        covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated,\n      );\n\n      if (covarianceCompressionLevel === 0) {\n        covariancesTextureData.set(covariances);\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          covariances,\n          covariancesTextureData,\n          0,\n          0,\n          covariances.length,\n        );\n      }\n\n      let covTex;\n      if (covarianceCompressionLevel >= 1) {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        covTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\n      } else {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAFormat,\n          THREE.FloatType,\n        );\n        this.material.uniforms.covariancesTexture.value = covTex;\n\n        // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\n        const dummyTex = new THREE.DataTexture(\n          new Uint32Array(32),\n          2,\n          2,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        dummyTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\n        dummyTex.needsUpdate = true;\n      }\n      covTex.needsUpdate = true;\n\n      this.material.uniforms.covariancesAreHalfFloat.value =\n        covarianceCompressionLevel >= 1 ? 1 : 0;\n      this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n      this.splatDataTextures['covariances'] = {\n        data: covariancesTextureData,\n        texture: covTex,\n        size: covTexSize,\n        compressionLevel: covarianceCompressionLevel,\n        elementsPerTexelStored: covariancesElementsPerTexelStored,\n        elementsPerTexelAllocated: covariancesElementsPerTexelAllocated,\n      };\n    } else {\n      // set up scale & rotations data texture\n      const elementsPerSplat = 6;\n      const scaleRotationsTexSize = computeDataTextureSize(\n        SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n        elementsPerSplat,\n      );\n      let ScaleRotationsDataType =\n        scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\n      let scaleRotationsTextureType =\n        scaleRotationCompressionLevel >= 1 ?\n          THREE.HalfFloatType :\n          THREE.FloatType;\n      const paddedScaleRotations = new ScaleRotationsDataType(\n        scaleRotationsTexSize.x *\n          scaleRotationsTexSize.y *\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n      );\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        0,\n        splatCount - 1,\n        scales,\n        rotations,\n        paddedScaleRotations,\n      );\n\n      const scaleRotationsTex = new THREE.DataTexture(\n        paddedScaleRotations,\n        scaleRotationsTexSize.x,\n        scaleRotationsTexSize.y,\n        THREE.RGBAFormat,\n        scaleRotationsTextureType,\n      );\n      scaleRotationsTex.needsUpdate = true;\n      this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\n      this.material.uniforms.scaleRotationsTextureSize.value.copy(\n        scaleRotationsTexSize,\n      );\n\n      this.splatDataTextures['scaleRotations'] = {\n        data: paddedScaleRotations,\n        texture: scaleRotationsTex,\n        size: scaleRotationsTexSize,\n        compressionLevel: scaleRotationCompressionLevel,\n      };\n    }\n\n    if (shData) {\n      const shTextureType =\n        shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n\n      let paddedSHComponentCount = shComponentCount;\n      if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n      const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\n      const texelFormat =\n        shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\n      let shTexSize = computeDataTextureSize(\n        shElementsPerTexel,\n        paddedSHComponentCount,\n      );\n\n      // Use one texture for all spherical harmonics data\n      if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\n        const paddedSHArraySize =\n          shTexSize.x * shTexSize.y * shElementsPerTexel;\n        const paddedSHArray = new SphericalHarmonicsArrayType(\n          paddedSHArraySize,\n        );\n        for (let c = 0; c < splatCount; c++) {\n          const srcBase = shComponentCount * c;\n          const destBase = paddedSHComponentCount * c;\n          for (let i = 0; i < shComponentCount; i++) {\n            paddedSHArray[destBase + i] = shData[srcBase + i];\n          }\n        }\n\n        const shTexture = new THREE.DataTexture(\n          paddedSHArray,\n          shTexSize.x,\n          shTexSize.y,\n          texelFormat,\n          shTextureType,\n        );\n        shTexture.needsUpdate = true;\n        this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\n        this.splatDataTextures['sphericalHarmonics'] = {\n          componentCount: shComponentCount,\n          paddedComponentCount: paddedSHComponentCount,\n          data: paddedSHArray,\n          textureCount: 1,\n          texture: shTexture,\n          size: shTexSize,\n          compressionLevel: shCompressionLevel,\n          elementsPerTexel: shElementsPerTexel,\n        };\n        // Use three textures for spherical harmonics data, one per color channel\n      } else {\n        const shComponentCountPerChannel = shComponentCount / 3;\n        paddedSHComponentCount = shComponentCountPerChannel;\n        if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n        shTexSize = computeDataTextureSize(\n          shElementsPerTexel,\n          paddedSHComponentCount,\n        );\n\n        const paddedSHArraySize =\n          shTexSize.x * shTexSize.y * shElementsPerTexel;\n        const textureUniforms = [\n          this.material.uniforms.sphericalHarmonicsTextureR,\n          this.material.uniforms.sphericalHarmonicsTextureG,\n          this.material.uniforms.sphericalHarmonicsTextureB,\n        ];\n        const paddedSHArrays = [];\n        const shTextures = [];\n        for (let t = 0; t < 3; t++) {\n          const paddedSHArray = new SphericalHarmonicsArrayType(\n            paddedSHArraySize,\n          );\n          paddedSHArrays.push(paddedSHArray);\n          for (let c = 0; c < splatCount; c++) {\n            const srcBase = shComponentCount * c;\n            const destBase = paddedSHComponentCount * c;\n            if (shComponentCountPerChannel >= 3) {\n              for (let i = 0; i < 3; i++) {\n                paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n              }\n              if (shComponentCountPerChannel >= 8) {\n                for (let i = 0; i < 5; i++) {\n                  paddedSHArray[destBase + 3 + i] =\n                    shData[srcBase + 9 + t * 5 + i];\n                }\n              }\n            }\n          }\n\n          const shTexture = new THREE.DataTexture(\n            paddedSHArray,\n            shTexSize.x,\n            shTexSize.y,\n            texelFormat,\n            shTextureType,\n          );\n          shTextures.push(shTexture);\n          shTexture.needsUpdate = true;\n          textureUniforms[t].value = shTexture;\n        }\n\n        this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\n        this.splatDataTextures['sphericalHarmonics'] = {\n          componentCount: shComponentCount,\n          componentCountPerChannel: shComponentCountPerChannel,\n          paddedComponentCount: paddedSHComponentCount,\n          data: paddedSHArrays,\n          textureCount: 3,\n          textures: shTextures,\n          size: shTexSize,\n          compressionLevel: shCompressionLevel,\n          elementsPerTexel: shElementsPerTexel,\n        };\n      }\n\n      this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(\n        shTexSize,\n      );\n      this.material.uniforms.sphericalHarmonics8BitMode.value =\n        shCompressionLevel === 2 ? 1 : 0;\n      for (let s = 0; s < this.scenes.length; s++) {\n        const splatBuffer = this.scenes[s].splatBuffer;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[\n          s\n        ] = splatBuffer.minSphericalHarmonicsCoeff;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[\n          s\n        ] = splatBuffer.maxSphericalHarmonicsCoeff;\n      }\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const sceneIndexesTexSize = computeDataTextureSize(\n      SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedTransformIndexes = new Uint32Array(\n      sceneIndexesTexSize.x *\n        sceneIndexesTexSize.y *\n        SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n    );\n    for (let c = 0; c < splatCount; c++) {\n      paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = new THREE.DataTexture(\n      paddedTransformIndexes,\n      sceneIndexesTexSize.x,\n      sceneIndexesTexSize.y,\n      THREE.RedIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    sceneIndexesTexture.internalFormat = 'R32UI';\n    sceneIndexesTexture.needsUpdate = true;\n    this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\n    this.material.uniforms.sceneIndexesTextureSize.value.copy(\n      sceneIndexesTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n    this.splatDataTextures['sceneIndexes'] = {\n      data: paddedTransformIndexes,\n      texture: sceneIndexesTexture,\n      size: sceneIndexesTexSize,\n    };\n    this.material.uniforms.sceneCount.value = this.scenes.length;\n  }\n\n  updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\n    const shCompressionLevel = shITextureDesc ?\n      shITextureDesc.compressionLevel :\n      0;\n\n    this.fillSplatDataArrays(\n      this.splatDataTextures.baseData.covariances,\n      this.splatDataTextures.baseData.scales,\n      this.splatDataTextures.baseData.rotations,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      this.splatDataTextures.baseData.sphericalHarmonics,\n      undefined,\n      covarianceCompressionLevel,\n      scaleRotationCompressionLevel,\n      shCompressionLevel,\n      fromSplat,\n      toSplat,\n      fromSplat,\n    );\n  }\n\n  updateDataTexturesFromBaseData(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n    const shCompressionLevel = shTextureDesc ?\n      shTextureDesc.compressionLevel :\n      0;\n\n    // Update center & color data texture\n    const centerColorsTextureDescriptor =\n      this.splatDataTextures['centerColors'];\n    const paddedCenterColors = centerColorsTextureDescriptor.data;\n    const centerColorsTexture = centerColorsTextureDescriptor.texture;\n    SplatMesh.updateCenterColorsPaddedData(\n      fromSplat,\n      toSplat,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      paddedCenterColors,\n    );\n    const centerColorsTextureProps = this.renderer ?\n      this.renderer.properties.get(centerColorsTexture) :\n      null;\n    if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n      centerColorsTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedCenterColors,\n        centerColorsTextureDescriptor.texture,\n        centerColorsTextureDescriptor.size,\n        centerColorsTextureProps,\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n        CENTER_COLORS_ELEMENTS_PER_SPLAT,\n        4,\n        fromSplat,\n        toSplat,\n      );\n    }\n\n    // update covariance data texture\n    if (covarancesTextureDesc) {\n      const covariancesTexture = covarancesTextureDesc.texture;\n      const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n      const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n\n      if (covarianceCompressionLevel === 0) {\n        for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\n          const covariance = this.splatDataTextures.baseData.covariances[i];\n          covarancesTextureDesc.data[i] = covariance;\n        }\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          this.splatDataTextures.baseData.covariances,\n          covarancesTextureDesc.data,\n          fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\n          covarancesStartElement,\n          covariancesEndElement,\n        );\n      }\n\n      const covariancesTextureProps = this.renderer ?\n        this.renderer.properties.get(covariancesTexture) :\n        null;\n      if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n        covariancesTexture.needsUpdate = true;\n      } else {\n        if (covarianceCompressionLevel === 0) {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelStored,\n            COVARIANCES_ELEMENTS_PER_SPLAT,\n            4,\n            fromSplat,\n            toSplat,\n          );\n        } else {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            2,\n            fromSplat,\n            toSplat,\n          );\n        }\n      }\n    }\n\n    // update scale and rotation data texture\n    if (scaleRotationsTextureDesc) {\n      const paddedScaleRotations = scaleRotationsTextureDesc.data;\n      const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\n      const elementsPerSplat = 6;\n      const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        fromSplat,\n        toSplat,\n        this.splatDataTextures.baseData.scales,\n        this.splatDataTextures.baseData.rotations,\n        paddedScaleRotations,\n      );\n      const scaleRotationsTextureProps = this.renderer ?\n        this.renderer.properties.get(scaleRotationsTexture) :\n        null;\n      if (\n        !scaleRotationsTextureProps ||\n        !scaleRotationsTextureProps.__webglTexture\n      ) {\n        scaleRotationsTexture.needsUpdate = true;\n      } else {\n        this.updateDataTexture(\n          paddedScaleRotations,\n          scaleRotationsTextureDesc.texture,\n          scaleRotationsTextureDesc.size,\n          scaleRotationsTextureProps,\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n          elementsPerSplat,\n          bytesPerElement,\n          fromSplat,\n          toSplat,\n        );\n      }\n    }\n\n    // update spherical harmonics data texture\n    const shData = this.splatDataTextures.baseData.sphericalHarmonics;\n    if (shData) {\n      let shBytesPerElement = 4;\n      if (shCompressionLevel === 1) shBytesPerElement = 2;\n      else if (shCompressionLevel === 2) shBytesPerElement = 1;\n\n      const updateTexture = (\n        shTexture,\n        shTextureSize,\n        elementsPerTexel,\n        paddedSHArray,\n        paddedSHComponentCount,\n      ) => {\n        const shTextureProps = this.renderer ?\n          this.renderer.properties.get(shTexture) :\n          null;\n        if (!shTextureProps || !shTextureProps.__webglTexture) {\n          shTexture.needsUpdate = true;\n        } else {\n          this.updateDataTexture(\n            paddedSHArray,\n            shTexture,\n            shTextureSize,\n            shTextureProps,\n            elementsPerTexel,\n            paddedSHComponentCount,\n            shBytesPerElement,\n            fromSplat,\n            toSplat,\n          );\n        }\n      };\n\n      const shComponentCount = shTextureDesc.componentCount;\n      const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\n\n      // Update for the case of a single texture for all spherical harmonics data\n      if (shTextureDesc.textureCount === 1) {\n        const paddedSHArray = shTextureDesc.data;\n        for (let c = fromSplat; c <= toSplat; c++) {\n          const srcBase = shComponentCount * c;\n          const destBase = paddedSHComponentCount * c;\n          for (let i = 0; i < shComponentCount; i++) {\n            paddedSHArray[destBase + i] = shData[srcBase + i];\n          }\n        }\n        updateTexture(\n          shTextureDesc.texture,\n          shTextureDesc.size,\n          shTextureDesc.elementsPerTexel,\n          paddedSHArray,\n          paddedSHComponentCount,\n        );\n        // Update for the case of spherical harmonics data split among three textures, one for each color channel\n      } else {\n        const shComponentCountPerChannel =\n          shTextureDesc.componentCountPerChannel;\n        for (let t = 0; t < 3; t++) {\n          const paddedSHArray = shTextureDesc.data[t];\n          for (let c = fromSplat; c <= toSplat; c++) {\n            const srcBase = shComponentCount * c;\n            const destBase = paddedSHComponentCount * c;\n            if (shComponentCountPerChannel >= 3) {\n              for (let i = 0; i < 3; i++) {\n                paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n              }\n              if (shComponentCountPerChannel >= 8) {\n                for (let i = 0; i < 5; i++) {\n                  paddedSHArray[destBase + 3 + i] =\n                    shData[srcBase + 9 + t * 5 + i];\n                }\n              }\n            }\n          }\n          updateTexture(\n            shTextureDesc.textures[t],\n            shTextureDesc.size,\n            shTextureDesc.elementsPerTexel,\n            paddedSHArray,\n            paddedSHComponentCount,\n          );\n        }\n      }\n    }\n\n    // update scene index & transform data\n    const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\n    const paddedSceneIndexes = sceneIndexesTexDesc.data;\n    for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\n      paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = sceneIndexesTexDesc.texture;\n    const sceneIndexesTextureProps = this.renderer ?\n      this.renderer.properties.get(sceneIndexesTexture) :\n      null;\n    if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\n      sceneIndexesTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedSceneIndexes,\n        sceneIndexesTexDesc.texture,\n        sceneIndexesTexDesc.size,\n        sceneIndexesTextureProps,\n        1,\n        1,\n        1,\n        this.lastBuildSplatCount,\n        toSplat,\n      );\n    }\n  }\n\n  getTargetCovarianceCompressionLevel() {\n    return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n  }\n\n  getTargetSphericalHarmonicsCompressionLevel() {\n    return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n  }\n\n  getMaximumSplatBufferCompressionLevel() {\n    let maxCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n        maxCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return maxCompressionLevel;\n  }\n\n  getMinimumSplatBufferCompressionLevel() {\n    let minCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n        minCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return minCompressionLevel;\n  }\n\n  static computeTextureUpdateRegion(\n    startSplat,\n    endSplat,\n    textureWidth,\n    elementsPerTexel,\n    elementsPerSplat,\n  ) {\n    const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n    const startSplatTexels = startSplat * texelsPerSplat;\n    const startRow = Math.floor(startSplatTexels / textureWidth);\n    const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n    const endSplatTexels = endSplat * texelsPerSplat;\n    const endRow = Math.floor(endSplatTexels / textureWidth);\n    const endRowEndElement =\n      endRow * textureWidth * elementsPerTexel +\n      textureWidth * elementsPerTexel;\n\n    return {\n      dataStart: startRowElement,\n      dataEnd: endRowEndElement,\n      startRow: startRow,\n      endRow: endRow,\n    };\n  }\n\n  updateDataTexture(\n    paddedData,\n    texture,\n    textureSize,\n    textureProps,\n    elementsPerTexel,\n    elementsPerSplat,\n    bytesPerElement,\n    from,\n    to,\n  ) {\n    const gl = this.renderer.getContext();\n    const updateRegion = SplatMesh.computeTextureUpdateRegion(\n      from,\n      to,\n      textureSize.x,\n      elementsPerTexel,\n      elementsPerSplat,\n    );\n    const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n    const updateDataView = new paddedData.constructor(\n      paddedData.buffer,\n      updateRegion.dataStart * bytesPerElement,\n      updateElementCount,\n    );\n    const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n    const glType = this.webGLUtils.convert(texture.type);\n    const glFormat = this.webGLUtils.convert(\n      texture.format,\n      texture.colorSpace,\n    );\n    const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      updateRegion.startRow,\n      textureSize.x,\n      updateHeight,\n      glFormat,\n      glType,\n      updateDataView,\n    );\n    gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n  }\n\n  static updatePaddedCompressedCovariancesTextureData(\n    sourceData,\n    textureData,\n    textureDataStartIndex,\n    fromElement,\n    toElement,\n  ) {\n    let textureDataView = new DataView(textureData.buffer);\n    let textureDataIndex = textureDataStartIndex;\n    let sequentialCount = 0;\n    for (let i = fromElement; i <= toElement; i += 2) {\n      textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\n      textureDataView.setUint16(\n        textureDataIndex * 2 + 2,\n        sourceData[i + 1],\n        true,\n      );\n      textureDataIndex += 2;\n      sequentialCount++;\n      if (sequentialCount >= 3) {\n        textureDataIndex += 2;\n        sequentialCount = 0;\n      }\n    }\n  }\n\n  static updateCenterColorsPaddedData(\n    from,\n    to,\n    centers,\n    colors,\n    paddedCenterColors,\n  ) {\n    for (let c = from; c <= to; c++) {\n      const colorsBase = c * 4;\n      const centersBase = c * 3;\n      const centerColorsBase = c * 4;\n      paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(\n        colors,\n        colorsBase,\n      );\n      paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(\n        centers[centersBase],\n      );\n      paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(\n        centers[centersBase + 1],\n      );\n      paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(\n        centers[centersBase + 2],\n      );\n    }\n  }\n\n  static updateScaleRotationsPaddedData(\n    from,\n    to,\n    scales,\n    rotations,\n    paddedScaleRotations,\n  ) {\n    const combinedSize = 6;\n    for (let c = from; c <= to; c++) {\n      const scaleBase = c * 3;\n      const rotationBase = c * 4;\n      const scaleRotationsBase = c * combinedSize;\n\n      paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\n      paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\n\n      paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\n      paddedScaleRotations[scaleRotationsBase + 4] =\n        rotations[rotationBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 5] =\n        rotations[rotationBase + 2];\n    }\n  }\n\n  updateVisibleRegion(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const tempCenter = new THREE.Vector3();\n    if (!sinceLastBuildOnly) {\n      const avgCenter = new THREE.Vector3();\n      this.scenes.forEach((scene) => {\n        avgCenter.add(scene.splatBuffer.sceneCenter);\n      });\n      avgCenter.multiplyScalar(1.0 / this.scenes.length);\n      this.calculatedSceneCenter.copy(avgCenter);\n      this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ?\n      this.lastBuildSplatCount :\n      0;\n    for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n      this.getSplatCenter(i, tempCenter, true);\n      const distFromCSceneCenter = tempCenter\n        .sub(this.calculatedSceneCenter)\n        .length();\n      if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) {\n        this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n      }\n    }\n\n    if (\n      this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius >\n      VISIBLE_REGION_EXPANSION_DELTA\n    ) {\n      this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n      this.visibleRegionRadius = Math.max(\n        this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA,\n        0.0,\n      );\n    }\n    if (this.finalBuild) {\n      this.visibleRegionRadius = this.visibleRegionBufferRadius =\n        this.maxSplatDistanceFromSceneCenter;\n    }\n    this.updateVisibleRegionFadeDistance();\n  }\n\n  updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n    const fastFadeRate =\n      SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\n    const gradualFadeRate =\n      SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\n    const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n    const fadeInRate =\n      sceneRevealMode === SceneRevealMode.Default ?\n        defaultFadeInRate :\n        gradualFadeRate;\n    this.visibleRegionFadeStartRadius =\n      (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n        fadeInRate +\n      this.visibleRegionFadeStartRadius;\n    const fadeInPercentage =\n      this.visibleRegionBufferRadius > 0 ?\n        this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius :\n        0;\n    const fadeInComplete = fadeInPercentage > 0.99;\n    const shaderFadeInComplete =\n      fadeInComplete || sceneRevealMode === SceneRevealMode.Instant ? 1 : 0;\n\n    this.material.uniforms.visibleRegionFadeStartRadius.value =\n      this.visibleRegionFadeStartRadius;\n    this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n    this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n    this.material.uniforms.currentTime.value = performance.now();\n    this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n    this.material.uniformsNeedUpdate = true;\n    this.visibleRegionChanging = !fadeInComplete;\n  }\n\n  /**\n   * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n   * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n   * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n   *                                  every splat.\n   */\n  updateRenderIndexes(globalIndexes, renderSplatCount) {\n    const geometry = this.geometry;\n    geometry.attributes.splatIndex.set(globalIndexes);\n    geometry.attributes.splatIndex.needsUpdate = true;\n    if (renderSplatCount > 0 && this.firstRenderTime === -1) {\n      this.firstRenderTime = performance.now();\n    }\n    geometry.instanceCount = renderSplatCount;\n    geometry.setDrawRange(0, renderSplatCount);\n  }\n\n  /**\n   * Update the transforms for each scene in this splat mesh from their individual components (position,\n   * quaternion, and scale)\n   */\n  updateTransforms() {\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      scene.updateTransform(this.dynamicMode);\n    }\n  }\n\n  updateUniforms = (function() {\n    const viewport = new THREE.Vector2();\n\n    return function(\n      renderDimensions,\n      cameraFocalLengthX,\n      cameraFocalLengthY,\n      orthographicMode,\n      orthographicZoom,\n      inverseFocalAdjustment,\n    ) {\n      const splatCount = this.getSplatCount();\n      if (splatCount > 0) {\n        viewport.set(\n          renderDimensions.x * this.devicePixelRatio,\n          renderDimensions.y * this.devicePixelRatio,\n        );\n        this.material.uniforms.viewport.value.copy(viewport);\n        this.material.uniforms.basisViewport.value.set(\n          1.0 / viewport.x,\n          1.0 / viewport.y,\n        );\n        this.material.uniforms.focal.value.set(\n          cameraFocalLengthX,\n          cameraFocalLengthY,\n        );\n        this.material.uniforms.orthographicMode.value = orthographicMode ?\n          1 :\n          0;\n        this.material.uniforms.orthoZoom.value = orthographicZoom;\n        this.material.uniforms.inverseFocalAdjustment.value =\n          inverseFocalAdjustment;\n        if (this.dynamicMode) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.transforms.value[i].copy(\n              this.getScene(i).transform,\n            );\n          }\n        }\n        if (this.enableOptionalEffects) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.sceneOpacity.value[i] = clamp(\n              this.getScene(i).opacity,\n              0.0,\n              1.0,\n            );\n            this.material.uniforms.sceneVisibility.value[i] = this.getScene(i)\n              .visible ?\n              1 :\n              0;\n            this.material.uniformsNeedUpdate = true;\n          }\n        }\n        this.material.uniformsNeedUpdate = true;\n      }\n    };\n  })();\n\n  setSplatScale(splatScale = 1) {\n    this.splatScale = splatScale;\n    this.material.uniforms.splatScale.value = splatScale;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getSplatScale() {\n    return this.splatScale;\n  }\n\n  setPointCloudModeEnabled(enabled) {\n    this.pointCloudModeEnabled = enabled;\n    this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getPointCloudModeEnabled() {\n    return this.pointCloudModeEnabled;\n  }\n\n  getSplatDataTextures() {\n    return this.splatDataTextures;\n  }\n\n  getSplatCount(includeSinceLastBuild = false) {\n    if (!includeSinceLastBuild) return this.lastBuildSplatCount;\n    else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  getMaxSplatCount() {\n    return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalMaxSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getMaxSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  disposeDistancesComputationGPUResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.vao) {\n      gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n      this.distancesTransformFeedback.vao = null;\n    }\n    if (this.distancesTransformFeedback.program) {\n      gl.deleteProgram(this.distancesTransformFeedback.program);\n      gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n      gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n      this.distancesTransformFeedback.program = null;\n      this.distancesTransformFeedback.vertexShader = null;\n      this.distancesTransformFeedback.fragmentShader = null;\n    }\n    this.disposeDistancesComputationGPUBufferResources();\n    if (this.distancesTransformFeedback.id) {\n      gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n      this.distancesTransformFeedback.id = null;\n    }\n  }\n\n  disposeDistancesComputationGPUBufferResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.centersBuffer) {\n      this.distancesTransformFeedback.centersBuffer = null;\n      gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n    }\n    if (this.distancesTransformFeedback.outDistancesBuffer) {\n      gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n      this.distancesTransformFeedback.outDistancesBuffer = null;\n    }\n  }\n\n  /**\n   * Set the Three.js renderer used by this splat mesh\n   * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n   */\n  setRenderer(renderer) {\n    if (renderer !== this.renderer) {\n      this.renderer = renderer;\n      const gl = this.renderer.getContext();\n      const extensions = new WebGLExtensions(gl);\n      const capabilities = new WebGLCapabilities(gl, extensions, {});\n      extensions.init(capabilities);\n      this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n      if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n        this.setupDistancesComputationTransformFeedback();\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n          0,\n          this.getSplatCount() - 1,\n        );\n        this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n      }\n    }\n  }\n\n  setupDistancesComputationTransformFeedback = (function() {\n    let currentMaxSplatCount;\n\n    return function() {\n      const maxSplatCount = this.getMaxSplatCount();\n\n      if (!this.renderer) return;\n\n      const rebuildGPUObjects = this.lastRenderer !== this.renderer;\n      const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n      if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n      if (rebuildGPUObjects) {\n        this.disposeDistancesComputationGPUResources();\n      } else if (rebuildBuffers) {\n        this.disposeDistancesComputationGPUBufferResources();\n      }\n\n      const gl = this.renderer.getContext();\n\n      const createShader = (gl, type, source) => {\n        const shader = gl.createShader(type);\n        if (!shader) {\n          console.error('Fatal error: gl could not create a shader object.');\n          return null;\n        }\n\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n\n        const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!compiled) {\n          let typeName = 'unknown';\n          if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n          else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n          const errors = gl.getShaderInfoLog(shader);\n          console.error(\n            'Failed to compile ' + typeName + ' with these errors:' + errors,\n          );\n          gl.deleteShader(shader);\n          return null;\n        }\n\n        return shader;\n      };\n\n      let vsSource;\n      if (this.integerBasedDistancesComputation) {\n        vsSource = `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      } else {\n        vsSource = `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      }\n\n      const fsSource = `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.vao = gl.createVertexArray();\n      }\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n      if (rebuildGPUObjects) {\n        const program = gl.createProgram();\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n        if (!vertexShader || !fragmentShader) {\n          throw new Error(\n            'Could not compile shaders for distances computation on GPU.',\n          );\n        }\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.transformFeedbackVaryings(\n          program,\n          ['distance'],\n          gl.SEPARATE_ATTRIBS,\n        );\n        gl.linkProgram(program);\n\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n          const error = gl.getProgramInfoLog(program);\n          console.error('Fatal error: Failed to link program: ' + error);\n          gl.deleteProgram(program);\n          gl.deleteShader(fragmentShader);\n          gl.deleteShader(vertexShader);\n          throw new Error(\n            'Could not link shaders for distances computation on GPU.',\n          );\n        }\n\n        this.distancesTransformFeedback.program = program;\n        this.distancesTransformFeedback.vertexShader = vertexShader;\n        this.distancesTransformFeedback.vertexShader = fragmentShader;\n      }\n\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      this.distancesTransformFeedback.centersLoc = gl.getAttribLocation(\n        this.distancesTransformFeedback.program,\n        'center',\n      );\n      if (this.dynamicMode) {\n        this.distancesTransformFeedback.sceneIndexesLoc = gl.getAttribLocation(\n          this.distancesTransformFeedback.program,\n          'sceneIndex',\n        );\n        for (let i = 0; i < this.scenes.length; i++) {\n          this.distancesTransformFeedback.transformsLocs[i] =\n            gl.getUniformLocation(\n              this.distancesTransformFeedback.program,\n              `transforms[${i}]`,\n            );\n        }\n      } else {\n        this.distancesTransformFeedback.modelViewProjLoc =\n          gl.getUniformLocation(\n            this.distancesTransformFeedback.program,\n            'modelViewProj',\n          );\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.centersBuffer,\n        );\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        if (this.integerBasedDistancesComputation) {\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.INT,\n            0,\n            0,\n          );\n        } else {\n          gl.vertexAttribPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.FLOAT,\n            false,\n            0,\n            0,\n          );\n        }\n\n        if (this.dynamicMode) {\n          this.distancesTransformFeedback.sceneIndexesBuffer =\n            gl.createBuffer();\n          gl.bindBuffer(\n            gl.ARRAY_BUFFER,\n            this.distancesTransformFeedback.sceneIndexesBuffer,\n          );\n          gl.enableVertexAttribArray(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n          );\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n            1,\n            gl.UNSIGNED_INT,\n            0,\n            0,\n          );\n        }\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n      }\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n      gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.id = gl.createTransformFeedback();\n      }\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      this.lastRenderer = this.renderer;\n      currentMaxSplatCount = maxSplatCount;\n    };\n  })();\n\n  /**\n   * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} centers The splat centers data\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUCentersBufferForDistancesComputation(\n    isUpdate,\n    centers,\n    offsetSplats,\n  ) {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const ArrayType = this.integerBasedDistancesComputation ?\n      Uint32Array :\n      Float32Array;\n    const attributeBytesPerCenter = 16;\n    const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.centersBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n    } else {\n      const maxArray = new ArrayType(\n        this.getMaxSplatCount() * attributeBytesPerCenter,\n      );\n      maxArray.set(centers);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} sceneIndexes The splat scene indexes\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUTransformIndexesBufferForDistancesComputation(\n    isUpdate,\n    sceneIndexes,\n    offsetSplats,\n  ) {\n    if (!this.renderer || !this.dynamicMode) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const subBufferOffset = offsetSplats * 4;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.sceneIndexesBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\n    } else {\n      const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n      maxArray.set(sceneIndexes);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Get a typed array containing a mapping from global splat indexes to their scene index.\n   * @param {number} start Starting splat index to store\n   * @param {number} end Ending splat index to store\n   * @return {Uint32Array}\n   */\n  getSceneIndexes(start, end) {\n    let sceneIndexes;\n    const fillCount = end - start + 1;\n    sceneIndexes = new Uint32Array(fillCount);\n    for (let i = start; i <= end; i++) {\n      sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n    }\n\n    return sceneIndexes;\n  }\n\n  /**\n   * Fill 'array' with the transforms for each scene in this splat mesh.\n   * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n   */\n  fillTransformsArray = (function() {\n    const tempArray = [];\n\n    return function(array) {\n      if (tempArray.length !== array.length) tempArray.length = array.length;\n      for (let i = 0; i < this.scenes.length; i++) {\n        const sceneTransform = this.getScene(i).transform;\n        const sceneTransformElements = sceneTransform.elements;\n        for (let j = 0; j < 16; j++) {\n          tempArray[i * 16 + j] = sceneTransformElements[j];\n        }\n      }\n      array.set(tempArray);\n    };\n  })();\n\n  computeDistancesOnGPU = (function() {\n    const tempMatrix = new THREE.Matrix4();\n\n    return function(modelViewProjMatrix, outComputedDistances) {\n      if (!this.renderer) return;\n\n      // console.time(\"gpu_compute_distances\");\n      const gl = this.renderer.getContext();\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      gl.enable(gl.RASTERIZER_DISCARD);\n\n      if (this.dynamicMode) {\n        for (let i = 0; i < this.scenes.length; i++) {\n          tempMatrix.copy(this.getScene(i).transform);\n          tempMatrix.premultiply(modelViewProjMatrix);\n\n          if (this.integerBasedDistancesComputation) {\n            const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n            const iTransform = [\n              iTempMatrix[2],\n              iTempMatrix[6],\n              iTempMatrix[10],\n              iTempMatrix[14],\n            ];\n            gl.uniform4i(\n              this.distancesTransformFeedback.transformsLocs[i],\n              iTransform[0],\n              iTransform[1],\n              iTransform[2],\n              iTransform[3],\n            );\n          } else {\n            gl.uniformMatrix4fv(\n              this.distancesTransformFeedback.transformsLocs[i],\n              false,\n              tempMatrix.elements,\n            );\n          }\n        }\n      } else {\n        if (this.integerBasedDistancesComputation) {\n          const iViewProjMatrix =\n            SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n          const iViewProj = [\n            iViewProjMatrix[2],\n            iViewProjMatrix[6],\n            iViewProjMatrix[10],\n          ];\n          gl.uniform3i(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            iViewProj[0],\n            iViewProj[1],\n            iViewProj[2],\n          );\n        } else {\n          const viewProj = [\n            modelViewProjMatrix.elements[2],\n            modelViewProjMatrix.elements[6],\n            modelViewProjMatrix.elements[10],\n          ];\n          gl.uniform3f(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            viewProj[0],\n            viewProj[1],\n            viewProj[2],\n          );\n        }\n      }\n\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.centersBuffer,\n      );\n      gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n      if (this.integerBasedDistancesComputation) {\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.INT,\n          0,\n          0,\n        );\n      } else {\n        gl.vertexAttribPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.FLOAT,\n          false,\n          0,\n          0,\n        );\n      }\n\n      if (this.dynamicMode) {\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.sceneIndexesBuffer,\n        );\n        gl.enableVertexAttribArray(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n        );\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n          1,\n          gl.UNSIGNED_INT,\n          0,\n          0,\n        );\n      }\n\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      gl.beginTransformFeedback(gl.POINTS);\n      gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n      gl.endTransformFeedback();\n\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n      gl.disable(gl.RASTERIZER_DISCARD);\n\n      const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      const promise = new Promise((resolve) => {\n        const checkSync = () => {\n          if (this.disposed) {\n            resolve();\n          } else {\n            const timeout = 0;\n            const bitflags = 0;\n            const status = gl.clientWaitSync(sync, bitflags, timeout);\n            switch (status) {\n              case gl.TIMEOUT_EXPIRED:\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                return this.computeDistancesOnGPUSyncTimeout;\n              case gl.WAIT_FAILED:\n                throw new Error('should never get here');\n              default:\n                this.computeDistancesOnGPUSyncTimeout = null;\n                gl.deleteSync(sync);\n                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                gl.bindBuffer(\n                  gl.ARRAY_BUFFER,\n                  this.distancesTransformFeedback.outDistancesBuffer,\n                );\n                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                if (currentVao) gl.bindVertexArray(currentVao);\n\n                // console.timeEnd(\"gpu_compute_distances\");\n\n                resolve();\n            }\n          }\n        };\n        this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n      });\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      return promise;\n    };\n  })();\n\n  /**\n   * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n   * buffer, and the corresponding transform)\n   * @param {number} globalIndex Global splat index\n   * @param {object} paramsObj Object in which to store local data\n   * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n   *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n   *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n   *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n   *                                       be null.\n   */\n  getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n    if (returnSceneTransform === undefined || returnSceneTransform === null) {\n      returnSceneTransform = this.dynamicMode ? false : true;\n    }\n    paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n    paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n    paramsObj.sceneTransform = returnSceneTransform ?\n      this.getSceneTransformForSplat(globalIndex) :\n      null;\n  }\n\n  /**\n   * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n   * @param {Float32Array} covariances Target storage for splat covariances\n   * @param {Float32Array} scales Target storage for splat scales\n   * @param {Float32Array} rotations Target storage for splat rotations\n   * @param {Float32Array} centers Target storage for splat centers\n   * @param {Uint8Array} colors Target storage for splat colors\n   * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n   * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n   *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n   *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n   * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n   * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n   * @param {number} srcStart The start location from which to pull source data\n   * @param {number} srcEnd The end location from which to pull source data\n   * @param {number} destStart The start location from which to write data\n   */\n  fillSplatDataArrays(\n    covariances,\n    scales,\n    rotations,\n    centers,\n    colors,\n    sphericalHarmonics,\n    applySceneTransform,\n    covarianceCompressionLevel = 0,\n    scaleRotationCompressionLevel = 0,\n    sphericalHarmonicsCompressionLevel = 1,\n    srcStart,\n    srcEnd,\n    destStart = 0,\n    sceneIndex,\n  ) {\n    const scaleOverride = new THREE.Vector3();\n    scaleOverride.x = undefined;\n    scaleOverride.y = undefined;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      scaleOverride.z = undefined;\n    } else {\n      scaleOverride.z = 1;\n    }\n    const tempTransform = new THREE.Matrix4();\n\n    let startSceneIndex = 0;\n    let endSceneIndex = this.scenes.length - 1;\n    if (\n      sceneIndex !== undefined &&\n      sceneIndex !== null &&\n      sceneIndex >= 0 &&\n      sceneIndex <= this.scenes.length\n    ) {\n      startSceneIndex = sceneIndex;\n      endSceneIndex = sceneIndex;\n    }\n    for (let i = startSceneIndex; i <= endSceneIndex; i++) {\n      if (applySceneTransform === undefined || applySceneTransform === null) {\n        applySceneTransform = this.dynamicMode ? false : true;\n      }\n\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      let sceneTransform;\n      if (applySceneTransform) {\n        this.getSceneTransform(i, tempTransform);\n        sceneTransform = tempTransform;\n      }\n      if (covariances) {\n        splatBuffer.fillSplatCovarianceArray(\n          covariances,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          covarianceCompressionLevel,\n        );\n      }\n      if (scales || rotations) {\n        if (!scales || !rotations) {\n          throw new Error(\n            'SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.',\n          );\n        }\n        splatBuffer.fillSplatScaleRotationArray(\n          scales,\n          rotations,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          scaleRotationCompressionLevel,\n          scaleOverride,\n        );\n      }\n      if (centers) {\n        splatBuffer.fillSplatCenterArray(\n          centers,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (colors) {\n        splatBuffer.fillSplatColorArray(\n          colors,\n          scene.minimumAlpha,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (sphericalHarmonics) {\n        splatBuffer.fillSphericalHarmonicsArray(\n          sphericalHarmonics,\n          this.minSphericalHarmonicsDegree,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          sphericalHarmonicsCompressionLevel,\n        );\n      }\n      destStart += splatBuffer.getSplatCount();\n    }\n  }\n\n  /**\n   * Convert splat centers, which are floating point values, to an array of integers and multiply\n   * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Int32Array}\n   */\n  getIntegerCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    let intCenters;\n    let componentCount = padFour ? 4 : 3;\n    intCenters = new Int32Array(splatCount * componentCount);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        intCenters[i * componentCount + t] = Math.round(\n          floatCenters[i * 3 + t] * 1000.0,\n        );\n      }\n      if (padFour) intCenters[i * componentCount + 3] = 1000;\n    }\n    return intCenters;\n  }\n\n  /**\n   * Returns an array of splat centers, transformed as appropriate, optionally padded.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Float32Array}\n   */\n  getFloatCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    if (!padFour) return floatCenters;\n    let paddedFloatCenters = new Float32Array(splatCount * 4);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n      }\n      paddedFloatCenters[i * 4 + 3] = 1.0;\n    }\n    return paddedFloatCenters;\n  }\n\n  /**\n   * Get the center for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n   *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n   *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n   */\n  getSplatCenter = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outCenter, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      paramsObj.splatBuffer.getSplatCenter(\n        paramsObj.localIndex,\n        outCenter,\n        paramsObj.sceneTransform,\n      );\n    };\n  })();\n\n  /**\n   * Get the scale and rotation for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n   * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n   *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n   *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n   *                                      the default behavior will apply.\n   */\n  getSplatScaleAndRotation = (function() {\n    const paramsObj = {};\n    const scaleOverride = new THREE.Vector3();\n\n    return function(globalIndex, outScale, outRotation, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      scaleOverride.x = undefined;\n      scaleOverride.y = undefined;\n      scaleOverride.z = undefined;\n      if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\n      paramsObj.splatBuffer.getSplatScaleAndRotation(\n        paramsObj.localIndex,\n        outScale,\n        outRotation,\n        paramsObj.sceneTransform,\n        scaleOverride,\n      );\n    };\n  })();\n\n  /**\n   * Get the color for a splat.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n   */\n  getSplatColor = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outColor) {\n      this.getLocalSplatParameters(globalIndex, paramsObj);\n      paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n    };\n  })();\n\n  /**\n   * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n   */\n  getSceneTransform(sceneIndex, outTransform) {\n    const scene = this.getScene(sceneIndex);\n    scene.updateTransform(this.dynamicMode);\n    outTransform.copy(scene.transform);\n  }\n\n  /**\n   * Get the scene at 'sceneIndex'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @return {SplatScene}\n   */\n  getScene(sceneIndex) {\n    if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n      throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n    }\n    return this.scenes[sceneIndex];\n  }\n\n  getSceneCount() {\n    return this.scenes.length;\n  }\n\n  getSplatBufferForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .splatBuffer;\n  }\n\n  getSceneIndexForSplat(globalIndex) {\n    return this.globalSplatIndexToSceneIndexMap[globalIndex];\n  }\n\n  getSceneTransformForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .transform;\n  }\n\n  getSplatLocalIndex(globalIndex) {\n    return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n  }\n\n  static getIntegerMatrixArray(matrix) {\n    const matrixElements = matrix.elements;\n    const intMatrixArray = [];\n    for (let i = 0; i < 16; i++) {\n      intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n    }\n    return intMatrixArray;\n  }\n\n  computeBoundingBox(applySceneTransforms = false, sceneIndex) {\n    let splatCount = this.getSplatCount();\n    if (sceneIndex !== undefined && sceneIndex !== null) {\n      if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n        throw new Error(\n          'SplatMesh::computeBoundingBox() -> Invalid scene index.',\n        );\n      }\n      splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\n    }\n\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      applySceneTransforms,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      sceneIndex,\n    );\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n    for (let i = 0; i < splatCount; i++) {\n      const offset = i * 3;\n      const x = floatCenters[offset];\n      const y = floatCenters[offset + 1];\n      const z = floatCenters[offset + 2];\n      if (i === 0 || x < min.x) min.x = x;\n      if (i === 0 || y < min.y) min.y = y;\n      if (i === 0 || z < min.z) min.z = z;\n      if (i === 0 || x > max.x) max.x = x;\n      if (i === 0 || y > max.y) max.y = y;\n      if (i === 0 || z > max.z) max.z = z;\n    }\n\n    return new THREE.Box3(min, max);\n  }\n}\n","export class InfoPanel {\n  constructor(container) {\n    this.container = container || document.body;\n\n    this.infoCells = {};\n\n    const layout = [\n      ['Camera position', 'cameraPosition'],\n      ['Camera look-at', 'cameraLookAt'],\n      ['Camera up', 'cameraUp'],\n      ['Camera mode', 'orthographicCamera'],\n      ['Cursor position', 'cursorPosition'],\n      ['FPS', 'fps'],\n      ['Rendering:', 'renderSplatCount'],\n      ['Sort time', 'sortTime'],\n      ['Render window', 'renderWindow'],\n      ['Focal adjustment', 'focalAdjustment'],\n      ['Splat scale', 'splatScale'],\n      ['Point cloud mode', 'pointCloudMode'],\n    ];\n\n    this.infoPanelContainer = document.createElement('div');\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n    this.infoPanelContainer.append(style);\n\n    this.infoPanel = document.createElement('div');\n    this.infoPanel.className = 'infoPanel';\n\n    const infoTable = document.createElement('div');\n    infoTable.style.display = 'table';\n\n    for (let layoutEntry of layout) {\n      const row = document.createElement('div');\n      row.style.display = 'table-row';\n      row.className = 'info-panel-row';\n\n      const labelCell = document.createElement('div');\n      labelCell.style.display = 'table-cell';\n      labelCell.innerHTML = `${layoutEntry[0]}: `;\n      labelCell.classList.add('info-panel-cell', 'label-cell');\n\n      const spacerCell = document.createElement('div');\n      spacerCell.style.display = 'table-cell';\n      spacerCell.style.width = '10px';\n      spacerCell.innerHTML = ' ';\n      spacerCell.className = 'info-panel-cell';\n\n      const infoCell = document.createElement('div');\n      infoCell.style.display = 'table-cell';\n      infoCell.innerHTML = '';\n      infoCell.className = 'info-panel-cell';\n\n      this.infoCells[layoutEntry[1]] = infoCell;\n\n      row.appendChild(labelCell);\n      row.appendChild(spacerCell);\n      row.appendChild(infoCell);\n\n      infoTable.appendChild(row);\n    }\n\n    this.infoPanel.appendChild(infoTable);\n    this.infoPanelContainer.append(this.infoPanel);\n    this.infoPanelContainer.style.display = 'none';\n    this.container.appendChild(this.infoPanelContainer);\n\n    this.visible = false;\n  }\n\n  update = function(\n    renderDimensions,\n    cameraPosition,\n    cameraLookAtPosition,\n    cameraUp,\n    orthographicCamera,\n    meshCursorPosition,\n    currentFPS,\n    splatCount,\n    splatRenderCount,\n    splatRenderCountPct,\n    lastSortTime,\n    focalAdjustment,\n    splatScale,\n    pointCloudMode,\n  ) {\n    const cameraPosString = `${cameraPosition.x.toFixed(\n      5,\n    )}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n    if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n      this.infoCells.cameraPosition.innerHTML = cameraPosString;\n    }\n\n    if (cameraLookAtPosition) {\n      const cla = cameraLookAtPosition;\n      const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(\n        5,\n      )}, ${cla.z.toFixed(5)}`;\n      if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n        this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n      }\n    }\n\n    const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(\n      5,\n    )}, ${cameraUp.z.toFixed(5)}`;\n    if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n      this.infoCells.cameraUp.innerHTML = cameraUpString;\n    }\n\n    this.infoCells.orthographicCamera.innerHTML = orthographicCamera ?\n      'Orthographic' :\n      'Perspective';\n\n    if (meshCursorPosition) {\n      const cursPos = meshCursorPosition;\n      const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(\n        5,\n      )}, ${cursPos.z.toFixed(5)}`;\n      this.infoCells.cursorPosition.innerHTML = cursorPosString;\n    } else {\n      this.infoCells.cursorPosition.innerHTML = 'N/A';\n    }\n\n    this.infoCells.fps.innerHTML = currentFPS;\n    this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n    this.infoCells.renderSplatCount.innerHTML = `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(\n      2,\n    )}%)`;\n\n    this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n    this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n    this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n    this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n  };\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.infoPanelContainer.parentElement === this.container\n    ) {\n      this.container.removeChild(this.infoPanelContainer);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.infoPanelContainer);\n      this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  show() {\n    this.infoPanelContainer.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.infoPanelContainer.style.display = 'none';\n    this.visible = false;\n  }\n}\n","export class LoadingProgressBar {\n  constructor(container) {\n    this.idGen = 0;\n\n    this.tasks = [];\n\n    this.container = container || document.body;\n\n    this.progressBarContainerOuter = document.createElement('div');\n    this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n    this.progressBarContainerOuter.style.display = 'none';\n\n    this.progressBarBox = document.createElement('div');\n    this.progressBarBox.className = 'progressBarBox';\n\n    this.progressBarBackground = document.createElement('div');\n    this.progressBarBackground.className = 'progressBarBackground';\n\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progressBar';\n\n    this.progressBarBackground.appendChild(this.progressBar);\n    this.progressBarBox.appendChild(this.progressBarBackground);\n    this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n    this.progressBarContainerOuter.appendChild(style);\n    this.container.appendChild(this.progressBarContainerOuter);\n  }\n\n  show() {\n    this.progressBarContainerOuter.style.display = 'block';\n  }\n\n  hide() {\n    this.progressBarContainerOuter.style.display = 'none';\n  }\n\n  setProgress(progress) {\n    this.progressBar.style.width = progress + '%';\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.progressBarContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.progressBarContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.progressBarContainerOuter);\n      this.progressBarContainerOuter.style.zIndex =\n        this.container.style.zIndex + 1;\n    }\n  }\n}\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n  static elementIDGen = 0;\n\n  constructor(message, container) {\n    this.taskIDGen = 0;\n    this.elementID = LoadingSpinner.elementIDGen++;\n\n    this.tasks = [];\n\n    this.message = message || 'Loading...';\n    this.container = container || document.body;\n\n    this.spinnerContainerOuter = document.createElement('div');\n    this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n    this.spinnerContainerOuter.style.display = 'none';\n\n    this.spinnerContainerPrimary = document.createElement('div');\n    this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n    this.spinnerPrimary = document.createElement('div');\n    this.spinnerPrimary.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary = document.createElement('div');\n    this.messageContainerPrimary.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary.innerHTML = this.message;\n\n    this.spinnerContainerMin = document.createElement('div');\n    this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n    this.spinnerMin = document.createElement('div');\n    this.spinnerMin.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerMin${this.elementID}`,\n    );\n    this.messageContainerMin = document.createElement('div');\n    this.messageContainerMin.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerMin${this.elementID}`,\n    );\n    this.messageContainerMin.innerHTML = this.message;\n\n    this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n    this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n    this.spinnerContainerMin.appendChild(this.spinnerMin);\n    this.spinnerContainerMin.appendChild(this.messageContainerMin);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n    this.spinnerContainerOuter.appendChild(style);\n    this.container.appendChild(this.spinnerContainerOuter);\n\n    this.setMinimized(false, true);\n\n    this.fadeTransitions = [];\n  }\n\n  addTask(message) {\n    const newTask = {\n      message: message,\n      id: this.taskIDGen++,\n    };\n    this.tasks.push(newTask);\n    this.update();\n    return newTask.id;\n  }\n\n  removeTask(id) {\n    let index = 0;\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        this.tasks.splice(index, 1);\n        break;\n      }\n      index++;\n    }\n    this.update();\n  }\n\n  removeAllTasks() {\n    this.tasks = [];\n    this.update();\n  }\n\n  setMessageForTask(id, message) {\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        task.message = message;\n        break;\n      }\n    }\n    this.update();\n  }\n\n  update() {\n    if (this.tasks.length > 0) {\n      this.show();\n      this.setMessage(this.tasks[this.tasks.length - 1].message);\n    } else {\n      this.hide();\n    }\n  }\n\n  show() {\n    this.spinnerContainerOuter.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.spinnerContainerOuter.style.display = 'none';\n    this.visible = false;\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.spinnerContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.spinnerContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.spinnerContainerOuter);\n      this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  setMinimized(minimized, instant) {\n    const showHideSpinner = (\n      element,\n      show,\n      instant,\n      displayStyle,\n      fadeTransitionsIndex,\n    ) => {\n      if (instant) {\n        element.style.display = show ? displayStyle : 'none';\n      } else {\n        this.fadeTransitions[fadeTransitionsIndex] = fadeElement(\n          element,\n          !show,\n          displayStyle,\n          STANDARD_FADE_DURATION,\n          () => {\n            this.fadeTransitions[fadeTransitionsIndex] = null;\n          },\n        );\n      }\n    };\n    showHideSpinner(\n      this.spinnerContainerPrimary,\n      !minimized,\n      instant,\n      'block',\n      0,\n    );\n    showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n    this.minimized = minimized;\n  }\n\n  setMessage(msg) {\n    this.messageContainerPrimary.innerHTML = msg;\n    this.messageContainerMin.innerHTML = msg;\n  }\n}\n","export const fadeElement = (\n  element,\n  out,\n  displayStyle,\n  duration,\n  onComplete,\n) => {\n  const startTime = performance.now();\n\n  let startOpacity =\n    element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n  if (isNaN(startOpacity)) startOpacity = 1;\n\n  const interval = window.setInterval(() => {\n    const currentTime = performance.now();\n    const elapsed = currentTime - startTime;\n\n    let t = Math.min(elapsed / duration, 1.0);\n    if (t > 0.999) t = 1;\n\n    let opacity;\n    if (out) {\n      opacity = (1.0 - t) * startOpacity;\n      if (opacity < 0.0001) opacity = 0;\n    } else {\n      opacity = (1.0 - startOpacity) * t + startOpacity;\n    }\n\n    if (opacity > 0) {\n      element.style.display = displayStyle;\n      element.style.opacity = opacity;\n    } else {\n      element.style.display = 'none';\n    }\n\n    if (t >= 1) {\n      if (onComplete) onComplete();\n      window.clearInterval(interval);\n    }\n  }, 16);\n  return interval;\n};\n\nexport const cancelFade = (interval) => {\n  window.clearInterval(interval);\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showStartAR(/* device */) {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n\n        const svg = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'svg',\n        );\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function() {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n\n        const path = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'path',\n        );\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = { root: overlay };\n      }\n\n      //\n\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        renderer.xr.setReferenceSpaceType('local');\n\n        await renderer.xr.setSession(session);\n\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'START AR';\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-ar', sessionInit)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-ar', sessionInit)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-ar', sessionInit)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showARNotSupported() {\n      disableButton();\n\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n\n    function showARNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'AR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-ar')\n        .then(function(supported) {\n          supported ? showStartAR() : showARNotSupported();\n        })\n        .catch(showARNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n}\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showEnterVR(/* device */) {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'ENTER VR';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'ENTER VR';\n\n      // WebXR's requestReferenceSpace only works if the corresponding feature\n      // was requested at session creation time. For simplicity, just ask for\n      // the interesting ones as optional features, but be aware that the\n      // requestReferenceSpace call will fail if it turns out to be unavailable.\n      // ('local' is always available for immersive sessions and doesn't need to\n      // be requested separately.)\n\n      const sessionOptions = {\n        ...sessionInit,\n        optionalFeatures: [\n          'local-floor',\n          'bounded-floor',\n          'layers',\n          ...(sessionInit.optionalFeatures || []),\n        ],\n      };\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-vr', sessionOptions)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-vr', sessionOptions)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-vr', sessionOptions)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function showVRNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'VR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-vr')\n        .then(function(supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n\n          if (supported && VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        })\n        .catch(showVRNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","export const WebXRMode = {\n  None: 0,\n  VR: 1,\n  AR: 2,\n};\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\nimport { isIOS, getIOSSemever } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n  let wasmInstance;\n  let wasmMemory;\n  let useSharedMemory;\n  let integerBasedSort;\n  let dynamicMode;\n  let splatCount;\n  let indexesToSortOffset;\n  let sortedIndexesOffset;\n  let sceneIndexesOffset;\n  let transformsOffset;\n  let precomputedDistancesOffset;\n  let mappedDistancesOffset;\n  let frequenciesOffset;\n  let centersOffset;\n  let modelViewProjOffset;\n  let countsZero;\n  let sortedIndexesOut;\n  let distanceMapRange;\n  let uploadedSplatCount;\n  let Constants;\n\n  function sort(\n    splatSortCount,\n    splatRenderCount,\n    modelViewProj,\n    usePrecomputedDistances,\n    copyIndexesToSort,\n    copyPrecomputedDistances,\n    copyTransforms,\n  ) {\n    const sortStartTime = performance.now();\n\n    if (!useSharedMemory) {\n      const indexesToSort = new Uint32Array(\n        wasmMemory,\n        indexesToSortOffset,\n        copyIndexesToSort.byteLength / Constants.BytesPerInt,\n      );\n      indexesToSort.set(copyIndexesToSort);\n      const transforms = new Float32Array(\n        wasmMemory,\n        transformsOffset,\n        copyTransforms.byteLength / Constants.BytesPerFloat,\n      );\n      transforms.set(copyTransforms);\n      if (usePrecomputedDistances) {\n        let precomputedDistances;\n        if (integerBasedSort) {\n          precomputedDistances = new Int32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerInt,\n          );\n        } else {\n          precomputedDistances = new Float32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat,\n          );\n        }\n        precomputedDistances.set(copyPrecomputedDistances);\n      }\n    }\n\n    if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\n    new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n    new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(\n      countsZero,\n    );\n    wasmInstance.exports.sortIndexes(\n      indexesToSortOffset,\n      centersOffset,\n      precomputedDistancesOffset,\n      mappedDistancesOffset,\n      frequenciesOffset,\n      modelViewProjOffset,\n      sortedIndexesOffset,\n      sceneIndexesOffset,\n      transformsOffset,\n      distanceMapRange,\n      splatSortCount,\n      splatRenderCount,\n      splatCount,\n      usePrecomputedDistances,\n      integerBasedSort,\n      dynamicMode,\n    );\n\n    const sortMessage = {\n      sortDone: true,\n      splatSortCount: splatSortCount,\n      splatRenderCount: splatRenderCount,\n      sortTime: 0,\n    };\n    if (!useSharedMemory) {\n      const sortedIndexes = new Uint32Array(\n        wasmMemory,\n        sortedIndexesOffset,\n        splatRenderCount,\n      );\n      if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n        sortedIndexesOut = new Uint32Array(splatRenderCount);\n      }\n      sortedIndexesOut.set(sortedIndexes);\n      sortMessage.sortedIndexes = sortedIndexesOut;\n    }\n    const sortEndTime = performance.now();\n\n    sortMessage.sortTime = sortEndTime - sortStartTime;\n\n    self.postMessage(sortMessage);\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.centers) {\n      centers = e.data.centers;\n      sceneIndexes = e.data.sceneIndexes;\n      if (integerBasedSort) {\n        new Int32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n          e.data.range.count * 4,\n        ).set(new Int32Array(centers));\n      } else {\n        new Float32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n          e.data.range.count * 4,\n        ).set(new Float32Array(centers));\n      }\n      if (dynamicMode) {\n        new Uint32Array(\n          wasmMemory,\n          sceneIndexesOffset + e.data.range.from * 4,\n          e.data.range.count,\n        ).set(new Uint32Array(sceneIndexes));\n      }\n      uploadedSplatCount = e.data.range.from + e.data.range.count;\n    } else if (e.data.sort) {\n      const renderCount = Math.min(\n        e.data.sort.splatRenderCount || 0,\n        uploadedSplatCount,\n      );\n      const sortCount = Math.min(\n        e.data.sort.splatSortCount || 0,\n        uploadedSplatCount,\n      );\n      const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n      let copyIndexesToSort;\n      let copyPrecomputedDistances;\n      let copyTransforms;\n      if (!useSharedMemory) {\n        copyIndexesToSort = e.data.sort.indexesToSort;\n        copyTransforms = e.data.sort.transforms;\n        if (usePrecomputedDistances) {\n          copyPrecomputedDistances = e.data.sort.precomputedDistances;\n        }\n      }\n      sort(\n        sortCount,\n        renderCount,\n        e.data.sort.modelViewProj,\n        usePrecomputedDistances,\n        copyIndexesToSort,\n        copyPrecomputedDistances,\n        copyTransforms,\n      );\n    } else if (e.data.init) {\n      // Yep, this is super hacky and gross :(\n      Constants = e.data.init.Constants;\n\n      splatCount = e.data.init.splatCount;\n      useSharedMemory = e.data.init.useSharedMemory;\n      integerBasedSort = e.data.init.integerBasedSort;\n      dynamicMode = e.data.init.dynamicMode;\n      distanceMapRange = e.data.init.distanceMapRange;\n      uploadedSplatCount = 0;\n\n      const CENTERS_BYTES_PER_ENTRY = integerBasedSort ?\n        Constants.BytesPerInt * 4 :\n        Constants.BytesPerFloat * 4;\n\n      const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n      const matrixSize = 16 * Constants.BytesPerFloat;\n      const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n      const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n      const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n        splatCount * Constants.BytesPerInt :\n        splatCount * Constants.BytesPerFloat;\n      const memoryRequiredForMappedDistances =\n        splatCount * Constants.BytesPerInt;\n      const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForIntermediateSortBuffers = integerBasedSort ?\n        distanceMapRange * Constants.BytesPerInt * 2 :\n        distanceMapRange * Constants.BytesPerFloat * 2;\n      const memoryRequiredforTransformIndexes = dynamicMode ?\n        splatCount * Constants.BytesPerInt :\n        0;\n      const memoryRequiredforTransforms = dynamicMode ?\n        Constants.MaxScenes * matrixSize :\n        0;\n      const extraMemory = Constants.MemoryPageSize * 32;\n\n      const totalRequiredMemory =\n        memoryRequiredForIndexesToSort +\n        memoryRequiredForCenters +\n        memoryRequiredForModelViewProjectionMatrix +\n        memoryRequiredForPrecomputedDistances +\n        memoryRequiredForMappedDistances +\n        memoryRequiredForIntermediateSortBuffers +\n        memoryRequiredForSortedIndexes +\n        memoryRequiredforTransformIndexes +\n        memoryRequiredforTransforms +\n        extraMemory;\n      const totalPagesRequired =\n        Math.floor(totalRequiredMemory / Constants.MemoryPageSize) + 1;\n      const sorterWasmImport = {\n        module: {},\n        env: {\n          memory: new WebAssembly.Memory({\n            initial: totalPagesRequired,\n            maximum: totalPagesRequired,\n            shared: true,\n          }),\n        },\n      };\n      WebAssembly.compile(sorterWasmBytes)\n        .then((wasmModule) => {\n          return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n        })\n        .then((instance) => {\n          wasmInstance = instance;\n          indexesToSortOffset = 0;\n          centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n          modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n          precomputedDistancesOffset =\n            modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n          mappedDistancesOffset =\n            precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n          frequenciesOffset =\n            mappedDistancesOffset + memoryRequiredForMappedDistances;\n          sortedIndexesOffset =\n            frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n          sceneIndexesOffset =\n            sortedIndexesOffset + memoryRequiredForSortedIndexes;\n          transformsOffset =\n            sceneIndexesOffset + memoryRequiredforTransformIndexes;\n          wasmMemory = sorterWasmImport.env.memory.buffer;\n          if (useSharedMemory) {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n              indexesToSortBuffer: wasmMemory,\n              indexesToSortOffset: indexesToSortOffset,\n              sortedIndexesBuffer: wasmMemory,\n              sortedIndexesOffset: sortedIndexesOffset,\n              precomputedDistancesBuffer: wasmMemory,\n              precomputedDistancesOffset: precomputedDistancesOffset,\n              transformsBuffer: wasmMemory,\n              transformsOffset: transformsOffset,\n            });\n          } else {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n            });\n          }\n        });\n    }\n  };\n}\n\nexport function createSortWorker(\n  splatCount,\n  useSharedMemory,\n  enableSIMDInSort,\n  integerBasedSort,\n  dynamicMode,\n  splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision,\n) {\n  const worker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', sortWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n\n  let sourceWasm = SorterWasm;\n\n  // iOS makes choosing the right WebAssembly configuration tricky :(\n  const iOSSemVer = isIOS() ? getIOSSemever() : null;\n  if (!enableSIMDInSort && !useSharedMemory) {\n    sourceWasm = SorterWasmNoSIMD;\n    // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\n    // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNoSIMDNonShared;\n    }\n  } else if (!enableSIMDInSort) {\n    sourceWasm = SorterWasmNoSIMD;\n  } else if (!useSharedMemory) {\n    // Same issue with shared memory as above on iOS devices\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNonShared;\n    }\n  }\n\n  const sorterWasmBinaryString = atob(sourceWasm);\n  const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n  for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n    sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n  }\n\n  worker.postMessage({\n    init: {\n      sorterWasmBytes: sorterWasmBytes.buffer,\n      splatCount: splatCount,\n      useSharedMemory: useSharedMemory,\n      integerBasedSort: integerBasedSort,\n      dynamicMode: dynamicMode,\n      distanceMapRange: 1 << splatSortDistanceMapPrecision,\n      // Super hacky\n      Constants: {\n        BytesPerFloat: Constants.BytesPerFloat,\n        BytesPerInt: Constants.BytesPerInt,\n        MemoryPageSize: Constants.MemoryPageSize,\n        MaxScenes: Constants.MaxScenes,\n      },\n    },\n  });\n  return worker;\n}\n","import * as THREE from 'three';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { Constants } from './Constants.js';\nimport { LogLevel } from './LogLevel.js';\nimport { OrbitControls } from './OrbitControls.js';\nimport { RenderMode } from './RenderMode.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { SplatRenderMode } from './SplatRenderMode.js';\nimport {\n  abortablePromiseWithExtractedComponents,\n  clamp,\n  delayedExecute,\n  fetchWithProgress,\n  getCurrentTime,\n  getIOSSemever,\n  isIOS,\n  makeProgressiveFetchFunction,\n} from './Util.js';\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { createSortWorker } from './worker/SortWorker.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = 0.75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n  constructor(options = {}) {\n    // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n    // when the viewer uses its own camera).\n    if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n    this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n    // The camera's initial position (only used when the viewer uses its own camera).\n    if (!options.initialCameraPosition) {\n      options.initialCameraPosition = [0, 10, 15];\n    }\n    this.initialCameraPosition = new THREE.Vector3().fromArray(\n      options.initialCameraPosition,\n    );\n\n    // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n    if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n    this.initialCameraLookAt = new THREE.Vector3().fromArray(\n      options.initialCameraLookAt,\n    );\n\n    // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n    this.dropInMode = options.dropInMode || false;\n\n    // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n    if (\n      options.selfDrivenMode === undefined ||\n      options.selfDrivenMode === null\n    ) {\n      options.selfDrivenMode = true;\n    }\n    this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n    this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n    // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n    if (options.useBuiltInControls === undefined) {\n      options.useBuiltInControls = true;\n    }\n    this.useBuiltInControls = options.useBuiltInControls;\n\n    // parent element of the Three.js renderer canvas\n    this.rootElement = options.rootElement;\n\n    // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n    // at a small cost to visual quality\n    this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n    this.devicePixelRatio = this.ignoreDevicePixelRatio ?\n      1 :\n      window.devicePixelRatio;\n\n    // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU =\n      options.halfPrecisionCovariancesOnGPU || false;\n\n    // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n    this.threeScene = options.threeScene;\n    // Allows for usage of an external Three.js renderer\n    this.renderer = options.renderer;\n    // Allows for usage of an external Three.js camera\n    this.camera = options.camera;\n\n    // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n    // Currently this means pre-computing splat distances from the camera on the GPU\n    this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n    // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n    // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n    // overflow in larger scenes.\n    if (\n      options.integerBasedSort === undefined ||\n      options.integerBasedSort === null\n    ) {\n      options.integerBasedSort = true;\n    }\n    this.integerBasedSort = options.integerBasedSort;\n\n    // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n    // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n    // https://web.dev/articles/cross-origin-isolation-guide\n    // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n    // loading the application. More information is available in the README.\n    if (\n      options.sharedMemoryForWorkers === undefined ||\n      options.sharedMemoryForWorkers === null\n    ) {\n      options.sharedMemoryForWorkers = true;\n    }\n    this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n    // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n    // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n    // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n    // SplatMesh.getSplatCenter() by default.\n    this.dynamicScene = !!options.dynamicScene;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = options.antialiased || false;\n\n    this.webXRMode = options.webXRMode || WebXRMode.None;\n    if (this.webXRMode !== WebXRMode.None) {\n      this.gpuAcceleratedSort = false;\n    }\n    this.webXRActive = false;\n\n    this.webXRSessionInit = options.webXRSessionInit || {};\n\n    // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n    // it will only render when something in the scene has changed.\n    this.renderMode = options.renderMode || RenderMode.Always;\n\n    // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n    // and a fast fade-in for non progressively loaded scenes.\n    // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n    // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n    this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n    // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n    // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n    this.focalAdjustment = options.focalAdjustment || 1.0;\n\n    // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\n\n    // The verbosity of console logging\n    this.logLevel = options.logLevel || LogLevel.None;\n\n    // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n    // Valid values are 0 - 2. Default value is 0.\n    this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = options.enableOptionalEffects || false;\n\n    // Enable the usage of SIMD WebAssembly instructions for the splat sort\n    if (\n      options.enableSIMDInSort === undefined ||\n      options.enableSIMDInSort === null\n    ) {\n      options.enableSIMDInSort = true;\n    }\n    this.enableSIMDInSort = options.enableSIMDInSort;\n\n    // Level to compress non KSPLAT files when loading them for direct rendering\n    if (\n      options.inMemoryCompressionLevel === undefined ||\n      options.inMemoryCompressionLevel === null\n    ) {\n      options.inMemoryCompressionLevel = 0;\n    }\n    this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\n\n    // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\n    // Does not apply if splat scene is progressively loaded.\n    if (\n      options.optimizeSplatData === undefined ||\n      options.optimizeSplatData === null\n    ) {\n      options.optimizeSplatData = true;\n    }\n    this.optimizeSplatData = options.optimizeSplatData;\n\n    // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\n    // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\n    // it will need to be re-populated from the splat buffer(s). Default is false.\n    if (\n      options.freeIntermediateSplatData === undefined ||\n      options.freeIntermediateSplatData === null\n    ) {\n      options.freeIntermediateSplatData = false;\n    }\n    this.freeIntermediateSplatData = options.freeIntermediateSplatData;\n\n    // It appears that for certain iOS versions, special actions need to be taken with the\n    // usage of SIMD instructions and shared memory\n    if (isIOS()) {\n      const semver = getIOSSemever();\n      if (semver.major < 17) {\n        this.enableSIMDInSort = false;\n      }\n      if (semver.major < 16) {\n        this.sharedMemoryForWorkers = false;\n      }\n    }\n\n    // Tell the viewer how to render the splats\n    if (\n      options.splatRenderMode === undefined ||\n      options.splatRenderMode === null\n    ) {\n      options.splatRenderMode = SplatRenderMode.ThreeD;\n    }\n    this.splatRenderMode = options.splatRenderMode;\n\n    // Customize the speed at which the scene is revealed\n    this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\n\n    // Set the range for the depth map for the counting sort used to sort the splats\n    this.splatSortDistanceMapPrecision =\n      options.splatSortDistanceMapPrecision ||\n      Constants.DefaultSplatSortDistanceMapPrecision;\n    const maxPrecision = this.integerBasedSort ? 20 : 24;\n    this.splatSortDistanceMapPrecision = clamp(\n      this.splatSortDistanceMapPrecision,\n      10,\n      maxPrecision,\n    );\n\n    this.onSplatMeshChangedCallback = null;\n    this.createSplatMesh();\n\n    this.controls = null;\n    this.perspectiveControls = null;\n    this.orthographicControls = null;\n\n    this.orthographicCamera = null;\n    this.perspectiveCamera = null;\n\n    this.showMeshCursor = false;\n    this.showControlPlane = false;\n    this.showInfo = false;\n\n    this.sceneHelper = null;\n\n    this.sortWorker = null;\n    this.sortRunning = false;\n    this.splatRenderCount = 0;\n    this.splatSortCount = 0;\n    this.lastSplatSortCount = 0;\n    this.sortWorkerIndexesToSort = null;\n    this.sortWorkerSortedIndexes = null;\n    this.sortWorkerPrecomputedDistances = null;\n    this.sortWorkerTransforms = null;\n    this.preSortMessages = [];\n    this.runAfterNextSort = [];\n\n    this.selfDrivenModeRunning = false;\n    this.splatRenderReady = false;\n\n    this.raycaster = new Raycaster();\n\n    this.infoPanel = null;\n\n    this.startInOrthographicMode = false;\n\n    this.currentFPS = 0;\n    this.lastSortTime = 0;\n    this.consecutiveRenderFrames = 0;\n\n    this.previousCameraTarget = new THREE.Vector3();\n    this.nextCameraTarget = new THREE.Vector3();\n\n    this.mousePosition = new THREE.Vector2();\n    this.mouseDownPosition = new THREE.Vector2();\n    this.mouseDownTime = null;\n\n    this.resizeObserver = null;\n    this.mouseMoveListener = null;\n    this.mouseDownListener = null;\n    this.mouseUpListener = null;\n    this.keyDownListener = null;\n\n    this.sortPromise = null;\n    this.sortPromiseResolver = null;\n    this.splatSceneDownloadPromises = {};\n    this.splatSceneDownloadAndBuildPromise = null;\n    this.splatSceneRemovalPromise = null;\n\n    this.loadingSpinner = new LoadingSpinner(\n      null,\n      this.rootElement || document.body,\n    );\n    this.loadingSpinner.hide();\n    this.loadingProgressBar = new LoadingProgressBar(\n      this.rootElement || document.body,\n    );\n    this.loadingProgressBar.hide();\n    this.infoPanel = new InfoPanel(this.rootElement || document.body);\n    this.infoPanel.hide();\n\n    this.usingExternalCamera = this.dropInMode || this.camera ? true : false;\n    this.usingExternalRenderer =\n      this.dropInMode || this.renderer ? true : false;\n\n    this.initialized = false;\n    this.disposing = false;\n    this.disposed = false;\n    this.disposePromise = null;\n\n    this.fetchWithProgress = options.fetch ?\n      makeProgressiveFetchFunction(options.fetch) :\n      fetchWithProgress;\n    if (!this.dropInMode) this.init();\n  }\n\n  createSplatMesh() {\n    this.splatMesh = new SplatMesh(\n      this.splatRenderMode,\n      this.dynamicScene,\n      this.enableOptionalEffects,\n      this.halfPrecisionCovariancesOnGPU,\n      this.devicePixelRatio,\n      this.gpuAcceleratedSort,\n      this.integerBasedSort,\n      this.antialiased,\n      this.maxScreenSpaceSplatSize,\n      this.logLevel,\n      this.sphericalHarmonicsDegree,\n      this.sceneFadeInRateMultiplier,\n    );\n    this.splatMesh.frustumCulled = false;\n    if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\n  }\n\n  init() {\n    if (this.initialized) return;\n\n    if (!this.rootElement) {\n      if (!this.usingExternalRenderer) {\n        this.rootElement = document.createElement('div');\n        this.rootElement.style.width = '100%';\n        this.rootElement.style.height = '100%';\n        this.rootElement.style.position = 'absolute';\n        document.body.appendChild(this.rootElement);\n      } else {\n        this.rootElement =\n          this.renderer.domElement.parentElement || document.body;\n      }\n    }\n\n    this.setupCamera();\n    this.setupRenderer();\n    this.setupWebXR(this.webXRSessionInit);\n    this.setupControls();\n    this.setupEventHandlers();\n\n    this.threeScene = this.threeScene || new THREE.Scene();\n    this.sceneHelper = new SceneHelper(this.threeScene);\n    this.sceneHelper.setupMeshCursor();\n    this.sceneHelper.setupFocusMarker();\n    this.sceneHelper.setupControlPlane();\n\n    this.loadingProgressBar.setContainer(this.rootElement);\n    this.loadingSpinner.setContainer(this.rootElement);\n    this.infoPanel.setContainer(this.rootElement);\n\n    this.initialized = true;\n  }\n\n  setupCamera() {\n    if (!this.usingExternalCamera) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.perspectiveCamera = new THREE.PerspectiveCamera(\n        THREE_CAMERA_FOV,\n        renderDimensions.x / renderDimensions.y,\n        0.1,\n        1000,\n      );\n      this.orthographicCamera = new THREE.OrthographicCamera(\n        renderDimensions.x / -2,\n        renderDimensions.x / 2,\n        renderDimensions.y / 2,\n        renderDimensions.y / -2,\n        0.1,\n        1000,\n      );\n      this.camera = this.startInOrthographicMode ?\n        this.orthographicCamera :\n        this.perspectiveCamera;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupRenderer() {\n    if (!this.usingExternalRenderer) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: false,\n        precision: 'highp',\n      });\n      this.renderer.setPixelRatio(this.devicePixelRatio);\n      this.renderer.autoClear = true;\n      this.renderer.setClearColor(new THREE.Color(0x000000), 0.0);\n      this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n      this.resizeObserver = new ResizeObserver(() => {\n        this.getRenderDimensions(renderDimensions);\n        this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        this.forceRenderNextFrame();\n      });\n      this.resizeObserver.observe(this.rootElement);\n      this.rootElement.appendChild(this.renderer.domElement);\n    }\n  }\n\n  setupWebXR(webXRSessionInit) {\n    if (this.webXRMode) {\n      if (this.webXRMode === WebXRMode.VR) {\n        this.rootElement.appendChild(\n          VRButton.createButton(this.renderer, webXRSessionInit),\n        );\n      } else if (this.webXRMode === WebXRMode.AR) {\n        this.rootElement.appendChild(\n          ARButton.createButton(this.renderer, webXRSessionInit),\n        );\n      }\n      this.renderer.xr.addEventListener('sessionstart', (e) => {\n        this.webXRActive = true;\n      });\n      this.renderer.xr.addEventListener('sessionend', (e) => {\n        this.webXRActive = false;\n      });\n      this.renderer.xr.enabled = true;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupControls() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      if (!this.usingExternalCamera) {\n        this.perspectiveControls = new OrbitControls(\n          this.perspectiveCamera,\n          this.renderer.domElement,\n        );\n        this.orthographicControls = new OrbitControls(\n          this.orthographicCamera,\n          this.renderer.domElement,\n        );\n      } else {\n        if (this.camera.isOrthographicCamera) {\n          this.orthographicControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        } else {\n          this.perspectiveControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        }\n      }\n      for (let controls of [\n        this.orthographicControls,\n        this.perspectiveControls,\n      ]) {\n        if (controls) {\n          controls.listenToKeyEvents(window);\n          controls.rotateSpeed = 0.5;\n          controls.maxPolarAngle = Math.PI * 0.75;\n          controls.minPolarAngle = 0.1;\n          controls.enableDamping = true;\n          controls.dampingFactor = 0.05;\n          controls.target.copy(this.initialCameraLookAt);\n          controls.update();\n        }\n      }\n      this.controls = this.camera.isOrthographicCamera ?\n        this.orthographicControls :\n        this.perspectiveControls;\n      this.controls.update();\n    }\n  }\n\n  setupEventHandlers() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      this.mouseMoveListener = this.onMouseMove.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n        false,\n      );\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n        false,\n      );\n      this.mouseUpListener = this.onMouseUp.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerup',\n        this.mouseUpListener,\n        false,\n      );\n      this.keyDownListener = this.onKeyDown.bind(this);\n      window.addEventListener('keydown', this.keyDownListener, false);\n    }\n  }\n\n  removeEventHandlers() {\n    if (this.useBuiltInControls) {\n      this.renderer.domElement.removeEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n      );\n      this.mouseMoveListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n      );\n      this.mouseDownListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerup',\n        this.mouseUpListener,\n      );\n      this.mouseUpListener = null;\n      window.removeEventListener('keydown', this.keyDownListener);\n      this.keyDownListener = null;\n    }\n  }\n\n  setRenderMode(renderMode) {\n    this.renderMode = renderMode;\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value =\n      activeSphericalHarmonicsDegrees;\n    this.splatMesh.material.uniformsNeedUpdate = true;\n  }\n\n  onSplatMeshChanged(callback) {\n    this.onSplatMeshChangedCallback = callback;\n  }\n\n  onKeyDown = (function() {\n    const forward = new THREE.Vector3();\n    const tempMatrixLeft = new THREE.Matrix4();\n    const tempMatrixRight = new THREE.Matrix4();\n\n    return function(e) {\n      forward.set(0, 0, -1);\n      forward.transformDirection(this.camera.matrixWorld);\n      tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n      tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n      switch (e.code) {\n        case 'KeyG':\n          this.focalAdjustment += 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'KeyF':\n          this.focalAdjustment -= 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'ArrowLeft':\n          this.camera.up.transformDirection(tempMatrixLeft);\n          break;\n        case 'ArrowRight':\n          this.camera.up.transformDirection(tempMatrixRight);\n          break;\n        case 'KeyC':\n          this.showMeshCursor = !this.showMeshCursor;\n          break;\n        case 'KeyU':\n          this.showControlPlane = !this.showControlPlane;\n          break;\n        case 'KeyI':\n          this.showInfo = !this.showInfo;\n          if (this.showInfo) {\n            this.infoPanel.show();\n          } else {\n            this.infoPanel.hide();\n          }\n          break;\n        case 'KeyO':\n          if (!this.usingExternalCamera) {\n            this.setOrthographicMode(!this.camera.isOrthographicCamera);\n          }\n          break;\n        case 'KeyP':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setPointCloudModeEnabled(\n              !this.splatMesh.getPointCloudModeEnabled(),\n            );\n          }\n          break;\n        case 'Equal':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n          }\n          break;\n        case 'Minus':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(\n              Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0),\n            );\n          }\n          break;\n      }\n    };\n  })();\n\n  onMouseMove(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n  }\n\n  onMouseDown() {\n    this.mouseDownPosition.copy(this.mousePosition);\n    this.mouseDownTime = getCurrentTime();\n  }\n\n  onMouseUp = (function() {\n    const clickOffset = new THREE.Vector2();\n\n    return function(mouse) {\n      clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n      const mouseUpTime = getCurrentTime();\n      const wasClick =\n        mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n      if (wasClick) {\n        this.onMouseClick(mouse);\n      }\n    };\n  })();\n\n  onMouseClick(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    this.checkForFocalPointChange();\n  }\n\n  checkForFocalPointChange = (function() {\n    const renderDimensions = new THREE.Vector2();\n    const toNewFocalPoint = new THREE.Vector3();\n    const outHits = [];\n\n    return function() {\n      if (!this.transitioningCameraTarget) {\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          const hit = outHits[0];\n          const intersectionPoint = hit.origin;\n          toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n          if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n            this.previousCameraTarget.copy(this.controls.target);\n            this.nextCameraTarget.copy(intersectionPoint);\n            this.transitioningCameraTarget = true;\n            this.transitioningCameraTargetStartTime = getCurrentTime();\n          }\n        }\n      }\n    };\n  })();\n\n  getRenderDimensions(outDimensions) {\n    if (this.rootElement) {\n      outDimensions.x = this.rootElement.offsetWidth;\n      outDimensions.y = this.rootElement.offsetHeight;\n    } else {\n      this.renderer.getSize(outDimensions);\n    }\n  }\n\n  setOrthographicMode(orthographicMode) {\n    if (orthographicMode === this.camera.isOrthographicCamera) return;\n    const fromCamera = this.camera;\n    const toCamera = orthographicMode ?\n      this.orthographicCamera :\n      this.perspectiveCamera;\n    toCamera.position.copy(fromCamera.position);\n    toCamera.up.copy(fromCamera.up);\n    toCamera.rotation.copy(fromCamera.rotation);\n    toCamera.quaternion.copy(fromCamera.quaternion);\n    toCamera.matrix.copy(fromCamera.matrix);\n    this.camera = toCamera;\n\n    if (this.controls) {\n      const resetControls = (controls) => {\n        controls.saveState();\n        controls.reset();\n      };\n\n      const fromControls = this.controls;\n      const toControls = orthographicMode ?\n        this.orthographicControls :\n        this.perspectiveControls;\n\n      resetControls(toControls);\n      resetControls(fromControls);\n\n      toControls.target.copy(fromControls.target);\n      if (orthographicMode) {\n        Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n      } else {\n        Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n      }\n      this.controls = toControls;\n      this.camera.lookAt(this.controls.target);\n    }\n  }\n\n  static setCameraPositionFromZoom = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(positionCamera, zoomedCamera, controls) {\n      const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n      tempVector\n        .copy(controls.target)\n        .sub(positionCamera.position)\n        .normalize()\n        .multiplyScalar(toLookAtDistance)\n        .negate();\n      positionCamera.position.copy(controls.target).add(tempVector);\n    };\n  })();\n\n  static setCameraZoomFromPosition = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(zoomCamera, positionZamera, controls) {\n      const toLookAtDistance = tempVector\n        .copy(controls.target)\n        .sub(positionZamera.position)\n        .length();\n      zoomCamera.zoom = 1 / (toLookAtDistance * 0.001);\n    };\n  })();\n\n  updateSplatMesh = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.splatMesh) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      if (splatCount > 0) {\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.splatMesh.updateTransforms();\n        this.getRenderDimensions(renderDimensions);\n        const focalLengthX =\n          this.camera.projectionMatrix.elements[0] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.x;\n        const focalLengthY =\n          this.camera.projectionMatrix.elements[5] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.y;\n\n        const focalMultiplier = this.camera.isOrthographicCamera ?\n          1.0 / this.devicePixelRatio :\n          1.0;\n        const focalAdjustment = this.focalAdjustment * focalMultiplier;\n        const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n        this.adjustForWebXRStereo(renderDimensions);\n        this.splatMesh.updateUniforms(\n          renderDimensions,\n          focalLengthX * focalAdjustment,\n          focalLengthY * focalAdjustment,\n          this.camera.isOrthographicCamera,\n          this.camera.zoom || 1.0,\n          inverseFocalAdjustment,\n        );\n      }\n    };\n  })();\n\n  adjustForWebXRStereo(renderDimensions) {\n    // TODO: Figure out a less hacky way to determine if stereo rendering is active\n    if (this.camera && this.webXRActive) {\n      const xrCamera = this.renderer.xr.getCamera();\n      const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n      const cameraProj00 = this.camera.projectionMatrix.elements[0];\n      renderDimensions.x *= cameraProj00 / xrCameraProj00;\n    }\n  }\n\n  isLoadingOrUnloading() {\n    return (\n      Object.keys(this.splatSceneDownloadPromises).length > 0 ||\n      this.splatSceneDownloadAndBuildPromise !== null ||\n      this.splatSceneRemovalPromise !== null\n    );\n  }\n\n  isDisposingOrDisposed() {\n    return this.disposing || this.disposed;\n  }\n\n  addSplatSceneDownloadPromise(promise) {\n    this.splatSceneDownloadPromises[promise.id] = promise;\n  }\n\n  removeSplatSceneDownloadPromise(promise) {\n    delete this.splatSceneDownloadPromises[promise.id];\n  }\n\n  setSplatSceneDownloadAndBuildPromise(promise) {\n    this.splatSceneDownloadAndBuildPromise = promise;\n  }\n\n  clearSplatSceneDownloadAndBuildPromise() {\n    this.splatSceneDownloadAndBuildPromise = null;\n  }\n\n  /**\n   * Add a splat scene to the viewer and display any loading UI if appropriate.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received, or other processing occurs\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    if (\n      options.progressiveLoad &&\n      this.splatMesh.scenes &&\n      this.splatMesh.scenes.length > 0\n    ) {\n      console.log(\n        'addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes',\n      );\n      options.progressiveLoad = false;\n    }\n\n    const format =\n      options.format !== undefined && options.format !== null ?\n        options.format :\n        sceneFormatFromPath(path);\n    const progressiveLoad =\n      Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\n    const showLoadingUI =\n      options.showLoadingUI !== undefined && options.showLoadingUI !== null ?\n        options.showLoadingUI :\n        true;\n\n    let loadingUITaskId = null;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n    const hideLoadingUI = () => {\n      this.loadingProgressBar.hide();\n      this.loadingSpinner.removeAllTasks();\n    };\n\n    const onProgressUIUpdate = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          if (percentComplete == 100) {\n            this.loadingSpinner.setMessageForTask(\n              loadingUITaskId,\n              'Download complete!',\n            );\n          } else {\n            if (progressiveLoad) {\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                'Downloading splats...',\n              );\n            } else {\n              const suffix = percentCompleteLabel ?\n                `: ${percentCompleteLabel}` :\n                `...`;\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                `Downloading${suffix}`,\n              );\n            }\n          }\n        } else if (loaderStatus === LoaderStatus.Processing) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            'Processing splats...',\n          );\n        }\n      }\n    };\n\n    let downloadDone = false;\n    let downloadedPercentage = 0;\n    const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n      if (showLoadingUI) {\n        if (\n          (firstBuild && progressiveLoad) ||\n          (finalBuild && !progressiveLoad)\n        ) {\n          this.loadingSpinner.removeTask(loadingUITaskId);\n          if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n        }\n        if (progressiveLoad) {\n          if (finalBuild) {\n            downloadDone = true;\n            this.loadingProgressBar.hide();\n          } else {\n            this.loadingProgressBar.setProgress(downloadedPercentage);\n          }\n        }\n      }\n    };\n\n    const onProgress = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      downloadedPercentage = percentComplete;\n      onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n      if (options.onProgress) {\n        options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n      }\n    };\n\n    const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n      if (!progressiveLoad && options.onProgress) {\n        options.onProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const addSplatBufferOptions = {\n        rotation: options.rotation || options.orientation,\n        position: options.position,\n        scale: options.scale,\n        splatAlphaRemovalThreshold: options.splatAlphaRemovalThreshold,\n      };\n      return this.addSplatBuffers(\n        [splatBuffer],\n        [addSplatBufferOptions],\n        finalBuild,\n        firstBuild && showLoadingUI,\n        showLoadingUI,\n        progressiveLoad,\n        progressiveLoad,\n      ).then(() => {\n        if (!progressiveLoad && options.onProgress) {\n          options.onProgress(100, '100%', LoaderStatus.Processing);\n        }\n        splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n      });\n    };\n\n    const loadFunc = progressiveLoad ?\n      this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\n      this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\n    return loadFunc(\n      path,\n      format,\n      options.splatAlphaRemovalThreshold,\n      buildSection.bind(this),\n      onProgress,\n      hideLoadingUI.bind(this),\n    );\n  }\n\n  /**\n   * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n   * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\n   * and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n   * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n   * @param {function} onException Function to be called when exception occurs\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneStandardLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onProgress,\n    onException,\n  ) {\n    const downloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onProgress,\n      false,\n      undefined,\n      format,\n    );\n    const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(\n      downloadPromise.abortHandler,\n    );\n\n    downloadPromise\n      .then((splatBuffer) => {\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        return buildFunc(splatBuffer, true, true).then(() => {\n          downloadAndBuildPromise.resolve();\n          this.clearSplatSceneDownloadAndBuildPromise();\n        });\n      })\n      .catch((e) => {\n        if (onException) onException();\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(`Viewer::addSplatScene -> Could not load file ${path}`);\n        downloadAndBuildPromise.reject(error);\n      });\n\n    this.addSplatSceneDownloadPromise(downloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\n\n    return downloadAndBuildPromise.promise;\n  }\n\n  /**\n   * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\n   * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n   * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n   * @param {function} onDownloadProgress Function to be called as file data are received\n   * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneProgressiveLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onDownloadProgress,\n    onDownloadException,\n  ) {\n    let progressiveLoadedSectionBuildCount = 0;\n    let progressiveLoadedSectionBuilding = false;\n    const queuedProgressiveLoadSectionBuilds = [];\n\n    const checkAndBuildProgressiveLoadSections = () => {\n      if (\n        queuedProgressiveLoadSectionBuilds.length > 0 &&\n        !progressiveLoadedSectionBuilding &&\n        !this.isDisposingOrDisposed()\n      ) {\n        progressiveLoadedSectionBuilding = true;\n        const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\n        buildFunc(\n          queuedBuild.splatBuffer,\n          queuedBuild.firstBuild,\n          queuedBuild.finalBuild,\n        ).then(() => {\n          progressiveLoadedSectionBuilding = false;\n          if (queuedBuild.firstBuild) {\n            progressiveLoadFirstSectionBuildPromise.resolve();\n          } else if (queuedBuild.finalBuild) {\n            splatSceneDownloadAndBuildPromise.resolve();\n            this.clearSplatSceneDownloadAndBuildPromise();\n          }\n          if (queuedProgressiveLoadSectionBuilds.length > 0) {\n            delayedExecute(() => checkAndBuildProgressiveLoadSections());\n          }\n        });\n      }\n    };\n\n    const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\n      if (!this.isDisposingOrDisposed()) {\n        if (\n          finalBuild ||\n          queuedProgressiveLoadSectionBuilds.length === 0 ||\n          splatBuffer.getSplatCount() >\n            queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()\n        ) {\n          queuedProgressiveLoadSectionBuilds.push({\n            splatBuffer,\n            firstBuild: progressiveLoadedSectionBuildCount === 0,\n            finalBuild,\n          });\n          progressiveLoadedSectionBuildCount++;\n          checkAndBuildProgressiveLoadSections();\n        }\n      }\n    };\n\n    const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onDownloadProgress,\n      true,\n      onProgressiveLoadSectionProgress,\n      format,\n    );\n\n    const progressiveLoadFirstSectionBuildPromise =\n      abortablePromiseWithExtractedComponents(\n        splatSceneDownloadPromise.abortHandler,\n      );\n    const splatSceneDownloadAndBuildPromise =\n      abortablePromiseWithExtractedComponents();\n\n    this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(\n      splatSceneDownloadAndBuildPromise.promise,\n    );\n\n    splatSceneDownloadPromise\n      .then(() => {\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n      })\n      .catch((e) => {\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(\n                `Viewer::addSplatScene -> Could not load one or more scenes`,\n              );\n        progressiveLoadFirstSectionBuildPromise.reject(error);\n        if (onDownloadException) onDownloadException(error);\n      });\n\n    return progressiveLoadFirstSectionBuildPromise.promise;\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @param {function} onProgress Function to be called as file data are received\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    const fileCount = sceneOptions.length;\n    const percentComplete = [];\n\n    let loadingUITaskId;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n\n    const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\n      percentComplete[fileIndex] = percent;\n      let totalPercent = 0;\n      for (let i = 0; i < fileCount; i++) {\n        totalPercent += percentComplete[i] || 0;\n      }\n      totalPercent = totalPercent / fileCount;\n      percentLabel = `${totalPercent.toFixed(2)}%`;\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            totalPercent == 100 ?\n              `Download complete!` :\n              `Downloading: ${percentLabel}`,\n          );\n        }\n      }\n      if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\n    };\n\n    const baseDownloadPromises = [];\n    const nativeDownloadPromises = [];\n    for (let i = 0; i < sceneOptions.length; i++) {\n      const options = sceneOptions[i];\n      const format =\n        options.format !== undefined && options.format !== null ?\n          options.format :\n          sceneFormatFromPath(options.path);\n      const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n        options.path,\n        options.splatAlphaRemovalThreshold,\n        onLoadProgress.bind(this, i),\n        false,\n        undefined,\n        format,\n      );\n      baseDownloadPromises.push(baseDownloadPromise);\n      nativeDownloadPromises.push(baseDownloadPromise.promise);\n    }\n\n    const downloadAndBuildPromise = new AbortablePromise(\n      (resolve, reject) => {\n        Promise.all(nativeDownloadPromises)\n          .then((splatBuffers) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            this.addSplatBuffers(\n              splatBuffers,\n              sceneOptions,\n              true,\n              showLoadingUI,\n              showLoadingUI,\n              false,\n              false,\n            ).then(() => {\n              if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n              this.clearSplatSceneDownloadAndBuildPromise();\n              resolve();\n            });\n          })\n          .catch((e) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            this.clearSplatSceneDownloadAndBuildPromise();\n            const error =\n              e instanceof AbortedPromiseError ?\n                e :\n                new Error(\n                    `Viewer::addSplatScenes -> Could not load one or more splat scenes.`,\n                  );\n            reject(error);\n          })\n          .finally(() => {\n            this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\n          });\n      },\n      (reason) => {\n        for (let baseDownloadPromise of baseDownloadPromises) {\n          baseDownloadPromise.abort(reason);\n        }\n      },\n    );\n    this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\n    return downloadAndBuildPromise;\n  }\n\n  /**\n   * Download a splat scene and convert to SplatBuffer instance.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n   *                                            value (valid range: 0 - 255), defaults to 1\n   *\n   * @param {function} onProgress Function to be called as file data are received\n   * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\n   * @param {function} onSectionBuilt Function to be called when new section is added to the file\n   * @param {string} format File format of the scene\n   * @return {AbortablePromise}\n   */\n  downloadSplatSceneToSplatBuffer(\n    path,\n    splatAlphaRemovalThreshold = 1,\n    onProgress = undefined,\n    progressiveBuild = false,\n    onSectionBuilt = undefined,\n    format,\n  ) {\n    const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\n    try {\n      if (format === SceneFormat.Splat) {\n        return SplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.KSplat) {\n        return KSplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.Ply) {\n        return PlyLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          this.sphericalHarmonicsDegree,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      }\n    } catch (e) {\n      if (e instanceof DirectLoadError) {\n        throw new Error(\n          'File type or server does not support progressive loading.',\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    throw new Error(\n      `Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`,\n    );\n  }\n\n  static isProgressivelyLoadable(format) {\n    return (\n      format === SceneFormat.Splat ||\n      format === SceneFormat.KSplat ||\n      format === SceneFormat.Ply\n    );\n  }\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n   * This function will terminate the existing sort worker (if there is one).\n   */\n  addSplatBuffers = (function() {\n    return function(\n      splatBuffers,\n      splatBufferOptions = [],\n      finalBuild = true,\n      showLoadingUI = true,\n      showLoadingUIForSplatTreeBuild = true,\n      replaceExisting = false,\n      enableRenderBeforeFirstSort = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n      let splatProcessingTaskId = null;\n      const removeSplatProcessingTask = () => {\n        if (splatProcessingTaskId !== null) {\n          this.loadingSpinner.removeTask(splatProcessingTaskId);\n          splatProcessingTaskId = null;\n        }\n      };\n\n      this.splatRenderReady = false;\n      return new Promise((resolve) => {\n        if (showLoadingUI) {\n          splatProcessingTaskId = this.loadingSpinner.addTask(\n            'Processing splats...',\n          );\n        }\n        delayedExecute(() => {\n          if (this.isDisposingOrDisposed()) {\n            resolve();\n          } else {\n            const buildResults = this.addSplatBuffersToMesh(\n              splatBuffers,\n              splatBufferOptions,\n              finalBuild,\n              showLoadingUIForSplatTreeBuild,\n              replaceExisting,\n              preserveVisibleRegion,\n            );\n\n            const maxSplatCount = this.splatMesh.getMaxSplatCount();\n            if (\n              this.sortWorker &&\n              this.sortWorker.maxSplatCount !== maxSplatCount\n            ) {\n              this.disposeSortWorker();\n            }\n            // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\n            // splat centers and transform indexes so that it can calculate those distance values.\n            if (!this.gpuAcceleratedSort) {\n              this.preSortMessages.push({\n                centers: buildResults.centers.buffer,\n                sceneIndexes: buildResults.sceneIndexes.buffer,\n                range: {\n                  from: buildResults.from,\n                  to: buildResults.to,\n                  count: buildResults.count,\n                },\n              });\n            }\n            const sortWorkerSetupPromise =\n              !this.sortWorker && maxSplatCount > 0 ?\n                this.setupSortWorker(this.splatMesh) :\n                Promise.resolve();\n            sortWorkerSetupPromise.then(() => {\n              if (this.isDisposingOrDisposed()) return;\n              this.runSplatSort(true, true).then((sortRunning) => {\n                if (!this.sortWorker || !sortRunning) {\n                  this.splatRenderReady = true;\n                  removeSplatProcessingTask();\n                  resolve();\n                } else {\n                  if (enableRenderBeforeFirstSort) {\n                    this.splatRenderReady = true;\n                  } else {\n                    this.runAfterNextSort.push(() => {\n                      this.splatRenderReady = true;\n                    });\n                  }\n                  this.runAfterNextSort.push(() => {\n                    removeSplatProcessingTask();\n                    resolve();\n                  });\n                }\n              });\n            });\n          }\n        }, true);\n      });\n    };\n  })();\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\n   * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\n   * changed by passing 'true' for 'replaceExisting'.\n   * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n   * @param {Array<object>} splatBufferOptions Array of options objects: {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  addSplatBuffersToMesh = (function() {\n    let splatOptimizingTaskId;\n\n    return function(\n      splatBuffers,\n      splatBufferOptions,\n      finalBuild = true,\n      showLoadingUIForSplatTreeBuild = false,\n      replaceExisting = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return;\n      let allSplatBuffers = [];\n      let allSplatBufferOptions = [];\n      if (!replaceExisting) {\n        allSplatBuffers =\n          this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\n        allSplatBufferOptions = this.splatMesh.sceneOptions ?\n          this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) :\n          [];\n      }\n      allSplatBuffers.push(...splatBuffers);\n      allSplatBufferOptions.push(...splatBufferOptions);\n      if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n      const onSplatTreeIndexesUpload = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        const splatCount = this.splatMesh.getSplatCount();\n        if (\n          showLoadingUIForSplatTreeBuild &&\n          splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER\n        ) {\n          if (!finished && !splatOptimizingTaskId) {\n            this.loadingSpinner.setMinimized(true, true);\n            splatOptimizingTaskId = this.loadingSpinner.addTask(\n              'Optimizing data structures...',\n            );\n          }\n        }\n      };\n      const onSplatTreeReady = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        if (finished && splatOptimizingTaskId) {\n          this.loadingSpinner.removeTask(splatOptimizingTaskId);\n          splatOptimizingTaskId = null;\n        }\n      };\n      const buildResults = this.splatMesh.build(\n        allSplatBuffers,\n        allSplatBufferOptions,\n        true,\n        finalBuild,\n        onSplatTreeIndexesUpload,\n        onSplatTreeReady,\n        preserveVisibleRegion,\n      );\n      if (finalBuild && this.freeIntermediateSplatData) {\n        this.splatMesh.freeIntermediateSplatData();\n      }\n      return buildResults;\n    };\n  })();\n\n  /**\n   * Set up the splat sorting web worker.\n   * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n   * @return {Promise}\n   */\n  setupSortWorker(splatMesh) {\n    if (this.isDisposingOrDisposed()) return;\n    return new Promise((resolve) => {\n      const DistancesArrayType = this.integerBasedSort ?\n        Int32Array :\n        Float32Array;\n      const splatCount = splatMesh.getSplatCount();\n      const maxSplatCount = splatMesh.getMaxSplatCount();\n      this.sortWorker = createSortWorker(\n        maxSplatCount,\n        this.sharedMemoryForWorkers,\n        this.enableSIMDInSort,\n        this.integerBasedSort,\n        this.splatMesh.dynamicMode,\n        this.splatSortDistanceMapPrecision,\n      );\n      this.sortWorker.onmessage = (e) => {\n        if (e.data.sortDone) {\n          this.sortRunning = false;\n          if (this.sharedMemoryForWorkers) {\n            this.splatMesh.updateRenderIndexes(\n              this.sortWorkerSortedIndexes,\n              e.data.splatRenderCount,\n            );\n          } else {\n            const sortedIndexes = new Uint32Array(\n              e.data.sortedIndexes.buffer,\n              0,\n              e.data.splatRenderCount,\n            );\n            this.splatMesh.updateRenderIndexes(\n              sortedIndexes,\n              e.data.splatRenderCount,\n            );\n          }\n\n          this.lastSplatSortCount = this.splatSortCount;\n\n          this.lastSortTime = e.data.sortTime;\n          this.sortPromiseResolver();\n          this.sortPromiseResolver = null;\n          this.forceRenderNextFrame();\n          if (this.runAfterNextSort.length > 0) {\n            this.runAfterNextSort.forEach((func) => {\n              func();\n            });\n            this.runAfterNextSort.length = 0;\n          }\n        } else if (e.data.sortCanceled) {\n          this.sortRunning = false;\n        } else if (e.data.sortSetupPhase1Complete) {\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker WASM setup complete.');\n          }\n          if (this.sharedMemoryForWorkers) {\n            this.sortWorkerSortedIndexes = new Uint32Array(\n              e.data.sortedIndexesBuffer,\n              e.data.sortedIndexesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerIndexesToSort = new Uint32Array(\n              e.data.indexesToSortBuffer,\n              e.data.indexesToSortOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              e.data.precomputedDistancesBuffer,\n              e.data.precomputedDistancesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              e.data.transformsBuffer,\n              e.data.transformsOffset,\n              Constants.MaxScenes * 16,\n            );\n          } else {\n            this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              Constants.MaxScenes * 16,\n            );\n          }\n          for (let i = 0; i < splatCount; i++) {\n            this.sortWorkerIndexesToSort[i] = i;\n          }\n          this.sortWorker.maxSplatCount = maxSplatCount;\n\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker ready.');\n            const splatDataTextures = this.splatMesh.getSplatDataTextures();\n            const covariancesTextureSize = splatDataTextures.covariances.size;\n            const centersColorsTextureSize =\n              splatDataTextures.centerColors.size;\n            console.log(\n              'Covariances texture size: ' +\n                covariancesTextureSize.x +\n                ' x ' +\n                covariancesTextureSize.y,\n            );\n            console.log(\n              'Centers/colors texture size: ' +\n                centersColorsTextureSize.x +\n                ' x ' +\n                centersColorsTextureSize.y,\n            );\n          }\n\n          resolve();\n        }\n      };\n    });\n  }\n\n  disposeSortWorker() {\n    if (this.sortWorker) this.sortWorker.terminate();\n    this.sortWorker = null;\n    this.sortPromise = null;\n    if (this.sortPromiseResolver) {\n      this.sortPromiseResolver();\n      this.sortPromiseResolver = null;\n    }\n    this.preSortMessages = [];\n    this.sortRunning = false;\n  }\n\n  removeSplatScene(indexToRemove, showLoadingUI = true) {\n    return this.removeSplatScenes([indexToRemove], showLoadingUI);\n  }\n\n  removeSplatScenes(indexesToRemove, showLoadingUI = true) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot remove splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot remove splat scene after dispose() is called.');\n    }\n\n    let sortPromise;\n\n    this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n      let revmovalTaskId;\n\n      if (showLoadingUI) {\n        this.loadingSpinner.removeAllTasks();\n        this.loadingSpinner.show();\n        revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n      }\n\n      const checkAndHideLoadingUI = () => {\n        if (showLoadingUI) {\n          this.loadingSpinner.hide();\n          this.loadingSpinner.removeTask(revmovalTaskId);\n        }\n      };\n\n      const onDone = (error) => {\n        checkAndHideLoadingUI();\n        this.splatSceneRemovalPromise = null;\n        if (!error) resolve();\n        else reject(error);\n      };\n\n      const checkForEarlyExit = () => {\n        if (this.isDisposingOrDisposed()) {\n          onDone();\n          return true;\n        }\n        return false;\n      };\n\n      sortPromise = this.sortPromise || Promise.resolve();\n      sortPromise.then(() => {\n        if (checkForEarlyExit()) return;\n        const savedSplatBuffers = [];\n        const savedSceneOptions = [];\n        const savedSceneTransformComponents = [];\n        for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n          let shouldRemove = false;\n          for (let indexToRemove of indexesToRemove) {\n            if (indexToRemove === i) {\n              shouldRemove = true;\n              break;\n            }\n          }\n          if (!shouldRemove) {\n            const scene = this.splatMesh.scenes[i];\n            savedSplatBuffers.push(scene.splatBuffer);\n            savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n            savedSceneTransformComponents.push({\n              position: scene.position.clone(),\n              quaternion: scene.quaternion.clone(),\n              scale: scene.scale.clone(),\n            });\n          }\n        }\n        this.disposeSortWorker();\n        this.splatMesh.dispose();\n        this.sceneRevealMode = SceneRevealMode.Instant;\n        this.createSplatMesh();\n        this.addSplatBuffers(\n          savedSplatBuffers,\n          savedSceneOptions,\n          true,\n          false,\n          true,\n        )\n          .then(() => {\n            if (checkForEarlyExit()) return;\n            checkAndHideLoadingUI();\n            this.splatMesh.scenes.forEach((scene, index) => {\n              scene.position.copy(\n                savedSceneTransformComponents[index].position,\n              );\n              scene.quaternion.copy(\n                savedSceneTransformComponents[index].quaternion,\n              );\n              scene.scale.copy(savedSceneTransformComponents[index].scale);\n            });\n            this.splatMesh.updateTransforms();\n            this.splatRenderReady = false;\n\n            this.runSplatSort(true).then(() => {\n              if (checkForEarlyExit()) {\n                this.splatRenderReady = true;\n                return;\n              }\n              sortPromise = this.sortPromise || Promise.resolve();\n              sortPromise.then(() => {\n                this.splatRenderReady = true;\n                onDone();\n              });\n            });\n          })\n          .catch((e) => {\n            onDone(e);\n          });\n      });\n    });\n\n    return this.splatSceneRemovalPromise;\n  }\n\n  /**\n   * Start self-driven mode\n   */\n  start() {\n    if (this.selfDrivenMode) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n      } else {\n        this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n      }\n      this.selfDrivenModeRunning = true;\n    } else {\n      throw new Error('Cannot start viewer unless it is in self driven mode.');\n    }\n  }\n\n  /**\n   * Stop self-driven mode\n   */\n  stop() {\n    if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(null);\n      } else {\n        cancelAnimationFrame(this.requestFrameId);\n      }\n      this.selfDrivenModeRunning = false;\n    }\n  }\n\n  /**\n   * Dispose of all resources held directly and indirectly by this viewer.\n   */\n  async dispose() {\n    if (this.isDisposingOrDisposed()) return this.disposePromise;\n\n    let waitPromises = [];\n    let promisesToAbort = [];\n    for (let promiseKey in this.splatSceneDownloadPromises) {\n      if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n        const downloadPromiseToAbort =\n          this.splatSceneDownloadPromises[promiseKey];\n        promisesToAbort.push(downloadPromiseToAbort);\n        waitPromises.push(downloadPromiseToAbort.promise);\n      }\n    }\n    if (this.sortPromise) {\n      waitPromises.push(this.sortPromise);\n    }\n\n    this.disposing = true;\n    this.disposePromise = Promise.all(waitPromises).finally(() => {\n      this.stop();\n      if (this.orthographicControls) {\n        this.orthographicControls.dispose();\n        this.orthographicControls = null;\n      }\n      if (this.perspectiveControls) {\n        this.perspectiveControls.dispose();\n        this.perspectiveControls = null;\n      }\n      this.controls = null;\n      if (this.splatMesh) {\n        this.splatMesh.dispose();\n        this.splatMesh = null;\n      }\n      if (this.sceneHelper) {\n        this.sceneHelper.dispose();\n        this.sceneHelper = null;\n      }\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(this.rootElement);\n        this.resizeObserver = null;\n      }\n      this.disposeSortWorker();\n      this.removeEventHandlers();\n\n      this.loadingSpinner.removeAllTasks();\n      this.loadingSpinner.setContainer(null);\n      this.loadingProgressBar.hide();\n      this.loadingProgressBar.setContainer(null);\n      this.infoPanel.setContainer(null);\n\n      this.camera = null;\n      this.threeScene = null;\n      this.splatRenderReady = false;\n      this.initialized = false;\n      if (this.renderer) {\n        if (!this.usingExternalRenderer) {\n          this.rootElement.removeChild(this.renderer.domElement);\n          this.renderer.dispose();\n        }\n        this.renderer = null;\n      }\n\n      if (!this.usingExternalRenderer) {\n        document.body.removeChild(this.rootElement);\n      }\n\n      this.sortWorkerSortedIndexes = null;\n      this.sortWorkerIndexesToSort = null;\n      this.sortWorkerPrecomputedDistances = null;\n      this.sortWorkerTransforms = null;\n      this.disposed = true;\n      this.disposing = false;\n      this.disposePromise = null;\n    });\n    promisesToAbort.forEach((toAbort) => {\n      toAbort.abort('Scene disposed');\n    });\n    return this.disposePromise;\n  }\n\n  selfDrivenUpdate() {\n    if (this.selfDrivenMode && !this.webXRMode) {\n      this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n    }\n    this.update();\n    if (this.shouldRender()) {\n      this.render();\n      this.consecutiveRenderFrames++;\n    } else {\n      this.consecutiveRenderFrames = 0;\n    }\n    this.renderNextFrame = false;\n  }\n\n  forceRenderNextFrame() {\n    this.renderNextFrame = true;\n  }\n\n  shouldRender = (function() {\n    let renderCount = 0;\n    const lastCameraPosition = new THREE.Vector3();\n    const lastCameraOrientation = new THREE.Quaternion();\n    const changeEpsilon = 0.0001;\n\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return false;\n      }\n\n      let shouldRender = false;\n      let cameraChanged = false;\n      if (this.camera) {\n        const cp = this.camera.position;\n        const co = this.camera.quaternion;\n        cameraChanged =\n          Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n          Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n          Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n          Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n          Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n          Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n          Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n      }\n\n      shouldRender =\n        this.renderMode !== RenderMode.Never &&\n        (renderCount === 0 ||\n          this.splatMesh.visibleRegionChanging ||\n          cameraChanged ||\n          this.renderMode === RenderMode.Always ||\n          this.dynamicMode === true ||\n          this.renderNextFrame);\n\n      if (this.camera) {\n        lastCameraPosition.copy(this.camera.position);\n        lastCameraOrientation.copy(this.camera.quaternion);\n      }\n\n      renderCount++;\n      return shouldRender;\n    };\n  })();\n\n  render = (function() {\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return;\n      }\n\n      const hasRenderables = (threeScene) => {\n        for (let child of threeScene.children) {\n          if (child.visible) return true;\n        }\n        return false;\n      };\n\n      const savedAuoClear = this.renderer.autoClear;\n      if (hasRenderables(this.threeScene)) {\n        this.renderer.render(this.threeScene, this.camera);\n        this.renderer.autoClear = false;\n      }\n      this.renderer.render(this.splatMesh, this.camera);\n      this.renderer.autoClear = false;\n      if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) {\n        this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n      }\n      if (this.showControlPlane) {\n        this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n      }\n      this.renderer.autoClear = savedAuoClear;\n    };\n  })();\n\n  update(renderer, camera) {\n    if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n\n    if (\n      !this.initialized ||\n      !this.splatRenderReady ||\n      this.isDisposingOrDisposed()\n    ) {\n      return;\n    }\n\n    if (this.controls) {\n      this.controls.update();\n      if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n        Viewer.setCameraPositionFromZoom(\n          this.camera,\n          this.camera,\n          this.controls,\n        );\n      }\n    }\n    this.runSplatSort();\n    this.updateForRendererSizeChanges();\n    this.updateSplatMesh();\n    this.updateMeshCursor();\n    this.updateFPS();\n    this.timingSensitiveUpdates();\n    this.updateInfoPanel();\n    this.updateControlPlane();\n  }\n\n  updateForDropInMode(renderer, camera) {\n    this.renderer = renderer;\n    if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n    this.camera = camera;\n    if (this.controls) this.controls.object = camera;\n    this.init();\n  }\n\n  updateFPS = (function() {\n    let lastCalcTime = getCurrentTime();\n    let frameCount = 0;\n\n    return function() {\n      if (\n        this.consecutiveRenderFrames >\n        CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION\n      ) {\n        const currentTime = getCurrentTime();\n        const calcDelta = currentTime - lastCalcTime;\n        if (calcDelta >= 1.0) {\n          this.currentFPS = frameCount;\n          frameCount = 0;\n          lastCalcTime = currentTime;\n        } else {\n          frameCount++;\n        }\n      } else {\n        this.currentFPS = null;\n      }\n    };\n  })();\n\n  updateForRendererSizeChanges = (function() {\n    const lastRendererSize = new THREE.Vector2();\n    const currentRendererSize = new THREE.Vector2();\n    let lastCameraOrthographic;\n\n    return function() {\n      if (!this.usingExternalCamera) {\n        this.renderer.getSize(currentRendererSize);\n        if (\n          lastCameraOrthographic === undefined ||\n          lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n          currentRendererSize.x !== lastRendererSize.x ||\n          currentRendererSize.y !== lastRendererSize.y\n        ) {\n          if (this.camera.isOrthographicCamera) {\n            this.camera.left = -currentRendererSize.x / 2.0;\n            this.camera.right = currentRendererSize.x / 2.0;\n            this.camera.top = currentRendererSize.y / 2.0;\n            this.camera.bottom = -currentRendererSize.y / 2.0;\n          } else {\n            this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n          }\n          this.camera.updateProjectionMatrix();\n          lastRendererSize.copy(currentRendererSize);\n          lastCameraOrthographic = this.camera.isOrthographicCamera;\n        }\n      }\n    };\n  })();\n\n  timingSensitiveUpdates = (function() {\n    let lastUpdateTime;\n\n    return function() {\n      const currentTime = getCurrentTime();\n      if (!lastUpdateTime) lastUpdateTime = currentTime;\n      const timeDelta = currentTime - lastUpdateTime;\n\n      this.updateCameraTransition(currentTime);\n      this.updateFocusMarker(timeDelta);\n\n      lastUpdateTime = currentTime;\n    };\n  })();\n\n  updateCameraTransition = (function() {\n    let tempCameraTarget = new THREE.Vector3();\n    let toPreviousTarget = new THREE.Vector3();\n    let toNextTarget = new THREE.Vector3();\n\n    return function(currentTime) {\n      if (this.transitioningCameraTarget) {\n        toPreviousTarget\n          .copy(this.previousCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        toNextTarget\n          .copy(this.nextCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n        const rotationSpeed = (rotationAngle / (Math.PI / 3)) * 0.65 + 0.3;\n        const t =\n          (rotationSpeed / rotationAngle) *\n          (currentTime - this.transitioningCameraTargetStartTime);\n        tempCameraTarget\n          .copy(this.previousCameraTarget)\n          .lerp(this.nextCameraTarget, t);\n        this.camera.lookAt(tempCameraTarget);\n        this.controls.target.copy(tempCameraTarget);\n        if (t >= 1.0) {\n          this.transitioningCameraTarget = false;\n        }\n      }\n    };\n  })();\n\n  updateFocusMarker = (function() {\n    const renderDimensions = new THREE.Vector2();\n    let wasTransitioning = false;\n\n    return function(timeDelta) {\n      this.getRenderDimensions(renderDimensions);\n      if (this.transitioningCameraTarget) {\n        this.sceneHelper.setFocusMarkerVisibility(true);\n        const currentFocusMarkerOpacity = Math.max(\n          this.sceneHelper.getFocusMarkerOpacity(),\n          0.0,\n        );\n        let newFocusMarkerOpacity = Math.min(\n          currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta,\n          1.0,\n        );\n        this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n        this.sceneHelper.updateFocusMarker(\n          this.nextCameraTarget,\n          this.camera,\n          renderDimensions,\n        );\n        wasTransitioning = true;\n        this.forceRenderNextFrame();\n      } else {\n        let currentFocusMarkerOpacity;\n        if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n        else {\n          currentFocusMarkerOpacity = Math.min(\n            this.sceneHelper.getFocusMarkerOpacity(),\n            1.0,\n          );\n        }\n        if (currentFocusMarkerOpacity > 0) {\n          this.sceneHelper.updateFocusMarker(\n            this.nextCameraTarget,\n            this.camera,\n            renderDimensions,\n          );\n          let newFocusMarkerOpacity = Math.max(\n            currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta,\n            0.0,\n          );\n          this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n          if (newFocusMarkerOpacity === 0.0) {\n            this.sceneHelper.setFocusMarkerVisibility(false);\n          }\n        }\n        if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n        wasTransitioning = false;\n      }\n    };\n  })();\n\n  updateMeshCursor = (function() {\n    const outHits = [];\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (this.showMeshCursor) {\n        this.forceRenderNextFrame();\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          this.sceneHelper.setMeshCursorVisibility(true);\n          this.sceneHelper.positionAndOrientMeshCursor(\n            outHits[0].origin,\n            this.camera,\n          );\n        } else {\n          this.sceneHelper.setMeshCursorVisibility(false);\n        }\n      } else {\n        if (this.sceneHelper.getMeschCursorVisibility()) {\n          this.forceRenderNextFrame();\n        }\n        this.sceneHelper.setMeshCursorVisibility(false);\n      }\n    };\n  })();\n\n  updateInfoPanel = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.showInfo) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      this.getRenderDimensions(renderDimensions);\n      const cameraLookAtPosition = this.controls ? this.controls.target : null;\n      const meshCursorPosition = this.showMeshCursor ?\n        this.sceneHelper.meshCursor.position :\n        null;\n      const splatRenderCountPct =\n        splatCount > 0 ? (this.splatRenderCount / splatCount) * 100 : 0;\n      this.infoPanel.update(\n        renderDimensions,\n        this.camera.position,\n        cameraLookAtPosition,\n        this.camera.up,\n        this.camera.isOrthographicCamera,\n        meshCursorPosition,\n        this.currentFPS || 'N/A',\n        splatCount,\n        this.splatRenderCount,\n        splatRenderCountPct,\n        this.lastSortTime,\n        this.focalAdjustment,\n        this.splatMesh.getSplatScale(),\n        this.splatMesh.getPointCloudModeEnabled(),\n      );\n    };\n  })();\n\n  updateControlPlane() {\n    if (this.showControlPlane) {\n      this.sceneHelper.setControlPlaneVisibility(true);\n      this.sceneHelper.positionAndOrientControlPlane(\n        this.controls.target,\n        this.camera.up,\n      );\n    } else {\n      this.sceneHelper.setControlPlaneVisibility(false);\n    }\n  }\n\n  runSplatSort = (function() {\n    const mvpMatrix = new THREE.Matrix4();\n    const cameraPositionArray = [];\n    const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n    const sortViewDir = new THREE.Vector3(0, 0, -1);\n    const lastSortViewPos = new THREE.Vector3();\n    const sortViewOffset = new THREE.Vector3();\n    const queuedSorts = [];\n\n    const partialSorts = [\n      {\n        angleThreshold: 0.55,\n        sortFractions: [0.125, 0.33333, 0.75],\n      },\n      {\n        angleThreshold: 0.65,\n        sortFractions: [0.33333, 0.66667],\n      },\n      {\n        angleThreshold: 0.8,\n        sortFractions: [0.5],\n      },\n    ];\n\n    return function(force = false, forceSortAll = false) {\n      if (!this.initialized) return Promise.resolve(false);\n      if (this.sortRunning) return Promise.resolve(true);\n      if (this.splatMesh.getSplatCount() <= 0) {\n        this.splatRenderCount = 0;\n        return Promise.resolve(false);\n      }\n\n      let angleDiff = 0;\n      let positionDiff = 0;\n      let needsRefreshForRotation = false;\n      let needsRefreshForPosition = false;\n\n      sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n      angleDiff = sortViewDir.dot(lastSortViewDir);\n      positionDiff = sortViewOffset\n        .copy(this.camera.position)\n        .sub(lastSortViewPos)\n        .length();\n\n      if (!force) {\n        if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n          if (angleDiff <= 0.99) needsRefreshForRotation = true;\n          if (positionDiff >= 1.0) needsRefreshForPosition = true;\n          if (!needsRefreshForRotation && !needsRefreshForPosition) {\n            return Promise.resolve(false);\n          }\n        }\n      }\n\n      this.sortRunning = true;\n      let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n      shouldSortAll = shouldSortAll || forceSortAll;\n      this.splatRenderCount = splatRenderCount;\n\n      mvpMatrix.copy(this.camera.matrixWorld).invert();\n      const mvpCamera = this.perspectiveCamera || this.camera;\n      mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n      mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n      let gpuAcceleratedSortPromise = Promise.resolve(true);\n      if (\n        this.gpuAcceleratedSort &&\n        (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)\n      ) {\n        gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(\n          mvpMatrix,\n          this.sortWorkerPrecomputedDistances,\n        );\n      }\n\n      gpuAcceleratedSortPromise.then(() => {\n        if (queuedSorts.length === 0) {\n          if (this.splatMesh.dynamicMode || shouldSortAll) {\n            queuedSorts.push(this.splatRenderCount);\n          } else {\n            for (let partialSort of partialSorts) {\n              if (angleDiff < partialSort.angleThreshold) {\n                for (let sortFraction of partialSort.sortFractions) {\n                  queuedSorts.push(\n                    Math.floor(this.splatRenderCount * sortFraction),\n                  );\n                }\n                break;\n              }\n            }\n            queuedSorts.push(this.splatRenderCount);\n          }\n        }\n        let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n        this.splatSortCount = sortCount;\n\n        cameraPositionArray[0] = this.camera.position.x;\n        cameraPositionArray[1] = this.camera.position.y;\n        cameraPositionArray[2] = this.camera.position.z;\n\n        const sortMessage = {\n          modelViewProj: mvpMatrix.elements,\n          cameraPosition: cameraPositionArray,\n          splatRenderCount: this.splatRenderCount,\n          splatSortCount: sortCount,\n          usePrecomputedDistances: this.gpuAcceleratedSort,\n        };\n        if (this.splatMesh.dynamicMode) {\n          this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n        }\n        if (!this.sharedMemoryForWorkers) {\n          sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n          sortMessage.transforms = this.sortWorkerTransforms;\n          if (this.gpuAcceleratedSort) {\n            sortMessage.precomputedDistances =\n              this.sortWorkerPrecomputedDistances;\n          }\n        }\n\n        this.sortPromise = new Promise((resolve) => {\n          this.sortPromiseResolver = resolve;\n        });\n\n        if (this.preSortMessages.length > 0) {\n          this.preSortMessages.forEach((message) => {\n            this.sortWorker.postMessage(message);\n          });\n          this.preSortMessages = [];\n        }\n        this.sortWorker.postMessage({\n          sort: sortMessage,\n        });\n\n        if (queuedSorts.length === 0) {\n          lastSortViewPos.copy(this.camera.position);\n          lastSortViewDir.copy(sortViewDir);\n        }\n\n        return true;\n      });\n\n      return gpuAcceleratedSortPromise;\n    };\n  })();\n\n  /**\n   * Determine which splats to render by checking which are inside or close to the view frustum\n   */\n  gatherSceneNodesForSort = (function() {\n    const nodeRenderList = [];\n    let allSplatsSortBuffer = null;\n    const tempVectorYZ = new THREE.Vector3();\n    const tempVectorXZ = new THREE.Vector3();\n    const tempVector = new THREE.Vector3();\n    const modelView = new THREE.Matrix4();\n    const baseModelView = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const renderDimensions = new THREE.Vector3();\n    const forward = new THREE.Vector3(0, 0, -1);\n\n    const tempMax = new THREE.Vector3();\n    const nodeSize = (node) => {\n      return tempMax.copy(node.max).sub(node.min).length();\n    };\n\n    return function(gatherAllNodes = false) {\n      this.getRenderDimensions(renderDimensions);\n      const cameraFocalLength =\n        renderDimensions.y /\n        2.0 /\n        Math.tan((this.camera.fov / 2.0) * THREE.MathUtils.DEG2RAD);\n      const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n      const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n      const cosFovXOver2 = Math.cos(fovXOver2);\n      const cosFovYOver2 = Math.cos(fovYOver2);\n\n      const splatTree = this.splatMesh.getSplatTree();\n\n      if (splatTree) {\n        baseModelView.copy(this.camera.matrixWorld).invert();\n        baseModelView.multiply(this.splatMesh.matrixWorld);\n\n        let nodeRenderCount = 0;\n        let splatRenderCount = 0;\n\n        for (let s = 0; s < splatTree.subTrees.length; s++) {\n          const subTree = splatTree.subTrees[s];\n          modelView.copy(baseModelView);\n          if (this.splatMesh.dynamicMode) {\n            this.splatMesh.getSceneTransform(s, sceneTransform);\n            modelView.multiply(sceneTransform);\n          }\n          const nodeCount = subTree.nodesWithIndexes.length;\n          for (let i = 0; i < nodeCount; i++) {\n            const node = subTree.nodesWithIndexes[i];\n            if (\n              !node.data ||\n              !node.data.indexes ||\n              node.data.indexes.length === 0\n            ) {\n              continue;\n            }\n            tempVector.copy(node.center).applyMatrix4(modelView);\n\n            const distanceToNode = tempVector.length();\n            tempVector.normalize();\n\n            tempVectorYZ.copy(tempVector).setX(0).normalize();\n            tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n            const cameraAngleXZDot = forward.dot(tempVectorXZ);\n            const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n            const ns = nodeSize(node);\n            const outOfFovY = cameraAngleYZDot < cosFovYOver2 - 0.6;\n            const outOfFovX = cameraAngleXZDot < cosFovXOver2 - 0.6;\n            if (\n              !gatherAllNodes &&\n              (outOfFovX || outOfFovY) &&\n              distanceToNode > ns\n            ) {\n              continue;\n            }\n            splatRenderCount += node.data.indexes.length;\n            nodeRenderList[nodeRenderCount] = node;\n            node.data.distanceToNode = distanceToNode;\n            nodeRenderCount++;\n          }\n        }\n\n        nodeRenderList.length = nodeRenderCount;\n        nodeRenderList.sort((a, b) => {\n          if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n          else return 1;\n        });\n\n        let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n        for (let i = 0; i < nodeRenderCount; i++) {\n          const node = nodeRenderList[i];\n          const windowSizeInts = node.data.indexes.length;\n          const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n          let destView = new Uint32Array(\n            this.sortWorkerIndexesToSort.buffer,\n            currentByteOffset - windowSizeBytes,\n            windowSizeInts,\n          );\n          destView.set(node.data.indexes);\n          currentByteOffset -= windowSizeBytes;\n        }\n\n        return {\n          splatRenderCount: splatRenderCount,\n          shouldSortAll: false,\n        };\n      } else {\n        const totalSplatCount = this.splatMesh.getSplatCount();\n        if (\n          !allSplatsSortBuffer ||\n          allSplatsSortBuffer.length !== totalSplatCount\n        ) {\n          allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n          for (let i = 0; i < totalSplatCount; i++) {\n            allSplatsSortBuffer[i] = i;\n          }\n        }\n        this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n        return {\n          splatRenderCount: totalSplatCount,\n          shouldSortAll: true,\n        };\n      }\n    };\n  })();\n\n  getSplatMesh() {\n    return this.splatMesh;\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.splatMesh.getScene(sceneIndex);\n  }\n\n  getSceneCount() {\n    return this.splatMesh.getSceneCount();\n  }\n\n  isMobile() {\n    return navigator.userAgent.includes('Mobi');\n  }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n  constructor(options = {}) {\n    super();\n\n    options.selfDrivenMode = false;\n    options.useBuiltInControls = false;\n    options.rootElement = null;\n    options.ignoreDevicePixelRatio = false;\n    options.dropInMode = true;\n    options.camera = undefined;\n    options.renderer = undefined;\n\n    this.viewer = new Viewer(options);\n    this.splatMesh = null;\n    this.updateSplatMesh();\n\n    this.callbackMesh = DropInViewer.createCallbackMesh();\n    this.add(this.callbackMesh);\n    this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(\n      this,\n      this.viewer,\n    );\n\n    this.viewer.onSplatMeshChanged(() => {\n      this.updateSplatMesh();\n    });\n  }\n\n  updateSplatMesh() {\n    if (this.splatMesh !== this.viewer.splatMesh) {\n      if (this.splatMesh) {\n        this.remove(this.splatMesh);\n      }\n      this.splatMesh = this.viewer.splatMesh;\n      this.add(this.viewer.splatMesh);\n    }\n  }\n\n  /**\n   * Add a single splat scene to the viewer.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (options.showLoadingUI !== false) options.showLoadingUI = true;\n    return this.viewer.addSplatScene(path, options);\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI) {\n    if (showLoadingUI !== false) showLoadingUI = true;\n    return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.viewer.getSplatScene(sceneIndex);\n  }\n\n  removeSplatScene(index, showLoadingUI = true) {\n    return this.viewer.removeSplatScene(index, showLoadingUI);\n  }\n\n  removeSplatScenes(indexes, showLoadingUI = true) {\n    return this.viewer.removeSplatScenes(indexes, showLoadingUI);\n  }\n\n  getSceneCount() {\n    return this.viewer.getSceneCount();\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.viewer.setActiveSphericalHarmonicsDegrees(\n      activeSphericalHarmonicsDegrees,\n    );\n  }\n\n  async dispose() {\n    return await this.viewer.dispose();\n  }\n\n  static onBeforeRender(viewer, renderer, threeScene, camera) {\n    viewer.update(renderer, camera);\n  }\n\n  static createCallbackMesh() {\n    const geometry = new THREE.SphereGeometry(1, 8, 8);\n    const material = new THREE.MeshBasicMaterial();\n    material.colorWrite = false;\n    material.depthWrite = false;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.frustumCulled = false;\n    return mesh;\n  }\n}\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","reason","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","makeProgressiveFetchFunction","get","fetch","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","async","data","ok","errorText","text","status","statusText","reader","body","getReader","bytesDownloaded","_fileSize","headers","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","fetchWithProgress","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","DefaultSphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","range8BitMin","range8BitMax","fromUint8","toUint8","v","rangeMin","rangeMax","range","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","localFromHalfFloatToUint8","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","localToUint8","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","minShCoeff","maxShCoeff","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sc","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArraySection","parseToUncompressedSplatArray","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","DirectLoadError","InternalLoadType","LoaderStatus","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","storeChunksInBuffer","inBytes","sizeBytes","finalize","optimizeSplatData","PlyLoader","loadFromURL","fileName","loadDirectoToSplatBuffer","onProgressiveLoadSectionProgress","defaultFetchWithProgress","internalLoadType","directLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","directLoadBufferIn","directLoadBufferOut","directLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","loadPromise","standardLoadUncompressedSplatArray","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","chunkDatas","plyFileData","loadFromFileData","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","directLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","directLoadPromise","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fullBuffer","splatBuffer","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","LogLevel","None","Warning","Info","Debug","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","RenderMode","Always","OnChange","Never","_axis","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","SceneRevealMode","Default","Gradual","Instant","SplatRenderMode","ThreeD","TwoD","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","splatScale","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","sphericalHarmonics8BitCompressionRangeMin","sphericalHarmonics8BitCompressionRangeMax","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneIndexesTexture","sceneIndexesTextureSize","sceneCount","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","antialiased","maxScreenSpaceSplatSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","copyTransformData","otherScene","updateTransform","matrixWorldAutoUpdate","updateWorldMatrix","updateMatrix","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","dummyGeometry","dummyMaterial","MAX_TEXTURE_TEXELS","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","sceneFadeInRateMultiplier","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","parentObject","splatBuffers","sceneOptions","scene","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","splatBufferSplatCount","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","setupDataTextures","updateDataTexturesFromBaseData","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","scales","rotations","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","shTextureType","UnsignedByteType","HalfFloatType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","RedIntegerFormat","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","fillSplatDataArrays","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","paddedSceneIndexes","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","fastFadeRate","gradualFadeRate","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","renderSplatCount","attributes","setDrawRange","updateTransforms","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","includeSinceLastBuild","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","tempTransform","startSceneIndex","endSceneIndex","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","getSceneCount","matrixElements","intMatrixArray","computeBoundingBox","applySceneTransforms","InfoPanel","container","infoCells","layout","infoPanelContainer","innerHTML","append","infoPanel","className","infoTable","display","layoutEntry","labelCell","classList","spacerCell","infoCell","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","sortTime","setContainer","parentElement","removeChild","zIndex","show","hide","LoadingProgressBar","tasks","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","LoadingSpinner","message","taskIDGen","elementID","elementIDGen","spinnerContainerOuter","spinnerContainerPrimary","spinnerPrimary","messageContainerPrimary","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","setMessage","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","ARButton","createButton","sessionInit","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","domOverlay","overlay","svg","createElementNS","currentSession","optionalFeatures","root","onSessionStarted","session","onSessionEnded","setReferenceSpaceType","setSession","textContent","requestSession","offerSession","err","showStartAR","exception","isSecureContext","location","replace","textDecoration","VRButton","sessionOptions","showEnterVR","xrSessionIsGranted","registerSessionGrantedListener","test","WebXRMode","VR","AR","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","distanceMapRange","uploadedSplatCount","BytesPerInt","BytesPerFloat","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","webXRSessionInit","renderMode","enableSIMDInSort","inMemoryCompressionLevel","semver","splatSortDistanceMapPrecision","DefaultSplatSortDistanceMapPrecision","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","lastSplatSortCount","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","preSortMessages","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","frustumCulled","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","setActiveSphericalHarmonicsDegrees","activeSphericalHarmonicsDegrees","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","Object","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","progressiveLoad","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","downloadAndBuildPromise","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","baseDownloadPromises","nativeDownloadPromises","baseDownloadPromise","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","buildResults","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","runSplatSort","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","forceSortAll","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","gpuAcceleratedSortPromise","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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ACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACE,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAEpBC,GAAmB,CACvB,UACA,UACA,UACA,QACA,QACA,QACA,QACA,IACA,IACA,IACA,SACA,SACA,SACA,UACA,MACA,QACA,OACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEIC,GAAsBD,GAAiBtR,KAAI,CAACuF,EAAGhgB,IAAMA,KAGzDisB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACEd,GAEEe,GAAUJ,GACVK,GAAYJ,GACZK,GAAWJ,GAEX5qB,GAAiBirB,IACrB,MAAMhQ,GAAK,MAAQgQ,IAAO,GACpB5P,EAAI,KAAO4P,EACjB,OACGA,GAAM,IAAM,EAAI,IAChBhQ,EACO,KAANA,EACEI,EACE6P,IACA,IACFryB,KAAKsyB,IAAI,EAAGlQ,EAAI,KAAO,EAAII,EAAI,MAChCA,EAAI,KAAQ,eACf,EAGG,MAAM+P,GACX,WAAAt3B,GACEK,KAAKmzB,eAAiB,IAAIpF,EAC3B,CAED,mCAAAmJ,CAAoCnP,GAClC,MAAMkG,EAAiB2H,GAAoBhC,QAAO,CAACC,EAAKzM,KACtDyM,EAAI8B,GAAiBvO,IAAYA,EAC1ByM,IACN,CAAE,GAECsD,EAA6BhC,GAA6BvB,QAC9D,CAACC,EAAKzM,KACJyM,EAAIqB,GAAyB9N,IAAYA,EAClCyM,IAET,CAAE,GAGErD,EAAezC,GAAewC,sBAAsBxI,GAC1D,IAAIqP,EACJ,IAAK,IAAI/U,EAAI,EAAGA,EAAImO,EAAatsB,OAAQme,IAAK,CAExB,qBADAmO,EAAanO,KAE/B+U,EAAuB/U,EAE1B,CAED,IAAIgV,EAAm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"}