{"version":3,"file":"gaussian-splats-3d.umd.min.cjs","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/LoaderStatus.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/LogLevel.js","../src/OrbitControls.js","../src/RenderMode.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/SceneRevealMode.js","../src/SplatRenderMode.js","../src/loaders/splat/gltf/GLTFParser.js","../src/loaders/splat/gltf/GLTFLoader.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/splatmesh/SplatMesh.js","../src/ui/InfoPanel.js","../src/ui/LoadingProgressBar.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/webxr/ARButton.js","../src/webxr/VRButton.js","../src/webxr/WebXRMode.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n  static idGen = 0;\n\n  constructor(promiseFunc, abortHandler) {\n    let resolver;\n    let rejecter;\n    this.promise = new Promise((resolve, reject) => {\n      resolver = resolve;\n      rejecter = reject;\n    });\n\n    const promiseResolve = resolver.bind(this);\n    const promiseReject = rejecter.bind(this);\n\n    const resolve = (...args) => {\n      promiseResolve(...args);\n    };\n\n    const reject = (error) => {\n      promiseReject(error);\n    };\n\n    promiseFunc(resolve.bind(this), reject.bind(this));\n    this.abortHandler = abortHandler;\n    this.id = AbortablePromise.idGen++;\n  }\n\n  then(onResolve) {\n    return new AbortablePromise((resolve, reject) => {\n      this.promise = this.promise\n        .then((...args) => {\n          const onResolveResult = onResolve(...args);\n          if (\n            onResolveResult instanceof Promise ||\n            onResolveResult instanceof AbortablePromise\n          ) {\n            onResolveResult.then((...args2) => {\n              resolve(...args2);\n            });\n          } else {\n            resolve(onResolveResult);\n          }\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }, this.abortHandler);\n  }\n\n  catch(onFail) {\n    return new AbortablePromise((resolve) => {\n      this.promise = this.promise\n        .then((...args) => {\n          resolve(...args);\n        })\n        .catch(onFail);\n    }, this.abortHandler);\n  }\n\n  abort(reason) {\n    if (this.abortHandler) this.abortHandler(reason);\n  }\n}\n\nexport class AbortedPromiseError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(val) {\n    floatView[0] = val;\n    const x = int32View[0];\n\n    let bits = (x >> 16) & 0x8000;\n    let m = (x >> 12) & 0x07ff;\n    const e = (x >> 23) & 0xff;\n\n    if (e < 103) return bits;\n\n    if (e > 142) {\n      bits |= 0x7c00;\n      bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n      return bits;\n    }\n\n    if (e < 113) {\n      m |= 0x0800;\n      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n      return bits;\n    }\n\n    bits |= ((e - 112) << 10) | (m >> 1);\n    bits += m & 1;\n    return bits;\n  };\n})();\n\nexport const uintEncodedFloat = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(f) {\n    floatView[0] = f;\n    return int32View[0];\n  };\n})();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n  return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n  return (\n    arr[offset] +\n    (arr[offset + 1] << 8) +\n    (arr[offset + 2] << 16) +\n    (arr[offset + 3] << 24)\n  );\n};\n\nexport const makeProgressiveFetchFunction =\n  (get = globalThis.fetch) =>\n  (path, onProgress, saveChunks = true) => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    const abortHandler = (reason) => {\n      abortController.abort(reason);\n      aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n      get(path, { signal })\n        .then(async (data) => {\n          // Handle error conditions where data is still returned\n          if (!data.ok) {\n            const errorText = await data.text();\n            reject(\n              new Error(\n                `Fetch failed: ${data.status} ${data.statusText} ${errorText}`,\n              ),\n            );\n            return;\n          }\n\n          const reader = data.body.getReader();\n          let bytesDownloaded = 0;\n          let _fileSize = data.headers.get('Content-Length');\n          let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n          const chunks = [];\n\n          while (!aborted) {\n            try {\n              const { value: chunk, done } = await reader.read();\n              if (done) {\n                if (onProgress) {\n                  onProgress(100, '100%', chunk, fileSize);\n                }\n                if (saveChunks) {\n                  const buffer = new Blob(chunks).arrayBuffer();\n                  resolve(buffer);\n                } else {\n                  resolve();\n                }\n                break;\n              }\n              bytesDownloaded += chunk.length;\n              let percent;\n              let percentLabel;\n              if (fileSize !== undefined) {\n                percent = (bytesDownloaded / fileSize) * 100;\n                percentLabel = `${percent.toFixed(2)}%`;\n              }\n              if (saveChunks) {\n                chunks.push(chunk);\n              }\n              if (onProgress) {\n                onProgress(percent, percentLabel, chunk, fileSize);\n              }\n            } catch (error) {\n              reject(error);\n              return;\n            }\n          }\n        })\n        .catch((error) => {\n          reject(new AbortedPromiseError(error));\n        });\n    }, abortHandler);\n  };\n\nexport const fetchWithProgress = makeProgressiveFetchFunction();\n\nexport const clamp = function(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n  return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n  if (object3D.geometry) {\n    object3D.geometry.dispose();\n    object3D.geometry = null;\n  }\n  if (object3D.material) {\n    object3D.material.dispose();\n    object3D.material = null;\n  }\n  if (object3D.children) {\n    for (let child of object3D.children) {\n      disposeAllMeshes(child);\n    }\n  }\n};\n\nexport const delayedExecute = (func, fast) => {\n  return new Promise((resolve) => {\n    window.setTimeout(\n      () => {\n        resolve(func());\n      },\n      fast ? 1 : 50,\n    );\n  });\n};\n\nexport const getSphericalHarmonicsComponentCountForDegree = (\n  sphericalHarmonicsDegree = 0,\n) => {\n  switch (sphericalHarmonicsDegree) {\n    case 1:\n      return 9;\n    case 2:\n      return 24;\n    case 3:\n      return 45;\n  }\n  return 0;\n};\n\nexport const nativePromiseWithExtractedComponents = () => {\n  let resolver;\n  let rejecter;\n  const promise = new Promise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  });\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\n  let resolver;\n  let rejecter;\n  if (!abortHandler) {\n    abortHandler = () => {};\n  }\n  const promise = new AbortablePromise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  }, abortHandler);\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nclass Semver {\n  constructor(major, minor, patch) {\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n  }\n\n  toString() {\n    return `${this.major}_${this.minor}_${this.patch}`;\n  }\n}\n\nexport function isIOS() {\n  const ua = navigator.userAgent;\n  return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\n}\n\nexport function getIOSSemever() {\n  if (isIOS()) {\n    const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    return new Semver(\n      parseInt(extract[1] || 0, 10),\n      parseInt(extract[2] || 0, 10),\n      parseInt(extract[3] || 0, 10),\n    );\n  } else {\n    return null; // or [0,0,0]\n  }\n}\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n  static OFFSET = {\n    X: 0,\n    Y: 1,\n    Z: 2,\n    SCALE0: 3,\n    SCALE1: 4,\n    SCALE2: 5,\n    ROTATION0: 6,\n    ROTATION1: 7,\n    ROTATION2: 8,\n    ROTATION3: 9,\n    FDC0: 10,\n    FDC1: 11,\n    FDC2: 12,\n    OPACITY: 13,\n\n    // 9 values, 3 floats for 3 harmonics (first degree)\n    FRC0: 14,\n    FRC1: 15,\n    FRC2: 16,\n\n    FRC3: 17,\n    FRC4: 18,\n    FRC5: 19,\n\n    FRC6: 20,\n    FRC7: 21,\n    FRC8: 22,\n\n    // 15 values, 3 floats for 5 harmonics (second degree)\n    FRC9: 23,\n    FRC10: 24,\n    FRC11: 25,\n\n    FRC12: 26,\n    FRC13: 27,\n    FRC14: 28,\n\n    FRC15: 29,\n    FRC16: 30,\n    FRC17: 31,\n\n    FRC18: 32,\n    FRC19: 33,\n    FRC20: 34,\n\n    FRC21: 35,\n    FRC22: 36,\n    FRC23: 37,\n\n    // 21 values 3 floats for 7 harmonics (third degree)\n    FRC24: 38,\n    FRC25: 39,\n    FRC26: 40,\n\n    FRC27: 41,\n    FRC28: 42,\n    FRC29: 43,\n\n    FRC30: 44,\n    FRC31: 45,\n    FRC32: 46,\n\n    FRC33: 47,\n    FRC34: 48,\n    FRC35: 49,\n\n    FRC36: 50,\n    FRC37: 51,\n    FRC38: 52,\n\n    FRC39: 53,\n    FRC40: 54,\n    FRC41: 55,\n\n    FRC42: 56,\n    FRC43: 57,\n    FRC44: 58,\n  };\n\n  constructor(sphericalHarmonicsDegree = 0) {\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n    this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(\n      this.sphericalHarmonicsDegree,\n    );\n    this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n    this.defaultSphericalHarmonics = new Array(\n      this.sphericalHarmonicsCount,\n    ).fill(0);\n    this.splats = [];\n    this.splatCount = 0;\n  }\n\n  static createSplat(sphericalHarmonicsDegree = 0) {\n    const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let shEntries = getSphericalHarmonicsComponentCountForDegree(\n      sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n    return baseSplat;\n  }\n\n  addSplat(splat) {\n    this.splats.push(splat);\n    this.splatCount++;\n  }\n\n  getSplat(index) {\n    return this.splats[index];\n  }\n\n  addDefaultSplat() {\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromComonents(\n    x,\n    y,\n    z,\n    scale0,\n    scale1,\n    scale2,\n    rot0,\n    rot1,\n    rot2,\n    rot3,\n    r,\n    g,\n    b,\n    opacity,\n    ...rest\n  ) {\n    const newSplat = [\n      x,\n      y,\n      z,\n      scale0,\n      scale1,\n      scale2,\n      rot0,\n      rot1,\n      rot2,\n      rot3,\n      r,\n      g,\n      b,\n      opacity,\n      ...this.defaultSphericalHarmonics,\n    ];\n    for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n      newSplat[i] = rest[i];\n    }\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromArray(src, srcIndex) {\n    const srcSplat = src.splats[srcIndex];\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n      newSplat[i] = srcSplat[i];\n    }\n    this.addSplat(newSplat);\n  }\n}\n","export class Constants {\n  static DefaultSplatSortDistanceMapPrecision = 16;\n  static MemoryPageSize = 65536;\n  static BytesPerFloat = 4;\n  static BytesPerInt = 4;\n  static MaxScenes = 32;\n  static ProgressiveLoadSectionSize = 262144;\n  static ProgressiveLoadSectionDelayDuration = 15;\n  static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst DefaultSphericalHarmonics8BitCompressionRange =\n  Constants.SphericalHarmonics8BitCompressionRange;\nconst DefaultSphericalHarmonics8BitCompressionHalfRange =\n  DefaultSphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst toUncompressedFloat = (\n  f,\n  compressionLevel,\n  isSH = false,\n  range8BitMin,\n  range8BitMax,\n) => {\n  if (compressionLevel === 0) {\n    return f;\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return THREE.DataUtils.fromHalfFloat(f);\n  } else if (compressionLevel === 2) {\n    return fromUint8(f, range8BitMin, range8BitMax);\n  }\n};\n\nconst toUint8 = (v, rangeMin, rangeMax) => {\n  v = clamp(v, rangeMin, rangeMax);\n  const range = rangeMax - rangeMin;\n  return clamp(Math.floor(((v - rangeMin) / range) * 255), 0, 255);\n};\n\nconst fromUint8 = (v, rangeMin, rangeMax) => {\n  const range = rangeMax - rangeMin;\n  return (v / 255) * range + rangeMin;\n};\n\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\n  return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\n};\n\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\n  return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\n};\n\nconst dataViewFloatForCompressionLevel = (\n  dataView,\n  floatIndex,\n  compressionLevel,\n  isSH = false,\n) => {\n  if (compressionLevel === 0) {\n    return dataView.getFloat32(floatIndex * 4, true);\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return dataView.getUint16(floatIndex * 2, true);\n  } else {\n    return dataView.getUint8(floatIndex, true);\n  }\n};\n\nconst convertBetweenCompressionLevels = (function() {\n  const noop = (v) => v;\n\n  return function(val, fromLevel, toLevel, isSH = false) {\n    if (fromLevel === toLevel) return val;\n    let outputConversionFunc = noop;\n\n    if (fromLevel === 2 && isSH) {\n      if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\n      else if (toLevel == 0) {\n        outputConversionFunc = fromUint8;\n      }\n    } else if (fromLevel === 2 || fromLevel === 1) {\n      if (toLevel === 0) outputConversionFunc = fromHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = noop;\n        else outputConversionFunc = fromHalfFloatToUint8;\n      }\n    } else if (fromLevel === 0) {\n      if (toLevel === 1) outputConversionFunc = toHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = toHalfFloat;\n        else outputConversionFunc = toUint8;\n      }\n    }\n\n    return outputConversionFunc(val);\n  };\n})();\n\nconst copyBetweenBuffers = (\n  srcBuffer,\n  srcOffset,\n  destBuffer,\n  destOffset,\n  byteCount = 0,\n) => {\n  const src = new Uint8Array(srcBuffer, srcOffset);\n  const dest = new Uint8Array(destBuffer, destOffset);\n  for (let i = 0; i < byteCount; i++) {\n    dest[i] = src[i];\n  }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n  static CurrentMajorVersion = 0;\n  static CurrentMinorVersion = 1;\n\n  static CenterComponentCount = 3;\n  static ScaleComponentCount = 3;\n  static RotationComponentCount = 4;\n  static ColorComponentCount = 4;\n  static CovarianceComponentCount = 6;\n\n  static SplatScaleOffsetFloat = 3;\n  static SplatRotationOffsetFloat = 6;\n\n  static CompressionLevels = {\n    0: {\n      BytesPerCenter: 12,\n      BytesPerScale: 12,\n      BytesPerRotation: 16,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 12,\n      RotationffsetBytes: 24,\n      ColorOffsetBytes: 40,\n      SphericalHarmonicsOffsetBytes: 44,\n      ScaleRange: 1,\n      BytesPerSphericalHarmonicsComponent: 4,\n      SphericalHarmonicsOffsetFloat: 11,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 44 },\n        1: { BytesPerSplat: 80 },\n        2: { BytesPerSplat: 140 },\n        3: { BytesPerSplat: 236 },\n      },\n    },\n    1: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 2,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 42 },\n        2: { BytesPerSplat: 72 },\n        3: { BytesPerSplat: 114 },\n      },\n    },\n    2: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 1,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 33 },\n        2: { BytesPerSplat: 48 },\n        3: { BytesPerSplat: 69 },\n      },\n    },\n  };\n\n  static CovarianceSizeFloats = 6;\n\n  static HeaderSizeBytes = 4096;\n  static SectionHeaderSizeBytes = 1024;\n\n  static BucketStorageSizeBytes = 12;\n  static BucketStorageSizeFloats = 3;\n\n  static BucketBlockSize = 5.0;\n  static BucketSize = 256;\n\n  constructor(bufferData, secLoadedCountsToMax = true) {\n    this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n  }\n\n  getSplatCount() {\n    return this.splatCount;\n  }\n\n  getMaxSplatCount() {\n    return this.maxSplatCount;\n  }\n\n  getMinSphericalHarmonicsDegree() {\n    let minSphericalHarmonicsDegree = 0;\n    for (let i = 0; i < this.sections.length; i++) {\n      const section = this.sections[i];\n      if (\n        i === 0 ||\n        section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree\n      ) {\n        minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n      }\n    }\n    return minSphericalHarmonicsDegree;\n  }\n\n  getBucketIndex(section, localSplatIndex) {\n    let bucketIndex;\n    const maxSplatIndexInFullBuckets =\n      section.fullBucketCount * section.bucketSize;\n    if (localSplatIndex < maxSplatIndexInFullBuckets) {\n      bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n    } else {\n      let bucketSplatIndex = maxSplatIndexInFullBuckets;\n      bucketIndex = section.fullBucketCount;\n      let partiallyFullBucketIndex = 0;\n      while (bucketSplatIndex < section.splatCount) {\n        let currentPartiallyFilledBucketSize =\n          section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n        if (\n          localSplatIndex >= bucketSplatIndex &&\n          localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize\n        ) {\n          break;\n        }\n        bucketSplatIndex += currentPartiallyFilledBucketSize;\n        bucketIndex++;\n        partiallyFullBucketIndex++;\n      }\n    }\n    return bucketIndex;\n  }\n\n  getSplatCenter(globalSplatIndex, outCenter, transform) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n    const dataView = new DataView(\n      this.bufferData,\n      section.dataBase + srcSplatCentersBase,\n    );\n\n    const x = dataViewFloatForCompressionLevel(\n      dataView,\n      0,\n      this.compressionLevel,\n    );\n    const y = dataViewFloatForCompressionLevel(\n      dataView,\n      1,\n      this.compressionLevel,\n    );\n    const z = dataViewFloatForCompressionLevel(\n      dataView,\n      2,\n      this.compressionLevel,\n    );\n    if (this.compressionLevel >= 1) {\n      const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n      const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n      const sf = section.compressionScaleFactor;\n      const sr = section.compressionScaleRange;\n      outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n      outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n      outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n    } else {\n      outCenter.x = x;\n      outCenter.y = y;\n      outCenter.z = z;\n    }\n    if (transform) outCenter.applyMatrix4(transform);\n  }\n\n  getSplatScaleAndRotation = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const tempPosition = new THREE.Vector3();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    return function(index, outScale, outRotation, transform, scaleOverride) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[index];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = index - section.splatCountOffset;\n\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n      if (scaleOverride) {\n        if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\n        if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\n        if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\n      }\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      if (transform) {\n        scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n        rotationMatrix.makeRotationFromQuaternion(rotation);\n        tempMatrix\n          .copy(scaleMatrix)\n          .multiply(rotationMatrix)\n          .multiply(transform);\n        tempMatrix.decompose(tempPosition, outRotation, outScale);\n      } else {\n        outScale.copy(scale);\n        outRotation.copy(rotation);\n      }\n    };\n  })();\n\n  getSplatColor(globalSplatIndex, outColor) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatColorsBase =\n      section.bytesPerSplat * localSplatIndex +\n      SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n    const splatColorsArray = new Uint8Array(\n      this.bufferData,\n      section.dataBase + srcSplatColorsBase,\n      4,\n    );\n\n    outColor.set(\n      splatColorsArray[0],\n      splatColorsArray[1],\n      splatColorsArray[2],\n      splatColorsArray[3],\n    );\n  }\n  getSplatHarmonics(globalSplatIndex) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatHarmonicsBase =\n      section.bytesPerSplat * localSplatIndex +\n      SplatBuffer.CompressionLevels[this.compressionLevel]\n        .SphericalHarmonicsOffsetBytes;\n\n    return new Float32Array(\n      this.bufferData,\n      section.dataBase + srcSplatHarmonicsBase,\n      45,\n    );\n  }\n\n  fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    const center = new THREE.Vector3();\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n      const centerDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n      const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatCentersBase,\n      );\n\n      const x = dataViewFloatForCompressionLevel(\n        dataView,\n        0,\n        this.compressionLevel,\n      );\n      const y = dataViewFloatForCompressionLevel(\n        dataView,\n        1,\n        this.compressionLevel,\n      );\n      const z = dataViewFloatForCompressionLevel(\n        dataView,\n        2,\n        this.compressionLevel,\n      );\n      if (this.compressionLevel >= 1) {\n        const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n        const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n        const sf = section.compressionScaleFactor;\n        const sr = section.compressionScaleRange;\n        center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n        center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n        center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n      } else {\n        center.x = x;\n        center.y = y;\n        center.z = z;\n      }\n      if (transform) {\n        center.applyMatrix4(transform);\n      }\n      outCenterArray[centerDestBase] = center.x;\n      outCenterArray[centerDestBase + 1] = center.y;\n      outCenterArray[centerDestBase + 2] = center.z;\n    }\n  }\n\n  fillSplatScaleRotationArray = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n    const tempPosition = new THREE.Vector3();\n\n    const ensurePositiveW = (quaternion) => {\n      const flip = quaternion.w < 0 ? -1 : 1;\n      quaternion.x *= flip;\n      quaternion.y *= flip;\n      quaternion.z *= flip;\n      quaternion.w *= flip;\n    };\n\n    return function(\n      outScaleArray,\n      outRotationArray,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n      scaleOverride,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      const outputConversion = (value, srcCompressionLevel) => {\n        if (srcCompressionLevel === undefined) {\n          srcCompressionLevel = this.compressionLevel;\n        }\n        return convertBetweenCompressionLevels(\n          value,\n          srcCompressionLevel,\n          desiredOutputCompressionLevel,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatScalesBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n        const scaleDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\n        const rotationDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatScalesBase,\n        );\n\n        const srcScaleX =\n          scaleOverride && scaleOverride.x !== undefined ?\n            scaleOverride.x :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                0,\n                this.compressionLevel,\n              );\n        const srcScaleY =\n          scaleOverride && scaleOverride.y !== undefined ?\n            scaleOverride.y :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                1,\n                this.compressionLevel,\n              );\n        const srcScaleZ =\n          scaleOverride && scaleOverride.z !== undefined ?\n            scaleOverride.z :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                2,\n                this.compressionLevel,\n              );\n\n        const srcRotationW = dataViewFloatForCompressionLevel(\n          dataView,\n          3,\n          this.compressionLevel,\n        );\n        const srcRotationX = dataViewFloatForCompressionLevel(\n          dataView,\n          4,\n          this.compressionLevel,\n        );\n        const srcRotationY = dataViewFloatForCompressionLevel(\n          dataView,\n          5,\n          this.compressionLevel,\n        );\n        const srcRotationZ = dataViewFloatForCompressionLevel(\n          dataView,\n          6,\n          this.compressionLevel,\n        );\n\n        scale.set(\n          toUncompressedFloat(srcScaleX, this.compressionLevel),\n          toUncompressedFloat(srcScaleY, this.compressionLevel),\n          toUncompressedFloat(srcScaleZ, this.compressionLevel),\n        );\n\n        rotation\n          .set(\n            toUncompressedFloat(srcRotationX, this.compressionLevel),\n            toUncompressedFloat(srcRotationY, this.compressionLevel),\n            toUncompressedFloat(srcRotationZ, this.compressionLevel),\n            toUncompressedFloat(srcRotationW, this.compressionLevel),\n          )\n          .normalize();\n\n        if (transform) {\n          tempPosition.set(0, 0, 0);\n          scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n          rotationMatrix.makeRotationFromQuaternion(rotation);\n          tempMatrix\n            .identity()\n            .premultiply(scaleMatrix)\n            .premultiply(rotationMatrix);\n          tempMatrix.premultiply(transform);\n          tempMatrix.decompose(tempPosition, rotation, scale);\n          rotation.normalize();\n        }\n\n        ensurePositiveW(rotation);\n\n        if (outScaleArray) {\n          outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\n          outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\n          outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\n        }\n\n        if (outRotationArray) {\n          outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\n          outRotationArray[rotationDestBase + 1] = outputConversion(\n            rotation.y,\n            0,\n          );\n          outRotationArray[rotationDestBase + 2] = outputConversion(\n            rotation.z,\n            0,\n          );\n          outRotationArray[rotationDestBase + 3] = outputConversion(\n            rotation.w,\n            0,\n          );\n        }\n      }\n    };\n  })();\n\n  static computeCovariance = (function() {\n    const tempMatrix4 = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix3();\n    const rotationMatrix = new THREE.Matrix3();\n    const covarianceMatrix = new THREE.Matrix3();\n    const transformedCovariance = new THREE.Matrix3();\n    const transform3x3 = new THREE.Matrix3();\n    const transform3x3Transpose = new THREE.Matrix3();\n\n    return function(\n      scale,\n      rotation,\n      transform,\n      outCovariance,\n      outOffset = 0,\n      desiredOutputCompressionLevel,\n    ) {\n      tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n      scaleMatrix.setFromMatrix4(tempMatrix4);\n\n      tempMatrix4.makeRotationFromQuaternion(rotation);\n      rotationMatrix.setFromMatrix4(tempMatrix4);\n\n      covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n      transformedCovariance\n        .copy(covarianceMatrix)\n        .transpose()\n        .premultiply(covarianceMatrix);\n\n      if (transform) {\n        transform3x3.setFromMatrix4(transform);\n        transform3x3Transpose.copy(transform3x3).transpose();\n        transformedCovariance.multiply(transform3x3Transpose);\n        transformedCovariance.premultiply(transform3x3);\n      }\n\n      if (desiredOutputCompressionLevel >= 1) {\n        outCovariance[outOffset] = toHalfFloat(\n          transformedCovariance.elements[0],\n        );\n        outCovariance[outOffset + 1] = toHalfFloat(\n          transformedCovariance.elements[3],\n        );\n        outCovariance[outOffset + 2] = toHalfFloat(\n          transformedCovariance.elements[6],\n        );\n        outCovariance[outOffset + 3] = toHalfFloat(\n          transformedCovariance.elements[4],\n        );\n        outCovariance[outOffset + 4] = toHalfFloat(\n          transformedCovariance.elements[7],\n        );\n        outCovariance[outOffset + 5] = toHalfFloat(\n          transformedCovariance.elements[8],\n        );\n      } else {\n        outCovariance[outOffset] = transformedCovariance.elements[0];\n        outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n        outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n        outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n        outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n        outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n      }\n    };\n  })();\n\n  fillSplatCovarianceArray(\n    covarianceArray,\n    transform,\n    srcFrom,\n    srcTo,\n    destFrom,\n    desiredOutputCompressionLevel,\n  ) {\n    const splatCount = this.splatCount;\n\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const covarianceDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      SplatBuffer.computeCovariance(\n        scale,\n        rotation,\n        transform,\n        covarianceArray,\n        covarianceDestBase,\n        desiredOutputCompressionLevel,\n      );\n    }\n  }\n\n  fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const colorDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n      const srcSplatColorsBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n      const dataView = new Uint8Array(\n        this.bufferData,\n        section.dataBase + srcSplatColorsBase,\n      );\n\n      let alpha = dataView[3];\n      alpha = alpha >= minimumAlpha ? alpha : 0;\n\n      outColorArray[colorDestBase] = dataView[0];\n      outColorArray[colorDestBase + 1] = dataView[1];\n      outColorArray[colorDestBase + 2] = dataView[2];\n      outColorArray[colorDestBase + 3] = alpha;\n    }\n  }\n\n  fillSphericalHarmonicsArray = (function() {\n    const sphericalHarmonicVectors = [];\n    for (let i = 0; i < 15; i++) {\n      sphericalHarmonicVectors[i] = new THREE.Vector3();\n    }\n\n    const tempMatrix3 = new THREE.Matrix3();\n    const tempMatrix4 = new THREE.Matrix4();\n\n    const tempTranslation = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n\n    const sh11 = [];\n    const sh12 = [];\n    const sh13 = [];\n\n    const shOut1 = [];\n    const shOut2 = [];\n    const shOut3 = [];\n\n    // For the second degree\n    const shOut21 = [];\n    const shOut22 = [];\n    const shOut23 = [];\n    const shOut24 = [];\n    const shOut25 = [];\n\n    // For the third degree\n    const shOut31 = [];\n    const shOut32 = [];\n    const shOut33 = [];\n    const shOut34 = [];\n    const shOut35 = [];\n    const shOut36 = [];\n    const shOut37 = [];\n\n    const noop = (v) => v;\n\n    const set3 = (array, val1, val2, val3) => {\n      array[0] = val1;\n      array[1] = val2;\n      array[2] = val3;\n    };\n\n    const set3FromArray = (\n      array,\n      srcDestView,\n      stride,\n      srcBase,\n      compressionLevel,\n    ) => {\n      array[0] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase,\n        compressionLevel,\n        true,\n      );\n      array[1] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride,\n        compressionLevel,\n        true,\n      );\n      array[2] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride + stride,\n        compressionLevel,\n        true,\n      );\n    };\n\n    const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n      destArray[destBase] = conversionFunc(srcArray[0]);\n      destArray[destBase + 1] = conversionFunc(srcArray[1]);\n      destArray[destBase + 2] = conversionFunc(srcArray[2]);\n    };\n\n    return function(\n      outSphericalHarmonicsArray,\n      outSphericalHarmonicsDegree,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      if (transform && outSphericalHarmonicsDegree >= 1) {\n        tempMatrix4.copy(transform);\n        tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\n        tempRotation.normalize();\n        tempMatrix4.makeRotationFromQuaternion(tempRotation);\n        tempMatrix3.setFromMatrix4(tempMatrix4);\n        set3(\n          sh11,\n          tempMatrix3.elements[4],\n          -tempMatrix3.elements[7],\n          tempMatrix3.elements[1],\n        );\n        set3(\n          sh12,\n          -tempMatrix3.elements[5],\n          tempMatrix3.elements[8],\n          -tempMatrix3.elements[2],\n        );\n        set3(\n          sh13,\n          tempMatrix3.elements[3],\n          -tempMatrix3.elements[6],\n          tempMatrix3.elements[0],\n        );\n      }\n\n      const localFromHalfFloatToUint8 = (v) => {\n        return fromHalfFloatToUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      const localToUint8 = (v) => {\n        return toUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        outSphericalHarmonicsDegree = Math.min(\n          outSphericalHarmonicsDegree,\n          section.sphericalHarmonicsDegree,\n        );\n        const outSphericalHarmonicsComponentsCount =\n          getSphericalHarmonicsComponentCountForDegree(\n            outSphericalHarmonicsDegree,\n          );\n\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatSHBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel]\n            .SphericalHarmonicsOffsetBytes;\n\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatSHBase,\n        );\n\n        const shDestBase =\n          (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n        let compressionLevelForOutputConversion = transform ?\n          0 :\n          this.compressionLevel;\n        let outputConversionFunc = noop;\n        if (\n          compressionLevelForOutputConversion !== desiredOutputCompressionLevel\n        ) {\n          if (compressionLevelForOutputConversion === 1) {\n            if (desiredOutputCompressionLevel === 0) {\n              outputConversionFunc = fromHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localFromHalfFloatToUint8;\n            }\n          } else if (compressionLevelForOutputConversion === 0) {\n            if (desiredOutputCompressionLevel === 1) {\n              outputConversionFunc = toHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localToUint8;\n            }\n          }\n        }\n\n        const minShCoeff = this.minSphericalHarmonicsCoeff;\n        const maxShCoeff = this.maxSphericalHarmonicsCoeff;\n        const scale = Math.max(Math.abs(minShCoeff), Math.abs(maxShCoeff));\n\n        const toUintMax = (v, Max) => {\n          v = clamp(v / scale, -1, 1);\n          v = 0.5 * v + 0.5;\n          return clamp(Math.floor(v * Max), 0, Max);\n        };\n\n        // 111011 compression, 11 bits for red (2048)\n        // 10 bits for green (1024)\n        // 11 bits for blue (2048)\n        const toUintMaxArray = (v) => {\n          v[0] = toUintMax(v[0], 2047);\n          v[1] = toUintMax(v[1], 1023);\n          v[2] = toUintMax(v[2], 2047);\n        };\n\n        if (outSphericalHarmonicsDegree >= 1) {\n          set3FromArray(shOut1, dataView, 1, 0, this.compressionLevel);\n          set3FromArray(shOut2, dataView, 1, 3, this.compressionLevel);\n          set3FromArray(shOut3, dataView, 1, 6, this.compressionLevel);\n          toUintMaxArray(shOut1);\n          toUintMaxArray(shOut2);\n          toUintMaxArray(shOut3);\n          setOutput3(\n            shOut1,\n            outSphericalHarmonicsArray,\n            shDestBase,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut2,\n            outSphericalHarmonicsArray,\n            shDestBase + 3,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut3,\n            outSphericalHarmonicsArray,\n            shDestBase + 6,\n            outputConversionFunc,\n          );\n\n          if (outSphericalHarmonicsDegree >= 2) {\n            set3FromArray(shOut21, dataView, 1, 9, this.compressionLevel);\n            set3FromArray(shOut22, dataView, 1, 12, this.compressionLevel);\n            set3FromArray(shOut23, dataView, 1, 15, this.compressionLevel);\n            set3FromArray(shOut24, dataView, 1, 18, this.compressionLevel);\n            set3FromArray(shOut25, dataView, 1, 21, this.compressionLevel);\n            toUintMaxArray(shOut21);\n            toUintMaxArray(shOut22);\n            toUintMaxArray(shOut23);\n            toUintMaxArray(shOut24);\n            toUintMaxArray(shOut25);\n            setOutput3(\n              shOut21,\n              outSphericalHarmonicsArray,\n              shDestBase + 9,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut22,\n              outSphericalHarmonicsArray,\n              shDestBase + 12,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut23,\n              outSphericalHarmonicsArray,\n              shDestBase + 15,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut24,\n              outSphericalHarmonicsArray,\n              shDestBase + 18,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut25,\n              outSphericalHarmonicsArray,\n              shDestBase + 21,\n              outputConversionFunc,\n            );\n          }\n          // TODO: define rotations for the third degree\n          if (outSphericalHarmonicsDegree >= 3) {\n            set3FromArray(shOut31, dataView, 1, 24, this.compressionLevel);\n            set3FromArray(shOut32, dataView, 1, 27, this.compressionLevel);\n            set3FromArray(shOut33, dataView, 1, 30, this.compressionLevel);\n            set3FromArray(shOut34, dataView, 1, 33, this.compressionLevel);\n            set3FromArray(shOut35, dataView, 1, 36, this.compressionLevel);\n            set3FromArray(shOut36, dataView, 1, 39, this.compressionLevel);\n            set3FromArray(shOut37, dataView, 1, 42, this.compressionLevel);\n            toUintMaxArray(shOut31);\n            toUintMaxArray(shOut32);\n            toUintMaxArray(shOut33);\n            toUintMaxArray(shOut34);\n            toUintMaxArray(shOut35);\n            toUintMaxArray(shOut36);\n            toUintMaxArray(shOut37);\n            setOutput3(\n              shOut31,\n              outSphericalHarmonicsArray,\n              shDestBase + 24,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut32,\n              outSphericalHarmonicsArray,\n              shDestBase + 27,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut33,\n              outSphericalHarmonicsArray,\n              shDestBase + 30,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut34,\n              outSphericalHarmonicsArray,\n              shDestBase + 33,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut35,\n              outSphericalHarmonicsArray,\n              shDestBase + 36,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut36,\n              outSphericalHarmonicsArray,\n              shDestBase + 39,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut37,\n              outSphericalHarmonicsArray,\n              shDestBase + 42,\n              outputConversionFunc,\n            );\n          }\n        }\n      }\n    };\n  })();\n\n  static parseHeader(buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const versionMajor = headerArrayUint8[0];\n    const versionMinor = headerArrayUint8[1];\n    const maxSectionCount = headerArrayUint32[1];\n    const sectionCount = headerArrayUint32[2];\n    const maxSplatCount = headerArrayUint32[3];\n    const splatCount = headerArrayUint32[4];\n    const compressionLevel = headerArrayUint16[10];\n    const sceneCenter = new THREE.Vector3(\n      headerArrayFloat32[6],\n      headerArrayFloat32[7],\n      headerArrayFloat32[8],\n    );\n\n    const minSphericalHarmonicsCoeff =\n      headerArrayFloat32[9] ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    const maxSphericalHarmonicsCoeff =\n      headerArrayFloat32[10] ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    return {\n      versionMajor,\n      versionMinor,\n      maxSectionCount,\n      sectionCount,\n      maxSplatCount,\n      splatCount,\n      compressionLevel,\n      sceneCenter,\n      minSphericalHarmonicsCoeff,\n      maxSphericalHarmonicsCoeff,\n    };\n  }\n\n  static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint32[2] = sectionCount;\n    headerArrayUint32[4] = splatCount;\n  }\n\n  static writeHeaderToBuffer(header, buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint8[0] = header.versionMajor;\n    headerArrayUint8[1] = header.versionMinor;\n    headerArrayUint8[2] = 0; // unused for now\n    headerArrayUint8[3] = 0; // unused for now\n    headerArrayUint32[1] = header.maxSectionCount;\n    headerArrayUint32[2] = header.sectionCount;\n    headerArrayUint32[3] = header.maxSplatCount;\n    headerArrayUint32[4] = header.splatCount;\n    headerArrayUint16[10] = header.compressionLevel;\n    headerArrayFloat32[6] = header.sceneCenter.x;\n    headerArrayFloat32[7] = header.sceneCenter.y;\n    headerArrayFloat32[8] = header.sceneCenter.z;\n    headerArrayFloat32[9] =\n      header.minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    headerArrayFloat32[10] =\n      header.maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n  }\n\n  static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n    const compressionLevel = header.compressionLevel;\n\n    const maxSectionCount = header.maxSectionCount;\n    const sectionHeaderArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 2,\n    );\n    const sectionHeaderArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n    const sectionHeaderArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n\n    const sectionHeaders = [];\n    let sectionHeaderBase = 0;\n    let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n    let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n    let sectionBase =\n      SplatBuffer.HeaderSizeBytes +\n      header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n    let splatCountOffset = 0;\n    for (let i = 0; i < maxSectionCount; i++) {\n      const maxSplatCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n      const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n      const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n      const bucketBlockSize =\n        sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n      const halfBucketBlockSize = bucketBlockSize / 2.0;\n      const bucketStorageSizeBytes =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n      const compressionScaleRange =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n        SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n      const fullBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n      const partiallyFilledBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketsStorageSizeBytes =\n        bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n      const sphericalHarmonicsDegree =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n      const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n        compressionLevel,\n        sphericalHarmonicsDegree,\n      );\n\n      const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n      const storageSizeBytes =\n        splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n      const sectionHeader = {\n        bytesPerSplat: bytesPerSplat,\n        splatCountOffset: splatCountOffset,\n        splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n        maxSplatCount: maxSplatCount,\n        bucketSize: bucketSize,\n        bucketCount: bucketCount,\n        bucketBlockSize: bucketBlockSize,\n        halfBucketBlockSize: halfBucketBlockSize,\n        bucketStorageSizeBytes: bucketStorageSizeBytes,\n        bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n        splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n        storageSizeBytes: storageSizeBytes,\n        compressionScaleRange: compressionScaleRange,\n        compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n        base: sectionBase,\n        bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n        dataBase: sectionBase + bucketsStorageSizeBytes,\n        fullBucketCount: fullBucketCount,\n        partiallyFilledBucketCount: partiallyFilledBucketCount,\n        sphericalHarmonicsDegree: sphericalHarmonicsDegree,\n      };\n      sectionHeaders[i] = sectionHeader;\n      sectionBase += storageSizeBytes;\n      sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n      sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n      sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n      splatCountOffset += maxSplatCount;\n    }\n\n    return sectionHeaders;\n  }\n\n  static writeSectionHeaderToBuffer(\n    sectionHeader,\n    compressionLevel,\n    buffer,\n    offset = 0,\n  ) {\n    const sectionHeadeArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 2,\n    );\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    const sectionHeadeArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n\n    sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n    sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n    sectionHeadeArrayUint32[2] =\n      compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n    sectionHeadeArrayUint32[3] =\n      compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n    sectionHeadeArrayFloat32[4] =\n      compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n    sectionHeadeArrayUint16[10] =\n      compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n    sectionHeadeArrayUint32[6] =\n      compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n    sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n    sectionHeadeArrayUint32[8] =\n      compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n    sectionHeadeArrayUint32[9] =\n      compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n  }\n\n  static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    sectionHeadeArrayUint32[0] = splatCount;\n  }\n\n  constructFromBuffer(bufferData, secLoadedCountsToMax) {\n    this.bufferData = bufferData;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSectionMap = [];\n\n    const header = SplatBuffer.parseHeader(this.bufferData);\n    this.versionMajor = header.versionMajor;\n    this.versionMinor = header.versionMinor;\n    this.maxSectionCount = header.maxSectionCount;\n    this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n    this.maxSplatCount = header.maxSplatCount;\n    this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n    this.compressionLevel = header.compressionLevel;\n    this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n    this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\n    this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\n\n    this.sections = SplatBuffer.parseSectionHeaders(\n      header,\n      this.bufferData,\n      SplatBuffer.HeaderSizeBytes,\n      secLoadedCountsToMax,\n    );\n\n    this.linkBufferArrays();\n    this.buildMaps();\n  }\n\n  static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n    const bytesPerCenter =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n    const bytesPerScale =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n    const bytesPerRotation =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n    const bytesPerColor =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n    const sphericalHarmonicsComponentsPerSplat =\n      getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n    const sphericalHarmonicsBytesPerSplat =\n      SplatBuffer.CompressionLevels[compressionLevel]\n        .BytesPerSphericalHarmonicsComponent *\n      sphericalHarmonicsComponentsPerSplat;\n    const bytesPerSplat =\n      bytesPerCenter +\n      bytesPerScale +\n      bytesPerRotation +\n      bytesPerColor +\n      sphericalHarmonicsBytesPerSplat;\n    return {\n      bytesPerCenter,\n      bytesPerScale,\n      bytesPerRotation,\n      bytesPerColor,\n      sphericalHarmonicsComponentsPerSplat,\n      sphericalHarmonicsBytesPerSplat,\n      bytesPerSplat,\n    };\n  }\n\n  linkBufferArrays() {\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      section.bucketArray = new Float32Array(\n        this.bufferData,\n        section.bucketsBase,\n        section.bucketCount * SplatBuffer.BucketStorageSizeFloats,\n      );\n      if (section.partiallyFilledBucketCount > 0) {\n        section.partiallyFilledBucketLengths = new Uint32Array(\n          this.bufferData,\n          section.base,\n          section.partiallyFilledBucketCount,\n        );\n      }\n    }\n  }\n\n  buildMaps() {\n    let cumulativeSplatCount = 0;\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      for (let j = 0; j < section.maxSplatCount; j++) {\n        const globalSplatIndex = cumulativeSplatCount + j;\n        this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n        this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n      }\n      cumulativeSplatCount += section.maxSplatCount;\n    }\n  }\n\n  updateLoadedCounts(newSectionCount, newSplatCount) {\n    SplatBuffer.writeHeaderCountsToBuffer(\n      newSectionCount,\n      newSplatCount,\n      this.bufferData,\n    );\n    this.sectionCount = newSectionCount;\n    this.splatCount = newSplatCount;\n  }\n\n  updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n    const sectionHeaderOffset =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n    SplatBuffer.writeSectionHeaderSplatCountToBuffer(\n      newSplatCount,\n      this.bufferData,\n      sectionHeaderOffset,\n    );\n    this.sections[sectionIndex].splatCount = newSplatCount;\n  }\n\n  static writeSplatDataToSectionBuffer = (function() {\n    const tempCenterBuffer = new ArrayBuffer(12);\n    const tempScaleBuffer = new ArrayBuffer(12);\n    const tempRotationBuffer = new ArrayBuffer(16);\n    const tempColorBuffer = new ArrayBuffer(4);\n    const tempSHBuffer = new ArrayBuffer(256);\n    const tempRot = new THREE.Quaternion();\n    const tempScale = new THREE.Vector3();\n    const bucketCenterDelta = new THREE.Vector3();\n\n    const {\n      X: OFFSET_X,\n      Y: OFFSET_Y,\n      Z: OFFSET_Z,\n      SCALE0: OFFSET_SCALE0,\n      SCALE1: OFFSET_SCALE1,\n      SCALE2: OFFSET_SCALE2,\n      ROTATION0: OFFSET_ROT0,\n      ROTATION1: OFFSET_ROT1,\n      ROTATION2: OFFSET_ROT2,\n      ROTATION3: OFFSET_ROT3,\n      FDC0: OFFSET_FDC0,\n      FDC1: OFFSET_FDC1,\n      FDC2: OFFSET_FDC2,\n      OPACITY: OFFSET_OPACITY,\n      FRC0: OFFSET_FRC0,\n      FRC9: OFFSET_FRC9,\n      FRC24: OFFSET_FRC24,\n    } = UncompressedSplatArray.OFFSET;\n\n    const compressPositionOffset = (\n      v,\n      compressionScaleFactor,\n      compressionScaleRange,\n    ) => {\n      const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n      v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\n      return clamp(v, 0, doubleCompressionScaleRange);\n    };\n\n    return function(\n      targetSplat,\n      sectionBuffer,\n      bufferOffset,\n      compressionLevel,\n      sphericalHarmonicsDegree,\n      bucketCenter,\n      compressionScaleFactor,\n      compressionScaleRange,\n      minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\n      maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange,\n    ) {\n      const sphericalHarmonicsComponentsPerSplat =\n        getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n      const bytesPerCenter =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n      const bytesPerScale =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n      const bytesPerRotation =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n      const bytesPerColor =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n\n      const centerBase = bufferOffset;\n      const scaleBase = centerBase + bytesPerCenter;\n      const rotationBase = scaleBase + bytesPerScale;\n      const colorBase = rotationBase + bytesPerRotation;\n      const sphericalHarmonicsBase = colorBase + bytesPerColor;\n\n      if (targetSplat[OFFSET_ROT0] !== undefined) {\n        tempRot.set(\n          targetSplat[OFFSET_ROT0],\n          targetSplat[OFFSET_ROT1],\n          targetSplat[OFFSET_ROT2],\n          targetSplat[OFFSET_ROT3],\n        );\n        tempRot.normalize();\n      } else {\n        tempRot.set(1.0, 0.0, 0.0, 0.0);\n      }\n\n      if (targetSplat[OFFSET_SCALE0] !== undefined) {\n        tempScale.set(\n          targetSplat[OFFSET_SCALE0] || 0,\n          targetSplat[OFFSET_SCALE1] || 0,\n          targetSplat[OFFSET_SCALE2] || 0,\n        );\n      } else {\n        tempScale.set(0, 0, 0);\n      }\n\n      if (compressionLevel === 0) {\n        const center = new Float32Array(\n          sectionBuffer,\n          centerBase,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Float32Array(\n          sectionBuffer,\n          rotationBase,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Float32Array(\n          sectionBuffer,\n          scaleBase,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\n        scale.set([tempScale.x, tempScale.y, tempScale.z]);\n        center.set([\n          targetSplat[OFFSET_X],\n          targetSplat[OFFSET_Y],\n          targetSplat[OFFSET_Z],\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const shOut = new Float32Array(\n            sectionBuffer,\n            sphericalHarmonicsBase,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\n            }\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\n              }\n              if (sphericalHarmonicsDegree >= 3) {\n                for (let s = 0; s < 21; s++) {\n                  shOut[s + 24] = targetSplat[OFFSET_FRC24 + s] || 0;\n                }\n              }\n            }\n          }\n        }\n      } else {\n        const center = new Uint16Array(\n          tempCenterBuffer,\n          0,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Uint16Array(\n          tempRotationBuffer,\n          0,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Uint16Array(\n          tempScaleBuffer,\n          0,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([\n          toHalfFloat(tempRot.x),\n          toHalfFloat(tempRot.y),\n          toHalfFloat(tempRot.z),\n          toHalfFloat(tempRot.w),\n        ]);\n        scale.set([\n          toHalfFloat(tempScale.x),\n          toHalfFloat(tempScale.y),\n          toHalfFloat(tempScale.z),\n        ]);\n\n        bucketCenterDelta\n          .set(\n            targetSplat[OFFSET_X],\n            targetSplat[OFFSET_Y],\n            targetSplat[OFFSET_Z],\n          )\n          .sub(bucketCenter);\n        bucketCenterDelta.x = compressPositionOffset(\n          bucketCenterDelta.x,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.y = compressPositionOffset(\n          bucketCenterDelta.y,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.z = compressPositionOffset(\n          bucketCenterDelta.z,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        center.set([\n          bucketCenterDelta.x,\n          bucketCenterDelta.y,\n          bucketCenterDelta.z,\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n          const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n          const shOut = new SHArrayType(\n            tempSHBuffer,\n            0,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\n              shOut[s] =\n                compressionLevel === 1 ?\n                  toHalfFloat(srcVal) :\n                  toUint8(\n                      srcVal,\n                      minSphericalHarmonicsCoeff,\n                      maxSphericalHarmonicsCoeff,\n                    );\n            }\n            const degree1ByteCount = 9 * bytesPerSHComponent;\n            copyBetweenBuffers(\n              shOut.buffer,\n              0,\n              sectionBuffer,\n              sphericalHarmonicsBase,\n              degree1ByteCount,\n            );\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\n                shOut[s + 9] =\n                  compressionLevel === 1 ?\n                    toHalfFloat(srcVal) :\n                    toUint8(\n                        srcVal,\n                        minSphericalHarmonicsCoeff,\n                        maxSphericalHarmonicsCoeff,\n                      );\n              }\n              copyBetweenBuffers(\n                shOut.buffer,\n                degree1ByteCount,\n                sectionBuffer,\n                sphericalHarmonicsBase + degree1ByteCount,\n                15 * bytesPerSHComponent,\n              );\n            }\n          }\n        }\n\n        copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n        copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n        copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n      }\n\n      const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n      rgba.set([\n        targetSplat[OFFSET_FDC0] || 0,\n        targetSplat[OFFSET_FDC1] || 0,\n        targetSplat[OFFSET_FDC2] || 0,\n      ]);\n      rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\n\n      copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n    };\n  })();\n\n  static generateFromUncompressedSplatArrays(\n    splatArrays,\n    minimumAlpha,\n    compressionLevel,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    options = [],\n  ) {\n    let shDegree = 0;\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\n    }\n\n    let minSphericalHarmonicsCoeff;\n    let maxSphericalHarmonicsCoeff;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      for (let i = 0; i < splatArray.splats.length; i++) {\n        const splat = splatArray.splats[i];\n        for (\n          let sc = UncompressedSplatArray.OFFSET.FRC0;\n          sc < UncompressedSplatArray.OFFSET.FRC44 && sc < splat.length;\n          sc++\n        ) {\n          if (\n            !minSphericalHarmonicsCoeff ||\n            splat[sc] < minSphericalHarmonicsCoeff\n          ) {\n            minSphericalHarmonicsCoeff = splat[sc];\n          }\n          if (\n            !maxSphericalHarmonicsCoeff ||\n            splat[sc] > maxSphericalHarmonicsCoeff\n          ) {\n            maxSphericalHarmonicsCoeff = splat[sc];\n          }\n        }\n      }\n    }\n\n    minSphericalHarmonicsCoeff =\n      minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    maxSphericalHarmonicsCoeff =\n      maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n      compressionLevel,\n      shDegree,\n    );\n    const compressionScaleRange =\n      SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n    const sectionBuffers = [];\n    const sectionHeaderBuffers = [];\n    let totalSplatCount = 0;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      const validSplats = new UncompressedSplatArray(shDegree);\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        const targetSplat = splatArray.splats[i];\n        if (\n          (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >=\n          minimumAlpha\n        ) {\n          validSplats.addSplat(targetSplat);\n        }\n      }\n\n      const sectionOptions = options[sa] || {};\n      const sectionBlockSize =\n        (sectionOptions.blockSizeFactor || 1) *\n        (blockSize || SplatBuffer.BucketBlockSize);\n      const sectionBucketSize = Math.ceil(\n        (sectionOptions.bucketSizeFactor || 1) *\n          (bucketSize || SplatBuffer.BucketSize),\n      );\n\n      const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(\n        validSplats,\n        sectionBlockSize,\n        sectionBucketSize,\n      );\n      const fullBucketCount = bucketInfo.fullBuckets.length;\n      const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map(\n        (bucket) => bucket.splats.length,\n      );\n      const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n      const buckets = [\n        ...bucketInfo.fullBuckets,\n        ...bucketInfo.partiallyFullBuckets,\n      ];\n\n      const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n      const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketDataBytes =\n        compressionLevel >= 1 ?\n          buckets.length * SplatBuffer.BucketStorageSizeBytes +\n            bucketMetaDataSizeBytes :\n          0;\n      const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n      const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n      const compressionScaleFactor =\n        compressionScaleRange / (sectionBlockSize * 0.5);\n      const bucketCenter = new THREE.Vector3();\n\n      let outSplatCount = 0;\n      for (let b = 0; b < buckets.length; b++) {\n        const bucket = buckets[b];\n        bucketCenter.fromArray(bucket.center);\n        for (let i = 0; i < bucket.splats.length; i++) {\n          let row = bucket.splats[i];\n          const targetSplat = validSplats.splats[row];\n          const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\n          SplatBuffer.writeSplatDataToSectionBuffer(\n            targetSplat,\n            sectionBuffer,\n            bufferOffset,\n            compressionLevel,\n            shDegree,\n            bucketCenter,\n            compressionScaleFactor,\n            compressionScaleRange,\n            minSphericalHarmonicsCoeff,\n            maxSphericalHarmonicsCoeff,\n          );\n          outSplatCount++;\n        }\n      }\n      totalSplatCount += outSplatCount;\n\n      if (compressionLevel >= 1) {\n        const bucketMetaDataArray = new Uint32Array(\n          sectionBuffer,\n          0,\n          partiallyFullBucketLengths.length * 4,\n        );\n        for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb++) {\n          bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n        }\n        const bucketArray = new Float32Array(\n          sectionBuffer,\n          bucketMetaDataSizeBytes,\n          buckets.length * SplatBuffer.BucketStorageSizeFloats,\n        );\n        for (let b = 0; b < buckets.length; b++) {\n          const bucket = buckets[b];\n          const base = b * 3;\n          bucketArray[base] = bucket.center[0];\n          bucketArray[base + 1] = bucket.center[1];\n          bucketArray[base + 2] = bucket.center[2];\n        }\n      }\n      sectionBuffers.push(sectionBuffer);\n\n      const sectionHeaderBuffer = new ArrayBuffer(\n        SplatBuffer.SectionHeaderSizeBytes,\n      );\n      SplatBuffer.writeSectionHeaderToBuffer(\n        {\n          maxSplatCount: outSplatCount,\n          splatCount: outSplatCount,\n          bucketSize: sectionBucketSize,\n          bucketCount: buckets.length,\n          bucketBlockSize: sectionBlockSize,\n          compressionScaleRange: compressionScaleRange,\n          storageSizeBytes: sectionSizeBytes,\n          fullBucketCount: fullBucketCount,\n          partiallyFilledBucketCount: partiallyFilledBucketCount,\n          sphericalHarmonicsDegree: shDegree,\n        },\n        compressionLevel,\n        sectionHeaderBuffer,\n        0,\n      );\n      sectionHeaderBuffers.push(sectionHeaderBuffer);\n    }\n\n    let sectionsCumulativeSizeBytes = 0;\n    for (let sectionBuffer of sectionBuffers) {\n      sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n    }\n    const unifiedBufferSize =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length +\n      sectionsCumulativeSizeBytes;\n    const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n    SplatBuffer.writeHeaderToBuffer(\n      {\n        versionMajor: 0,\n        versionMinor: 1,\n        maxSectionCount: sectionBuffers.length,\n        sectionCount: sectionBuffers.length,\n        maxSplatCount: totalSplatCount,\n        splatCount: totalSplatCount,\n        compressionLevel: compressionLevel,\n        sceneCenter: sceneCenter,\n        minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\n        maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff,\n      },\n      unifiedBuffer,\n    );\n\n    let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n    for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        SplatBuffer.SectionHeaderSizeBytes,\n      ).set(new Uint8Array(sectionHeaderBuffer));\n      currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n    }\n\n    for (let sectionBuffer of sectionBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        sectionBuffer.byteLength,\n      ).set(new Uint8Array(sectionBuffer));\n      currentUnifiedBase += sectionBuffer.byteLength;\n    }\n\n    const splatBuffer = new SplatBuffer(unifiedBuffer);\n    return splatBuffer;\n  }\n\n  static computeBucketsForUncompressedSplatArray(\n    splatArray,\n    blockSize,\n    bucketSize,\n  ) {\n    let splatCount = splatArray.splatCount;\n    const halfBlockSize = blockSize / 2.0;\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      if (i === 0 || center[0] < min.x) min.x = center[0];\n      if (i === 0 || center[0] > max.x) max.x = center[0];\n      if (i === 0 || center[1] < min.y) min.y = center[1];\n      if (i === 0 || center[1] > max.y) max.y = center[1];\n      if (i === 0 || center[2] < min.z) min.z = center[2];\n      if (i === 0 || center[2] > max.z) max.z = center[2];\n    }\n\n    const dimensions = new THREE.Vector3().copy(max).sub(min);\n    const yBlocks = Math.ceil(dimensions.y / blockSize);\n    const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n    const blockCenter = new THREE.Vector3();\n    const fullBuckets = [];\n    const partiallyFullBuckets = {};\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      const xBlock = Math.floor((center[0] - min.x) / blockSize);\n      const yBlock = Math.floor((center[1] - min.y) / blockSize);\n      const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n      blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n      blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n      blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n      const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n      let bucket = partiallyFullBuckets[bucketId];\n      if (!bucket) {\n        partiallyFullBuckets[bucketId] = bucket = {\n          splats: [],\n          center: blockCenter.toArray(),\n        };\n      }\n\n      bucket.splats.push(i);\n      if (bucket.splats.length >= bucketSize) {\n        fullBuckets.push(bucket);\n        partiallyFullBuckets[bucketId] = null;\n      }\n    }\n\n    const partiallyFullBucketArray = [];\n    for (let bucketId in partiallyFullBuckets) {\n      if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n        const bucket = partiallyFullBuckets[bucketId];\n        if (bucket) {\n          partiallyFullBucketArray.push(bucket);\n        }\n      }\n    }\n\n    return {\n      fullBuckets: fullBuckets,\n      partiallyFullBuckets: partiallyFullBucketArray,\n    };\n  }\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([\n  10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10,\n]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)?.storage;\n};\n\nexport class PlayCanvasCompressedPlyParser {\n  static decodeHeaderText(headerText) {\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText\n      .split('\\n')\n      .filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0,\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`,\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') {\n            bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          }\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes,\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n          break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`,\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n      bytesPerSplat: bytesPerSplat,\n      headerSizeBytes:\n        headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n      sphericalHarmonicsDegree: 0,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (\n      buf.length >= HeaderMagicBytes.length &&\n      !startsWith(buf, HeaderMagicBytes)\n    ) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset),\n    );\n\n    const { chunkElement, vertexElement, bytesPerSplat } =\n      PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      headerSizeBytes: endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      bytesPerSplat: bytesPerSplat,\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n    };\n  }\n\n  static readElementData(\n    element,\n    readBuffer,\n    readOffset,\n    fromIndex,\n    toIndex,\n    propertyFilter = null,\n  ) {\n    let dataView =\n      readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes =\n          StorageType.BYTES_PER_ELEMENT * element.count;\n        if (\n          (!property.storage ||\n            property.storage.byteLength < requiredStorageSizeBytes) &&\n          (!propertyFilter || propertyFilter(property.name))\n        ) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(\n      header.chunkElement,\n      plyBuffer,\n      header.headerSizeBytes,\n      null,\n      null,\n      propertyFilter,\n    );\n    PlayCanvasCompressedPlyParser.readElementData(\n      header.vertexElement,\n      plyBuffer,\n      readIndex,\n      null,\n      null,\n      propertyFilter,\n    );\n\n    return {\n      chunkElement: header.chunkElement,\n      vertexElement: header.vertexElement,\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX,\n        maxX,\n        minY,\n        maxY,\n        minZ,\n        maxZ,\n      },\n      scaleExtremes: {\n        minScaleX,\n        maxScaleX,\n        minScaleY,\n        maxScaleY,\n        minScaleZ,\n        maxScaleZ,\n      },\n      position,\n      rotation,\n      scale,\n      color,\n    };\n  }\n\n  static decompressSplat = (function() {\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(\n      index,\n      chunkSplatIndexOffset,\n      positionArray,\n      positionExtremes,\n      scaleArray,\n      scaleExtremes,\n      rotationArray,\n      colorArray,\n      outSplat,\n    ) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(\n        positionExtremes.minX[chunkIndex],\n        positionExtremes.maxX[chunkIndex],\n        p.x,\n      );\n      outSplat[OFFSET.Y] = lerp(\n        positionExtremes.minY[chunkIndex],\n        positionExtremes.maxY[chunkIndex],\n        p.y,\n      );\n      outSplat[OFFSET.Z] = lerp(\n        positionExtremes.minZ[chunkIndex],\n        positionExtremes.maxZ[chunkIndex],\n        p.z,\n      );\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleX[chunkIndex],\n          scaleExtremes.maxScaleX[chunkIndex],\n          s.x,\n        ),\n      );\n      outSplat[OFFSET.SCALE1] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleY[chunkIndex],\n          scaleExtremes.maxScaleY[chunkIndex],\n          s.y,\n        ),\n      );\n      outSplat[OFFSET.SCALE2] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleZ[chunkIndex],\n          scaleExtremes.maxScaleZ[chunkIndex],\n          s.z,\n        ),\n      );\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n  })();\n\n  static parseToUncompressedSplatBufferSection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    outBuffer,\n    outOffset,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      const outBase = i * outBytesPerSplat + outOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        tempSplat,\n        outBuffer,\n        outBase,\n        0,\n        0,\n      );\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    splatArray,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      const tempSplat = UncompressedSplatArray.createSplat();\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      splatArray.addSplat(tempSplat);\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } =\n      PlayCanvasCompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        0,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        newSplat,\n      );\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n}\n","export const PlyFormat = {\n  INRIAV1: 0,\n  INRIAV2: 1,\n  PlayCanvasCompressed: 2,\n};\n","import { PlyFormat } from './PlyFormat.js';\n\nconst [\n  FieldSizeIdDouble,\n  FieldSizeIdInt,\n  FieldSizeIdUInt,\n  FieldSizeIdFloat,\n  FieldSizeIdShort,\n  FieldSizeIdUShort,\n  FieldSizeIdUChar,\n] = [0, 1, 2, 3, 4, 5, 6];\n\nconst FieldSizeStringMap = {\n  double: FieldSizeIdDouble,\n  int: FieldSizeIdInt,\n  uint: FieldSizeIdUInt,\n  float: FieldSizeIdFloat,\n  short: FieldSizeIdShort,\n  ushort: FieldSizeIdUShort,\n  uchar: FieldSizeIdUChar,\n};\n\nconst FieldSize = {\n  [FieldSizeIdDouble]: 8,\n  [FieldSizeIdInt]: 4,\n  [FieldSizeIdUInt]: 4,\n  [FieldSizeIdFloat]: 4,\n  [FieldSizeIdShort]: 2,\n  [FieldSizeIdUShort]: 2,\n  [FieldSizeIdUChar]: 1,\n};\n\nexport class PlyParserUtils {\n  static HeaderEndToken = 'end_header';\n\n  constructor() {}\n\n  decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\n    const extractedLines = [];\n\n    let processingSection = false;\n    let headerEndLine = -1;\n    let vertexCount = 0;\n    let endOfHeader = false;\n    let sectionName = null;\n\n    const fieldIds = [];\n    const fieldTypes = [];\n    const allFieldNames = [];\n    const usedFieldNames = [];\n    const fieldTypesByName = {};\n\n    for (let i = headerStartLine; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (line.startsWith('element')) {\n        if (processingSection) {\n          headerEndLine--;\n          break;\n        } else {\n          processingSection = true;\n          headerStartLine = i;\n          headerEndLine = i;\n          const lineComponents = line.split(' ');\n          let validComponents = 0;\n          for (let lineComponent of lineComponents) {\n            const trimmedComponent = lineComponent.trim();\n            if (trimmedComponent.length > 0) {\n              validComponents++;\n              if (validComponents === 2) {\n                sectionName = trimmedComponent;\n              } else if (validComponents === 3) {\n                vertexCount = parseInt(trimmedComponent);\n              }\n            }\n          }\n        }\n      } else if (line.startsWith('property')) {\n        const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n        if (fieldMatch) {\n          const fieldTypeStr = fieldMatch[2];\n          const fieldName = fieldMatch[3];\n          allFieldNames.push(fieldName);\n          const fieldId = fieldNameIdMap[fieldName];\n          fieldTypesByName[fieldName] = fieldTypeStr;\n          const fieldType = FieldSizeStringMap[fieldTypeStr];\n          if (fieldId !== undefined) {\n            usedFieldNames.push(fieldName);\n            fieldIds.push(fieldId);\n            fieldTypes[fieldId] = fieldType;\n          }\n        }\n      }\n      if (line === PlyParserUtils.HeaderEndToken) {\n        endOfHeader = true;\n        break;\n      }\n      if (processingSection) {\n        extractedLines.push(line);\n        headerEndLine++;\n      }\n    }\n\n    const fieldOffsets = [];\n    let bytesPerVertex = 0;\n    for (let fieldName of allFieldNames) {\n      const fieldType = fieldTypesByName[fieldName];\n      if (fieldTypesByName.hasOwnProperty(fieldName)) {\n        const fieldId = fieldNameIdMap[fieldName];\n        if (fieldId !== undefined) {\n          fieldOffsets[fieldId] = bytesPerVertex;\n        }\n      }\n      bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\n    }\n\n    const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(\n      allFieldNames,\n      fieldNameIdMap,\n    );\n\n    return {\n      headerLines: extractedLines,\n      headerStartLine: headerStartLine,\n      headerEndLine: headerEndLine,\n      fieldTypes: fieldTypes,\n      fieldIds: fieldIds,\n      fieldOffsets: fieldOffsets,\n      bytesPerVertex: bytesPerVertex,\n      vertexCount: vertexCount,\n      dataSizeBytes: bytesPerVertex * vertexCount,\n      endOfHeader: endOfHeader,\n      sectionName: sectionName,\n      sphericalHarmonicsDegree: sphericalHarmonics.degree,\n      sphericalHarmonicsCoefficientsPerChannel:\n        sphericalHarmonics.coefficientsPerChannel,\n      sphericalHarmonicsDegree1Fields: sphericalHarmonics.degree1Fields,\n      sphericalHarmonicsDegree2Fields: sphericalHarmonics.degree2Fields,\n    };\n  }\n\n  decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\n    let sphericalHarmonicsFieldCount = 0;\n    let coefficientsPerChannel = 0;\n    for (let fieldName of fieldNames) {\n      if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n    }\n    coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n    let degree = 0;\n    if (coefficientsPerChannel >= 3) degree = 1;\n    if (coefficientsPerChannel >= 8) degree = 2;\n\n    let degree1Fields = [];\n    let degree2Fields = [];\n\n    for (let rgb = 0; rgb < 3; rgb++) {\n      if (degree >= 1) {\n        for (let i = 0; i < 3; i++) {\n          degree1Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)],\n          );\n        }\n      }\n      if (degree >= 2) {\n        for (let i = 0; i < 5; i++) {\n          degree2Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)],\n          );\n        }\n      }\n    }\n\n    return {\n      degree: degree,\n      coefficientsPerChannel: coefficientsPerChannel,\n      degree1Fields: degree1Fields,\n      degree2Fields: degree2Fields,\n    };\n  }\n\n  static getHeaderSectionNames(headerLines) {\n    const sectionNames = [];\n    for (let headerLine of headerLines) {\n      if (headerLine.startsWith('element')) {\n        const lineComponents = headerLine.split(' ');\n        let validComponents = 0;\n        for (let lineComponent of lineComponents) {\n          const trimmedComponent = lineComponent.trim();\n          if (trimmedComponent.length > 0) {\n            validComponents++;\n            if (validComponents === 2) {\n              sectionNames.push(trimmedComponent);\n            }\n          }\n        }\n      }\n    }\n    return sectionNames;\n  }\n\n  static checkTextForEndHeader(endHeaderTestText) {\n    if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\n      return true;\n    }\n    return false;\n  }\n\n  static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n    const endHeaderTestChunk = new Uint8Array(\n      buffer,\n      Math.max(0, searchOfset - chunkSize),\n      chunkSize,\n    );\n    const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n    return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\n  }\n\n  static extractHeaderFromBufferToText(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  readHeaderFromBuffer(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  static convertHeaderTextToLines(headerText) {\n    const headerLines = headerText.split('\\n');\n    const prunedLines = [];\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      prunedLines.push(line);\n      if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return prunedLines;\n  }\n\n  static determineHeaderFormatFromHeaderText(headertText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\n    let format = PlyFormat.INRIAV1;\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (\n        line.startsWith('element chunk') ||\n        line.match(/[A-Za-z]*packed_[A-Za-z]*/)\n      ) {\n        format = PlyFormat.PlayCanvasCompressed;\n      } else if (line.startsWith('element codebook_centers')) {\n        format = PlyFormat.INRIAV2;\n      } else if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return format;\n  }\n\n  static determineHeaderFormatFromPlyBuffer(plyBuffer) {\n    const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\n    return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\n  }\n\n  static readVertex(\n    vertexData,\n    header,\n    row,\n    dataOffset,\n    fieldsToRead,\n    rawVertex,\n    normalize = true,\n  ) {\n    const offset = row * header.bytesPerVertex + dataOffset;\n    const fieldOffsets = header.fieldOffsets;\n    const fieldTypes = header.fieldTypes;\n    for (let fieldId of fieldsToRead) {\n      const fieldType = fieldTypes[fieldId];\n      if (fieldType === FieldSizeIdFloat) {\n        rawVertex[fieldId] = vertexData.getFloat32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdShort) {\n        rawVertex[fieldId] = vertexData.getInt16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUShort) {\n        rawVertex[fieldId] = vertexData.getUint16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdInt) {\n        rawVertex[fieldId] = vertexData.getInt32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUInt) {\n        rawVertex[fieldId] = vertexData.getUint32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUChar) {\n        if (normalize) {\n          rawVertex[fieldId] =\n            vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\n        } else {\n          rawVertex[fieldId] = vertexData.getUint8(\n            offset + fieldOffsets[fieldId],\n          );\n        }\n      }\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { clamp } from '../../Util.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nconst BaseFieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n];\n\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\n\nconst [\n  SCALE_0,\n  SCALE_1,\n  SCALE_2,\n  ROT_0,\n  ROT_1,\n  ROT_2,\n  ROT_3,\n  X,\n  Y,\n  Z,\n  F_DC_0,\n  F_DC_1,\n  F_DC_2,\n  OPACITY,\n  RED,\n  GREEN,\n  BLUE,\n  F_REST_0,\n] = BaseFieldsToReadIndexes;\n\nexport class INRIAV1PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeHeaderLines(headerLines) {\n    let shLineCount = 0;\n    headerLines.forEach((line) => {\n      if (line.includes('f_rest_')) shLineCount++;\n    });\n\n    let shFieldsToReadCount = 0;\n    if (shLineCount >= 45) {\n      shFieldsToReadCount = 45;\n    } else if (shLineCount >= 24) {\n      shFieldsToReadCount = 24;\n    } else if (shLineCount >= 9) {\n      shFieldsToReadCount = 9;\n    }\n\n    const shFieldIndexesToMap = Array.from(\n      Array(Math.max(shFieldsToReadCount - 1, 0)),\n    );\n    let shRemainingFieldNamesToRead = shFieldIndexesToMap.map(\n      (element, index) => `f_rest_${index + 1}`,\n    );\n\n    const fieldNamesToRead = [\n      ...BaseFieldNamesToRead,\n      ...shRemainingFieldNamesToRead,\n    ];\n    const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\n\n    const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\n      acc[fieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n    const header = this.plyParserutils.decodeSectionHeader(\n      headerLines,\n      fieldNameIdMap,\n      0,\n    );\n    header.splatCount = header.vertexCount;\n    header.bytesPerSplat = header.bytesPerVertex;\n    header.fieldsToReadIndexes = fieldsToReadIndexes;\n    return header;\n  }\n\n  decodeHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    const header = this.decodeHeaderLines(headerLines);\n    header.headerText = headerText;\n    header.headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    return header;\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderText(headerText);\n  }\n\n  findSplatData(plyBuffer, header) {\n    return new DataView(plyBuffer, header.headerSizeBytes);\n  }\n\n  parseToUncompressedSplatBufferSection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    toBuffer,\n    toOffset,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n        outSphericalHarmonicsDegree\n      ].BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      const outBase = i * outBytesPerSplat + toOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        parsedSplat,\n        toBuffer,\n        outBase,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n\n  parseToUncompressedSplatArraySection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    splatArray,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(parsedSplat);\n    }\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV1PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\n        newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\n        newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[F_DC_0] !== undefined) {\n        const SH_C0 = 0.28209479177387814;\n        newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\n        newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\n        newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\n      } else if (rawSplat[RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] =\n          (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (outSphericalHarmonicsDegree >= 1) {\n        if (rawSplat[F_REST_0] !== undefined) {\n          for (let i = 0; i < 9; i++) {\n            newSplat[OFFSET_FRC[i]] =\n              rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\n          }\n          if (outSphericalHarmonicsDegree >= 2) {\n            for (let i = 0; i < 15; i++) {\n              newSplat[OFFSET_FRC[9 + i]] =\n                rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\n            }\n          }\n        }\n      }\n\n      tempRotation.set(\n        rawSplat[ROT_0],\n        rawSplat[ROT_1],\n        rawSplat[ROT_2],\n        rawSplat[ROT_3],\n      );\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = rawSplat[X];\n      newSplat[OFFSET_Y] = rawSplat[Y];\n      newSplat[OFFSET_Z] = rawSplat[Z];\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      header.fieldsToReadIndexes,\n      rawSplat,\n      true,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const header = this.decodeHeaderFromBuffer(plyBuffer);\n    const splatCount = header.splatCount;\n    const splatData = this.findSplatData(plyBuffer, header);\n    const splatArray = this.decodeSectionSplatData(\n      splatData,\n      splatCount,\n      header,\n      outSphericalHarmonicsDegree,\n    );\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { clamp } from '../../Util.js';\n\nconst CodeBookEntryNamesToRead = [\n  'features_dc',\n  'features_rest_0',\n  'features_rest_1',\n  'features_rest_2',\n  'features_rest_3',\n  'features_rest_4',\n  'features_rest_5',\n  'features_rest_6',\n  'features_rest_7',\n  'features_rest_8',\n  'features_rest_9',\n  'features_rest_10',\n  'features_rest_11',\n  'features_rest_12',\n  'features_rest_13',\n  'features_rest_14',\n  'opacity',\n  'scaling',\n  'rotation_re',\n  'rotation_im',\n];\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\n\nconst [\n  CB_FEATURES_DC,\n  CB_FEATURES_REST_0,\n  CB_FEATURES_REST_3,\n  CB_OPACITY,\n  CB_SCALING,\n  CB_ROTATION_RE,\n  CB_ROTATION_IM,\n] = [0, 1, 4, 16, 17, 18, 19];\n\nconst FieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n  'f_rest_1',\n  'f_rest_2',\n  'f_rest_3',\n  'f_rest_4',\n  'f_rest_5',\n  'f_rest_6',\n  'f_rest_7',\n  'f_rest_8',\n  'f_rest_9',\n  'f_rest_10',\n  'f_rest_11',\n  'f_rest_12',\n  'f_rest_13',\n  'f_rest_14',\n  'f_rest_15',\n  'f_rest_16',\n  'f_rest_17',\n  'f_rest_18',\n  'f_rest_19',\n  'f_rest_20',\n  'f_rest_21',\n  'f_rest_22',\n  'f_rest_23',\n  'f_rest_24',\n  'f_rest_25',\n  'f_rest_26',\n  'f_rest_27',\n  'f_rest_28',\n  'f_rest_29',\n  'f_rest_30',\n  'f_rest_31',\n  'f_rest_32',\n  'f_rest_33',\n  'f_rest_34',\n  'f_rest_35',\n  'f_rest_36',\n  'f_rest_37',\n  'f_rest_38',\n  'f_rest_39',\n  'f_rest_40',\n  'f_rest_41',\n  'f_rest_42',\n  'f_rest_43',\n  'f_rest_44',\n  'f_rest_45',\n];\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\n\nconst [\n  PLY_SCALE_0,\n  PLY_SCALE_1,\n  PLY_SCALE_2,\n  PLY_ROT_0,\n  PLY_ROT_1,\n  PLY_ROT_2,\n  PLY_ROT_3,\n  PLY_X,\n  PLY_Y,\n  PLY_Z,\n  PLY_F_DC_0,\n  PLY_F_DC_1,\n  PLY_F_DC_2,\n  PLY_OPACITY,\n] = FieldsToReadIndexes;\n\nconst PLY_RED = PLY_F_DC_0;\nconst PLY_GREEN = PLY_F_DC_1;\nconst PLY_BLUE = PLY_F_DC_2;\n\nconst fromHalfFloat = (hf) => {\n  const t = (31744 & hf) >> 10;\n  const a = 1023 & hf;\n  return (\n    (hf >> 15 ? -1 : 1) *\n    (t ?\n      t === 31 ?\n        a ?\n          NaN :\n          1 / 0 :\n        Math.pow(2, t - 15) * (1 + a / 1024) :\n      (a / 1024) * 6103515625e-14)\n  );\n};\n\nexport class INRIAV2PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeSectionHeadersFromHeaderLines(headerLines) {\n    const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\n      acc[FieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n\n    const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce(\n      (acc, element) => {\n        acc[CodeBookEntryNamesToRead[element]] = element;\n        return acc;\n      },\n      {},\n    );\n\n    const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\n    let codeBookSectionIndex;\n    for (let s = 0; s < sectionNames.length; s++) {\n      const sectionName = sectionNames[s];\n      if (sectionName === 'codebook_centers') {\n        codeBookSectionIndex = s;\n      }\n    }\n\n    let currentStartLine = 0;\n    let lastSectionFound = false;\n    const sectionHeaders = [];\n    let sectionIndex = 0;\n    while (!lastSectionFound) {\n      let sectionHeader;\n      if (sectionIndex === codeBookSectionIndex) {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          codeBookEntriesToReadIdMap,\n          currentStartLine,\n        );\n      } else {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          fieldNameIdMap,\n          currentStartLine,\n        );\n      }\n      lastSectionFound = sectionHeader.endOfHeader;\n      currentStartLine = sectionHeader.headerEndLine + 1;\n      if (!lastSectionFound) {\n        sectionHeader.splatCount = sectionHeader.vertexCount;\n        sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\n      }\n      sectionHeaders.push(sectionHeader);\n      sectionIndex++;\n    }\n    return sectionHeaders;\n  }\n\n  decodeSectionHeadersFromHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    return this.decodeSectionHeadersFromHeaderLines(headerLines);\n  }\n\n  getSplatCountFromSectionHeaders(sectionHeaders) {\n    let splatCount = 0;\n    for (let sectionHeader of sectionHeaders) {\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        splatCount += sectionHeader.vertexCount;\n      }\n    }\n    return splatCount;\n  }\n\n  decodeHeaderFromHeaderText(headerText) {\n    const headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\n    const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\n    return {\n      headerSizeBytes: headerSizeBytes,\n      sectionHeaders: sectionHeaders,\n      splatCount: splatCount,\n    };\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderFromHeaderText(headerText);\n  }\n\n  findVertexData(plyBuffer, header, targetSection) {\n    let byteOffset = header.headerSizeBytes;\n    for (\n      let s = 0;\n      s < targetSection && s < header.sectionHeaders.length;\n      s++\n    ) {\n      const sectionHeader = header.sectionHeaders[s];\n      byteOffset += sectionHeader.dataSizeBytes;\n    }\n    return new DataView(\n      plyBuffer,\n      byteOffset,\n      header.sectionHeaders[targetSection].dataSizeBytes,\n    );\n  }\n\n  decodeCodeBook(codeBookData, sectionHeader) {\n    const rawVertex = [];\n    const codeBook = [];\n    for (let row = 0; row < sectionHeader.vertexCount; row++) {\n      PlyParserUtils.readVertex(\n        codeBookData,\n        sectionHeader,\n        row,\n        0,\n        CodeBookEntriesToReadIndexes,\n        rawVertex,\n      );\n      for (let index of CodeBookEntriesToReadIndexes) {\n        const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\n        let codeBookPage = codeBook[codeBookElementOffset];\n        if (!codeBookPage) {\n          codeBook[codeBookElementOffset] = codeBookPage = [];\n        }\n        codeBookPage.push(rawVertex[index]);\n      }\n    }\n    for (let page = 0; page < codeBook.length; page++) {\n      const codeBookPage = codeBook[page];\n      const SH_C0 = 0.28209479177387814;\n      for (let i = 0; i < codeBookPage.length; i++) {\n        const baseValue = fromHalfFloat(codeBookPage[i]);\n        if (page === CB_OPACITY) {\n          codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\n        } else if (page === CB_FEATURES_DC) {\n          codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\n        } else if (page === CB_SCALING) {\n          codeBookPage[i] = Math.exp(baseValue);\n        } else {\n          codeBookPage[i] = baseValue;\n        }\n      }\n    }\n    return codeBook;\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    codeBook,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        codeBook,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      codeBook,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV2PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[PLY_SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\n        newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\n        newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[PLY_F_DC_0] !== undefined) {\n        newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\n        newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\n        newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\n      } else if (rawSplat[PLY_RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[PLY_OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (\n        outSphericalHarmonicsDegree >= 1 &&\n        header.sphericalHarmonicsDegree >= 1\n      ) {\n        for (let i = 0; i < 9; i++) {\n          const codeBookPage = codeBook[CB_FEATURES_REST_0 + (i % 3)];\n          newSplat[OFFSET_FRC[i]] =\n            codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\n        }\n        if (\n          outSphericalHarmonicsDegree >= 2 &&\n          header.sphericalHarmonicsDegree >= 2\n        ) {\n          for (let i = 0; i < 15; i++) {\n            const codeBookPage = codeBook[CB_FEATURES_REST_3 + (i % 5)];\n            newSplat[OFFSET_FRC[9 + i]] =\n              codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\n          }\n        }\n      }\n\n      const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\n      const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\n      const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\n      const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\n      tempRotation.set(rot0, rot1, rot2, rot3);\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\n      newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\n      newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      FieldsToReadIndexes,\n      rawSplat,\n      false,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const splatArrays = [];\n    const header = this.decodeHeaderFromBuffer(\n      plyBuffer,\n      outSphericalHarmonicsDegree,\n    );\n    let codeBook;\n\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName === 'codebook_centers') {\n        const codeBookData = this.findVertexData(plyBuffer, header, s);\n        codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\n      }\n    }\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        const splatCount = sectionHeader.vertexCount;\n        const vertexData = this.findVertexData(plyBuffer, header, s);\n        const splatArray = this.decodeSectionSplatData(\n          vertexData,\n          splatCount,\n          sectionHeader,\n          codeBook,\n          outSphericalHarmonicsDegree,\n        );\n        splatArrays.push(splatArray);\n      }\n    }\n\n    const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let splatArray of splatArrays) {\n      for (let splat of splatArray.splats) {\n        unified.addSplat(splat);\n      }\n    }\n\n    return unified;\n  }\n}\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { PlyFormat } from './PlyFormat.js';\n\nexport class PlyParser {\n  static parseToUncompressedSplatArray(\n    plyBuffer,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    const plyFormat =\n      PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\n\n    if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n      return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(\n        plyBuffer,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV1) {\n      return new INRIAV1PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV2) {\n      return new INRIAV2PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n}\n","export class DirectLoadError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","export const InternalLoadType = {\n  DirectToSplatBuffer: 0,\n  DirectToSplatArray: 1,\n  DownloadBeforeProcessing: 2,\n};\n","export const LoaderStatus = {\n  Downloading: 0,\n  Processing: 1,\n  Done: 2,\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n  constructor(\n    sectionCount,\n    sectionFilters,\n    groupingParameters,\n    partitionGenerator,\n  ) {\n    this.sectionCount = sectionCount;\n    this.sectionFilters = sectionFilters;\n    this.groupingParameters = groupingParameters;\n    this.partitionGenerator = partitionGenerator;\n  }\n\n  partitionUncompressedSplatArray(splatArray) {\n    let groupingParameters;\n    let sectionCount;\n    let sectionFilters;\n    if (this.partitionGenerator) {\n      const results = this.partitionGenerator(splatArray);\n      groupingParameters = results.groupingParameters;\n      sectionCount = results.sectionCount;\n      sectionFilters = results.sectionFilters;\n    } else {\n      groupingParameters = this.groupingParameters;\n      sectionCount = this.sectionCount;\n      sectionFilters = this.sectionFilters;\n    }\n\n    const newArrays = [];\n    for (let s = 0; s < sectionCount; s++) {\n      const sectionSplats = new UncompressedSplatArray(\n        splatArray.sphericalHarmonicsDegree,\n      );\n      const sectionFilter = sectionFilters[s];\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        if (sectionFilter(i)) {\n          sectionSplats.addSplat(splatArray.splats[i]);\n        }\n      }\n      newArrays.push(sectionSplats);\n    }\n    return {\n      splatArrays: newArrays,\n      parameters: groupingParameters,\n    };\n  }\n\n  static getStandardPartitioner(\n    partitionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const partitionGenerator = (splatArray) => {\n      const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n      const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n      const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n      if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n      const center = new THREE.Vector3();\n      const clampDistance = 0.5;\n      const clampPoint = (point) => {\n        point.x = Math.floor(point.x / clampDistance) * clampDistance;\n        point.y = Math.floor(point.y / clampDistance) * clampDistance;\n        point.z = Math.floor(point.z / clampDistance) * clampDistance;\n      };\n      splatArray.splats.forEach((splat) => {\n        center\n          .set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z])\n          .sub(sceneCenter);\n        clampPoint(center);\n        splat.centerDist = center.lengthSq();\n      });\n      splatArray.splats.sort((a, b) => {\n        let centerADist = a.centerDist;\n        let centerBDist = b.centerDist;\n        if (centerADist > centerBDist) return 1;\n        else return -1;\n      });\n\n      const sectionFilters = [];\n      const groupingParameters = [];\n      partitionSize = Math.min(splatArray.splatCount, partitionSize);\n      const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n      let currentStartSplat = 0;\n      for (let i = 0; i < patitionCount; i++) {\n        let startSplat = currentStartSplat;\n        sectionFilters.push((splatIndex) => {\n          return (\n            splatIndex >= startSplat && splatIndex < startSplat + partitionSize\n          );\n        });\n        groupingParameters.push({\n          blocksSize: blockSize,\n          bucketSize: bucketSize,\n        });\n        currentStartSplat += partitionSize;\n      }\n      return {\n        sectionCount: sectionFilters.length,\n        sectionFilters,\n        groupingParameters,\n      };\n    };\n    return new SplatPartitioner(\n      undefined,\n      undefined,\n      undefined,\n      partitionGenerator,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n  constructor(\n    splatPartitioner,\n    alphaRemovalThreshold,\n    compressionLevel,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    this.splatPartitioner = splatPartitioner;\n    this.alphaRemovalThreshold = alphaRemovalThreshold;\n    this.compressionLevel = compressionLevel;\n    this.sectionSize = sectionSize;\n    this.sceneCenter = sceneCenter ?\n      new THREE.Vector3().copy(sceneCenter) :\n      undefined;\n    this.blockSize = blockSize;\n    this.bucketSize = bucketSize;\n  }\n\n  generateFromUncompressedSplatArray(splatArray) {\n    const partitionResults =\n      this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      partitionResults.splatArrays,\n      this.alphaRemovalThreshold,\n      this.compressionLevel,\n      this.sceneCenter,\n      this.blockSize,\n      this.bucketSize,\n      partitionResults.parameters,\n    );\n  }\n\n  static getStandardGenerator(\n    alphaRemovalThreshold = 1,\n    compressionLevel = 1,\n    sectionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const splatPartitioner = SplatPartitioner.getStandardPartitioner(\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return new SplatBufferGenerator(\n      splatPartitioner,\n      alphaRemovalThreshold,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { PlyFormat } from './PlyFormat.js';\nimport { PlyParser } from './PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n  let inBytes = 0;\n  for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n  if (!buffer || buffer.byteLength < inBytes) {\n    buffer = new ArrayBuffer(inBytes);\n  }\n\n  let offset = 0;\n  for (let chunk of chunks) {\n    new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n    offset += chunk.sizeBytes;\n  }\n\n  return buffer;\n}\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class PlyLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let compressedPlyHeaderChunksBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let headerLoaded = false;\n    let readyToLoadSplatData = false;\n    let compressed = false;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesParsed = 0;\n    let numBytesDownloaded = 0;\n    let headerText = '';\n    let header = null;\n    let chunks = [];\n\n    let standardLoadUncompressedSplatArray;\n\n    const textDecoder = new TextDecoder();\n    const inriaV1PlyParser = new INRIAV1PlyParser();\n\n    const localOnProgress = (percent, percentLabel, chunkData) => {\n      const loadComplete = percent >= 100;\n\n      if (chunkData) {\n        chunks.push({\n          data: chunkData,\n          sizeBytes: chunkData.byteLength,\n          startBytes: numBytesDownloaded,\n          endBytes: numBytesDownloaded + chunkData.byteLength,\n        });\n        numBytesDownloaded += chunkData.byteLength;\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n      } else {\n        if (!headerLoaded) {\n          headerText += textDecoder.decode(chunkData);\n          if (PlyParserUtils.checkTextForEndHeader(headerText)) {\n            const plyFormat =\n              PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\n            if (plyFormat === PlyFormat.INRIAV1) {\n              header = inriaV1PlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.splatCount;\n              readyToLoadSplatData = true;\n              compressed = false;\n            } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n              header =\n                PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.vertexElement.count;\n              compressed = true;\n            } else {\n              if (loadDirectoToSplatBuffer) {\n                throw new DirectLoadError(\n                  'PlyLoader.loadFromURL() -> Selected Ply format cannot be directly loaded.',\n                );\n              } else {\n                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n                return;\n              }\n            }\n            outSphericalHarmonicsDegree = Math.min(\n              outSphericalHarmonicsDegree,\n              header.sphericalHarmonicsDegree,\n            );\n\n            const shDescriptor =\n              SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                outSphericalHarmonicsDegree\n              ];\n            const splatBufferSizeBytes =\n              splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n              SplatBuffer.writeHeaderToBuffer(\n                {\n                  versionMajor: SplatBuffer.CurrentMajorVersion,\n                  versionMinor: SplatBuffer.CurrentMinorVersion,\n                  maxSectionCount: sectionCount,\n                  sectionCount: sectionCount,\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  compressionLevel: 0,\n                  sceneCenter: new THREE.Vector3(),\n                },\n                directLoadBufferOut,\n              );\n            } else {\n              standardLoadUncompressedSplatArray = new UncompressedSplatArray(\n                outSphericalHarmonicsDegree,\n              );\n            }\n\n            numBytesStreamed = header.headerSizeBytes;\n            numBytesParsed = header.headerSizeBytes;\n            headerLoaded = true;\n          }\n        } else if (compressed && !readyToLoadSplatData) {\n          const sizeRequiredForHeaderAndChunks =\n            header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n          compressedPlyHeaderChunksBuffer = storeChunksInBuffer(\n            chunks,\n            compressedPlyHeaderChunksBuffer,\n          );\n          if (\n            compressedPlyHeaderChunksBuffer.byteLength >=\n            sizeRequiredForHeaderAndChunks\n          ) {\n            PlayCanvasCompressedPlyParser.readElementData(\n              header.chunkElement,\n              compressedPlyHeaderChunksBuffer,\n              header.headerSizeBytes,\n            );\n            numBytesStreamed = sizeRequiredForHeaderAndChunks;\n            numBytesParsed = sizeRequiredForHeaderAndChunks;\n            readyToLoadSplatData = true;\n          }\n        }\n\n        if (headerLoaded && readyToLoadSplatData) {\n          if (chunks.length > 0) {\n            directLoadBufferIn = storeChunksInBuffer(\n              chunks,\n              directLoadBufferIn,\n            );\n\n            const bytesLoadedSinceLastStreamedSection =\n              numBytesDownloaded - numBytesStreamed;\n            if (\n              bytesLoadedSinceLastStreamedSection >\n                directLoadSectionSizeBytes ||\n              loadComplete\n            ) {\n              const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n              const addedSplatCount = Math.floor(\n                numBytesToProcess / header.bytesPerSplat,\n              );\n              const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n              const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n              const newSplatCount = splatCount + addedSplatCount;\n              const parsedDataViewOffset =\n                numBytesParsed - chunks[0].startBytes;\n              const dataToParse = new DataView(\n                directLoadBufferIn,\n                parsedDataViewOffset,\n                numBytesToParse,\n              );\n\n              const shDescriptor =\n                SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                  outSphericalHarmonicsDegree\n                ];\n              const outOffset =\n                splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatBufferSection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              } else {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatArraySection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              }\n\n              splatCount = newSplatCount;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (!directLoadSplatBuffer) {\n                  SplatBuffer.writeSectionHeaderToBuffer(\n                    {\n                      maxSplatCount: maxSplatCount,\n                      splatCount: splatCount,\n                      bucketSize: 0,\n                      bucketCount: 0,\n                      bucketBlockSize: 0,\n                      compressionScaleRange: 0,\n                      storageSizeBytes: 0,\n                      fullBucketCount: 0,\n                      partiallyFilledBucketCount: 0,\n                      sphericalHarmonicsDegree: outSphericalHarmonicsDegree,\n                    },\n                    0,\n                    directLoadBufferOut,\n                    SplatBuffer.HeaderSizeBytes,\n                  );\n                  directLoadSplatBuffer = new SplatBuffer(\n                    directLoadBufferOut,\n                    false,\n                  );\n                }\n                directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                if (onProgressiveLoadSectionProgress) {\n                  onProgressiveLoadSectionProgress(\n                    directLoadSplatBuffer,\n                    loadComplete,\n                  );\n                }\n              }\n\n              numBytesStreamed += directLoadSectionSizeBytes;\n              numBytesParsed += numBytesToParse;\n\n              if (numBytesLeftOver === 0) {\n                chunks = [];\n              } else {\n                let keepChunks = [];\n                let keepSize = 0;\n                for (let i = chunks.length - 1; i >= 0; i--) {\n                  const chunk = chunks[i];\n                  keepSize += chunk.sizeBytes;\n                  keepChunks.unshift(chunk);\n                  if (keepSize >= numBytesLeftOver) break;\n                }\n                chunks = keepChunks;\n              }\n            }\n          }\n\n          if (loadComplete) {\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              loadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              loadPromise.resolve(standardLoadUncompressedSplatArray);\n            }\n          }\n        }\n      }\n\n      if (onProgress) {\n        onProgress(percent, percentLabel, LoaderStatus.Downloading);\n      }\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          const chunkDatas = chunks.map((chunk) => chunk.data);\n          return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\n            return PlyLoader.loadFromFileData(\n              plyFileData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              outSphericalHarmonicsDegree,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    plyFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      return PlyParser.parseToUncompressedSplatArray(\n        plyFileData,\n        outSphericalHarmonicsDegree,\n      );\n    }).then((splatArray) => {\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n  static RowSizeBytes = 32;\n  static CenterSizeBytes = 12;\n  static ScaleSizeBytes = 12;\n  static RotationSizeBytes = 4;\n  static ColorSizeBytes = 4;\n\n  static parseToUncompressedSplatBufferSection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    toBuffer,\n    toOffset,\n  ) {\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation =\n      SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      const outBase = i * outBytesPerSplat + toOffset;\n      const outCenter = new Float32Array(toBuffer, outBase, 3);\n      const outScale = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter,\n        3,\n      );\n      const outRotation = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale,\n        4,\n      );\n      const outColor = new Uint8Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation,\n        4,\n      );\n\n      outCenter[0] = inCenter[0];\n      outCenter[1] = inCenter[1];\n      outCenter[2] = inCenter[2];\n\n      outScale[0] = inScale[0];\n      outScale[1] = inScale[1];\n      outScale[2] = inScale[2];\n\n      outRotation[0] = quat.w;\n      outRotation[1] = quat.x;\n      outRotation[2] = quat.y;\n      outRotation[3] = quat.z;\n\n      outColor[0] = inColor[0];\n      outColor[1] = inColor[1];\n      outColor[2] = inColor[2];\n      outColor[3] = inColor[3];\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    splatArray,\n  ) {\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n  }\n\n  static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n    // Standard .splat row layout:\n    // XYZ - Position (Float32)\n    // XYZ - Scale (Float32)\n    // RGBA - colors (uint8)\n    // IJKL - quaternion/rot (uint8)\n\n    const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n    const splatArray = new UncompressedSplatArray();\n\n    for (let i = 0; i < splatCount; i++) {\n      const inBase = i * SplatParser.RowSizeBytes;\n      const inCenter = new Float32Array(inBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        inBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.ColorSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatParser } from './SplatParser.js';\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class SplatLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let standardLoadUncompressedSplatArray;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesLoaded = 0;\n    let chunks = [];\n\n    const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n      const loadComplete = percent >= 100;\n\n      if (chunk) {\n        chunks.push(chunk);\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n        return;\n      }\n\n      if (!fileSize) {\n        if (loadDirectoToSplatBuffer) {\n          throw new DirectLoadError(\n            'Cannon directly load .splat because no file size info is available.',\n          );\n        } else {\n          internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n          return;\n        }\n      }\n\n      if (!directLoadBufferIn) {\n        maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n        directLoadBufferIn = new ArrayBuffer(fileSize);\n        const bytesPerSplat =\n          SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n            .BytesPerSplat;\n        const splatBufferSizeBytes =\n          splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n          SplatBuffer.writeHeaderToBuffer(\n            {\n              versionMajor: SplatBuffer.CurrentMajorVersion,\n              versionMinor: SplatBuffer.CurrentMinorVersion,\n              maxSectionCount: sectionCount,\n              sectionCount: sectionCount,\n              maxSplatCount: maxSplatCount,\n              splatCount: splatCount,\n              compressionLevel: 0,\n              sceneCenter: new THREE.Vector3(),\n            },\n            directLoadBufferOut,\n          );\n        } else {\n          standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\n        }\n      }\n\n      if (chunk) {\n        new Uint8Array(\n          directLoadBufferIn,\n          numBytesLoaded,\n          chunk.byteLength,\n        ).set(new Uint8Array(chunk));\n        numBytesLoaded += chunk.byteLength;\n\n        const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n        if (\n          bytesLoadedSinceLastSection > directLoadSectionSizeBytes ||\n          loadComplete\n        ) {\n          const bytesToUpdate = loadComplete ?\n            bytesLoadedSinceLastSection :\n            directLoadSectionSizeBytes;\n          const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n          const newSplatCount = splatCount + addedSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            SplatParser.parseToUncompressedSplatBufferSection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              directLoadBufferOut,\n              splatDataOffsetBytes,\n            );\n          } else {\n            SplatParser.parseToUncompressedSplatArraySection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              standardLoadUncompressedSplatArray,\n            );\n          }\n\n          splatCount = newSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            if (!directLoadSplatBuffer) {\n              SplatBuffer.writeSectionHeaderToBuffer(\n                {\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  bucketSize: 0,\n                  bucketCount: 0,\n                  bucketBlockSize: 0,\n                  compressionScaleRange: 0,\n                  storageSizeBytes: 0,\n                  fullBucketCount: 0,\n                  partiallyFilledBucketCount: 0,\n                },\n                0,\n                directLoadBufferOut,\n                SplatBuffer.HeaderSizeBytes,\n              );\n              directLoadSplatBuffer = new SplatBuffer(\n                directLoadBufferOut,\n                false,\n              );\n            }\n            directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n            if (onProgressiveLoadSectionProgress) {\n              onProgressiveLoadSectionProgress(\n                directLoadSplatBuffer,\n                loadComplete,\n              );\n            }\n          }\n\n          numBytesStreamed += directLoadSectionSizeBytes;\n        }\n      }\n\n      if (loadComplete) {\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          loadPromise.resolve(directLoadSplatBuffer);\n        } else {\n          loadPromise.resolve(standardLoadUncompressedSplatArray);\n        }\n      }\n\n      if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          return new Blob(chunks).arrayBuffer().then((splatData) => {\n            return SplatLoader.loadFromFileData(\n              splatData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    splatFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      const splatArray =\n        SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\n\nexport class KSplatLoader {\n  static checkVersion(buffer) {\n    const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n    const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n    const header = SplatBuffer.parseHeader(buffer);\n    if (\n      (header.versionMajor === minVersionMajor &&\n        header.versionMinor >= minVersionMinor) ||\n      header.versionMajor > minVersionMajor\n    ) {\n      return true;\n    } else {\n      throw new Error(\n        `KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n          `Minimum required: v${minVersionMajor}.${minVersionMinor}`,\n      );\n    }\n  }\n\n  static loadFromURL(\n    fileName,\n    externalOnProgress,\n    loadDirectoToSplatBuffer,\n    onSectionBuilt,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let directLoadBuffer;\n    let directLoadSplatBuffer;\n\n    let headerBuffer;\n    let header;\n    let headerLoaded = false;\n    let headerLoading = false;\n\n    let sectionHeadersBuffer;\n    let sectionHeaders = [];\n    let sectionHeadersLoaded = false;\n    let sectionHeadersLoading = false;\n\n    let numBytesLoaded = 0;\n    let numBytesProgressivelyLoaded = 0;\n    let totalBytesToDownload = 0;\n\n    let downloadComplete = false;\n    let loadComplete = false;\n    let loadSectionQueued = false;\n\n    let chunks = [];\n\n    const directLoadPromise = nativePromiseWithExtractedComponents();\n\n    const checkAndLoadHeader = () => {\n      if (\n        !headerLoaded &&\n        !headerLoading &&\n        numBytesLoaded >= SplatBuffer.HeaderSizeBytes\n      ) {\n        headerLoading = true;\n        const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n        headerAssemblyPromise.then((bufferData) => {\n          headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n          new Uint8Array(headerBuffer).set(\n            new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes),\n          );\n          KSplatLoader.checkVersion(headerBuffer);\n          headerLoading = false;\n          headerLoaded = true;\n          header = SplatBuffer.parseHeader(headerBuffer);\n          window.setTimeout(() => {\n            checkAndLoadSectionHeaders();\n          }, 1);\n        });\n      }\n    };\n\n    let queuedCheckAndLoadSectionsCount = 0;\n    const queueCheckAndLoadSections = () => {\n      if (queuedCheckAndLoadSectionsCount === 0) {\n        queuedCheckAndLoadSectionsCount++;\n        window.setTimeout(() => {\n          queuedCheckAndLoadSectionsCount--;\n          checkAndLoadSections();\n        }, 1);\n      }\n    };\n\n    const checkAndLoadSectionHeaders = () => {\n      const performLoad = () => {\n        sectionHeadersLoading = true;\n        const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n        sectionHeadersAssemblyPromise.then((bufferData) => {\n          sectionHeadersLoading = false;\n          sectionHeadersLoaded = true;\n          sectionHeadersBuffer = new ArrayBuffer(\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n          );\n          new Uint8Array(sectionHeadersBuffer).set(\n            new Uint8Array(\n              bufferData,\n              SplatBuffer.HeaderSizeBytes,\n              header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n            ),\n          );\n          sectionHeaders = SplatBuffer.parseSectionHeaders(\n            header,\n            sectionHeadersBuffer,\n            0,\n            false,\n          );\n          let totalSectionStorageStorageByes = 0;\n          for (let i = 0; i < header.maxSectionCount; i++) {\n            totalSectionStorageStorageByes +=\n              sectionHeaders[i].storageSizeBytes;\n          }\n          const totalStorageSizeBytes =\n            SplatBuffer.HeaderSizeBytes +\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes +\n            totalSectionStorageStorageByes;\n          if (!directLoadBuffer) {\n            directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\n            let offset = 0;\n            for (let i = 0; i < chunks.length; i++) {\n              const chunk = chunks[i];\n              new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(\n                new Uint8Array(chunk),\n              );\n              offset += chunk.byteLength;\n            }\n          }\n\n          totalBytesToDownload =\n            SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n          for (\n            let i = 0;\n            i <= sectionHeaders.length && i < header.maxSectionCount;\n            i++\n          ) {\n            totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n          }\n\n          queueCheckAndLoadSections();\n        });\n      };\n\n      if (\n        !sectionHeadersLoading &&\n        !sectionHeadersLoaded &&\n        headerLoaded &&\n        numBytesLoaded >=\n          SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount\n      ) {\n        performLoad();\n      }\n    };\n\n    const checkAndLoadSections = () => {\n      if (loadSectionQueued) return;\n      loadSectionQueued = true;\n      const checkAndLoadFunc = () => {\n        loadSectionQueued = false;\n        if (sectionHeadersLoaded) {\n          if (loadComplete) return;\n\n          downloadComplete = numBytesLoaded >= totalBytesToDownload;\n\n          let bytesLoadedSinceLastSection =\n            numBytesLoaded - numBytesProgressivelyLoaded;\n          if (\n            bytesLoadedSinceLastSection >\n              Constants.ProgressiveLoadSectionSize ||\n            downloadComplete\n          ) {\n            numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\n            loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\n\n            if (!directLoadSplatBuffer) {\n              directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\n            }\n\n            const baseDataOffset =\n              SplatBuffer.HeaderSizeBytes +\n              SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n            let sectionBase = 0;\n            let reachedSections = 0;\n            let loadedSplatCount = 0;\n            for (let i = 0; i < header.maxSectionCount; i++) {\n              const sectionHeader = sectionHeaders[i];\n              const bucketsDataOffset =\n                sectionBase +\n                sectionHeader.partiallyFilledBucketCount * 4 +\n                sectionHeader.bucketStorageSizeBytes *\n                  sectionHeader.bucketCount;\n              const bytesRequiredToReachSectionSplatData =\n                baseDataOffset + bucketsDataOffset;\n              if (\n                numBytesProgressivelyLoaded >=\n                bytesRequiredToReachSectionSplatData\n              ) {\n                reachedSections++;\n                const bytesPastSSectionSplatDataStart =\n                  numBytesProgressivelyLoaded -\n                  bytesRequiredToReachSectionSplatData;\n                const baseDescriptor =\n                  SplatBuffer.CompressionLevels[header.compressionLevel];\n                const shDesc =\n                  baseDescriptor.SphericalHarmonicsDegrees[\n                    sectionHeader.sphericalHarmonicsDegree\n                  ];\n                const bytesPerSplat = shDesc.BytesPerSplat;\n                let loadedSplatsForSection = Math.floor(\n                  bytesPastSSectionSplatDataStart / bytesPerSplat,\n                );\n                loadedSplatsForSection = Math.min(\n                  loadedSplatsForSection,\n                  sectionHeader.maxSplatCount,\n                );\n                loadedSplatCount += loadedSplatsForSection;\n                directLoadSplatBuffer.updateLoadedCounts(\n                  reachedSections,\n                  loadedSplatCount,\n                );\n                directLoadSplatBuffer.updateSectionLoadedCounts(\n                  i,\n                  loadedSplatsForSection,\n                );\n              } else {\n                break;\n              }\n              sectionBase += sectionHeader.storageSizeBytes;\n            }\n\n            onSectionBuilt(directLoadSplatBuffer, loadComplete);\n\n            const percentComplete =\n              (numBytesProgressivelyLoaded / totalBytesToDownload) * 100;\n            const percentLabel = percentComplete.toFixed(2) + '%';\n\n            if (externalOnProgress) {\n              externalOnProgress(\n                percentComplete,\n                percentLabel,\n                LoaderStatus.Downloading,\n              );\n            }\n\n            if (loadComplete) {\n              directLoadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              checkAndLoadSections();\n            }\n          }\n        }\n      };\n      window.setTimeout(\n        checkAndLoadFunc,\n        Constants.ProgressiveLoadSectionDelayDuration,\n      );\n    };\n\n    const localOnProgress = (percent, percentStr, chunk) => {\n      if (chunk) {\n        chunks.push(chunk);\n        if (directLoadBuffer) {\n          new Uint8Array(\n            directLoadBuffer,\n            numBytesLoaded,\n            chunk.byteLength,\n          ).set(new Uint8Array(chunk));\n        }\n        numBytesLoaded += chunk.byteLength;\n      }\n      if (loadDirectoToSplatBuffer) {\n        checkAndLoadHeader();\n        checkAndLoadSectionHeaders();\n        checkAndLoadSections();\n      } else {\n        if (externalOnProgress) {\n          externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\n        }\n      }\n    };\n\n    return fetchWithProgress(\n      fileName,\n      localOnProgress,\n      !loadDirectoToSplatBuffer,\n    ).then((fullBuffer) => {\n      if (externalOnProgress) {\n        externalOnProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const loadPromise = loadDirectoToSplatBuffer ?\n        directLoadPromise.promise :\n        KSplatLoader.loadFromFileData(fullBuffer);\n      return loadPromise.then((splatBuffer) => {\n        if (externalOnProgress) {\n          externalOnProgress(100, '100%', LoaderStatus.Done);\n        }\n        return splatBuffer;\n      });\n    });\n  }\n\n  static loadFromFileData(fileData) {\n    return delayedExecute(() => {\n      KSplatLoader.checkVersion(fileData);\n      return new SplatBuffer(fileData);\n    });\n  }\n\n  static downloadFile = (function() {\n    let downLoadLink;\n\n    return function(splatBuffer, fileName) {\n      const blob = new Blob([splatBuffer.bufferData], {\n        type: 'application/octet-stream',\n      });\n\n      if (!downLoadLink) {\n        downLoadLink = document.createElement('a');\n        document.body.appendChild(downLoadLink);\n      }\n      downLoadLink.download = fileName;\n      downLoadLink.href = URL.createObjectURL(blob);\n      downLoadLink.click();\n    };\n  })();\n}\n","export const SceneFormat = {\n  Splat: 0,\n  KSplat: 1,\n  Ply: 2,\n  GLTF: 3,\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n  if (path.endsWith('.ply')) return SceneFormat.Ply;\n  else if (path.endsWith('.splat')) return SceneFormat.Splat;\n  else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n  else if (path.endsWith('.gltf')) return SceneFormat.GLTF;\n  return null;\n};\n","export const LogLevel = {\n  None: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Debug: 4,\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n  EventDispatcher,\n  MOUSE,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Plane,\n  Ray,\n  MathUtils,\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);\n\nclass OrbitControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n\n    this.object = object;\n    this.domElement = domElement;\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // \"target\" sets the location of focus, where the object orbits around\n    this.target = new Vector3();\n\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    // How far you can zoom in and out ( OrthographicCamera only )\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    this.enableDamping = false;\n    this.dampingFactor = 0.05;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    this.enableZoom = true;\n    this.zoomSpeed = 1.0;\n\n    // Set to false to disable rotating\n    this.enableRotate = true;\n    this.rotateSpeed = 1.0;\n\n    // Set to false to disable panning\n    this.enablePan = true;\n    this.panSpeed = 1.0;\n    this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    this.zoomToCursor = false;\n\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n    // The four arrow keys\n    this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n    // Mouse buttons\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN,\n    };\n\n    // Touch fingers\n    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n    // for reset\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n\n    // the target DOM element for key events\n    this._domElementKeyEvents = null;\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = function() {\n      return spherical.phi;\n    };\n\n    this.getAzimuthalAngle = function() {\n      return spherical.theta;\n    };\n\n    this.getDistance = function() {\n      return this.object.position.distanceTo(this.target);\n    };\n\n    this.listenToKeyEvents = function(domElement) {\n      domElement.addEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = domElement;\n    };\n\n    this.stopListenToKeyEvents = function() {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = null;\n    };\n\n    this.saveState = function() {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n\n    this.reset = function() {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      this.clearDampedRotation();\n      this.clearDampedPan();\n\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(_changeEvent);\n\n      scope.update();\n\n      state = STATE.NONE;\n    };\n\n    this.clearDampedRotation = function() {\n      sphericalDelta.theta = 0.0;\n      sphericalDelta.phi = 0.0;\n    };\n\n    this.clearDampedPan = function() {\n      panOffset.set(0, 0, 0);\n    };\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = (function() {\n      const offset = new Vector3();\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(\n        object.up,\n        new Vector3(0, 1, 0),\n      );\n      const quatInverse = quat.clone().invert();\n\n      const lastPosition = new Vector3();\n      const lastQuaternion = new Quaternion();\n      const lastTargetPosition = new Vector3();\n\n      const twoPI = 2 * Math.PI;\n\n      return function update() {\n        quat.setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n        quatInverse.copy(quat).invert();\n\n        const position = scope.object.position;\n\n        offset.copy(position).sub(scope.target);\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat);\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset);\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle;\n        let max = scope.maxAzimuthAngle;\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI;\n          else if (min > Math.PI) min -= twoPI;\n\n          if (max < -Math.PI) max += twoPI;\n          else if (max > Math.PI) max -= twoPI;\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ?\n                Math.max(min, spherical.theta) :\n                Math.min(max, spherical.theta);\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(\n          scope.minPolarAngle,\n          Math.min(scope.maxPolarAngle, spherical.phi),\n        );\n\n        spherical.makeSafe();\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (\n          (scope.zoomToCursor && performCursorZoom) ||\n          scope.object.isOrthographicCamera\n        ) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n\n        offset.setFromSpherical(spherical);\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse);\n\n        position.copy(scope.target).add(offset);\n\n        scope.object.lookAt(scope.target);\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n\n          panOffset.set(0, 0, 0);\n        }\n\n        // adjust camera position\n        let zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null;\n          if (scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n\n            const radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n\n            scope.object.zoom = Math.max(\n              scope.minZoom,\n              Math.min(scope.maxZoom, scope.object.zoom / scale),\n            );\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n\n            newRadius = offset.length();\n          } else {\n            console.warn(\n              'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.',\n            );\n            scope.zoomToCursor = false;\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (this.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position);\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position);\n              _ray.direction\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix);\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(\n                  scope.object.up,\n                  scope.target,\n                );\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object.isOrthographicCamera) {\n          scope.object.zoom = Math.max(\n            scope.minZoom,\n            Math.min(scope.maxZoom, scope.object.zoom / scale),\n          );\n          scope.object.updateProjectionMatrix();\n          zoomChanged = true;\n        }\n\n        scale = 1;\n        performCursorZoom = false;\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS ||\n          lastTargetPosition.distanceToSquared(scope.target) > 0\n        ) {\n          scope.dispatchEvent(_changeEvent);\n\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          lastTargetPosition.copy(scope.target);\n\n          zoomChanged = false;\n\n          return true;\n        }\n\n        return false;\n      };\n    })();\n\n    this.dispose = function() {\n      scope.domElement.removeEventListener('contextmenu', onContextMenu);\n\n      scope.domElement.removeEventListener('pointerdown', onPointerDown);\n      scope.domElement.removeEventListener('pointercancel', onPointerUp);\n      scope.domElement.removeEventListener('wheel', onMouseWheel);\n\n      scope.domElement.removeEventListener('pointermove', onPointerMove);\n      scope.domElement.removeEventListener('pointerup', onPointerUp);\n\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n        scope._domElementKeyEvents = null;\n      }\n    };\n\n    //\n    // internals\n    //\n\n    const scope = this;\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    };\n\n    let state = STATE.NONE;\n\n    const EPS = 0.000001;\n\n    // current position in spherical coordinates\n    const spherical = new Spherical();\n    const sphericalDelta = new Spherical();\n\n    let scale = 1;\n    const panOffset = new Vector3();\n\n    const rotateStart = new Vector2();\n    const rotateEnd = new Vector2();\n    const rotateDelta = new Vector2();\n\n    const panStart = new Vector2();\n    const panEnd = new Vector2();\n    const panDelta = new Vector2();\n\n    const dollyStart = new Vector2();\n    const dollyEnd = new Vector2();\n    const dollyDelta = new Vector2();\n\n    const dollyDirection = new Vector3();\n    const mouse = new Vector2();\n    let performCursorZoom = false;\n\n    const pointers = [];\n    const pointerPositions = {};\n\n    function getAutoRotationAngle() {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\n    }\n\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n\n    function rotateLeft(angle) {\n      sphericalDelta.theta -= angle;\n    }\n\n    function rotateUp(angle) {\n      sphericalDelta.phi -= angle;\n    }\n\n    const panLeft = (function() {\n      const v = new Vector3();\n\n      return function panLeft(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        v.multiplyScalar(-distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    const panUp = (function() {\n      const v = new Vector3();\n\n      return function panUp(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n\n        v.multiplyScalar(distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (function() {\n      const offset = new Vector3();\n\n      return function pan(deltaX, deltaY) {\n        const element = scope.domElement;\n\n        if (scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          let targetDistance = offset.length();\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(\n            ((scope.object.fov / 2) * Math.PI) / 180.0,\n          );\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft(\n            (2 * deltaX * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n          panUp(\n            (2 * deltaY * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n        } else if (scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) /\n              scope.object.zoom /\n              element.clientWidth,\n            scope.object.matrix,\n          );\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) /\n              scope.object.zoom /\n              element.clientHeight,\n            scope.object.matrix,\n          );\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn(\n            'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.',\n          );\n          scope.enablePan = false;\n        }\n      };\n    })();\n\n    function dollyOut(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale /= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function dollyIn(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale *= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor) {\n        return;\n      }\n\n      performCursorZoom = true;\n\n      const rect = scope.domElement.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const w = rect.width;\n      const h = rect.height;\n\n      mouse.x = (x / w) * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n\n      dollyDirection\n        .set(mouse.x, mouse.y, 1)\n        .unproject(object)\n        .sub(object.position)\n        .normalize();\n    }\n\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n\n      scope.update();\n    }\n\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n\n      scope.update();\n    }\n\n    function handleKeyDown(event) {\n      let needsUpdate = false;\n\n      switch (event.code) {\n        case scope.keys.UP:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.BOTTOM:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, -scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.LEFT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.RIGHT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(-scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n\n        scope.update();\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length === 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        rotateStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length === 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        panStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX;\n      const dy = pointers[0].pageY - pointers[1].pageY;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyStart.set(0, distance);\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enablePan) handleTouchStartPan();\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enableRotate) handleTouchStartRotate();\n    }\n\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        rotateEnd.set(x, y);\n      }\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n    }\n\n    function handleTouchMovePan(event) {\n      if (pointers.length === 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        panEnd.set(x, y);\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n    }\n\n    function handleTouchMoveDolly(event) {\n      const position = getSecondPointerPosition(event);\n\n      const dx = event.pageX - position.x;\n      const dy = event.pageY - position.y;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyEnd.set(0, distance);\n\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n\n      dollyOut(dollyDelta.y);\n\n      dollyStart.copy(dollyEnd);\n    }\n\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enablePan) handleTouchMovePan(event);\n    }\n\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event) {\n      if (scope.enabled === false) return;\n\n      if (pointers.length === 0) {\n        scope.domElement.setPointerCapture(event.pointerId);\n\n        scope.domElement.addEventListener('pointermove', onPointerMove);\n        scope.domElement.addEventListener('pointerup', onPointerUp);\n      }\n\n      //\n\n      addPointer(event);\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n\n    function onPointerUp(event) {\n      removePointer(event);\n\n      if (pointers.length === 0) {\n        scope.domElement.releasePointerCapture(event.pointerId);\n\n        scope.domElement.removeEventListener('pointermove', onPointerMove);\n        scope.domElement.removeEventListener('pointerup', onPointerUp);\n      }\n\n      scope.dispatchEvent(_endEvent);\n\n      state = STATE.NONE;\n    }\n\n    function onMouseDown(event) {\n      let mouseAction;\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n\n        default:\n          mouseAction = -1;\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseDownDolly(event);\n\n          state = STATE.DOLLY;\n\n          break;\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          }\n\n          break;\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onMouseMove(event) {\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleMouseMoveRotate(event);\n\n          break;\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseMoveDolly(event);\n\n          break;\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return;\n\n          handleMouseMovePan(event);\n\n          break;\n      }\n    }\n\n    function onMouseWheel(event) {\n      if (\n        scope.enabled === false ||\n        scope.enableZoom === false ||\n        state !== STATE.NONE\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n\n      scope.dispatchEvent(_startEvent);\n\n      handleMouseWheel(event);\n\n      scope.dispatchEvent(_endEvent);\n    }\n\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false) return;\n\n      handleKeyDown(event);\n    }\n\n    function onTouchStart(event) {\n      trackPointer(event);\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return;\n\n              handleTouchStartRotate();\n\n              state = STATE.TOUCH_ROTATE;\n\n              break;\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return;\n\n              handleTouchStartPan();\n\n              state = STATE.TOUCH_PAN;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) {\n                return;\n              }\n\n              handleTouchStartDollyPan();\n\n              state = STATE.TOUCH_DOLLY_PAN;\n\n              break;\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) {\n                return;\n              }\n\n              handleTouchStartDollyRotate();\n\n              state = STATE.TOUCH_DOLLY_ROTATE;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onTouchMove(event) {\n      trackPointer(event);\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleTouchMoveRotate(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return;\n\n          handleTouchMovePan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return;\n\n          handleTouchMoveDollyPan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) {\n            return;\n          }\n\n          handleTouchMoveDollyRotate(event);\n\n          scope.update();\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n    }\n\n    function onContextMenu(event) {\n      if (scope.enabled === false) return;\n\n      event.preventDefault();\n    }\n\n    function addPointer(event) {\n      pointers.push(event);\n    }\n\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n\n    function trackPointer(event) {\n      let position = pointerPositions[event.pointerId];\n\n      if (position === undefined) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n\n      position.set(event.pageX, event.pageY);\n    }\n\n    function getSecondPointerPosition(event) {\n      const pointer =\n        event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n\n      return pointerPositions[pointer.pointerId];\n    }\n\n    //\n\n    scope.domElement.addEventListener('contextmenu', onContextMenu);\n\n    scope.domElement.addEventListener('pointerdown', onPointerDown);\n    scope.domElement.addEventListener('pointercancel', onPointerUp);\n    scope.domElement.addEventListener('wheel', onMouseWheel, {\n      passive: false,\n    });\n\n    // force an update at start\n\n    this.update();\n  }\n}\n\nexport { OrbitControls };\n","export const RenderMode = {\n  Always: 0,\n  OnChange: 1,\n  Never: 2,\n};\n","import * as THREE from 'three';\n\nconst _axis = new THREE.Vector3();\n\nexport class ArrowHelper extends THREE.Object3D {\n  constructor(\n    dir = new THREE.Vector3(0, 0, 1),\n    origin = new THREE.Vector3(0, 0, 0),\n    length = 1,\n    radius = 0.1,\n    color = 0xffff00,\n    headLength = length * 0.2,\n    headRadius = headLength * 0.2,\n  ) {\n    super();\n\n    this.type = 'ArrowHelper';\n\n    const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n    lineGeometry.translate(0, length / 2.0, 0);\n    const coneGeometry = new THREE.CylinderGeometry(\n      0,\n      headRadius,\n      headLength,\n      32,\n    );\n    coneGeometry.translate(0, length, 0);\n\n    this.position.copy(origin);\n\n    this.line = new THREE.Mesh(\n      lineGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    this.cone = new THREE.Mesh(\n      coneGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n\n    this.setDirection(dir);\n  }\n\n  setDirection(dir) {\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      _axis.set(dir.z, 0, -dir.x).normalize();\n      const radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(_axis, radians);\n    }\n  }\n\n  setColor(color) {\n    this.line.material.color.set(color);\n    this.cone.material.color.set(color);\n  }\n\n  copy(source) {\n    super.copy(source, false);\n    this.line.copy(source.line);\n    this.cone.copy(source.cone);\n    return this;\n  }\n\n  dispose() {\n    this.line.geometry.dispose();\n    this.line.material.dispose();\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n  constructor(threeScene) {\n    this.threeScene = threeScene;\n    this.splatRenderTarget = null;\n    this.renderTargetCopyQuad = null;\n    this.renderTargetCopyCamera = null;\n    this.meshCursor = null;\n    this.focusMarker = null;\n    this.controlPlane = null;\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  updateSplatRenderTargetForRenderDimensions(width, height) {\n    this.destroySplatRendertarget();\n    this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n      format: THREE.RGBAFormat,\n      stencilBuffer: false,\n      depthBuffer: true,\n    });\n    this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n    this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n    this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n  }\n\n  destroySplatRendertarget() {\n    if (this.splatRenderTarget) {\n      this.splatRenderTarget = null;\n    }\n  }\n\n  setupRenderTargetCopyObjects() {\n    const uniforms = {\n      sourceColorTexture: {\n        type: 't',\n        value: null,\n      },\n      sourceDepthTexture: {\n        type: 't',\n        value: null,\n      },\n    };\n    const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n      vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n      fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n      uniforms: uniforms,\n      depthWrite: false,\n      depthTest: false,\n      transparent: true,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendSrcAlpha: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneMinusSrcAlphaFactor,\n      blendDstAlpha: THREE.OneMinusSrcAlphaFactor,\n    });\n    renderTargetCopyMaterial.extensions.fragDepth = true;\n    this.renderTargetCopyQuad = new THREE.Mesh(\n      new THREE.PlaneGeometry(2, 2),\n      renderTargetCopyMaterial,\n    );\n    this.renderTargetCopyCamera = new THREE.OrthographicCamera(\n      -1,\n      1,\n      1,\n      -1,\n      0,\n      1,\n    );\n  }\n\n  destroyRenderTargetCopyObjects() {\n    if (this.renderTargetCopyQuad) {\n      disposeAllMeshes(this.renderTargetCopyQuad);\n      this.renderTargetCopyQuad = null;\n    }\n  }\n\n  setupMeshCursor() {\n    if (!this.meshCursor) {\n      const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n      const coneMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n      const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      downArrow.rotation.set(0, 0, Math.PI);\n      downArrow.position.set(0, 1, 0);\n      const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      upArrow.position.set(0, -1, 0);\n      const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n      leftArrow.position.set(1, 0, 0);\n      const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n      rightArrow.position.set(-1, 0, 0);\n\n      this.meshCursor = new THREE.Object3D();\n      this.meshCursor.add(downArrow);\n      this.meshCursor.add(upArrow);\n      this.meshCursor.add(leftArrow);\n      this.meshCursor.add(rightArrow);\n      this.meshCursor.scale.set(0.1, 0.1, 0.1);\n      this.threeScene.add(this.meshCursor);\n      this.meshCursor.visible = false;\n    }\n  }\n\n  destroyMeshCursor() {\n    if (this.meshCursor) {\n      disposeAllMeshes(this.meshCursor);\n      this.threeScene.remove(this.meshCursor);\n      this.meshCursor = null;\n    }\n  }\n\n  setMeshCursorVisibility(visible) {\n    this.meshCursor.visible = visible;\n  }\n\n  getMeschCursorVisibility() {\n    return this.meshCursor.visible;\n  }\n\n  setMeshCursorPosition(position) {\n    this.meshCursor.position.copy(position);\n  }\n\n  positionAndOrientMeshCursor(position, camera) {\n    this.meshCursor.position.copy(position);\n    this.meshCursor.up.copy(camera.up);\n    this.meshCursor.lookAt(camera.position);\n  }\n\n  setupFocusMarker() {\n    if (!this.focusMarker) {\n      const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n      focusMarkerMaterial.depthTest = false;\n      focusMarkerMaterial.depthWrite = false;\n      focusMarkerMaterial.transparent = true;\n      this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n    }\n  }\n\n  destroyFocusMarker() {\n    if (this.focusMarker) {\n      disposeAllMeshes(this.focusMarker);\n      this.focusMarker = null;\n    }\n  }\n\n  updateFocusMarker = (function() {\n    const tempPosition = new THREE.Vector3();\n    const tempMatrix = new THREE.Matrix4();\n    const toCamera = new THREE.Vector3();\n\n    return function(position, camera, viewport) {\n      tempMatrix.copy(camera.matrixWorld).invert();\n      tempPosition.copy(position).applyMatrix4(tempMatrix);\n      tempPosition.normalize().multiplyScalar(10);\n      tempPosition.applyMatrix4(camera.matrixWorld);\n      toCamera.copy(camera.position).sub(position);\n      const toCameraDistance = toCamera.length();\n      this.focusMarker.position.copy(position);\n      this.focusMarker.scale.set(\n        toCameraDistance,\n        toCameraDistance,\n        toCameraDistance,\n      );\n      this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n      this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n      this.focusMarker.material.uniformsNeedUpdate = true;\n    };\n  })();\n\n  setFocusMarkerVisibility(visible) {\n    this.focusMarker.visible = visible;\n  }\n\n  setFocusMarkerOpacity(opacity) {\n    this.focusMarker.material.uniforms.opacity.value = opacity;\n    this.focusMarker.material.uniformsNeedUpdate = true;\n  }\n\n  getFocusMarkerOpacity() {\n    return this.focusMarker.material.uniforms.opacity.value;\n  }\n\n  setupControlPlane() {\n    if (!this.controlPlane) {\n      const planeGeometry = new THREE.PlaneGeometry(1, 1);\n      planeGeometry.rotateX(-Math.PI / 2);\n      const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      planeMaterial.transparent = true;\n      planeMaterial.opacity = 0.6;\n      planeMaterial.depthTest = false;\n      planeMaterial.depthWrite = false;\n      planeMaterial.side = THREE.DoubleSide;\n      const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      const arrowDir = new THREE.Vector3(0, 1, 0);\n      arrowDir.normalize();\n      const arrowOrigin = new THREE.Vector3(0, 0, 0);\n      const arrowLength = 0.5;\n      const arrowRadius = 0.01;\n      const arrowColor = 0x00dd00;\n      const arrowHelper = new ArrowHelper(\n        arrowDir,\n        arrowOrigin,\n        arrowLength,\n        arrowRadius,\n        arrowColor,\n        0.1,\n        0.03,\n      );\n\n      this.controlPlane = new THREE.Object3D();\n      this.controlPlane.add(planeMesh);\n      this.controlPlane.add(arrowHelper);\n    }\n  }\n\n  destroyControlPlane() {\n    if (this.controlPlane) {\n      disposeAllMeshes(this.controlPlane);\n      this.controlPlane = null;\n    }\n  }\n\n  setControlPlaneVisibility(visible) {\n    this.controlPlane.visible = visible;\n  }\n\n  positionAndOrientControlPlane = (function() {\n    const tempQuaternion = new THREE.Quaternion();\n    const defaultUp = new THREE.Vector3(0, 1, 0);\n\n    return function(position, up) {\n      tempQuaternion.setFromUnitVectors(defaultUp, up);\n      this.controlPlane.position.copy(position);\n      this.controlPlane.quaternion.copy(tempQuaternion);\n    };\n  })();\n\n  addDebugMeshes() {\n    this.debugRoot = this.createDebugMeshes();\n    this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n    this.threeScene.add(this.debugRoot);\n    this.threeScene.add(this.secondaryDebugRoot);\n  }\n\n  destroyDebugMeshes() {\n    for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n      if (debugRoot) {\n        disposeAllMeshes(debugRoot);\n        this.threeScene.remove(debugRoot);\n      }\n    }\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  createDebugMeshes(renderOrder) {\n    const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const debugMeshRoot = new THREE.Object3D();\n\n    const createMesh = (color, position) => {\n      let sphereMesh = new THREE.Mesh(\n        sphereGeometry,\n        SceneHelper.buildDebugMaterial(color),\n      );\n      sphereMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(sphereMesh);\n      sphereMesh.position.fromArray(position);\n    };\n\n    createMesh(0xff0000, [-50, 0, 0]);\n    createMesh(0xff0000, [50, 0, 0]);\n    createMesh(0x00ff00, [0, 0, -50]);\n    createMesh(0x00ff00, [0, 0, 50]);\n    createMesh(0xffaa00, [5, 0, 5]);\n\n    return debugMeshRoot;\n  }\n\n  createSecondaryDebugMeshes(renderOrder) {\n    const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n    const debugMeshRoot = new THREE.Object3D();\n\n    let boxColor = 0xbbbbbb;\n    const createMesh = (position) => {\n      let boxMesh = new THREE.Mesh(\n        boxGeometry,\n        SceneHelper.buildDebugMaterial(boxColor),\n      );\n      boxMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(boxMesh);\n      boxMesh.position.fromArray(position);\n    };\n\n    let separation = 10;\n    createMesh([-separation, 0, -separation]);\n    createMesh([-separation, 0, separation]);\n    createMesh([separation, 0, -separation]);\n    createMesh([separation, 0, separation]);\n\n    return debugMeshRoot;\n  }\n\n  static buildDebugMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: false,\n      depthTest: true,\n      depthWrite: true,\n      side: THREE.FrontSide,\n    });\n    material.extensions.fragDepth = true;\n\n    return material;\n  }\n\n  static buildFocusMarkerMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n      realFocusPosition: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      opacity: {\n        value: 0.0,\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      side: THREE.FrontSide,\n    });\n\n    return material;\n  }\n\n  dispose() {\n    this.destroyMeshCursor();\n    this.destroyFocusMarker();\n    this.destroyDebugMeshes();\n    this.destroyControlPlane();\n    this.destroyRenderTargetCopyObjects();\n    this.destroySplatRendertarget();\n  }\n}\n","export const SceneRevealMode = {\n  Default: 0,\n  Gradual: 1,\n  Instant: 2,\n};\n","export const SplatRenderMode = {\n  ThreeD: 0,\n  TwoD: 1,\n};\n","import { clamp } from '../../../Util';\nimport { UncompressedSplatArray } from '../../UncompressedSplatArray';\nimport * as THREE from 'three';\nexport class GLTFParser {\n  constructor(degree) {\n    this.degree = degree;\n  }\n\n  decodeSplatData(splatCount, splatBuffers, shBuffers) {\n    const shDegree = this.degree;\n\n    const splatArray = new UncompressedSplatArray(shDegree);\n\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = GLTFParser.parseToUncompressedSplat(\n        splatBuffers,\n        row,\n        shBuffers,\n        shDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    const SH_C0 = 0.28209479177387814;\n\n    return function(splatBuffers, row, shBuffers, shDegree) {\n      const newSplat = UncompressedSplatArray.createSplat(shDegree);\n\n      // center\n      const positions = splatBuffers.POSITION;\n\n      const x = positions[row * 3];\n      const y = positions[row * 3 + 1];\n      const z = positions[row * 3 + 2];\n\n      newSplat[OFFSET.X] = x;\n      newSplat[OFFSET.Y] = y;\n      newSplat[OFFSET.Z] = z;\n\n      // scale\n      const scales = splatBuffers.scale;\n\n      const sx = Math.exp(scales[row * 3]);\n      const sy = Math.exp(scales[row * 3 + 1]);\n      const sz = Math.exp(scales[row * 3 + 2]);\n\n      newSplat[OFFSET.SCALE0] = sx;\n      newSplat[OFFSET.SCALE1] = sy;\n      newSplat[OFFSET.SCALE2] = sz;\n\n      // rotation\n      const rotations = splatBuffers.rotation;\n      const rx = rotations[row * 4];\n      const ry = rotations[row * 4 + 1];\n      const rz = rotations[row * 4 + 2];\n      const rw = rotations[row * 4 + 3];\n\n      tempRotation.set(rx, ry, rz, rw);\n      tempRotation.normalize();\n\n      newSplat[OFFSET.ROTATION0] = tempRotation.x;\n      newSplat[OFFSET.ROTATION1] = tempRotation.y;\n      newSplat[OFFSET.ROTATION2] = tempRotation.z;\n      newSplat[OFFSET.ROTATION3] = tempRotation.w;\n\n      // opacity\n      const opacities = splatBuffers.opacity;\n      const sh0 = splatBuffers.sh_band_0;\n\n      const opacity = (1 / (1 + Math.exp(-opacities[row]))) * 255;\n      newSplat[OFFSET.OPACITY] = clamp(Math.floor(opacity), 0, 255);\n\n      // base color aka. sh degree 0\n      const dcx = sh0[row * 3];\n      const dcy = sh0[row * 3 + 1];\n      const dcz = sh0[row * 3 + 2];\n\n      newSplat[OFFSET.FDC0] = (0.5 + SH_C0 * dcx) * 255;\n      newSplat[OFFSET.FDC1] = (0.5 + SH_C0 * dcy) * 255;\n      newSplat[OFFSET.FDC2] = (0.5 + SH_C0 * dcz) * 255;\n\n      newSplat[OFFSET.FDC0] = clamp(Math.floor(newSplat[OFFSET.FDC0]), 0, 255);\n      newSplat[OFFSET.FDC1] = clamp(Math.floor(newSplat[OFFSET.FDC1]), 0, 255);\n      newSplat[OFFSET.FDC2] = clamp(Math.floor(newSplat[OFFSET.FDC2]), 0, 255);\n\n      // first order sh bands\n      if (shDegree >= 1) {\n        for (let i = 0; i < 3; i++) {\n          newSplat[OFFSET[`FRC${0 + i}`]] = shBuffers.sh_band_1_0[row * 3 + i];\n          newSplat[OFFSET[`FRC${3 + i}`]] = shBuffers.sh_band_1_1[row * 3 + i];\n          newSplat[OFFSET[`FRC${6 + i}`]] = shBuffers.sh_band_1_2[row * 3 + i];\n        }\n\n        // second order sh bands\n        if (shDegree >= 2) {\n          for (let i = 0; i < 3; i++) {\n            newSplat[OFFSET[`FRC${9 + i}`]] =\n              shBuffers.sh_band_2_0[row * 3 + i];\n            newSplat[OFFSET[`FRC${12 + i}`]] =\n              shBuffers.sh_band_2_1[row * 3 + i];\n            newSplat[OFFSET[`FRC${15 + i}`]] =\n              shBuffers.sh_band_2_2[row * 3 + i];\n            newSplat[OFFSET[`FRC${18 + i}`]] =\n              shBuffers.sh_band_2_3[row * 3 + i];\n            newSplat[OFFSET[`FRC${21 + i}`]] =\n              shBuffers.sh_band_2_4[row * 3 + i];\n          }\n        }\n\n        // third order sh bands\n        if (shDegree >= 3) {\n          for (let i = 0; i < 3; i++) {\n            newSplat[OFFSET[`FRC${24 + i}`]] =\n              shBuffers.sh_band_3_0[row * 3 + i];\n            newSplat[OFFSET[`FRC${27 + i}`]] =\n              shBuffers.sh_band_3_1[row * 3 + i];\n            newSplat[OFFSET[`FRC${30 + i}`]] =\n              shBuffers.sh_band_3_2[row * 3 + i];\n            newSplat[OFFSET[`FRC${33 + i}`]] =\n              shBuffers.sh_band_3_3[row * 3 + i];\n            newSplat[OFFSET[`FRC${36 + i}`]] =\n              shBuffers.sh_band_3_4[row * 3 + i];\n            newSplat[OFFSET[`FRC${39 + i}`]] =\n              shBuffers.sh_band_3_5[row * 3 + i];\n            newSplat[OFFSET[`FRC${42 + i}`]] =\n              shBuffers.sh_band_3_6[row * 3 + i];\n          }\n        }\n      }\n\n      return newSplat;\n    };\n  })();\n\n  parseToUncompressedSplatArray(splatCount, splatBuffers, shBuffers) {\n    return this.decodeSplatData(splatCount, splatBuffers, shBuffers);\n  }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../../SplatBuffer';\nimport { GLTFParser } from './GLTFParser.js';\nimport { delayedExecute } from '../../../Util.js';\n\nfunction finalize(splatData, minimumAlpha = 1) {\n  return SplatBuffer.generateFromUncompressedSplatArrays(\n    [splatData],\n    minimumAlpha,\n    0,\n    new THREE.Vector3(),\n  );\n}\n\nfunction getBaseUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nfunction getFilePaths(gltf, gltfUrl) {\n  const baseUrl = getBaseUrl(gltfUrl);\n\n  try {\n    const attributes = gltf.meshes[0].primitives[0].attributes;\n    const extensions =\n      gltf.meshes[0].primitives[0].extensions\n        .OPF_mesh_primitive_custom_attributes.attributes;\n\n    const attributeMapping = {\n      POSITION: attributes.POSITION,\n      opacity: extensions.opacity,\n      scale: extensions.scale,\n      rotation: extensions.rotation,\n      // 0th order\n      sh_band_0: extensions.sh_band_0,\n      // 1st order\n      sh_band_1_0: extensions.sh_band_1_triplet_0,\n      sh_band_1_1: extensions.sh_band_1_triplet_1,\n      sh_band_1_2: extensions.sh_band_1_triplet_2,\n      // 2nd order\n      sh_band_2_0: extensions.sh_band_2_triplet_0,\n      sh_band_2_1: extensions.sh_band_2_triplet_1,\n      sh_band_2_2: extensions.sh_band_2_triplet_2,\n      sh_band_2_3: extensions.sh_band_2_triplet_3,\n      sh_band_2_4: extensions.sh_band_2_triplet_4,\n      // 3nd order\n      sh_band_3_0: extensions.sh_band_3_triplet_0,\n      sh_band_3_1: extensions.sh_band_3_triplet_1,\n      sh_band_3_2: extensions.sh_band_3_triplet_2,\n      sh_band_3_3: extensions.sh_band_3_triplet_3,\n      sh_band_3_4: extensions.sh_band_3_triplet_4,\n      sh_band_3_5: extensions.sh_band_3_triplet_5,\n      sh_band_3_6: extensions.sh_band_3_triplet_6,\n    };\n\n    return Object.fromEntries(\n      Object.entries(attributeMapping).map(([key, index]) => {\n        const bufferIndex =\n          gltf.bufferViews[gltf.accessors[index].bufferView].buffer;\n        return [key, baseUrl + gltf.buffers[bufferIndex].uri];\n      }),\n    );\n  } catch (error) {\n    console.error('Error processing GLTF structure:', error);\n    return {};\n  }\n}\n\nexport class GLTFLoader {\n  /**\n   *\n   * @param {import('../../../Viewer.js').Viewer} viewer\n   */\n  constructor(viewer) {\n    this.viewer = viewer;\n  }\n  async loadFromURL(url = 'http://localhost:8081/gaussian/gltf/pcl.gltf') {\n    try {\n      const gltf = await this.fetchGLTF(url);\n      const filePaths = getFilePaths(gltf, url);\n      const splatBuffers = await this.fetchBuffers(filePaths, [\n        'POSITION',\n        'opacity',\n        'scale',\n        'rotation',\n        'sh_band_0',\n      ]);\n\n      let firstBandBuffers = ['sh_band_1_0', 'sh_band_1_1', 'sh_band_1_2'];\n\n      let secondBandBuffers = [\n        'sh_band_2_0',\n        'sh_band_2_1',\n        'sh_band_2_2',\n        'sh_band_2_3',\n        'sh_band_2_4',\n      ];\n\n      let thirdBandBuffers = [\n        'sh_band_3_0',\n        'sh_band_3_1',\n        'sh_band_3_2',\n        'sh_band_3_3',\n        'sh_band_3_4',\n        'sh_band_3_5',\n        'sh_band_3_6',\n      ];\n\n      let bandBuffers = [];\n      let degree = this.viewer.sphericalHarmonicsDegree;\n\n      if (degree >= 1) {\n        bandBuffers.push(...firstBandBuffers);\n      }\n\n      if (degree >= 2) {\n        bandBuffers.push(...secondBandBuffers);\n      }\n\n      if (degree >= 3) {\n        bandBuffers.push(...thirdBandBuffers);\n      }\n\n      const shBuffers = await this.fetchBuffers(filePaths, bandBuffers);\n      const splatCount = this.getSplatCountFromGLTF(gltf);\n\n      return this.loadFromBufferData(splatCount, splatBuffers, shBuffers);\n    } catch (error) {\n      console.error('Error loading GLTF from URL:', error);\n      return null;\n    }\n  }\n\n  fetch(url) {\n    return this.viewer.fetch(url);\n  }\n\n  async fetchGLTF(url) {\n    try {\n      const response = await this.fetch(url);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching GLTF:', error);\n      return null;\n    }\n  }\n\n  async fetchBuffers(filePaths, bufferNames) {\n    // const componentTypeMap = {\n    //     5120: Int8Array,\n    //     5121: Uint8Array,\n    //     5122: Int16Array,\n    //     5123: Uint16Array,\n    //     5125: Uint32Array,\n    //     5126: Float32Array\n    // };\n\n    try {\n      const bufferPromises = bufferNames.map(async (name) => {\n        const response = await this.fetch(filePaths[name]);\n        const buffer = await response.arrayBuffer();\n\n        // TODO: check component type rather than assuming float32\n        return { [name]: new Float32Array(buffer) };\n      });\n\n      const bufferData = await Promise.all(bufferPromises);\n      return Object.assign({}, ...bufferData);\n    } catch (error) {\n      console.error('Error fetching buffers:', error);\n      return {};\n    }\n  }\n\n  getSplatCountFromGLTF(gltf) {\n    try {\n      return gltf.accessors[gltf.meshes[0].primitives[0].attributes.POSITION]\n        .count;\n    } catch (error) {\n      console.error('Error determining splat count:', error);\n      return 0;\n    }\n  }\n\n  async loadFromBufferData(splatCount, splatBuffers, shBuffers = []) {\n    return delayedExecute(() =>\n      new GLTFParser(\n        this.viewer.sphericalHarmonicsDegree,\n      ).parseToUncompressedSplatArray(splatCount, splatBuffers, shBuffers),\n    ).then(finalize);\n  }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n  constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n    this.origin = new THREE.Vector3();\n    this.direction = new THREE.Vector3();\n    this.setParameters(origin, direction);\n  }\n\n  setParameters(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction).normalize();\n  }\n\n  boxContainsPoint(box, point, epsilon) {\n    return point.x < box.min.x - epsilon ||\n      point.x > box.max.x + epsilon ||\n      point.y < box.min.y - epsilon ||\n      point.y > box.max.y + epsilon ||\n      point.z < box.min.z - epsilon ||\n      point.z > box.max.z + epsilon ?\n      false :\n      true;\n  }\n\n  intersectBox = (function() {\n    const planeIntersectionPoint = new THREE.Vector3();\n    const planeIntersectionPointArray = [];\n    const originArray = [];\n    const directionArray = [];\n\n    return function(box, outHit) {\n      originArray[0] = this.origin.x;\n      originArray[1] = this.origin.y;\n      originArray[2] = this.origin.z;\n      directionArray[0] = this.direction.x;\n      directionArray[1] = this.direction.y;\n      directionArray[2] = this.direction.z;\n\n      if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n        if (outHit) {\n          outHit.origin.copy(this.origin);\n          outHit.normal.set(0, 0, 0);\n          outHit.distance = -1;\n        }\n        return true;\n      }\n\n      for (let i = 0; i < 3; i++) {\n        if (directionArray[i] == 0.0) continue;\n\n        const hitNormal =\n          i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n        const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n        let multiplier = -Math.sign(directionArray[i]);\n        planeIntersectionPointArray[0] =\n          i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n        let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n        if (toSide * multiplier < 0) {\n          const idx1 = (i + 1) % 3;\n          const idx2 = (i + 2) % 3;\n          planeIntersectionPointArray[2] =\n            (directionArray[idx1] / directionArray[i]) * toSide +\n            originArray[idx1];\n          planeIntersectionPointArray[1] =\n            (directionArray[idx2] / directionArray[i]) * toSide +\n            originArray[idx2];\n          planeIntersectionPoint.set(\n            planeIntersectionPointArray[i],\n            planeIntersectionPointArray[idx2],\n            planeIntersectionPointArray[idx1],\n          );\n          if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n            if (outHit) {\n              outHit.origin.copy(planeIntersectionPoint);\n              outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n              outHit.distance = planeIntersectionPoint\n                .sub(this.origin)\n                .length();\n            }\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n  })();\n\n  intersectSphere = (function() {\n    const toSphereCenterVec = new THREE.Vector3();\n\n    return function(center, radius, outHit) {\n      toSphereCenterVec.copy(center).sub(this.origin);\n      const toClosestApproach = toSphereCenterVec.dot(this.direction);\n      const toClosestApproachSq = toClosestApproach * toClosestApproach;\n      const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n      const diffSq = toSphereCenterSq - toClosestApproachSq;\n      const radiusSq = radius * radius;\n\n      if (diffSq > radiusSq) return false;\n\n      const thc = Math.sqrt(radiusSq - diffSq);\n      const t0 = toClosestApproach - thc;\n      const t1 = toClosestApproach + thc;\n\n      if (t1 < 0) return false;\n      let t = t0 < 0 ? t1 : t0;\n\n      if (outHit) {\n        outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n        outHit.normal.copy(outHit.origin).sub(center).normalize();\n        outHit.distance = t;\n      }\n      return true;\n    };\n  })();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n  constructor() {\n    this.origin = new THREE.Vector3();\n    this.normal = new THREE.Vector3();\n    this.distance = 0;\n    this.splatIndex = 0;\n  }\n\n  set(origin, normal, distance, splatIndex) {\n    this.origin.copy(origin);\n    this.normal.copy(normal);\n    this.distance = distance;\n    this.splatIndex = splatIndex;\n  }\n\n  clone() {\n    const hitClone = new Hit();\n    hitClone.origin.copy(this.origin);\n    hitClone.normal.copy(this.normal);\n    hitClone.distance = this.distance;\n    hitClone.splatIndex = this.splatIndex;\n    return hitClone;\n  }\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\n\nexport class Raycaster {\n  constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n    this.ray = new Ray(origin, direction);\n    this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n  }\n\n  setFromCameraAndScreenPosition = (function() {\n    const ndcCoords = new THREE.Vector2();\n\n    return function(camera, screenPosition, screenDimensions) {\n      ndcCoords.x = (screenPosition.x / screenDimensions.x) * 2.0 - 1.0;\n      ndcCoords.y =\n        ((screenDimensions.y - screenPosition.y) / screenDimensions.y) * 2.0 -\n        1.0;\n      if (camera.isPerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction\n          .set(ndcCoords.x, ndcCoords.y, 0.5)\n          .unproject(camera)\n          .sub(this.ray.origin)\n          .normalize();\n        this.camera = camera;\n      } else if (camera.isOrthographicCamera) {\n        this.ray.origin\n          .set(\n            ndcCoords.x,\n            ndcCoords.y,\n            (camera.near + camera.far) / (camera.near - camera.far),\n          )\n          .unproject(camera);\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        this.camera = camera;\n      } else {\n        throw new Error(\n          'Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type',\n        );\n      }\n    };\n  })();\n\n  intersectSplatMesh = (function() {\n    const toLocal = new THREE.Matrix4();\n    const fromLocal = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const localRay = new Ray();\n    const tempPoint = new THREE.Vector3();\n\n    return function(splatMesh, outHits = []) {\n      const splatTree = splatMesh.getSplatTree();\n\n      if (!splatTree) return;\n\n      for (let s = 0; s < splatTree.subTrees.length; s++) {\n        const subTree = splatTree.subTrees[s];\n\n        fromLocal.copy(splatMesh.matrixWorld);\n        if (splatMesh.dynamicMode) {\n          splatMesh.getSceneTransform(s, sceneTransform);\n          fromLocal.multiply(sceneTransform);\n        }\n        toLocal.copy(fromLocal).invert();\n\n        localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n        localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n        localRay.direction\n          .applyMatrix4(toLocal)\n          .sub(localRay.origin)\n          .normalize();\n\n        const outHitsForSubTree = [];\n        if (subTree.rootNode) {\n          this.castRayAtSplatTreeNode(\n            localRay,\n            splatTree,\n            subTree.rootNode,\n            outHitsForSubTree,\n          );\n        }\n\n        outHitsForSubTree.forEach((hit) => {\n          hit.origin.applyMatrix4(fromLocal);\n          hit.normal.applyMatrix4(fromLocal).normalize();\n          hit.distance = tempPoint\n            .copy(hit.origin)\n            .sub(this.ray.origin)\n            .length();\n        });\n\n        outHits.push(...outHitsForSubTree);\n      }\n\n      outHits.sort((a, b) => {\n        if (a.distance > b.distance) return 1;\n        else return -1;\n      });\n\n      return outHits;\n    };\n  })();\n\n  castRayAtSplatTreeNode = (function() {\n    const tempColor = new THREE.Vector4();\n    const tempCenter = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n    const tempHit = new Hit();\n    const scaleEpsilon = 0.0000001;\n\n    const origin = new THREE.Vector3(0, 0, 0);\n    const uniformScaleMatrix = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const toSphereSpace = new THREE.Matrix4();\n    const fromSphereSpace = new THREE.Matrix4();\n    const tempRay = new Ray();\n\n    return function(ray, splatTree, node, outHits = []) {\n      if (!ray.intersectBox(node.boundingBox)) {\n        return;\n      }\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        for (let i = 0; i < node.data.indexes.length; i++) {\n          const splatGlobalIndex = node.data.indexes[i];\n          const splatSceneIndex =\n            splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\n          const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\n          if (!splatScene.visible) continue;\n\n          splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n          splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n          splatTree.splatMesh.getSplatScaleAndRotation(\n            splatGlobalIndex,\n            tempScale,\n            tempRotation,\n          );\n\n          if (\n            tempScale.x <= scaleEpsilon ||\n            tempScale.y <= scaleEpsilon ||\n            (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD &&\n              tempScale.z <= scaleEpsilon)\n          ) {\n            continue;\n          }\n\n          if (!this.raycastAgainstTrueSplatEllipsoid) {\n            let radius = tempScale.x + tempScale.y;\n            let componentCount = 2;\n            if (\n              splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD\n            ) {\n              radius += tempScale.z;\n              componentCount = 3;\n            }\n            radius = radius / componentCount;\n            if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              outHits.push(hitClone);\n            }\n          } else {\n            scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n            rotationMatrix.makeRotationFromQuaternion(tempRotation);\n            const uniformScale = Math.log10(tempColor.w) * 2.0;\n            uniformScaleMatrix.makeScale(\n              uniformScale,\n              uniformScale,\n              uniformScale,\n            );\n            fromSphereSpace\n              .copy(uniformScaleMatrix)\n              .multiply(rotationMatrix)\n              .multiply(scaleMatrix);\n            toSphereSpace.copy(fromSphereSpace).invert();\n            tempRay.origin\n              .copy(ray.origin)\n              .sub(tempCenter)\n              .applyMatrix4(toSphereSpace);\n            tempRay.direction\n              .copy(ray.origin)\n              .add(ray.direction)\n              .sub(tempCenter);\n            tempRay.direction\n              .applyMatrix4(toSphereSpace)\n              .sub(tempRay.origin)\n              .normalize();\n            if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n              outHits.push(hitClone);\n            }\n          }\n        }\n      }\n      if (node.children && node.children.length > 0) {\n        for (let child of node.children) {\n          this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n        }\n      }\n      return outHits;\n    };\n  })();\n}\n","import * as THREE from 'three';\nimport { Constants } from '../Constants.js';\n\nexport class SplatMaterial {\n  static buildVertexShaderBase(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    customVars = '',\n  ) {\n    let vertexShaderSource = `\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp usampler2D sphericalHarmonicsTextureR;\n        uniform highp usampler2D sphericalHarmonicsTextureG;\n        uniform highp usampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n            uniform float sceneOpacity[${Constants.MaxScenes}];\n            uniform int sceneVisibility[${Constants.MaxScenes}];\n        `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\n        `;\n    }\n\n    vertexShaderSource += `\n        ${customVars}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];        \n        uniform float harmonicsRangeMin;\n        uniform float harmonicsRange;\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n        varying float vZ;\n        varying float vSplatIndex;\n        varying vec4 vVertex;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n        vec3 unpack111011s(uint bits) { \n          vec3 result = vec3((uvec3(bits) >> uvec3(21u, 11u, 0u)) & uvec3(0x7ffu, 0x3ffu, 0x7ffu)) / vec3(2047.0, 1023.0, 2047.0); \n          return result * 2. - 1.;\n        }\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }        \n        ivec2 getDataUVSplat(in int stride, in int offset, in vec2 dimensions) {\n            ivec2 samplerUV = ivec2(0, 0);\n            float d = float(splatIndex * uint(stride) + uint(offset));\n            samplerUV.y = int(floor(d / dimensions.x));\n            samplerUV.x = int(mod(d, dimensions.x));\n            return samplerUV;\n        }\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n        const float[7] SH_C3 = float[](-0.5900435899266435, \n                                        2.890611442640554, \n                                        -0.4570457994644658, \n                                        0.3731763325901154, \n                                        -0.4570457994644658, \n                                        1.445305721320277, \n                                        -0.5900435899266435);\n        void main () {\n\n            vSplatIndex = float(splatIndex);\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = modelViewMatrix * transform;\n            `;\n    } else {\n      vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n    }\n\n    vertexShaderSource += `\n\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        `;\n\n    // // Proceed to sampling and rendering 1st degree spherical harmonics\n    if (maxSphericalHarmonicsDegree >= 1) {\n      vertexShaderSource += `   \n            if (sphericalHarmonicsDegree >= 1) {\n            `;\n\n      if (dynamicMode) {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                `;\n      } else {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                `;\n      }\n\n      vertexShaderSource += `\n                vec3 harmonics = vec3(0.);\n                vec3 sh1 = vec3(0.);\n                vec3 sh2 = vec3(0.);\n                vec3 sh3 = vec3(0.);\n            `;\n\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n                    vec3 sh4 = vec3(0.);\n                    vec3 sh5 = vec3(0.);\n                    vec3 sh6 = vec3(0.);\n                    vec3 sh7 = vec3(0.);\n                    vec3 sh8 = vec3(0.);\n                `;\n      }\n\n      // Adding the third harmonics variables\n      if (maxSphericalHarmonicsDegree >= 3) {\n        vertexShaderSource += `\n                      vec3 sh9 = vec3(0.);\n                      vec3 sh10 = vec3(0.);\n                      vec3 sh11 = vec3(0.);\n                      vec3 sh12 = vec3(0.);\n                      vec3 sh13 = vec3(0.);\n                      vec3 sh14 = vec3(0.);\n                      vec3 sh15 = vec3(0.);\n                  `;\n      }\n\n      // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3,\n      // Calculate the harmonics result for the corresponding values.\n      if (maxSphericalHarmonicsDegree >= 1) {\n        vertexShaderSource += `\n                    \n                    vec2 degree1TextureSize = vec2(textureSize(sphericalHarmonicsTextureR, 0));\n\n                    uint d1 = texelFetch(sphericalHarmonicsTextureR, getDataUVSplat(3, 0, degree1TextureSize), 0).r;\n                    uint d2 = texelFetch(sphericalHarmonicsTextureR, getDataUVSplat(3, 1, degree1TextureSize), 0).r;\n                    uint d3 = texelFetch(sphericalHarmonicsTextureR, getDataUVSplat(3, 2, degree1TextureSize), 0).r;\n\n                    sh1 = unpack111011s(d1);\n                    sh2 = unpack111011s(d2);\n                    sh3 = unpack111011s(d3);\n\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n\n                    float xx = 1.;\n                    float yy = 1.;\n                    float zz = 1.;\n                    float xy = 1.;\n                    float yz = 1.;\n                    float xz = 1.;\n\n                    harmonics = SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n                    \n                `;\n      }\n\n      // Proceed to sampling and rendering 2nd degree spherical harmonics\n      // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\n      // and store in sh4, sh5, sh6, sh7, and sh8\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n\n                    if(sphericalHarmonicsDegree >= 2) {\n                      vec2 degree2TextureSize = vec2(textureSize(sphericalHarmonicsTextureG, 0));\n\n                      uint d4 = texelFetch(sphericalHarmonicsTextureG, getDataUVSplat(5, 0, degree2TextureSize), 0).r;\n                      uint d5 = texelFetch(sphericalHarmonicsTextureG, getDataUVSplat(5, 1, degree2TextureSize), 0).r;\n                      uint d6 = texelFetch(sphericalHarmonicsTextureG, getDataUVSplat(5, 2, degree2TextureSize), 0).r;\n                      uint d7 = texelFetch(sphericalHarmonicsTextureG, getDataUVSplat(5, 3, degree2TextureSize), 0).r;\n                      uint d8 = texelFetch(sphericalHarmonicsTextureG, getDataUVSplat(5, 4, degree2TextureSize), 0).r;\n\n\n                      sh4 = unpack111011s(d4);\n                      sh5 = unpack111011s(d5);\n                      sh6 = unpack111011s(d6);\n                      sh7 = unpack111011s(d7);\n                      sh8 = unpack111011s(d8);\n\n\n                      xx = x * x;\n                      yy = y * y;\n                      zz = z * z;\n                      xy = x * y;\n                      yz = y * z;\n                      xz = x * z;\n\n                      harmonics += \n                          (SH_C2[0] * xy) * sh4 +\n                          (SH_C2[1] * yz) * sh5 +\n                          (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                          (SH_C2[3] * xz) * sh7 +\n                          (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                `;\n\n        // Perform 3rd degree spherical harmonics calculations\n        if (maxSphericalHarmonicsDegree >= 3) {\n          vertexShaderSource += `\n      \n                    if(sphericalHarmonicsDegree >= 3) {\n                      vec2 degree3TextureSize = vec2(textureSize(sphericalHarmonicsTextureB, 0));\n\n                      uint d9 =  texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 0, degree3TextureSize), 0).r;\n                      uint d10 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 1, degree3TextureSize), 0).r;\n                      uint d11 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 2, degree3TextureSize), 0).r;\n                      uint d12 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 3, degree3TextureSize), 0).r;\n                      uint d13 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 4, degree3TextureSize), 0).r;\n                      uint d14 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 5, degree3TextureSize), 0).r;\n                      uint d15 = texelFetch(sphericalHarmonicsTextureB, getDataUVSplat(7, 6, degree3TextureSize), 0).r;\n\n                      sh9 =  unpack111011s(d9);\n                      sh10 = unpack111011s(d10);\n                      sh11 = unpack111011s(d11);\n                      sh12 = unpack111011s(d12);\n                      sh13 = unpack111011s(d13);\n                      sh14 = unpack111011s(d14);\n\n                      harmonics +=\n                          SH_C3[0] * y * (3.0 * xx - yy) * sh9 +\n                          SH_C3[1] * xy * z * sh10 +\n                          SH_C3[2] * y * (4.0 * zz - xx - yy) * sh11 +\n                          SH_C3[3] * z * (2.0 * zz - 3.0 * xx - 3.0 * yy) * sh12 +\n                          SH_C3[4] * x * (4.0 * zz - xx - yy) * sh13 +\n                          SH_C3[5] * z * (xx - yy) * sh14 +\n                          SH_C3[6] * x * (xx - 3.0 * yy) * sh15;\n                      }\n                    }\n                    \n                  `;\n        }\n      }\n\n      vertexShaderSource += `\n\n          vColor.rgb += harmonicsRange * harmonics;\n          vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n\n      \n\n      `;\n\n      return vertexShaderSource;\n    }\n  }\n\n  static getVertexShaderFadeIn() {\n    return `\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        `;\n  }\n\n  static getUniforms(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n  ) {\n    const uniforms = {\n      sceneCenter: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      fadeInComplete: {\n        type: 'i',\n        value: 0,\n      },\n      orthographicMode: {\n        type: 'i',\n        value: 0,\n      },\n      visibleRegionFadeStartRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      visibleRegionRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      currentTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      firstRenderTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      centersColorsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureR: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureG: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureB: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonics8BitCompressionRangeMin: {\n        type: 'f',\n        value: [],\n      },\n      sphericalHarmonics8BitCompressionRangeMax: {\n        type: 'f',\n        value: [],\n      },\n      harmonicsRangeMin: {\n        type: 'f',\n        value: 0,\n      },\n      harmonicsRange: {\n        type: 'f',\n        value: 0,\n      },\n      focal: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      orthoZoom: {\n        type: 'f',\n        value: 1.0,\n      },\n      inverseFocalAdjustment: {\n        type: 'f',\n        value: 1.0,\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      basisViewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      debugColor: {\n        type: 'v3',\n        value: new THREE.Color(),\n      },\n      centersColorsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonicsDegree: {\n        type: 'i',\n        value: maxSphericalHarmonicsDegree,\n      },\n      sphericalHarmonicsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonics8BitMode: {\n        type: 'i',\n        value: 0,\n      },\n      sphericalHarmonicsMultiTextureMode: {\n        type: 'i',\n        value: 0,\n      },\n      splatScale: {\n        type: 'f',\n        value: splatScale,\n      },\n      pointCloudModeEnabled: {\n        type: 'i',\n        value: pointCloudModeEnabled ? 1 : 0,\n      },\n      sceneIndexesTexture: {\n        type: 't',\n        value: null,\n      },\n      sceneIndexesTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sceneCount: {\n        type: 'i',\n        value: 1,\n      },\n    };\n    for (let i = 0; i < Constants.MaxScenes; i++) {\n      uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(\n        -Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n      uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(\n        Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n    }\n\n    if (enableOptionalEffects) {\n      const sceneOpacity = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneOpacity.push(1.0);\n      }\n      uniforms['sceneOpacity'] = {\n        type: 'f',\n        value: sceneOpacity,\n      };\n\n      const sceneVisibility = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneVisibility.push(1);\n      }\n      uniforms['sceneVisibility'] = {\n        type: 'i',\n        value: sceneVisibility,\n      };\n    }\n\n    if (dynamicMode) {\n      const transformMatrices = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        transformMatrices.push(new THREE.Matrix4());\n      }\n      uniforms['transforms'] = {\n        type: 'mat4',\n        value: transformMatrices,\n      };\n    }\n\n    return uniforms;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial3D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n   *                              different resolution than that of their training\n   * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 2048,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(\n      antialiased,\n      enableOptionalEffects,\n      maxScreenSpaceSplatSize,\n    );\n    const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['covariancesTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n    uniforms['covariancesTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesTextureHalfFloat'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesAreHalfFloat'] = {\n      type: 'i',\n      value: 0,\n    };\n\n    uniforms['uColorID'] = {\n      value: false,\n    };\n\n    const material = new THREE.ShaderMaterial({\n      glslVersion: THREE.GLSL3,\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection(\n    antialiased,\n    enableOptionalEffects,\n    maxScreenSpaceSplatSize,\n  ) {\n    let vertexShaderSource = `\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            `;\n\n    if (antialiased) {\n      vertexShaderSource += `\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `;\n    } else {\n      vertexShaderSource += `\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n            `;\n    }\n\n    vertexShaderSource += `\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                vColor.a *= splatOpacityFromScene;\n            `;\n    }\n\n    vertexShaderSource += `\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            vZ = ndcCenter.z;\n            gl_Position = quadPos;\n            vVertex = gl_Position;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        `;\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n            uniform bool uColorID;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying float vZ;\n            varying float vSplatIndex;\n            varying vec4 vVertex;\n            layout(location = 0) out vec4 colorData;\n        `;\n\n    fragmentShaderSource += `\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                vec3 color = vColor.rgb;\n\n                if(uColorID) {\n                  \n                  if(opacity < 0.1) discard;\n\n                  vec2 screenData = vVertex.xy / vVertex.w;\n                  screenData = 0.5 * screenData + 0.5;\n\n                  float index = float(vSplatIndex);\n\n                  colorData = vec4(index, 0., 0., 1.);\n                  return;\n\n                }\n\n                colorData = vec4(color, opacity);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial2D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\n    const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['scaleRotationsTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['scaleRotationsTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection() {\n    // Original CUDA code for calculating splat-to-screen transformation, for reference\n    /*\n            glm::mat3 R = quat_to_rotmat(rot);\n            glm::mat3 S = scale_to_mat(scale, mod);\n            glm::mat3 L = R * S;\n\n            // center of Gaussians in the camera coordinate\n            glm::mat3x4 splat2world = glm::mat3x4(\n                glm::vec4(L[0], 0.0),\n                glm::vec4(L[1], 0.0),\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\n            );\n\n            glm::mat4 world2ndc = glm::mat4(\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\n            );\n\n            glm::mat3x4 ndc2pix = glm::mat3x4(\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\n            );\n\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\n        */\n\n    // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\n    // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\n    let vertexShaderSource = `\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        `;\n\n    // Original CUDA code for projection to 2D, for reference\n    /*\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\n\n            // Compute AABB\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\n            float distance = sumf3(T3 * T3 * temp_point);\n            float3 f = (1 / distance) * temp_point;\n            if (distance == 0.0) return false;\n\n            point_image = {\n                sumf3(f * T0 * T3),\n                sumf3(f * T1 * T3)\n            };\n\n            float2 temp = {\n                sumf3(f * T0 * T0),\n                sumf3(f * T1 * T1)\n            };\n            float2 half_extend = point_image * point_image - temp;\n            extent = sqrtf2(maxf2(1e-4, half_extend));\n            return true;\n        */\n\n    // Computing the bounding box of the 2D Gaussian and its center\n    // The center of the bounding box is used to create a low pass filter.\n    // This code is based off the reference implementation and creates an AABB aligned\n    // with the screen for the quad to be rendered.\n    const referenceQuadGeneration = `\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        `;\n\n    const useRefImplementation = false;\n    if (useRefImplementation) {\n      vertexShaderSource += referenceQuadGeneration;\n    } else {\n      // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\n      // This is a different approach than the reference implementation, similar to how the rendering of\n      // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\n      // (smaller than a pixel), then revert to the reference implementation.\n      vertexShaderSource += `\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${referenceQuadGeneration}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `;\n    }\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    // Original CUDA code for splat intersection, for reference\n    /*\n            const float2 xy = collected_xy[j];\n            const float3 Tu = collected_Tu[j];\n            const float3 Tv = collected_Tv[j];\n            const float3 Tw = collected_Tw[j];\n            float3 k = pix.x * Tw - Tu;\n            float3 l = pix.y * Tw - Tv;\n            float3 p = cross(k, l);\n            if (p.z == 0.0) continue;\n            float2 s = {p.x / p.z, p.y / p.z};\n            float rho3d = (s.x * s.x + s.y * s.y);\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\n\n            // compute intersection and depth\n            float rho = min(rho3d, rho2d);\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\n            if (depth < near_n) continue;\n            float4 nor_o = collected_normal_opacity[j];\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n            float opa = nor_o.w;\n\n            float power = -0.5f * rho;\n            if (power > 0.0f)\n                continue;\n\n            // Eq. (2) from 3D Gaussian splatting paper.\n            // Obtain alpha by multiplying with Gaussian opacity\n            // and its exponential falloff from mean.\n            // Avoid numerical instabilities (see paper appendix).\n            float alpha = min(0.99f, opa * exp(power));\n            if (alpha < 1.0f / 255.0f)\n                continue;\n            float test_T = T * (1 - alpha);\n            if (test_T < 0.0001f)\n            {\n                done = true;\n                continue;\n            }\n\n            float w = alpha * T;\n        */\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\n\nexport class SplatGeometry {\n  /**\n   * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n   * vertices for a single quad as well as an attribute buffer for the splat indexes.\n   * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n   * @return {THREE.InstancedBufferGeometry}\n   */\n  static build(maxSplatCount) {\n    const baseGeometry = new THREE.BufferGeometry();\n    baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n    // Vertices for the instanced quad\n    const positionsArray = new Float32Array(4 * 3);\n    const positions = new THREE.BufferAttribute(positionsArray, 3);\n    baseGeometry.setAttribute('position', positions);\n    positions.setXYZ(0, -1.0, -1.0, 0.0);\n    positions.setXYZ(1, -1.0, 1.0, 0.0);\n    positions.setXYZ(2, 1.0, 1.0, 0.0);\n    positions.setXYZ(3, 1.0, -1.0, 0.0);\n    positions.needsUpdate = true;\n\n    const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n    // Splat index buffer\n    const splatIndexArray = new Uint32Array(maxSplatCount);\n    const splatIndexes = new THREE.InstancedBufferAttribute(\n      splatIndexArray,\n      1,\n      false,\n    );\n    splatIndexes.setUsage(THREE.DynamicDrawUsage);\n    geometry.setAttribute('splatIndex', splatIndexes);\n\n    geometry.instanceCount = 0;\n\n    return geometry;\n  }\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene extends THREE.Object3D {\n  constructor(\n    splatBuffer,\n    position = new THREE.Vector3(),\n    quaternion = new THREE.Quaternion(),\n    scale = new THREE.Vector3(1, 1, 1),\n    minimumAlpha = 1,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    super();\n    this.splatBuffer = splatBuffer;\n    this.position.copy(position);\n    this.quaternion.copy(quaternion);\n    this.scale.copy(scale);\n    this.transform = new THREE.Matrix4();\n    this.minimumAlpha = minimumAlpha;\n    this.opacity = opacity;\n    this.visible = visible;\n  }\n\n  copyTransformData(otherScene) {\n    this.position.copy(otherScene.position);\n    this.quaternion.copy(otherScene.quaternion);\n    this.scale.copy(otherScene.scale);\n    this.transform.copy(otherScene.transform);\n  }\n\n  updateTransform(dynamicMode) {\n    if (dynamicMode) {\n      if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\n      this.transform.copy(this.matrixWorld);\n    } else {\n      if (this.matrixAutoUpdate) this.updateMatrix();\n      this.transform.copy(this.matrix);\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n  static idGen = 0;\n\n  constructor(min, max, depth, id) {\n    this.min = new THREE.Vector3().copy(min);\n    this.max = new THREE.Vector3().copy(max);\n    this.boundingBox = new THREE.Box3(this.min, this.max);\n    this.center = new THREE.Vector3()\n      .copy(this.max)\n      .sub(this.min)\n      .multiplyScalar(0.5)\n      .add(this.min);\n    this.depth = depth;\n    this.children = [];\n    this.data = null;\n    this.id = id || SplatTreeNode.idGen++;\n  }\n}\n\nclass SplatSubTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.sceneDimensions = new THREE.Vector3();\n    this.sceneMin = new THREE.Vector3();\n    this.sceneMax = new THREE.Vector3();\n    this.rootNode = null;\n    this.nodesWithIndexes = [];\n    this.splatMesh = null;\n  }\n\n  static convertWorkerSubTreeNode(workerSubTreeNode) {\n    const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n    const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n    const convertedNode = new SplatTreeNode(\n      minVector,\n      maxVector,\n      workerSubTreeNode.depth,\n      workerSubTreeNode.id,\n    );\n    if (workerSubTreeNode.data.indexes) {\n      convertedNode.data = {\n        indexes: [],\n      };\n      for (let index of workerSubTreeNode.data.indexes) {\n        convertedNode.data.indexes.push(index);\n      }\n    }\n    if (workerSubTreeNode.children) {\n      for (let child of workerSubTreeNode.children) {\n        convertedNode.children.push(\n          SplatSubTree.convertWorkerSubTreeNode(child),\n        );\n      }\n    }\n    return convertedNode;\n  }\n\n  static convertWorkerSubTree(workerSubTree, splatMesh) {\n    const convertedSubTree = new SplatSubTree(\n      workerSubTree.maxDepth,\n      workerSubTree.maxCentersPerNode,\n    );\n    convertedSubTree.sceneMin = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMin,\n    );\n    convertedSubTree.sceneMax = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMax,\n    );\n\n    convertedSubTree.splatMesh = splatMesh;\n    convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(\n      workerSubTree.rootNode,\n    );\n\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    convertedSubTree.nodesWithIndexes = [];\n    visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        convertedSubTree.nodesWithIndexes.push(node);\n      }\n    });\n\n    return convertedSubTree;\n  }\n}\n\nfunction createSplatTreeWorker(self) {\n  let WorkerSplatTreeNodeIDGen = 0;\n\n  class WorkerBox3 {\n    constructor(min, max) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n    }\n\n    containsPoint(point) {\n      return (\n        point[0] >= this.min[0] &&\n        point[0] <= this.max[0] &&\n        point[1] >= this.min[1] &&\n        point[1] <= this.max[1] &&\n        point[2] >= this.min[2] &&\n        point[2] <= this.max[2]\n      );\n    }\n  }\n\n  class WorkerSplatSubTree {\n    constructor(maxDepth, maxCentersPerNode) {\n      this.maxDepth = maxDepth;\n      this.maxCentersPerNode = maxCentersPerNode;\n      this.sceneDimensions = [];\n      this.sceneMin = [];\n      this.sceneMax = [];\n      this.rootNode = null;\n      this.addedIndexes = {};\n      this.nodesWithIndexes = [];\n      this.splatMesh = null;\n      this.disposed = false;\n    }\n  }\n\n  class WorkerSplatTreeNode {\n    constructor(min, max, depth, id) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n      this.center = [\n        (max[0] - min[0]) * 0.5 + min[0],\n        (max[1] - min[1]) * 0.5 + min[1],\n        (max[2] - min[2]) * 0.5 + min[2],\n      ];\n      this.depth = depth;\n      this.children = [];\n      this.data = null;\n      this.id = id || WorkerSplatTreeNodeIDGen++;\n    }\n  }\n\n  processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n    const splatCount = node.data.indexes.length;\n\n    if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n      const newIndexes = [];\n      for (let i = 0; i < node.data.indexes.length; i++) {\n        if (!tree.addedIndexes[node.data.indexes[i]]) {\n          newIndexes.push(node.data.indexes[i]);\n          tree.addedIndexes[node.data.indexes[i]] = true;\n        }\n      }\n      node.data.indexes = newIndexes;\n      node.data.indexes.sort((a, b) => {\n        if (a > b) return 1;\n        else return -1;\n      });\n      tree.nodesWithIndexes.push(node);\n      return;\n    }\n\n    const nodeDimensions = [\n      node.max[0] - node.min[0],\n      node.max[1] - node.min[1],\n      node.max[2] - node.min[2],\n    ];\n    const halfDimensions = [\n      nodeDimensions[0] * 0.5,\n      nodeDimensions[1] * 0.5,\n      nodeDimensions[2] * 0.5,\n    ];\n    const nodeCenter = [\n      node.min[0] + halfDimensions[0],\n      node.min[1] + halfDimensions[1],\n      node.min[2] + halfDimensions[2],\n    ];\n\n    const childrenBounds = [\n      // top section, clockwise from upper-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n\n      // bottom section, clockwise from lower-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]],\n      ),\n    ];\n\n    const splatCounts = [];\n    const baseIndexes = [];\n    for (let i = 0; i < childrenBounds.length; i++) {\n      splatCounts[i] = 0;\n      baseIndexes[i] = [];\n    }\n\n    const center = [0, 0, 0];\n    for (let i = 0; i < splatCount; i++) {\n      const splatGlobalIndex = node.data.indexes[i];\n      const centerBase = indexToCenter[splatGlobalIndex];\n      center[0] = sceneCenters[centerBase];\n      center[1] = sceneCenters[centerBase + 1];\n      center[2] = sceneCenters[centerBase + 2];\n      for (let j = 0; j < childrenBounds.length; j++) {\n        if (childrenBounds[j].containsPoint(center)) {\n          splatCounts[j]++;\n          baseIndexes[j].push(splatGlobalIndex);\n        }\n      }\n    }\n\n    for (let i = 0; i < childrenBounds.length; i++) {\n      const childNode = new WorkerSplatTreeNode(\n        childrenBounds[i].min,\n        childrenBounds[i].max,\n        node.depth + 1,\n      );\n      childNode.data = {\n        indexes: baseIndexes[i],\n      };\n      node.children.push(childNode);\n    }\n\n    node.data = {};\n    for (let child of node.children) {\n      processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n    }\n    return;\n  };\n\n  const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n    const sceneMin = [0, 0, 0];\n    const sceneMax = [0, 0, 0];\n    const indexes = [];\n    const centerCount = Math.floor(sceneCenters.length / 4);\n    for (let i = 0; i < centerCount; i++) {\n      const base = i * 4;\n      const x = sceneCenters[base];\n      const y = sceneCenters[base + 1];\n      const z = sceneCenters[base + 2];\n      const index = Math.round(sceneCenters[base + 3]);\n      if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n      if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n      if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n      if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n      if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n      if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n      indexes.push(index);\n    }\n    const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n    subTree.sceneMin = sceneMin;\n    subTree.sceneMax = sceneMax;\n    subTree.rootNode = new WorkerSplatTreeNode(\n      subTree.sceneMin,\n      subTree.sceneMax,\n      0,\n    );\n    subTree.rootNode.data = {\n      indexes: indexes,\n    };\n\n    return subTree;\n  };\n\n  function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n    const indexToCenter = [];\n    for (let sceneCenters of allCenters) {\n      const centerCount = Math.floor(sceneCenters.length / 4);\n      for (let i = 0; i < centerCount; i++) {\n        const base = i * 4;\n        const index = Math.round(sceneCenters[base + 3]);\n        indexToCenter[index] = base;\n      }\n    }\n    const subTrees = [];\n    for (let sceneCenters of allCenters) {\n      const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n      subTrees.push(subTree);\n      processSplatTreeNode(\n        subTree,\n        subTree.rootNode,\n        indexToCenter,\n        sceneCenters,\n      );\n    }\n    self.postMessage({\n      subTrees: subTrees,\n    });\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.process) {\n      createSplatTree(\n        e.data.process.centers,\n        e.data.process.maxDepth,\n        e.data.process.maxCentersPerNode,\n      );\n    }\n  };\n}\n\nfunction workerProcessCenters(\n  splatTreeWorker,\n  centers,\n  transferBuffers,\n  maxDepth,\n  maxCentersPerNode,\n) {\n  splatTreeWorker.postMessage(\n    {\n      process: {\n        centers: centers,\n        maxDepth: maxDepth,\n        maxCentersPerNode: maxCentersPerNode,\n      },\n    },\n    transferBuffers,\n  );\n}\n\nfunction checkAndCreateWorker() {\n  const splatTreeWorker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n  return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.subTrees = [];\n    this.splatMesh = null;\n  }\n\n  dispose() {\n    this.diposeSplatTreeWorker();\n    this.disposed = true;\n  }\n\n  diposeSplatTreeWorker() {\n    if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n    this.splatTreeWorker = null;\n  }\n\n  /**\n   * Construct this instance of SplatTree from an instance of SplatMesh.\n   *\n   * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n   * @param {function} filterFunc Optional function to filter out unwanted splats.\n   * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                   builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {undefined}\n   */\n  processSplatMesh = function(\n    splatMesh,\n    filterFunc = () => true,\n    onIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n    this.splatMesh = splatMesh;\n    this.subTrees = [];\n    const center = new THREE.Vector3();\n\n    const addCentersForScene = (splatOffset, splatCount) => {\n      const sceneCenters = new Float32Array(splatCount * 4);\n      let addedCount = 0;\n      for (let i = 0; i < splatCount; i++) {\n        const globalSplatIndex = i + splatOffset;\n        if (filterFunc(globalSplatIndex)) {\n          splatMesh.getSplatCenter(globalSplatIndex, center);\n          const addBase = addedCount * 4;\n          sceneCenters[addBase] = center.x;\n          sceneCenters[addBase + 1] = center.y;\n          sceneCenters[addBase + 2] = center.z;\n          sceneCenters[addBase + 3] = globalSplatIndex;\n          addedCount++;\n        }\n      }\n      return sceneCenters;\n    };\n\n    return new Promise((resolve) => {\n      const checkForEarlyExit = () => {\n        if (this.disposed) {\n          this.diposeSplatTreeWorker();\n          resolve();\n          return true;\n        }\n        return false;\n      };\n\n      if (onIndexesUpload) onIndexesUpload(false);\n\n      delayedExecute(() => {\n        if (checkForEarlyExit()) return;\n\n        const allCenters = [];\n        if (splatMesh.dynamicMode) {\n          let splatOffset = 0;\n          for (let s = 0; s < splatMesh.scenes.length; s++) {\n            const scene = splatMesh.getScene(s);\n            const splatCount = scene.splatBuffer.getSplatCount();\n            const sceneCenters = addCentersForScene(splatOffset, splatCount);\n            allCenters.push(sceneCenters);\n            splatOffset += splatCount;\n          }\n        } else {\n          const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n          allCenters.push(sceneCenters);\n        }\n\n        this.splatTreeWorker.onmessage = (e) => {\n          if (checkForEarlyExit()) return;\n\n          if (e.data.subTrees) {\n            if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n            delayedExecute(() => {\n              if (checkForEarlyExit()) return;\n\n              for (let workerSubTree of e.data.subTrees) {\n                const convertedSubTree = SplatSubTree.convertWorkerSubTree(\n                  workerSubTree,\n                  splatMesh,\n                );\n                this.subTrees.push(convertedSubTree);\n              }\n              this.diposeSplatTreeWorker();\n\n              if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n              delayedExecute(() => {\n                resolve();\n              });\n            });\n          }\n        };\n\n        delayedExecute(() => {\n          if (checkForEarlyExit()) return;\n          if (onIndexesUpload) onIndexesUpload(true);\n          const transferBuffers = allCenters.map((array) => array.buffer);\n          workerProcessCenters(\n            this.splatTreeWorker,\n            allCenters,\n            transferBuffers,\n            this.maxDepth,\n            this.maxCentersPerNode,\n          );\n        });\n      });\n    });\n  };\n\n  countLeaves() {\n    let leafCount = 0;\n    this.visitLeaves(() => {\n      leafCount++;\n    });\n\n    return leafCount;\n  }\n\n  visitLeaves(visitFunc) {\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    for (let subTree of this.subTrees) {\n      visitLeavesFromNode(subTree.rootNode, visitFunc);\n    }\n  }\n}\n","function WebGLExtensions(gl) {\n  const extensions = {};\n\n  function getExtension(name) {\n    if (extensions[name] !== undefined) {\n      return extensions[name];\n    }\n\n    let extension;\n\n    switch (name) {\n      case 'WEBGL_depth_texture':\n        extension =\n          gl.getExtension('WEBGL_depth_texture') ||\n          gl.getExtension('MOZ_WEBGL_depth_texture') ||\n          gl.getExtension('WEBKIT_WEBGL_depth_texture');\n        break;\n\n      case 'EXT_texture_filter_anisotropic':\n        extension =\n          gl.getExtension('EXT_texture_filter_anisotropic') ||\n          gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n          gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        break;\n\n      case 'WEBGL_compressed_texture_s3tc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n        break;\n\n      case 'WEBGL_compressed_texture_pvrtc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_pvrtc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n        break;\n\n      default:\n        extension = gl.getExtension(name);\n    }\n\n    extensions[name] = extension;\n\n    return extension;\n  }\n\n  return {\n    has: function(name) {\n      return getExtension(name) !== null;\n    },\n\n    init: function(capabilities) {\n      if (capabilities.isWebGL2) {\n        getExtension('EXT_color_buffer_float');\n        getExtension('WEBGL_clip_cull_distance');\n      } else {\n        getExtension('WEBGL_depth_texture');\n        getExtension('OES_texture_float');\n        getExtension('OES_texture_half_float');\n        getExtension('OES_texture_half_float_linear');\n        getExtension('OES_standard_derivatives');\n        getExtension('OES_element_index_uint');\n        getExtension('OES_vertex_array_object');\n        getExtension('ANGLE_instanced_arrays');\n      }\n\n      getExtension('OES_texture_float_linear');\n      getExtension('EXT_color_buffer_half_float');\n      getExtension('WEBGL_multisampled_render_to_texture');\n    },\n\n    get: function(name) {\n      const extension = getExtension(name);\n\n      if (extension === null) {\n        console.warn(\n          'THREE.WebGLRenderer: ' + name + ' extension not supported.',\n        );\n      }\n\n      return extension;\n    },\n  };\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities(gl, extensions, parameters) {\n  let maxAnisotropy;\n\n  function getMaxAnisotropy() {\n    if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    } else {\n      maxAnisotropy = 0;\n    }\n\n    return maxAnisotropy;\n  }\n\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision >\n          0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n          .precision > 0\n      ) {\n        return 'highp';\n      }\n\n      precision = 'mediump';\n    }\n\n    if (precision === 'mediump') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0\n      ) {\n        return 'mediump';\n      }\n    }\n\n    return 'lowp';\n  }\n\n  const isWebGL2 =\n    typeof WebGL2RenderingContext !== 'undefined' &&\n    gl.constructor.name === 'WebGL2RenderingContext';\n\n  let precision =\n    parameters.precision !== undefined ? parameters.precision : 'highp';\n  const maxPrecision = getMaxPrecision(precision);\n\n  if (maxPrecision !== precision) {\n    console.warn(\n      'THREE.WebGLRenderer:',\n      precision,\n      'not supported, using',\n      maxPrecision,\n      'instead.',\n    );\n    precision = maxPrecision;\n  }\n\n  const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\n  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n  const vertexTextures = maxVertexTextures > 0;\n  const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n  const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n  const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\n  return {\n    isWebGL2: isWebGL2,\n\n    drawBuffers: drawBuffers,\n\n    getMaxAnisotropy: getMaxAnisotropy,\n    getMaxPrecision: getMaxPrecision,\n\n    precision: precision,\n    logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    maxTextures: maxTextures,\n    maxVertexTextures: maxVertexTextures,\n    maxTextureSize: maxTextureSize,\n    maxCubemapSize: maxCubemapSize,\n\n    maxAttributes: maxAttributes,\n    maxVertexUniforms: maxVertexUniforms,\n    maxVaryings: maxVaryings,\n    maxFragmentUniforms: maxFragmentUniforms,\n\n    vertexTextures: vertexTextures,\n    floatFragmentTextures: floatFragmentTextures,\n    floatVertexTextures: floatVertexTextures,\n\n    maxSamples: maxSamples,\n  };\n}\n\nexport { WebGLCapabilities };\n","import * as THREE from 'three';\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\nimport { SplatGeometry } from './SplatGeometry.js';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from '../splattree/SplatTree.js';\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\nimport { Constants } from '../Constants.js';\nimport { SceneRevealMode } from '../SceneRevealMode.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\nimport { LogLevel } from '../LogLevel.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\nconst MAX_TEXTURE_TEXELS = 16777216;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n  constructor(\n    splatRenderMode = SplatRenderMode.ThreeD,\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    halfPrecisionCovariancesOnGPU = false,\n    devicePixelRatio = 1,\n    enableDistancesComputationOnGPU = true,\n    integerBasedDistancesComputation = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 1024,\n    logLevel = LogLevel.None,\n    sphericalHarmonicsDegree = 0,\n    sceneFadeInRateMultiplier = 1.0,\n  ) {\n    super(dummyGeometry, dummyMaterial);\n\n    // Reference to a Three.js renderer\n    this.renderer = undefined;\n\n    // Determine how the splats are rendered\n    this.splatRenderMode = splatRenderMode;\n\n    // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n    // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n    // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n    // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n    this.dynamicMode = dynamicMode;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = enableOptionalEffects;\n\n    // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n\n    // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n    this.devicePixelRatio = devicePixelRatio;\n\n    // Use a transform feedback to calculate splat distances from the camera\n    this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n\n    // Use a faster integer-based approach for calculating splat distances from the camera\n    this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = antialiased;\n\n    // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n\n    // The verbosity of console logging\n    this.logLevel = logLevel;\n\n    // Degree 0 means no spherical harmonics\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n\n    this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\n\n    // The individual splat scenes stored in this splat mesh, each containing their own transform\n    this.scenes = [];\n\n    // Special octree tailored to SplatMesh instances\n    this.splatTree = null;\n    this.baseSplatTree = null;\n\n    // Cache textures and the intermediate data used to populate them\n    this.splatDataTextures = {};\n\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = false;\n    this.lastRenderer = null;\n    this.visible = false;\n\n    // This is used to define how to modify the material\n    this.renderSplatsID = (status) => {\n      this.material.uniforms.uColorID.value = status;\n      this.material.transparent = !status;\n    };\n  }\n\n  /**\n   * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n   * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n   * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n   * @param {Array<object>} sceneOptions Array of options objects: {\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @return {Array<THREE.Matrix4>}\n   */\n  static buildScenes(parentObject, splatBuffers, sceneOptions) {\n    const scenes = [];\n    scenes.length = splatBuffers.length;\n    for (let i = 0; i < splatBuffers.length; i++) {\n      const splatBuffer = splatBuffers[i];\n      const options = sceneOptions[i] || {};\n      let positionArray = options['position'] || [0, 0, 0];\n      let rotationArray = options['rotation'] || [0, 0, 0, 1];\n      let scaleArray = options['scale'] || [1, 1, 1];\n      const position = new THREE.Vector3().fromArray(positionArray);\n      const rotation = new THREE.Quaternion().fromArray(rotationArray);\n      const scale = new THREE.Vector3().fromArray(scaleArray);\n      const scene = SplatMesh.createScene(\n        splatBuffer,\n        position,\n        rotation,\n        scale,\n        options.splatAlphaRemovalThreshold || 1,\n        options.opacity,\n        options.visible,\n      );\n      parentObject.add(scene);\n      scenes[i] = scene;\n    }\n    return scenes;\n  }\n\n  static createScene(\n    splatBuffer,\n    position,\n    rotation,\n    scale,\n    minimumAlpha,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    return new SplatScene(\n      splatBuffer,\n      position,\n      rotation,\n      scale,\n      minimumAlpha,\n      opacity,\n      visible,\n    );\n  }\n\n  /**\n   * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n   * local data within a single scene.\n   * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n   * @return {object}\n   */\n  static buildSplatIndexMaps(splatBuffers) {\n    const localSplatIndexMap = [];\n    const sceneIndexMap = [];\n    let totalSplatCount = 0;\n    for (let s = 0; s < splatBuffers.length; s++) {\n      const splatBuffer = splatBuffers[s];\n      const maxSplatCount = splatBuffer.getMaxSplatCount();\n      for (let i = 0; i < maxSplatCount; i++) {\n        localSplatIndexMap[totalSplatCount] = i;\n        sceneIndexMap[totalSplatCount] = s;\n        totalSplatCount++;\n      }\n    }\n    return {\n      localSplatIndexMap,\n      sceneIndexMap,\n    };\n  }\n\n  /**\n   * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n   * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {SplatTree}\n   */\n  buildSplatTree = function(\n    minAlphas = [],\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    return new Promise((resolve) => {\n      this.disposeSplatTree();\n      // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n      // be configured on a per-scene basis\n      this.baseSplatTree = new SplatTree(8, 1000);\n      const buildStartTime = performance.now();\n      const splatColor = new THREE.Vector4();\n      this.baseSplatTree\n        .processSplatMesh(\n          this,\n          (splatIndex) => {\n            this.getSplatColor(splatIndex, splatColor);\n            const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n            const minAlpha = minAlphas[sceneIndex] || 1;\n            return splatColor.w >= minAlpha;\n          },\n          onSplatTreeIndexesUpload,\n          onSplatTreeConstruction,\n        )\n        .then(() => {\n          const buildTime = performance.now() - buildStartTime;\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('SplatTree build: ' + buildTime + ' ms');\n          }\n          if (this.disposed) {\n            resolve();\n          } else {\n            this.splatTree = this.baseSplatTree;\n            this.baseSplatTree = null;\n\n            let leavesWithVertices = 0;\n            let avgSplatCount = 0;\n            let maxSplatCount = 0;\n            let nodeCount = 0;\n\n            this.splatTree.visitLeaves((node) => {\n              const nodeSplatCount = node.data.indexes.length;\n              if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n              }\n            });\n            if (this.logLevel >= LogLevel.Info) {\n              console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n              console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n              avgSplatCount = avgSplatCount / nodeCount;\n              console.log(`Avg splat count per node: ${avgSplatCount}`);\n              console.log(`Total splat count: ${this.getSplatCount()}`);\n            }\n            resolve();\n          }\n        });\n    });\n  };\n\n  /**\n   * Construct this instance of SplatMesh.\n   * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n   * @param {Array<object>} sceneOptions Dynamic options for each scene {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   * }\n   * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n   *                                      says to keep the transform from the existing scene.\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  build(\n    splatBuffers,\n    sceneOptions,\n    keepSceneTransforms = true,\n    finalBuild = false,\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n    preserveVisibleRegion = true,\n  ) {\n    this.sceneOptions = sceneOptions;\n    this.finalBuild = finalBuild;\n\n    const maxSplatCount =\n      SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n    const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\n    if (keepSceneTransforms) {\n      for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n        const newScene = newScenes[i];\n        const existingScene = this.getScene(i);\n        newScene.copyTransformData(existingScene);\n      }\n    }\n    this.scenes = newScenes;\n\n    let minSphericalHarmonicsDegree = 3;\n    for (let splatBuffer of splatBuffers) {\n      const splatBufferSphericalHarmonicsDegree =\n        splatBuffer.getMinSphericalHarmonicsDegree();\n      if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n        minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n      }\n    }\n    this.minSphericalHarmonicsDegree = Math.min(\n      minSphericalHarmonicsDegree,\n      this.sphericalHarmonicsDegree,\n    );\n\n    let splatBuffersChanged = false;\n    if (splatBuffers.length !== this.lastBuildScenes.length) {\n      splatBuffersChanged = true;\n    } else {\n      for (let i = 0; i < splatBuffers.length; i++) {\n        const splatBuffer = splatBuffers[i];\n        if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n          splatBuffersChanged = true;\n          break;\n        }\n      }\n    }\n\n    let isUpdateBuild = true;\n    if (\n      this.scenes.length !== 1 ||\n      this.lastBuildSceneCount !== this.scenes.length ||\n      this.lastBuildMaxSplatCount !== maxSplatCount ||\n      splatBuffersChanged\n    ) {\n      isUpdateBuild = false;\n    }\n\n    if (!isUpdateBuild) {\n      this.boundingBox = new THREE.Box3();\n      if (!preserveVisibleRegion) {\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.firstRenderTime = -1;\n      }\n      this.lastBuildScenes = [];\n      this.lastBuildSplatCount = 0;\n      this.lastBuildMaxSplatCount = 0;\n      this.disposeMeshData();\n      this.geometry = SplatGeometry.build(maxSplatCount);\n      if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n        this.material = SplatMaterial3D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.antialiased,\n          this.maxScreenSpaceSplatSize,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.sphericalHarmonicsDegree,\n        );\n      } else {\n        this.material = SplatMaterial2D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.minSphericalHarmonicsDegree,\n        );\n      }\n\n      const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n      this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n      this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n    }\n\n    const splatBufferSplatCount = this.getSplatCount(true);\n    if (this.enableDistancesComputationOnGPU) {\n      this.setupDistancesComputationTransformFeedback();\n    }\n    const dataUpdateResults =\n      this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n    for (let i = 0; i < this.scenes.length; i++) {\n      this.lastBuildScenes[i] = this.scenes[i];\n    }\n    this.lastBuildSplatCount = splatBufferSplatCount;\n    this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n    this.lastBuildSceneCount = this.scenes.length;\n\n    if (finalBuild && this.scenes.length > 0) {\n      this.buildSplatTree(\n        sceneOptions.map((options) => options.splatAlphaRemovalThreshold || 1),\n        onSplatTreeIndexesUpload,\n        onSplatTreeConstruction,\n      ).then(() => {\n        if (this.onSplatTreeReadyCallback) {\n          this.onSplatTreeReadyCallback(this.splatTree);\n        }\n        this.onSplatTreeReadyCallback = null;\n      });\n    }\n\n    this.visible = this.scenes.length > 0;\n\n    return dataUpdateResults;\n  }\n\n  freeIntermediateSplatData() {\n    const deleteTextureData = (texture) => {\n      delete texture.source.data;\n      delete texture.image;\n      texture.onUpdate = null;\n    };\n\n    delete this.splatDataTextures.baseData.covariances;\n    delete this.splatDataTextures.baseData.centers;\n    delete this.splatDataTextures.baseData.colors;\n    delete this.splatDataTextures.baseData.sphericalHarmonics;\n\n    delete this.splatDataTextures.centerColors.data;\n    delete this.splatDataTextures.covariances.data;\n    if (this.splatDataTextures.sphericalHarmonics) {\n      delete this.splatDataTextures.sphericalHarmonics.data;\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      delete this.splatDataTextures.sceneIndexes.data;\n    }\n\n    this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    this.splatDataTextures.centerColors.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.centerColors.texture);\n    };\n\n    this.splatDataTextures.covariances.texture.needsUpdate = true;\n    this.splatDataTextures.covariances.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.covariances.texture);\n    };\n\n    if (this.splatDataTextures.sphericalHarmonics) {\n      if (this.splatDataTextures.sphericalHarmonics.texture) {\n        this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\n        this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\n          deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\n        };\n      } else {\n        this.splatDataTextures.sphericalHarmonics.textures.forEach(\n          (texture) => {\n            texture.needsUpdate = true;\n            texture.onUpdate = () => {\n              deleteTextureData(texture);\n            };\n          },\n        );\n      }\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\n      this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\n        deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\n      };\n    }\n  }\n  /**\n   * Dispose all resources held by the splat mesh\n   */\n  dispose() {\n    this.disposeMeshData();\n    this.disposeTextures();\n    this.disposeSplatTree();\n    if (this.enableDistancesComputationOnGPU) {\n      if (this.computeDistancesOnGPUSyncTimeout) {\n        clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n        this.computeDistancesOnGPUSyncTimeout = null;\n      }\n      this.disposeDistancesComputationGPUResources();\n    }\n    this.scenes = [];\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n    this.renderer = null;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = true;\n    this.lastRenderer = null;\n    this.visible = false;\n  }\n\n  /**\n   * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n   */\n  disposeMeshData() {\n    if (this.geometry && this.geometry !== dummyGeometry) {\n      this.geometry.dispose();\n      this.geometry = null;\n    }\n    if (this.material) {\n      this.material.dispose();\n      this.material = null;\n    }\n  }\n\n  disposeTextures() {\n    for (let textureKey in this.splatDataTextures) {\n      if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n        const textureContainer = this.splatDataTextures[textureKey];\n        if (textureContainer.texture) {\n          textureContainer.texture.dispose();\n          textureContainer.texture = null;\n        }\n      }\n    }\n    this.splatDataTextures = null;\n  }\n\n  disposeSplatTree() {\n    if (this.splatTree) {\n      this.splatTree.dispose();\n      this.splatTree = null;\n    }\n    if (this.baseSplatTree) {\n      this.baseSplatTree.dispose();\n      this.baseSplatTree = null;\n    }\n  }\n\n  getSplatTree() {\n    return this.splatTree;\n  }\n\n  onSplatTreeReady(callback) {\n    this.onSplatTreeReadyCallback = callback;\n  }\n\n  /**\n   * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n   * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n   * @param {*} start The index at which to start copying data\n   * @param {*} end  The index at which to stop copying data\n   * @return {object}\n   */\n  getDataForDistancesComputation(start, end) {\n    const centers = this.integerBasedDistancesComputation ?\n      this.getIntegerCenters(start, end, true) :\n      this.getFloatCenters(start, end, true);\n    const sceneIndexes = this.getSceneIndexes(start, end);\n    return {\n      centers,\n      sceneIndexes,\n    };\n  }\n\n  /**\n   * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   * @return {object}\n   */\n  refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n    const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n      updateStart,\n      splatCount - 1,\n    );\n    if (this.enableDistancesComputationOnGPU) {\n      this.refreshGPUBuffersForDistancesComputation(\n        centers,\n        sceneIndexes,\n        sinceLastBuildOnly,\n      );\n    }\n    return {\n      from: updateStart,\n      to: splatCount - 1,\n      count: splatCount - updateStart,\n      centers: centers,\n      sceneIndexes: sceneIndexes,\n    };\n  }\n\n  /**\n   * Update the GPU buffers that are used for computing splat distances on the GPU.\n   * @param {Array<number>} centers Splat center positions\n   * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshGPUBuffersForDistancesComputation(\n    centers,\n    sceneIndexes,\n    sinceLastBuildOnly = false,\n  ) {\n    const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    this.updateGPUCentersBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      centers,\n      offset,\n    );\n    this.updateGPUTransformIndexesBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      sceneIndexes,\n      offset,\n    );\n  }\n\n  /**\n   * Refresh data textures with data from the splat buffers for this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const fromSplat = this.lastBuildSplatCount;\n    const toSplat = splatCount - 1;\n\n    if (!sinceLastBuildOnly) {\n      this.setupDataTextures();\n      this.updateBaseDataFromSplatBuffers();\n    } else {\n      this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\n    }\n\n    this.updateDataTexturesFromBaseData(fromSplat, toSplat);\n    this.updateVisibleRegion(sinceLastBuildOnly);\n  }\n\n  setupDataTextures() {\n    const maxSplatCount = this.getMaxSplatCount();\n    const splatCount = this.getSplatCount(true);\n\n    this.disposeTextures();\n\n    const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\n      const texSize = new THREE.Vector2(4096, 1024);\n      while (\n        texSize.x * texSize.y * elementsPerTexel <\n        maxSplatCount * elementsPerSplat\n      ) {\n        texSize.y *= 2;\n      }\n      return texSize;\n    };\n\n    const getCovariancesElementsPertexelStored = (compressionLevel) => {\n      return compressionLevel >= 1 ?\n        COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED :\n        COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\n    };\n\n    const getCovariancesInitialTextureSpecs = (compressionLevel) => {\n      const elementsPerTexelStored =\n        getCovariancesElementsPertexelStored(compressionLevel);\n      const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\n      return { elementsPerTexelStored, texSize };\n    };\n\n    let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n    const scaleRotationCompressionLevel = 0;\n    const shCompressionLevel =\n      this.getTargetSphericalHarmonicsCompressionLevel();\n\n    let covariances;\n    let scales;\n    let rotations;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      const initialCovTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      if (\n        initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y >\n          MAX_TEXTURE_TEXELS &&\n        covarianceCompressionLevel === 0\n      ) {\n        covarianceCompressionLevel = 1;\n      }\n      covariances = new Float32Array(\n        maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT,\n      );\n    } else {\n      scales = new Float32Array(maxSplatCount * 3);\n      rotations = new Float32Array(maxSplatCount * 4);\n    }\n\n    const centers = new Float32Array(maxSplatCount * 3);\n    const colors = new Uint8Array(maxSplatCount * 4);\n\n    let SphericalHarmonicsArrayType = Float32Array;\n    if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n    else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n    const shComponentCount = getSphericalHarmonicsComponentCountForDegree(\n      this.minSphericalHarmonicsDegree,\n    );\n    const shData = this.minSphericalHarmonicsDegree ?\n      new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) :\n      undefined;\n\n    // set up centers/colors data texture\n    const centersColsTexSize = computeDataTextureSize(\n      CENTER_COLORS_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedCentersCols = new Uint32Array(\n      centersColsTexSize.x *\n        centersColsTexSize.y *\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n    );\n    SplatMesh.updateCenterColorsPaddedData(\n      0,\n      splatCount - 1,\n      centers,\n      colors,\n      paddedCentersCols,\n    );\n\n    const centersColsTex = new THREE.DataTexture(\n      paddedCentersCols,\n      centersColsTexSize.x,\n      centersColsTexSize.y,\n      THREE.RGBAIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    centersColsTex.internalFormat = 'RGBA32UI';\n    centersColsTex.needsUpdate = true;\n    this.material.uniforms.centersColorsTexture.value = centersColsTex;\n    this.material.uniforms.centersColorsTextureSize.value.copy(\n      centersColsTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n\n    this.splatDataTextures = {\n      baseData: {\n        covariances: covariances,\n        scales: scales,\n        rotations: rotations,\n        centers: centers,\n        colors: colors,\n        sphericalHarmonics: shData,\n      },\n      centerColors: {\n        data: paddedCentersCols,\n        texture: centersColsTex,\n        size: centersColsTexSize,\n      },\n    };\n\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      // set up covariances data texture\n\n      const covTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      const covariancesElementsPerTexelStored =\n        covTexSpecs.elementsPerTexelStored;\n      const covTexSize = covTexSpecs.texSize;\n\n      let CovariancesDataType =\n        covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\n      const covariancesElementsPerTexelAllocated =\n        covarianceCompressionLevel >= 1 ?\n          COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\n          COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\n      const covariancesTextureData = new CovariancesDataType(\n        covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated,\n      );\n\n      if (covarianceCompressionLevel === 0) {\n        covariancesTextureData.set(covariances);\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          covariances,\n          covariancesTextureData,\n          0,\n          0,\n          covariances.length,\n        );\n      }\n\n      let covTex;\n      if (covarianceCompressionLevel >= 1) {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        covTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\n      } else {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAFormat,\n          THREE.FloatType,\n        );\n        this.material.uniforms.covariancesTexture.value = covTex;\n\n        // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\n        const dummyTex = new THREE.DataTexture(\n          new Uint32Array(32),\n          2,\n          2,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        dummyTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\n        dummyTex.needsUpdate = true;\n      }\n      covTex.needsUpdate = true;\n\n      this.material.uniforms.covariancesAreHalfFloat.value =\n        covarianceCompressionLevel >= 1 ? 1 : 0;\n      this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n      this.splatDataTextures['covariances'] = {\n        data: covariancesTextureData,\n        texture: covTex,\n        size: covTexSize,\n        compressionLevel: covarianceCompressionLevel,\n        elementsPerTexelStored: covariancesElementsPerTexelStored,\n        elementsPerTexelAllocated: covariancesElementsPerTexelAllocated,\n      };\n    } else {\n      // set up scale & rotations data texture\n      const elementsPerSplat = 6;\n      const scaleRotationsTexSize = computeDataTextureSize(\n        SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n        elementsPerSplat,\n      );\n      let ScaleRotationsDataType =\n        scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\n      let scaleRotationsTextureType =\n        scaleRotationCompressionLevel >= 1 ?\n          THREE.HalfFloatType :\n          THREE.FloatType;\n      const paddedScaleRotations = new ScaleRotationsDataType(\n        scaleRotationsTexSize.x *\n          scaleRotationsTexSize.y *\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n      );\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        0,\n        splatCount - 1,\n        scales,\n        rotations,\n        paddedScaleRotations,\n      );\n\n      const scaleRotationsTex = new THREE.DataTexture(\n        paddedScaleRotations,\n        scaleRotationsTexSize.x,\n        scaleRotationsTexSize.y,\n        THREE.RGBAFormat,\n        scaleRotationsTextureType,\n      );\n      scaleRotationsTex.needsUpdate = true;\n      this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\n      this.material.uniforms.scaleRotationsTextureSize.value.copy(\n        scaleRotationsTexSize,\n      );\n\n      this.splatDataTextures['scaleRotations'] = {\n        data: paddedScaleRotations,\n        texture: scaleRotationsTex,\n        size: scaleRotationsTexSize,\n        compressionLevel: scaleRotationCompressionLevel,\n      };\n    }\n\n    if (shData) {\n      let paddedSHComponentCount = shComponentCount;\n      if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n      const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\n      let shTexSize = computeDataTextureSize(\n        shElementsPerTexel,\n        paddedSHComponentCount,\n      );\n\n      const shComponentCountPerChannel = shComponentCount / 3;\n      paddedSHComponentCount = shComponentCountPerChannel;\n      if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n      shTexSize = computeDataTextureSize(\n        shElementsPerTexel,\n        paddedSHComponentCount,\n      );\n\n      const paddedSHArrays = [];\n      const shTextures = [];\n\n      let degree1DataAmount = maxSplatCount * 3;\n      let degree2DataAmount = maxSplatCount * 5;\n      let degree3DataAmount = maxSplatCount * 7;\n\n      let degree1TextureSize = Math.ceil(Math.sqrt(degree1DataAmount));\n      let degree2TextureSize = Math.ceil(Math.sqrt(degree2DataAmount));\n      let degree3TextureSize = Math.ceil(Math.sqrt(degree3DataAmount));\n\n      let paddedSHArray1 = new Uint32Array(\n        degree1TextureSize * degree1TextureSize,\n      );\n      let paddedSHArray2 = new Uint32Array(\n        degree2TextureSize * degree2TextureSize,\n      );\n      let paddedSHArray3 = new Uint32Array(\n        degree3TextureSize * degree3TextureSize,\n      );\n\n      paddedSHArrays.push(paddedSHArray1);\n      paddedSHArrays.push(paddedSHArray2);\n      paddedSHArrays.push(paddedSHArray3);\n\n      // The harmonics are encoded into 45 different values for all the degrees (up to 3)\n\n      let totalSHDataPerSplat = 0;\n      if (this.sphericalHarmonicsDegree == 1) totalSHDataPerSplat = 9;\n      if (this.sphericalHarmonicsDegree == 2) totalSHDataPerSplat = 24;\n      if (this.sphericalHarmonicsDegree == 3) totalSHDataPerSplat = 45;\n\n      for (let c = 0; c < maxSplatCount; c++) {\n        // For the first degree (3 harmonics)\n        if (shComponentCountPerChannel >= 3) {\n          // 9 values are used for the first degree, 3 harmonics * 3 channels\n          for (let i = 0; i < 3; i++) {\n            let index = totalSHDataPerSplat * c + 3 * i;\n            let r = shData[index + 0];\n            let g = shData[index + 1];\n            let b = shData[index + 2];\n            paddedSHArray1[3 * c + i] = (r << 21) | (g << 11) | b;\n          }\n\n          // For the second degree (5 harmonics)\n          // The 8 is the sum of the harmonics (3 + 5)\n          if (shComponentCountPerChannel >= 8) {\n            // 15 values are used for the second degree, 5 harmonics * 3 channels\n            // The 9 is the offset where the second degree is being defined  in the 45 elements\n            for (let i = 0; i < 5; i++) {\n              let index = totalSHDataPerSplat * c + 9 + 3 * i;\n              let r = shData[index + 0];\n              let g = shData[index + 1];\n              let b = shData[index + 2];\n              paddedSHArray2[5 * c + i] = (r << 21) | (g << 11) | b;\n            }\n\n            // For the second degree (5 harmonics)\n            // The 15 is the sum of the harmonics (3 + 5 + 7)\n            if (shComponentCountPerChannel >= 15) {\n              // 21 values are used for the third degree, 7 harmonics * 3 channels\n              // the 24 is the offset where the third degree is beind defined in the 45 elements\n              for (let i = 0; i < 7; i++) {\n                let index = totalSHDataPerSplat * c + 24 + 3 * i;\n                let r = shData[index + 0];\n                let g = shData[index + 1];\n                let b = shData[index + 2];\n                paddedSHArray3[7 * c + i] = (r << 21) | (g << 11) | b;\n              }\n            }\n          }\n        }\n\n        const shTextureDegree1 = new THREE.DataTexture(\n          paddedSHArray1,\n          degree1TextureSize,\n          degree1TextureSize,\n          THREE.RedIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        shTextureDegree1.internalFormat = 'R32UI';\n\n        shTextures.push(shTextureDegree1);\n        shTextureDegree1.needsUpdate = true;\n        this.material.uniforms.sphericalHarmonicsTextureR.value =\n          shTextureDegree1;\n\n        const shTextureDegree2 = new THREE.DataTexture(\n          paddedSHArray2,\n          degree2TextureSize,\n          degree2TextureSize,\n          THREE.RedIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        shTextureDegree2.internalFormat = 'R32UI';\n\n        shTextures.push(shTextureDegree2);\n        shTextureDegree2.needsUpdate = true;\n        this.material.uniforms.sphericalHarmonicsTextureG.value =\n          shTextureDegree2;\n\n        const shTextureDegree3 = new THREE.DataTexture(\n          paddedSHArray3,\n          degree3TextureSize,\n          degree3TextureSize,\n          THREE.RedIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        shTextureDegree3.internalFormat = 'R32UI';\n\n        shTextures.push(shTextureDegree3);\n        shTextureDegree3.needsUpdate = true;\n        this.material.uniforms.sphericalHarmonicsTextureB.value =\n          shTextureDegree3;\n\n        this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\n        this.splatDataTextures['sphericalHarmonics'] = {\n          componentCount: shComponentCount,\n          componentCountPerChannel: shComponentCountPerChannel,\n          paddedComponentCount: paddedSHComponentCount,\n          data: paddedSHArrays,\n          textureCount: 3,\n          textures: shTextures,\n          size: shTexSize,\n          compressionLevel: shCompressionLevel,\n          elementsPerTexel: shElementsPerTexel,\n        };\n      }\n      let buffer = this.scenes[0].splatBuffer;\n\n      this.material.uniforms.harmonicsRangeMin.value =\n        buffer.minSphericalHarmonicsCoeff;\n      this.material.uniforms.harmonicsRange.value = Math.max(\n        Math.abs(buffer.maxSphericalHarmonicsCoeff),\n        Math.abs(buffer.minSphericalHarmonicsCoeff),\n      );\n\n      this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(\n        shTexSize,\n      );\n      this.material.uniforms.sphericalHarmonics8BitMode.value =\n        shCompressionLevel === 2 ? 1 : 0;\n      for (let s = 0; s < this.scenes.length; s++) {\n        const splatBuffer = this.scenes[s].splatBuffer;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[\n          s\n        ] = splatBuffer.minSphericalHarmonicsCoeff;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[\n          s\n        ] = splatBuffer.maxSphericalHarmonicsCoeff;\n      }\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const sceneIndexesTexSize = computeDataTextureSize(\n      SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedTransformIndexes = new Uint32Array(\n      sceneIndexesTexSize.x *\n        sceneIndexesTexSize.y *\n        SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n    );\n    for (let c = 0; c < splatCount; c++) {\n      paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = new THREE.DataTexture(\n      paddedTransformIndexes,\n      sceneIndexesTexSize.x,\n      sceneIndexesTexSize.y,\n      THREE.RedIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    sceneIndexesTexture.internalFormat = 'R32UI';\n    sceneIndexesTexture.needsUpdate = true;\n    this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\n    this.material.uniforms.sceneIndexesTextureSize.value.copy(\n      sceneIndexesTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n    this.splatDataTextures['sceneIndexes'] = {\n      data: paddedTransformIndexes,\n      texture: sceneIndexesTexture,\n      size: sceneIndexesTexSize,\n    };\n    this.material.uniforms.sceneCount.value = this.scenes.length;\n  }\n\n  updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\n    const shCompressionLevel = shITextureDesc ?\n      shITextureDesc.compressionLevel :\n      0;\n\n    this.fillSplatDataArrays(\n      this.splatDataTextures.baseData.covariances,\n      this.splatDataTextures.baseData.scales,\n      this.splatDataTextures.baseData.rotations,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      this.splatDataTextures.baseData.sphericalHarmonics,\n      undefined,\n      covarianceCompressionLevel,\n      scaleRotationCompressionLevel,\n      shCompressionLevel,\n      fromSplat,\n      toSplat,\n      fromSplat,\n    );\n  }\n\n  updateDataTexturesFromBaseData(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n\n    // Update center & color data texture\n    const centerColorsTextureDescriptor =\n      this.splatDataTextures['centerColors'];\n    const paddedCenterColors = centerColorsTextureDescriptor.data;\n    const centerColorsTexture = centerColorsTextureDescriptor.texture;\n    SplatMesh.updateCenterColorsPaddedData(\n      fromSplat,\n      toSplat,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      paddedCenterColors,\n    );\n    const centerColorsTextureProps = this.renderer ?\n      this.renderer.properties.get(centerColorsTexture) :\n      null;\n    if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n      centerColorsTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedCenterColors,\n        centerColorsTextureDescriptor.texture,\n        centerColorsTextureDescriptor.size,\n        centerColorsTextureProps,\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n        CENTER_COLORS_ELEMENTS_PER_SPLAT,\n        4,\n        fromSplat,\n        toSplat,\n      );\n    }\n\n    // update covariance data texture\n    if (covarancesTextureDesc) {\n      const covariancesTexture = covarancesTextureDesc.texture;\n      const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n      const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n\n      if (covarianceCompressionLevel === 0) {\n        for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\n          const covariance = this.splatDataTextures.baseData.covariances[i];\n          covarancesTextureDesc.data[i] = covariance;\n        }\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          this.splatDataTextures.baseData.covariances,\n          covarancesTextureDesc.data,\n          fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\n          covarancesStartElement,\n          covariancesEndElement,\n        );\n      }\n\n      const covariancesTextureProps = this.renderer ?\n        this.renderer.properties.get(covariancesTexture) :\n        null;\n      if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n        covariancesTexture.needsUpdate = true;\n      } else {\n        if (covarianceCompressionLevel === 0) {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelStored,\n            COVARIANCES_ELEMENTS_PER_SPLAT,\n            4,\n            fromSplat,\n            toSplat,\n          );\n        } else {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            2,\n            fromSplat,\n            toSplat,\n          );\n        }\n      }\n    }\n\n    // update scale and rotation data texture\n    if (scaleRotationsTextureDesc) {\n      const paddedScaleRotations = scaleRotationsTextureDesc.data;\n      const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\n      const elementsPerSplat = 6;\n      const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        fromSplat,\n        toSplat,\n        this.splatDataTextures.baseData.scales,\n        this.splatDataTextures.baseData.rotations,\n        paddedScaleRotations,\n      );\n      const scaleRotationsTextureProps = this.renderer ?\n        this.renderer.properties.get(scaleRotationsTexture) :\n        null;\n      if (\n        !scaleRotationsTextureProps ||\n        !scaleRotationsTextureProps.__webglTexture\n      ) {\n        scaleRotationsTexture.needsUpdate = true;\n      } else {\n        this.updateDataTexture(\n          paddedScaleRotations,\n          scaleRotationsTextureDesc.texture,\n          scaleRotationsTextureDesc.size,\n          scaleRotationsTextureProps,\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n          elementsPerSplat,\n          bytesPerElement,\n          fromSplat,\n          toSplat,\n        );\n      }\n    }\n\n    // update spherical harmonics data texture\n    const shData = this.splatDataTextures.baseData.sphericalHarmonics;\n    if (shData) {\n      const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\n\n      let totalSHDataPerSplat = 0;\n      if (this.sphericalHarmonicsDegree == 1) totalSHDataPerSplat = 9;\n      if (this.sphericalHarmonicsDegree == 2) totalSHDataPerSplat = 24;\n      if (this.sphericalHarmonicsDegree == 3) totalSHDataPerSplat = 45;\n\n      for (let c = fromSplat; c <= toSplat; c++) {\n        // For the first degree (3 harmonics)\n        if (shComponentCountPerChannel >= 3) {\n          // 9 values are used for the first degree, 3 harmonics * 3 channels\n          let paddedSHArray1 = shTextureDesc.data[0];\n          for (let i = 0; i < 3; i++) {\n            let index = totalSHDataPerSplat * c + 3 * i;\n            let r = shData[index + 0];\n            let g = shData[index + 1];\n            let b = shData[index + 2];\n\n            paddedSHArray1[3 * c + i] = (r << 21) | (g << 11) | b;\n          }\n\n          // For the second degree (5 harmonics)\n          // The 8 is the sum of the harmonics (3 + 5)\n          if (shComponentCountPerChannel >= 8) {\n            // 15 values are used for the second degree, 5 harmonics * 3 channels\n            // The 9 is the offset where the second degree is being defined  in the 45 elements\n            let paddedSHArray2 = shTextureDesc.data[1];\n            for (let i = 0; i < 5; i++) {\n              let index = totalSHDataPerSplat * c + 9 + 3 * i;\n              let r = shData[index + 0];\n              let g = shData[index + 1];\n              let b = shData[index + 2];\n\n              paddedSHArray2[5 * c + i] = (r << 21) | (g << 11) | b;\n            }\n\n            // For the second degree (5 harmonics)\n            // The 15 is the sum of the harmonics (3 + 5 + 7)\n            if (shComponentCountPerChannel >= 15) {\n              // 21 values are used for the third degree, 7 harmonics * 3 channels\n              // the 24 is the offset where the third degree is beind defined in the 45 elements\n              let paddedSHArray3 = shTextureDesc.data[2];\n              for (let i = 0; i < 7; i++) {\n                let index = totalSHDataPerSplat * c + 24 + 3 * i;\n                let r = shData[index + 0];\n                let g = shData[index + 1];\n                let b = shData[index + 2];\n\n                paddedSHArray3[7 * c + i] = (r << 21) | (g << 11) | b;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // update scene index & transform data\n    const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\n    const paddedSceneIndexes = sceneIndexesTexDesc.data;\n    for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\n      paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = sceneIndexesTexDesc.texture;\n    const sceneIndexesTextureProps = this.renderer ?\n      this.renderer.properties.get(sceneIndexesTexture) :\n      null;\n    if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\n      sceneIndexesTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedSceneIndexes,\n        sceneIndexesTexDesc.texture,\n        sceneIndexesTexDesc.size,\n        sceneIndexesTextureProps,\n        1,\n        1,\n        1,\n        this.lastBuildSplatCount,\n        toSplat,\n      );\n    }\n  }\n\n  getTargetCovarianceCompressionLevel() {\n    return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n  }\n\n  getTargetSphericalHarmonicsCompressionLevel() {\n    return Math.max(0, this.getMaximumSplatBufferCompressionLevel());\n  }\n\n  getMaximumSplatBufferCompressionLevel() {\n    let maxCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n        maxCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return maxCompressionLevel;\n  }\n\n  getMinimumSplatBufferCompressionLevel() {\n    let minCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n        minCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return minCompressionLevel;\n  }\n\n  static computeTextureUpdateRegion(\n    startSplat,\n    endSplat,\n    textureWidth,\n    elementsPerTexel,\n    elementsPerSplat,\n  ) {\n    const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n    const startSplatTexels = startSplat * texelsPerSplat;\n    const startRow = Math.floor(startSplatTexels / textureWidth);\n    const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n    const endSplatTexels = endSplat * texelsPerSplat;\n    const endRow = Math.floor(endSplatTexels / textureWidth);\n    const endRowEndElement =\n      endRow * textureWidth * elementsPerTexel +\n      textureWidth * elementsPerTexel;\n\n    return {\n      dataStart: startRowElement,\n      dataEnd: endRowEndElement,\n      startRow: startRow,\n      endRow: endRow,\n    };\n  }\n\n  updateDataTexture(\n    paddedData,\n    texture,\n    textureSize,\n    textureProps,\n    elementsPerTexel,\n    elementsPerSplat,\n    bytesPerElement,\n    from,\n    to,\n  ) {\n    const gl = this.renderer.getContext();\n    const updateRegion = SplatMesh.computeTextureUpdateRegion(\n      from,\n      to,\n      textureSize.x,\n      elementsPerTexel,\n      elementsPerSplat,\n    );\n    const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n    const updateDataView = new paddedData.constructor(\n      paddedData.buffer,\n      updateRegion.dataStart * bytesPerElement,\n      updateElementCount,\n    );\n    const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n    const glType = this.webGLUtils.convert(texture.type);\n    const glFormat = this.webGLUtils.convert(\n      texture.format,\n      texture.colorSpace,\n    );\n    const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      updateRegion.startRow,\n      textureSize.x,\n      updateHeight,\n      glFormat,\n      glType,\n      updateDataView,\n    );\n    gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n  }\n\n  static updatePaddedCompressedCovariancesTextureData(\n    sourceData,\n    textureData,\n    textureDataStartIndex,\n    fromElement,\n    toElement,\n  ) {\n    let textureDataView = new DataView(textureData.buffer);\n    let textureDataIndex = textureDataStartIndex;\n    let sequentialCount = 0;\n    for (let i = fromElement; i <= toElement; i += 2) {\n      textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\n      textureDataView.setUint16(\n        textureDataIndex * 2 + 2,\n        sourceData[i + 1],\n        true,\n      );\n      textureDataIndex += 2;\n      sequentialCount++;\n      if (sequentialCount >= 3) {\n        textureDataIndex += 2;\n        sequentialCount = 0;\n      }\n    }\n  }\n\n  static updateCenterColorsPaddedData(\n    from,\n    to,\n    centers,\n    colors,\n    paddedCenterColors,\n  ) {\n    for (let c = from; c <= to; c++) {\n      const colorsBase = c * 4;\n      const centersBase = c * 3;\n      const centerColorsBase = c * 4;\n      paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(\n        colors,\n        colorsBase,\n      );\n      paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(\n        centers[centersBase],\n      );\n      paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(\n        centers[centersBase + 1],\n      );\n      paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(\n        centers[centersBase + 2],\n      );\n    }\n  }\n\n  static updateScaleRotationsPaddedData(\n    from,\n    to,\n    scales,\n    rotations,\n    paddedScaleRotations,\n  ) {\n    const combinedSize = 6;\n    for (let c = from; c <= to; c++) {\n      const scaleBase = c * 3;\n      const rotationBase = c * 4;\n      const scaleRotationsBase = c * combinedSize;\n\n      paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\n      paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\n\n      paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\n      paddedScaleRotations[scaleRotationsBase + 4] =\n        rotations[rotationBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 5] =\n        rotations[rotationBase + 2];\n    }\n  }\n\n  updateVisibleRegion(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const tempCenter = new THREE.Vector3();\n    if (!sinceLastBuildOnly) {\n      const avgCenter = new THREE.Vector3();\n      this.scenes.forEach((scene) => {\n        avgCenter.add(scene.splatBuffer.sceneCenter);\n      });\n      avgCenter.multiplyScalar(1.0 / this.scenes.length);\n      this.calculatedSceneCenter.copy(avgCenter);\n      this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ?\n      this.lastBuildSplatCount :\n      0;\n    for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n      this.getSplatCenter(i, tempCenter, true);\n      const distFromCSceneCenter = tempCenter\n        .sub(this.calculatedSceneCenter)\n        .length();\n      if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) {\n        this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n      }\n    }\n\n    if (\n      this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius >\n      VISIBLE_REGION_EXPANSION_DELTA\n    ) {\n      this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n      this.visibleRegionRadius = Math.max(\n        this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA,\n        0.0,\n      );\n    }\n    if (this.finalBuild) {\n      this.visibleRegionRadius = this.visibleRegionBufferRadius =\n        this.maxSplatDistanceFromSceneCenter;\n    }\n    this.updateVisibleRegionFadeDistance();\n  }\n\n  updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n    const fastFadeRate =\n      SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\n    const gradualFadeRate =\n      SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\n    const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n    const fadeInRate =\n      sceneRevealMode === SceneRevealMode.Default ?\n        defaultFadeInRate :\n        gradualFadeRate;\n    this.visibleRegionFadeStartRadius =\n      (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n        fadeInRate +\n      this.visibleRegionFadeStartRadius;\n    const fadeInPercentage =\n      this.visibleRegionBufferRadius > 0 ?\n        this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius :\n        0;\n    const fadeInComplete = fadeInPercentage > 0.99;\n    const shaderFadeInComplete =\n      fadeInComplete || sceneRevealMode === SceneRevealMode.Instant ? 1 : 0;\n\n    this.material.uniforms.visibleRegionFadeStartRadius.value =\n      this.visibleRegionFadeStartRadius;\n    this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n    this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n    this.material.uniforms.currentTime.value = performance.now();\n    this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n    this.material.uniformsNeedUpdate = true;\n    this.visibleRegionChanging = !fadeInComplete;\n  }\n\n  /**\n   * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n   * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n   * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n   *                                  every splat.\n   */\n  updateRenderIndexes(globalIndexes, renderSplatCount) {\n    const geometry = this.geometry;\n    geometry.attributes.splatIndex.set(globalIndexes);\n    geometry.attributes.splatIndex.needsUpdate = true;\n    if (renderSplatCount > 0 && this.firstRenderTime === -1) {\n      this.firstRenderTime = performance.now();\n    }\n    geometry.instanceCount = renderSplatCount;\n    geometry.setDrawRange(0, renderSplatCount);\n  }\n\n  /**\n   * Update the transforms for each scene in this splat mesh from their individual components (position,\n   * quaternion, and scale)\n   */\n  updateTransforms() {\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      scene.updateTransform(this.dynamicMode);\n    }\n  }\n\n  updateUniforms = (function() {\n    const viewport = new THREE.Vector2();\n\n    return function(\n      renderDimensions,\n      cameraFocalLengthX,\n      cameraFocalLengthY,\n      orthographicMode,\n      orthographicZoom,\n      inverseFocalAdjustment,\n    ) {\n      const splatCount = this.getSplatCount();\n      if (splatCount > 0) {\n        viewport.set(\n          renderDimensions.x * this.devicePixelRatio,\n          renderDimensions.y * this.devicePixelRatio,\n        );\n        this.material.uniforms.viewport.value.copy(viewport);\n        this.material.uniforms.basisViewport.value.set(\n          1.0 / viewport.x,\n          1.0 / viewport.y,\n        );\n        this.material.uniforms.focal.value.set(\n          cameraFocalLengthX,\n          cameraFocalLengthY,\n        );\n        this.material.uniforms.orthographicMode.value = orthographicMode ?\n          1 :\n          0;\n        this.material.uniforms.orthoZoom.value = orthographicZoom;\n        this.material.uniforms.inverseFocalAdjustment.value =\n          inverseFocalAdjustment;\n        if (this.dynamicMode) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.transforms.value[i].copy(\n              this.getScene(i).transform,\n            );\n          }\n        }\n        if (this.enableOptionalEffects) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.sceneOpacity.value[i] = clamp(\n              this.getScene(i).opacity,\n              0.0,\n              1.0,\n            );\n            this.material.uniforms.sceneVisibility.value[i] = this.getScene(i)\n              .visible ?\n              1 :\n              0;\n            this.material.uniformsNeedUpdate = true;\n          }\n        }\n        this.material.uniformsNeedUpdate = true;\n      }\n    };\n  })();\n\n  setSplatScale(splatScale = 1) {\n    this.splatScale = splatScale;\n    this.material.uniforms.splatScale.value = splatScale;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getSplatScale() {\n    return this.splatScale;\n  }\n\n  setPointCloudModeEnabled(enabled) {\n    this.pointCloudModeEnabled = enabled;\n    this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getPointCloudModeEnabled() {\n    return this.pointCloudModeEnabled;\n  }\n\n  getSplatDataTextures() {\n    return this.splatDataTextures;\n  }\n\n  getSplatCount(includeSinceLastBuild = false) {\n    if (!includeSinceLastBuild) return this.lastBuildSplatCount;\n    else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  getMaxSplatCount() {\n    return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalMaxSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getMaxSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  disposeDistancesComputationGPUResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.vao) {\n      gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n      this.distancesTransformFeedback.vao = null;\n    }\n    if (this.distancesTransformFeedback.program) {\n      gl.deleteProgram(this.distancesTransformFeedback.program);\n      gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n      gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n      this.distancesTransformFeedback.program = null;\n      this.distancesTransformFeedback.vertexShader = null;\n      this.distancesTransformFeedback.fragmentShader = null;\n    }\n    this.disposeDistancesComputationGPUBufferResources();\n    if (this.distancesTransformFeedback.id) {\n      gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n      this.distancesTransformFeedback.id = null;\n    }\n  }\n\n  disposeDistancesComputationGPUBufferResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.centersBuffer) {\n      this.distancesTransformFeedback.centersBuffer = null;\n      gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n    }\n    if (this.distancesTransformFeedback.outDistancesBuffer) {\n      gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n      this.distancesTransformFeedback.outDistancesBuffer = null;\n    }\n  }\n\n  /**\n   * Set the Three.js renderer used by this splat mesh\n   * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n   */\n  setRenderer(renderer) {\n    if (renderer !== this.renderer) {\n      this.renderer = renderer;\n      const gl = this.renderer.getContext();\n      const extensions = new WebGLExtensions(gl);\n      const capabilities = new WebGLCapabilities(gl, extensions, {});\n      extensions.init(capabilities);\n      this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n      if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n        this.setupDistancesComputationTransformFeedback();\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n          0,\n          this.getSplatCount() - 1,\n        );\n        this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n      }\n    }\n  }\n\n  setupDistancesComputationTransformFeedback = (function() {\n    let currentMaxSplatCount;\n\n    return function() {\n      const maxSplatCount = this.getMaxSplatCount();\n\n      if (!this.renderer) return;\n\n      const rebuildGPUObjects = this.lastRenderer !== this.renderer;\n      const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n      if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n      if (rebuildGPUObjects) {\n        this.disposeDistancesComputationGPUResources();\n      } else if (rebuildBuffers) {\n        this.disposeDistancesComputationGPUBufferResources();\n      }\n\n      const gl = this.renderer.getContext();\n\n      const createShader = (gl, type, source) => {\n        const shader = gl.createShader(type);\n        if (!shader) {\n          console.error('Fatal error: gl could not create a shader object.');\n          return null;\n        }\n\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n\n        const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!compiled) {\n          let typeName = 'unknown';\n          if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n          else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n          const errors = gl.getShaderInfoLog(shader);\n          console.error(\n            'Failed to compile ' + typeName + ' with these errors:' + errors,\n          );\n          gl.deleteShader(shader);\n          return null;\n        }\n\n        return shader;\n      };\n\n      let vsSource;\n      if (this.integerBasedDistancesComputation) {\n        vsSource = `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      } else {\n        vsSource = `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      }\n\n      const fsSource = `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.vao = gl.createVertexArray();\n      }\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n      if (rebuildGPUObjects) {\n        const program = gl.createProgram();\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n        if (!vertexShader || !fragmentShader) {\n          throw new Error(\n            'Could not compile shaders for distances computation on GPU.',\n          );\n        }\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.transformFeedbackVaryings(\n          program,\n          ['distance'],\n          gl.SEPARATE_ATTRIBS,\n        );\n        gl.linkProgram(program);\n\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n          const error = gl.getProgramInfoLog(program);\n          console.error('Fatal error: Failed to link program: ' + error);\n          gl.deleteProgram(program);\n          gl.deleteShader(fragmentShader);\n          gl.deleteShader(vertexShader);\n          throw new Error(\n            'Could not link shaders for distances computation on GPU.',\n          );\n        }\n\n        this.distancesTransformFeedback.program = program;\n        this.distancesTransformFeedback.vertexShader = vertexShader;\n        this.distancesTransformFeedback.vertexShader = fragmentShader;\n      }\n\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      this.distancesTransformFeedback.centersLoc = gl.getAttribLocation(\n        this.distancesTransformFeedback.program,\n        'center',\n      );\n      if (this.dynamicMode) {\n        this.distancesTransformFeedback.sceneIndexesLoc = gl.getAttribLocation(\n          this.distancesTransformFeedback.program,\n          'sceneIndex',\n        );\n        for (let i = 0; i < this.scenes.length; i++) {\n          this.distancesTransformFeedback.transformsLocs[i] =\n            gl.getUniformLocation(\n              this.distancesTransformFeedback.program,\n              `transforms[${i}]`,\n            );\n        }\n      } else {\n        this.distancesTransformFeedback.modelViewProjLoc =\n          gl.getUniformLocation(\n            this.distancesTransformFeedback.program,\n            'modelViewProj',\n          );\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.centersBuffer,\n        );\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        if (this.integerBasedDistancesComputation) {\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.INT,\n            0,\n            0,\n          );\n        } else {\n          gl.vertexAttribPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.FLOAT,\n            false,\n            0,\n            0,\n          );\n        }\n\n        if (this.dynamicMode) {\n          this.distancesTransformFeedback.sceneIndexesBuffer =\n            gl.createBuffer();\n          gl.bindBuffer(\n            gl.ARRAY_BUFFER,\n            this.distancesTransformFeedback.sceneIndexesBuffer,\n          );\n          gl.enableVertexAttribArray(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n          );\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n            1,\n            gl.UNSIGNED_INT,\n            0,\n            0,\n          );\n        }\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n      }\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n      gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.id = gl.createTransformFeedback();\n      }\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      this.lastRenderer = this.renderer;\n      currentMaxSplatCount = maxSplatCount;\n    };\n  })();\n\n  /**\n   * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} centers The splat centers data\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUCentersBufferForDistancesComputation(\n    isUpdate,\n    centers,\n    offsetSplats,\n  ) {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const ArrayType = this.integerBasedDistancesComputation ?\n      Uint32Array :\n      Float32Array;\n    const attributeBytesPerCenter = 16;\n    const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.centersBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n    } else {\n      const maxArray = new ArrayType(\n        this.getMaxSplatCount() * attributeBytesPerCenter,\n      );\n      maxArray.set(centers);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} sceneIndexes The splat scene indexes\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUTransformIndexesBufferForDistancesComputation(\n    isUpdate,\n    sceneIndexes,\n    offsetSplats,\n  ) {\n    if (!this.renderer || !this.dynamicMode) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const subBufferOffset = offsetSplats * 4;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.sceneIndexesBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\n    } else {\n      const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n      maxArray.set(sceneIndexes);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Get a typed array containing a mapping from global splat indexes to their scene index.\n   * @param {number} start Starting splat index to store\n   * @param {number} end Ending splat index to store\n   * @return {Uint32Array}\n   */\n  getSceneIndexes(start, end) {\n    let sceneIndexes;\n    const fillCount = end - start + 1;\n    sceneIndexes = new Uint32Array(fillCount);\n    for (let i = start; i <= end; i++) {\n      sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n    }\n\n    return sceneIndexes;\n  }\n\n  /**\n   * Fill 'array' with the transforms for each scene in this splat mesh.\n   * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n   */\n  fillTransformsArray = (function() {\n    const tempArray = [];\n\n    return function(array) {\n      if (tempArray.length !== array.length) tempArray.length = array.length;\n      for (let i = 0; i < this.scenes.length; i++) {\n        const sceneTransform = this.getScene(i).transform;\n        const sceneTransformElements = sceneTransform.elements;\n        for (let j = 0; j < 16; j++) {\n          tempArray[i * 16 + j] = sceneTransformElements[j];\n        }\n      }\n      array.set(tempArray);\n    };\n  })();\n\n  computeDistancesOnGPU = (function() {\n    const tempMatrix = new THREE.Matrix4();\n\n    return function(modelViewProjMatrix, outComputedDistances) {\n      if (!this.renderer) return;\n\n      // console.time(\"gpu_compute_distances\");\n      const gl = this.renderer.getContext();\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      gl.enable(gl.RASTERIZER_DISCARD);\n\n      if (this.dynamicMode) {\n        for (let i = 0; i < this.scenes.length; i++) {\n          tempMatrix.copy(this.getScene(i).transform);\n          tempMatrix.premultiply(modelViewProjMatrix);\n\n          if (this.integerBasedDistancesComputation) {\n            const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n            const iTransform = [\n              iTempMatrix[2],\n              iTempMatrix[6],\n              iTempMatrix[10],\n              iTempMatrix[14],\n            ];\n            gl.uniform4i(\n              this.distancesTransformFeedback.transformsLocs[i],\n              iTransform[0],\n              iTransform[1],\n              iTransform[2],\n              iTransform[3],\n            );\n          } else {\n            gl.uniformMatrix4fv(\n              this.distancesTransformFeedback.transformsLocs[i],\n              false,\n              tempMatrix.elements,\n            );\n          }\n        }\n      } else {\n        if (this.integerBasedDistancesComputation) {\n          const iViewProjMatrix =\n            SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n          const iViewProj = [\n            iViewProjMatrix[2],\n            iViewProjMatrix[6],\n            iViewProjMatrix[10],\n          ];\n          gl.uniform3i(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            iViewProj[0],\n            iViewProj[1],\n            iViewProj[2],\n          );\n        } else {\n          const viewProj = [\n            modelViewProjMatrix.elements[2],\n            modelViewProjMatrix.elements[6],\n            modelViewProjMatrix.elements[10],\n          ];\n          gl.uniform3f(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            viewProj[0],\n            viewProj[1],\n            viewProj[2],\n          );\n        }\n      }\n\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.centersBuffer,\n      );\n      gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n      if (this.integerBasedDistancesComputation) {\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.INT,\n          0,\n          0,\n        );\n      } else {\n        gl.vertexAttribPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.FLOAT,\n          false,\n          0,\n          0,\n        );\n      }\n\n      if (this.dynamicMode) {\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.sceneIndexesBuffer,\n        );\n        gl.enableVertexAttribArray(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n        );\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n          1,\n          gl.UNSIGNED_INT,\n          0,\n          0,\n        );\n      }\n\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      gl.beginTransformFeedback(gl.POINTS);\n      gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n      gl.endTransformFeedback();\n\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n      gl.disable(gl.RASTERIZER_DISCARD);\n\n      const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      const promise = new Promise((resolve) => {\n        const checkSync = () => {\n          if (this.disposed) {\n            resolve();\n          } else {\n            const timeout = 0;\n            const bitflags = 0;\n            const status = gl.clientWaitSync(sync, bitflags, timeout);\n            switch (status) {\n              case gl.TIMEOUT_EXPIRED:\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                return this.computeDistancesOnGPUSyncTimeout;\n              case gl.WAIT_FAILED:\n                throw new Error('should never get here');\n              default:\n                this.computeDistancesOnGPUSyncTimeout = null;\n                gl.deleteSync(sync);\n                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                gl.bindBuffer(\n                  gl.ARRAY_BUFFER,\n                  this.distancesTransformFeedback.outDistancesBuffer,\n                );\n                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                if (currentVao) gl.bindVertexArray(currentVao);\n\n                // console.timeEnd(\"gpu_compute_distances\");\n\n                resolve();\n            }\n          }\n        };\n        this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n      });\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      return promise;\n    };\n  })();\n\n  /**\n   * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n   * buffer, and the corresponding transform)\n   * @param {number} globalIndex Global splat index\n   * @param {object} paramsObj Object in which to store local data\n   * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n   *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n   *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n   *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n   *                                       be null.\n   */\n  getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n    if (returnSceneTransform === undefined || returnSceneTransform === null) {\n      returnSceneTransform = this.dynamicMode ? false : true;\n    }\n    paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n    paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n    paramsObj.sceneTransform = returnSceneTransform ?\n      this.getSceneTransformForSplat(globalIndex) :\n      null;\n  }\n\n  /**\n   * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n   * @param {Float32Array} covariances Target storage for splat covariances\n   * @param {Float32Array} scales Target storage for splat scales\n   * @param {Float32Array} rotations Target storage for splat rotations\n   * @param {Float32Array} centers Target storage for splat centers\n   * @param {Uint8Array} colors Target storage for splat colors\n   * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n   * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n   *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n   *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n   * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n   * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n   * @param {number} srcStart The start location from which to pull source data\n   * @param {number} srcEnd The end location from which to pull source data\n   * @param {number} destStart The start location from which to write data\n   */\n  fillSplatDataArrays(\n    covariances,\n    scales,\n    rotations,\n    centers,\n    colors,\n    sphericalHarmonics,\n    applySceneTransform,\n    covarianceCompressionLevel = 0,\n    scaleRotationCompressionLevel = 0,\n    sphericalHarmonicsCompressionLevel = 1,\n    srcStart,\n    srcEnd,\n    destStart = 0,\n    sceneIndex,\n  ) {\n    const scaleOverride = new THREE.Vector3();\n    scaleOverride.x = undefined;\n    scaleOverride.y = undefined;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      scaleOverride.z = undefined;\n    } else {\n      scaleOverride.z = 1;\n    }\n    const tempTransform = new THREE.Matrix4();\n\n    let startSceneIndex = 0;\n    let endSceneIndex = this.scenes.length - 1;\n    if (\n      sceneIndex !== undefined &&\n      sceneIndex !== null &&\n      sceneIndex >= 0 &&\n      sceneIndex <= this.scenes.length\n    ) {\n      startSceneIndex = sceneIndex;\n      endSceneIndex = sceneIndex;\n    }\n    for (let i = startSceneIndex; i <= endSceneIndex; i++) {\n      if (applySceneTransform === undefined || applySceneTransform === null) {\n        applySceneTransform = this.dynamicMode ? false : true;\n      }\n\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      let sceneTransform;\n      if (applySceneTransform) {\n        this.getSceneTransform(i, tempTransform);\n        sceneTransform = tempTransform;\n      }\n      if (covariances) {\n        splatBuffer.fillSplatCovarianceArray(\n          covariances,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          covarianceCompressionLevel,\n        );\n      }\n      if (scales || rotations) {\n        if (!scales || !rotations) {\n          throw new Error(\n            'SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.',\n          );\n        }\n        splatBuffer.fillSplatScaleRotationArray(\n          scales,\n          rotations,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          scaleRotationCompressionLevel,\n          scaleOverride,\n        );\n      }\n      if (centers) {\n        splatBuffer.fillSplatCenterArray(\n          centers,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (colors) {\n        splatBuffer.fillSplatColorArray(\n          colors,\n          scene.minimumAlpha,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (sphericalHarmonics) {\n        splatBuffer.fillSphericalHarmonicsArray(\n          sphericalHarmonics,\n          this.minSphericalHarmonicsDegree,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          sphericalHarmonicsCompressionLevel,\n        );\n      }\n      destStart += splatBuffer.getSplatCount();\n    }\n  }\n\n  /**\n   * Convert splat centers, which are floating point values, to an array of integers and multiply\n   * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Int32Array}\n   */\n  getIntegerCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    let intCenters;\n    let componentCount = padFour ? 4 : 3;\n    intCenters = new Int32Array(splatCount * componentCount);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        intCenters[i * componentCount + t] = Math.round(\n          floatCenters[i * 3 + t] * 1000.0,\n        );\n      }\n      if (padFour) intCenters[i * componentCount + 3] = 1000;\n    }\n    return intCenters;\n  }\n\n  /**\n   * Returns an array of splat centers, transformed as appropriate, optionally padded.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Float32Array}\n   */\n  getFloatCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    if (!padFour) return floatCenters;\n    let paddedFloatCenters = new Float32Array(splatCount * 4);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n      }\n      paddedFloatCenters[i * 4 + 3] = 1.0;\n    }\n    return paddedFloatCenters;\n  }\n\n  /**\n   * Get the center for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n   *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n   *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n   */\n  getSplatCenter = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outCenter, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      paramsObj.splatBuffer.getSplatCenter(\n        paramsObj.localIndex,\n        outCenter,\n        paramsObj.sceneTransform,\n      );\n    };\n  })();\n  getSplatHarmonics = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outCenter, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      return paramsObj.splatBuffer.getSplatHarmonics(paramsObj.localIndex);\n    };\n  })();\n\n  /**\n   * Get the scale and rotation for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n   * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n   *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n   *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n   *                                      the default behavior will apply.\n   */\n  getSplatScaleAndRotation = (function() {\n    const paramsObj = {};\n    const scaleOverride = new THREE.Vector3();\n\n    return function(globalIndex, outScale, outRotation, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      scaleOverride.x = undefined;\n      scaleOverride.y = undefined;\n      scaleOverride.z = undefined;\n      if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\n      paramsObj.splatBuffer.getSplatScaleAndRotation(\n        paramsObj.localIndex,\n        outScale,\n        outRotation,\n        paramsObj.sceneTransform,\n        scaleOverride,\n      );\n    };\n  })();\n\n  /**\n   * Get the color for a splat.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n   */\n  getSplatColor = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outColor) {\n      this.getLocalSplatParameters(globalIndex, paramsObj);\n      paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n    };\n  })();\n\n  /**\n   * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n   */\n  getSceneTransform(sceneIndex, outTransform) {\n    const scene = this.getScene(sceneIndex);\n    scene.updateTransform(this.dynamicMode);\n    outTransform.copy(scene.transform);\n  }\n\n  /**\n   * Get the scene at 'sceneIndex'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @return {SplatScene}\n   */\n  getScene(sceneIndex) {\n    if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n      throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n    }\n    return this.scenes[sceneIndex];\n  }\n\n  getSceneCount() {\n    return this.scenes.length;\n  }\n\n  getSplatBufferForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .splatBuffer;\n  }\n\n  getSceneIndexForSplat(globalIndex) {\n    return this.globalSplatIndexToSceneIndexMap[globalIndex];\n  }\n\n  getSceneTransformForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .transform;\n  }\n\n  getSplatLocalIndex(globalIndex) {\n    return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n  }\n\n  static getIntegerMatrixArray(matrix) {\n    const matrixElements = matrix.elements;\n    const intMatrixArray = [];\n    for (let i = 0; i < 16; i++) {\n      intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n    }\n    return intMatrixArray;\n  }\n\n  computeBoundingBox(applySceneTransforms = false, sceneIndex) {\n    let splatCount = this.getSplatCount();\n    if (sceneIndex !== undefined && sceneIndex !== null) {\n      if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n        throw new Error(\n          'SplatMesh::computeBoundingBox() -> Invalid scene index.',\n        );\n      }\n      splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\n    }\n\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      applySceneTransforms,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      sceneIndex,\n    );\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n    for (let i = 0; i < splatCount; i++) {\n      const offset = i * 3;\n      const x = floatCenters[offset];\n      const y = floatCenters[offset + 1];\n      const z = floatCenters[offset + 2];\n      if (i === 0 || x < min.x) min.x = x;\n      if (i === 0 || y < min.y) min.y = y;\n      if (i === 0 || z < min.z) min.z = z;\n      if (i === 0 || x > max.x) max.x = x;\n      if (i === 0 || y > max.y) max.y = y;\n      if (i === 0 || z > max.z) max.z = z;\n    }\n\n    return new THREE.Box3(min, max);\n  }\n}\n","export class InfoPanel {\n  constructor(container) {\n    this.container = container || document.body;\n\n    this.infoCells = {};\n\n    const layout = [\n      ['Camera position', 'cameraPosition'],\n      ['Camera look-at', 'cameraLookAt'],\n      ['Camera up', 'cameraUp'],\n      ['Camera mode', 'orthographicCamera'],\n      ['Cursor position', 'cursorPosition'],\n      ['FPS', 'fps'],\n      ['Rendering:', 'renderSplatCount'],\n      ['Sort time', 'sortTime'],\n      ['Render window', 'renderWindow'],\n      ['Focal adjustment', 'focalAdjustment'],\n      ['Splat scale', 'splatScale'],\n      ['Point cloud mode', 'pointCloudMode'],\n    ];\n\n    this.infoPanelContainer = document.createElement('div');\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n    this.infoPanelContainer.append(style);\n\n    this.infoPanel = document.createElement('div');\n    this.infoPanel.className = 'infoPanel';\n\n    const infoTable = document.createElement('div');\n    infoTable.style.display = 'table';\n\n    for (let layoutEntry of layout) {\n      const row = document.createElement('div');\n      row.style.display = 'table-row';\n      row.className = 'info-panel-row';\n\n      const labelCell = document.createElement('div');\n      labelCell.style.display = 'table-cell';\n      labelCell.innerHTML = `${layoutEntry[0]}: `;\n      labelCell.classList.add('info-panel-cell', 'label-cell');\n\n      const spacerCell = document.createElement('div');\n      spacerCell.style.display = 'table-cell';\n      spacerCell.style.width = '10px';\n      spacerCell.innerHTML = ' ';\n      spacerCell.className = 'info-panel-cell';\n\n      const infoCell = document.createElement('div');\n      infoCell.style.display = 'table-cell';\n      infoCell.innerHTML = '';\n      infoCell.className = 'info-panel-cell';\n\n      this.infoCells[layoutEntry[1]] = infoCell;\n\n      row.appendChild(labelCell);\n      row.appendChild(spacerCell);\n      row.appendChild(infoCell);\n\n      infoTable.appendChild(row);\n    }\n\n    this.infoPanel.appendChild(infoTable);\n    this.infoPanelContainer.append(this.infoPanel);\n    this.infoPanelContainer.style.display = 'none';\n    this.container.appendChild(this.infoPanelContainer);\n\n    this.visible = false;\n  }\n\n  update = function(\n    renderDimensions,\n    cameraPosition,\n    cameraLookAtPosition,\n    cameraUp,\n    orthographicCamera,\n    meshCursorPosition,\n    currentFPS,\n    splatCount,\n    splatRenderCount,\n    splatRenderCountPct,\n    lastSortTime,\n    focalAdjustment,\n    splatScale,\n    pointCloudMode,\n  ) {\n    const cameraPosString = `${cameraPosition.x.toFixed(\n      5,\n    )}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n    if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n      this.infoCells.cameraPosition.innerHTML = cameraPosString;\n    }\n\n    if (cameraLookAtPosition) {\n      const cla = cameraLookAtPosition;\n      const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(\n        5,\n      )}, ${cla.z.toFixed(5)}`;\n      if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n        this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n      }\n    }\n\n    const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(\n      5,\n    )}, ${cameraUp.z.toFixed(5)}`;\n    if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n      this.infoCells.cameraUp.innerHTML = cameraUpString;\n    }\n\n    this.infoCells.orthographicCamera.innerHTML = orthographicCamera ?\n      'Orthographic' :\n      'Perspective';\n\n    if (meshCursorPosition) {\n      const cursPos = meshCursorPosition;\n      const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(\n        5,\n      )}, ${cursPos.z.toFixed(5)}`;\n      this.infoCells.cursorPosition.innerHTML = cursorPosString;\n    } else {\n      this.infoCells.cursorPosition.innerHTML = 'N/A';\n    }\n\n    this.infoCells.fps.innerHTML = currentFPS;\n    this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n    this.infoCells.renderSplatCount.innerHTML = `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(\n      2,\n    )}%)`;\n\n    this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n    this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n    this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n    this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n  };\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.infoPanelContainer.parentElement === this.container\n    ) {\n      this.container.removeChild(this.infoPanelContainer);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.infoPanelContainer);\n      this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  show() {\n    this.infoPanelContainer.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.infoPanelContainer.style.display = 'none';\n    this.visible = false;\n  }\n}\n","export class LoadingProgressBar {\n  constructor(container) {\n    this.idGen = 0;\n\n    this.tasks = [];\n\n    this.container = container || document.body;\n\n    this.progressBarContainerOuter = document.createElement('div');\n    this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n    this.progressBarContainerOuter.style.display = 'none';\n\n    this.progressBarBox = document.createElement('div');\n    this.progressBarBox.className = 'progressBarBox';\n\n    this.progressBarBackground = document.createElement('div');\n    this.progressBarBackground.className = 'progressBarBackground';\n\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progressBar';\n\n    this.progressBarBackground.appendChild(this.progressBar);\n    this.progressBarBox.appendChild(this.progressBarBackground);\n    this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n    this.progressBarContainerOuter.appendChild(style);\n    this.container.appendChild(this.progressBarContainerOuter);\n  }\n\n  show() {\n    this.progressBarContainerOuter.style.display = 'block';\n  }\n\n  hide() {\n    this.progressBarContainerOuter.style.display = 'none';\n  }\n\n  setProgress(progress) {\n    this.progressBar.style.width = progress + '%';\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.progressBarContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.progressBarContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.progressBarContainerOuter);\n      this.progressBarContainerOuter.style.zIndex =\n        this.container.style.zIndex + 1;\n    }\n  }\n}\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n  static elementIDGen = 0;\n\n  constructor(message, container) {\n    this.taskIDGen = 0;\n    this.elementID = LoadingSpinner.elementIDGen++;\n\n    this.tasks = [];\n\n    this.message = message || 'Loading...';\n    this.container = container || document.body;\n\n    this.spinnerContainerOuter = document.createElement('div');\n    this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n    this.spinnerContainerOuter.style.display = 'none';\n\n    this.spinnerContainerPrimary = document.createElement('div');\n    this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n    this.spinnerPrimary = document.createElement('div');\n    this.spinnerPrimary.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary = document.createElement('div');\n    this.messageContainerPrimary.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary.innerHTML = this.message;\n\n    this.spinnerContainerMin = document.createElement('div');\n    this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n    this.spinnerMin = document.createElement('div');\n    this.spinnerMin.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerMin${this.elementID}`,\n    );\n    this.messageContainerMin = document.createElement('div');\n    this.messageContainerMin.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerMin${this.elementID}`,\n    );\n    this.messageContainerMin.innerHTML = this.message;\n\n    this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n    this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n    this.spinnerContainerMin.appendChild(this.spinnerMin);\n    this.spinnerContainerMin.appendChild(this.messageContainerMin);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n    this.spinnerContainerOuter.appendChild(style);\n    this.container.appendChild(this.spinnerContainerOuter);\n\n    this.setMinimized(false, true);\n\n    this.fadeTransitions = [];\n  }\n\n  addTask(message) {\n    const newTask = {\n      message: message,\n      id: this.taskIDGen++,\n    };\n    this.tasks.push(newTask);\n    this.update();\n    return newTask.id;\n  }\n\n  removeTask(id) {\n    let index = 0;\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        this.tasks.splice(index, 1);\n        break;\n      }\n      index++;\n    }\n    this.update();\n  }\n\n  removeAllTasks() {\n    this.tasks = [];\n    this.update();\n  }\n\n  setMessageForTask(id, message) {\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        task.message = message;\n        break;\n      }\n    }\n    this.update();\n  }\n\n  update() {\n    if (this.tasks.length > 0) {\n      this.show();\n      this.setMessage(this.tasks[this.tasks.length - 1].message);\n    } else {\n      this.hide();\n    }\n  }\n\n  show() {\n    this.spinnerContainerOuter.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.spinnerContainerOuter.style.display = 'none';\n    this.visible = false;\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.spinnerContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.spinnerContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.spinnerContainerOuter);\n      this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  setMinimized(minimized, instant) {\n    const showHideSpinner = (\n      element,\n      show,\n      instant,\n      displayStyle,\n      fadeTransitionsIndex,\n    ) => {\n      if (instant) {\n        element.style.display = show ? displayStyle : 'none';\n      } else {\n        this.fadeTransitions[fadeTransitionsIndex] = fadeElement(\n          element,\n          !show,\n          displayStyle,\n          STANDARD_FADE_DURATION,\n          () => {\n            this.fadeTransitions[fadeTransitionsIndex] = null;\n          },\n        );\n      }\n    };\n    showHideSpinner(\n      this.spinnerContainerPrimary,\n      !minimized,\n      instant,\n      'block',\n      0,\n    );\n    showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n    this.minimized = minimized;\n  }\n\n  setMessage(msg) {\n    this.messageContainerPrimary.innerHTML = msg;\n    this.messageContainerMin.innerHTML = msg;\n  }\n}\n","export const fadeElement = (\n  element,\n  out,\n  displayStyle,\n  duration,\n  onComplete,\n) => {\n  const startTime = performance.now();\n\n  let startOpacity =\n    element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n  if (isNaN(startOpacity)) startOpacity = 1;\n\n  const interval = window.setInterval(() => {\n    const currentTime = performance.now();\n    const elapsed = currentTime - startTime;\n\n    let t = Math.min(elapsed / duration, 1.0);\n    if (t > 0.999) t = 1;\n\n    let opacity;\n    if (out) {\n      opacity = (1.0 - t) * startOpacity;\n      if (opacity < 0.0001) opacity = 0;\n    } else {\n      opacity = (1.0 - startOpacity) * t + startOpacity;\n    }\n\n    if (opacity > 0) {\n      element.style.display = displayStyle;\n      element.style.opacity = opacity;\n    } else {\n      element.style.display = 'none';\n    }\n\n    if (t >= 1) {\n      if (onComplete) onComplete();\n      window.clearInterval(interval);\n    }\n  }, 16);\n  return interval;\n};\n\nexport const cancelFade = (interval) => {\n  window.clearInterval(interval);\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showStartAR(/* device */) {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n\n        const svg = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'svg',\n        );\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function() {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n\n        const path = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'path',\n        );\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = { root: overlay };\n      }\n\n      //\n\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        renderer.xr.setReferenceSpaceType('local');\n\n        await renderer.xr.setSession(session);\n\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'START AR';\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-ar', sessionInit)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-ar', sessionInit)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-ar', sessionInit)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showARNotSupported() {\n      disableButton();\n\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n\n    function showARNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'AR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-ar')\n        .then(function(supported) {\n          supported ? showStartAR() : showARNotSupported();\n        })\n        .catch(showARNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n}\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showEnterVR(/* device */) {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'ENTER VR';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'ENTER VR';\n\n      // WebXR's requestReferenceSpace only works if the corresponding feature\n      // was requested at session creation time. For simplicity, just ask for\n      // the interesting ones as optional features, but be aware that the\n      // requestReferenceSpace call will fail if it turns out to be unavailable.\n      // ('local' is always available for immersive sessions and doesn't need to\n      // be requested separately.)\n\n      const sessionOptions = {\n        ...sessionInit,\n        optionalFeatures: [\n          'local-floor',\n          'bounded-floor',\n          'layers',\n          ...(sessionInit.optionalFeatures || []),\n        ],\n      };\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-vr', sessionOptions)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-vr', sessionOptions)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-vr', sessionOptions)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function showVRNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'VR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-vr')\n        .then(function(supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n\n          if (supported && VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        })\n        .catch(showVRNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","export const WebXRMode = {\n  None: 0,\n  VR: 1,\n  AR: 2,\n};\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\nimport { isIOS, getIOSSemever } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n  let wasmInstance;\n  let wasmMemory;\n  let useSharedMemory;\n  let integerBasedSort;\n  let dynamicMode;\n  let splatCount;\n  let indexesToSortOffset;\n  let sortedIndexesOffset;\n  let sceneIndexesOffset;\n  let transformsOffset;\n  let precomputedDistancesOffset;\n  let mappedDistancesOffset;\n  let frequenciesOffset;\n  let centersOffset;\n  let modelViewProjOffset;\n  let countsZero;\n  let sortedIndexesOut;\n  let distanceMapRange;\n  let uploadedSplatCount;\n  let Constants;\n\n  function sort(\n    splatSortCount,\n    splatRenderCount,\n    modelViewProj,\n    usePrecomputedDistances,\n    copyIndexesToSort,\n    copyPrecomputedDistances,\n    copyTransforms,\n  ) {\n    const sortStartTime = performance.now();\n\n    if (!useSharedMemory) {\n      const indexesToSort = new Uint32Array(\n        wasmMemory,\n        indexesToSortOffset,\n        copyIndexesToSort.byteLength / Constants.BytesPerInt,\n      );\n      indexesToSort.set(copyIndexesToSort);\n      const transforms = new Float32Array(\n        wasmMemory,\n        transformsOffset,\n        copyTransforms.byteLength / Constants.BytesPerFloat,\n      );\n      transforms.set(copyTransforms);\n      if (usePrecomputedDistances) {\n        let precomputedDistances;\n        if (integerBasedSort) {\n          precomputedDistances = new Int32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerInt,\n          );\n        } else {\n          precomputedDistances = new Float32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat,\n          );\n        }\n        precomputedDistances.set(copyPrecomputedDistances);\n      }\n    }\n\n    if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\n    new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n    new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(\n      countsZero,\n    );\n    wasmInstance.exports.sortIndexes(\n      indexesToSortOffset,\n      centersOffset,\n      precomputedDistancesOffset,\n      mappedDistancesOffset,\n      frequenciesOffset,\n      modelViewProjOffset,\n      sortedIndexesOffset,\n      sceneIndexesOffset,\n      transformsOffset,\n      distanceMapRange,\n      splatSortCount,\n      splatRenderCount,\n      splatCount,\n      usePrecomputedDistances,\n      integerBasedSort,\n      dynamicMode,\n    );\n\n    const sortMessage = {\n      sortDone: true,\n      splatSortCount: splatSortCount,\n      splatRenderCount: splatRenderCount,\n      sortTime: 0,\n    };\n    if (!useSharedMemory) {\n      const sortedIndexes = new Uint32Array(\n        wasmMemory,\n        sortedIndexesOffset,\n        splatRenderCount,\n      );\n      if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n        sortedIndexesOut = new Uint32Array(splatRenderCount);\n      }\n      sortedIndexesOut.set(sortedIndexes);\n      sortMessage.sortedIndexes = sortedIndexesOut;\n    }\n    const sortEndTime = performance.now();\n\n    sortMessage.sortTime = sortEndTime - sortStartTime;\n\n    self.postMessage(sortMessage);\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.centers) {\n      centers = e.data.centers;\n      sceneIndexes = e.data.sceneIndexes;\n      if (integerBasedSort) {\n        new Int32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n          e.data.range.count * 4,\n        ).set(new Int32Array(centers));\n      } else {\n        new Float32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n          e.data.range.count * 4,\n        ).set(new Float32Array(centers));\n      }\n      if (dynamicMode) {\n        new Uint32Array(\n          wasmMemory,\n          sceneIndexesOffset + e.data.range.from * 4,\n          e.data.range.count,\n        ).set(new Uint32Array(sceneIndexes));\n      }\n      uploadedSplatCount = e.data.range.from + e.data.range.count;\n    } else if (e.data.sort) {\n      const renderCount = Math.min(\n        e.data.sort.splatRenderCount || 0,\n        uploadedSplatCount,\n      );\n      const sortCount = Math.min(\n        e.data.sort.splatSortCount || 0,\n        uploadedSplatCount,\n      );\n      const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n      let copyIndexesToSort;\n      let copyPrecomputedDistances;\n      let copyTransforms;\n      if (!useSharedMemory) {\n        copyIndexesToSort = e.data.sort.indexesToSort;\n        copyTransforms = e.data.sort.transforms;\n        if (usePrecomputedDistances) {\n          copyPrecomputedDistances = e.data.sort.precomputedDistances;\n        }\n      }\n      sort(\n        sortCount,\n        renderCount,\n        e.data.sort.modelViewProj,\n        usePrecomputedDistances,\n        copyIndexesToSort,\n        copyPrecomputedDistances,\n        copyTransforms,\n      );\n    } else if (e.data.init) {\n      // Yep, this is super hacky and gross :(\n      Constants = e.data.init.Constants;\n\n      splatCount = e.data.init.splatCount;\n      useSharedMemory = e.data.init.useSharedMemory;\n      integerBasedSort = e.data.init.integerBasedSort;\n      dynamicMode = e.data.init.dynamicMode;\n      distanceMapRange = e.data.init.distanceMapRange;\n      uploadedSplatCount = 0;\n\n      const CENTERS_BYTES_PER_ENTRY = integerBasedSort ?\n        Constants.BytesPerInt * 4 :\n        Constants.BytesPerFloat * 4;\n\n      const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n      const matrixSize = 16 * Constants.BytesPerFloat;\n      const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n      const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n      const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n        splatCount * Constants.BytesPerInt :\n        splatCount * Constants.BytesPerFloat;\n      const memoryRequiredForMappedDistances =\n        splatCount * Constants.BytesPerInt;\n      const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForIntermediateSortBuffers = integerBasedSort ?\n        distanceMapRange * Constants.BytesPerInt * 2 :\n        distanceMapRange * Constants.BytesPerFloat * 2;\n      const memoryRequiredforTransformIndexes = dynamicMode ?\n        splatCount * Constants.BytesPerInt :\n        0;\n      const memoryRequiredforTransforms = dynamicMode ?\n        Constants.MaxScenes * matrixSize :\n        0;\n      const extraMemory = Constants.MemoryPageSize * 32;\n\n      const totalRequiredMemory =\n        memoryRequiredForIndexesToSort +\n        memoryRequiredForCenters +\n        memoryRequiredForModelViewProjectionMatrix +\n        memoryRequiredForPrecomputedDistances +\n        memoryRequiredForMappedDistances +\n        memoryRequiredForIntermediateSortBuffers +\n        memoryRequiredForSortedIndexes +\n        memoryRequiredforTransformIndexes +\n        memoryRequiredforTransforms +\n        extraMemory;\n      const totalPagesRequired =\n        Math.floor(totalRequiredMemory / Constants.MemoryPageSize) + 1;\n      const sorterWasmImport = {\n        module: {},\n        env: {\n          memory: new WebAssembly.Memory({\n            initial: totalPagesRequired,\n            maximum: totalPagesRequired,\n            shared: true,\n          }),\n        },\n      };\n      WebAssembly.compile(sorterWasmBytes)\n        .then((wasmModule) => {\n          return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n        })\n        .then((instance) => {\n          wasmInstance = instance;\n          indexesToSortOffset = 0;\n          centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n          modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n          precomputedDistancesOffset =\n            modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n          mappedDistancesOffset =\n            precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n          frequenciesOffset =\n            mappedDistancesOffset + memoryRequiredForMappedDistances;\n          sortedIndexesOffset =\n            frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n          sceneIndexesOffset =\n            sortedIndexesOffset + memoryRequiredForSortedIndexes;\n          transformsOffset =\n            sceneIndexesOffset + memoryRequiredforTransformIndexes;\n          wasmMemory = sorterWasmImport.env.memory.buffer;\n          if (useSharedMemory) {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n              indexesToSortBuffer: wasmMemory,\n              indexesToSortOffset: indexesToSortOffset,\n              sortedIndexesBuffer: wasmMemory,\n              sortedIndexesOffset: sortedIndexesOffset,\n              precomputedDistancesBuffer: wasmMemory,\n              precomputedDistancesOffset: precomputedDistancesOffset,\n              transformsBuffer: wasmMemory,\n              transformsOffset: transformsOffset,\n            });\n          } else {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n            });\n          }\n        });\n    }\n  };\n}\n\nexport function createSortWorker(\n  splatCount,\n  useSharedMemory,\n  enableSIMDInSort,\n  integerBasedSort,\n  dynamicMode,\n  splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision,\n) {\n  const worker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', sortWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n\n  let sourceWasm = SorterWasm;\n\n  // iOS makes choosing the right WebAssembly configuration tricky :(\n  const iOSSemVer = isIOS() ? getIOSSemever() : null;\n  if (!enableSIMDInSort && !useSharedMemory) {\n    sourceWasm = SorterWasmNoSIMD;\n    // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\n    // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNoSIMDNonShared;\n    }\n  } else if (!enableSIMDInSort) {\n    sourceWasm = SorterWasmNoSIMD;\n  } else if (!useSharedMemory) {\n    // Same issue with shared memory as above on iOS devices\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNonShared;\n    }\n  }\n\n  const sorterWasmBinaryString = atob(sourceWasm);\n  const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n  for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n    sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n  }\n\n  worker.postMessage({\n    init: {\n      sorterWasmBytes: sorterWasmBytes.buffer,\n      splatCount: splatCount,\n      useSharedMemory: useSharedMemory,\n      integerBasedSort: integerBasedSort,\n      dynamicMode: dynamicMode,\n      distanceMapRange: 1 << splatSortDistanceMapPrecision,\n      // Super hacky\n      Constants: {\n        BytesPerFloat: Constants.BytesPerFloat,\n        BytesPerInt: Constants.BytesPerInt,\n        MemoryPageSize: Constants.MemoryPageSize,\n        MaxScenes: Constants.MaxScenes,\n      },\n    },\n  });\n  return worker;\n}\n","import * as THREE from 'three';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { Constants } from './Constants.js';\nimport { LogLevel } from './LogLevel.js';\nimport { OrbitControls } from './OrbitControls.js';\nimport { RenderMode } from './RenderMode.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { SplatRenderMode } from './SplatRenderMode.js';\nimport {\n  abortablePromiseWithExtractedComponents,\n  clamp,\n  delayedExecute,\n  getCurrentTime,\n  getIOSSemever,\n  isIOS,\n  makeProgressiveFetchFunction,\n} from './Util.js';\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { GLTFLoader } from './loaders/splat/gltf/GLTFLoader.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { createSortWorker } from './worker/SortWorker.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = 0.75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n  constructor(options = {}) {\n    // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n    // when the viewer uses its own camera).\n    if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n    this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n    // The camera's initial position (only used when the viewer uses its own camera).\n    if (!options.initialCameraPosition) {\n      options.initialCameraPosition = [0, 10, 15];\n    }\n    this.initialCameraPosition = new THREE.Vector3().fromArray(\n      options.initialCameraPosition,\n    );\n\n    // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n    if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n    this.initialCameraLookAt = new THREE.Vector3().fromArray(\n      options.initialCameraLookAt,\n    );\n\n    // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n    this.dropInMode = options.dropInMode || false;\n\n    // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n    if (\n      options.selfDrivenMode === undefined ||\n      options.selfDrivenMode === null\n    ) {\n      options.selfDrivenMode = true;\n    }\n    this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n    this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n    // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n    if (options.useBuiltInControls === undefined) {\n      options.useBuiltInControls = true;\n    }\n    this.useBuiltInControls = options.useBuiltInControls;\n\n    // parent element of the Three.js renderer canvas\n    this.rootElement = options.rootElement;\n\n    // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n    // at a small cost to visual quality\n    this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n    this.devicePixelRatio = this.ignoreDevicePixelRatio ?\n      1 :\n      window.devicePixelRatio;\n\n    // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU =\n      options.halfPrecisionCovariancesOnGPU || false;\n\n    // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n    this.threeScene = options.threeScene;\n    // Allows for usage of an external Three.js renderer\n    this.renderer = options.renderer;\n    // Allows for usage of an external Three.js camera\n    this.camera = options.camera;\n\n    // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n    // Currently this means pre-computing splat distances from the camera on the GPU\n    this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n    // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n    // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n    // overflow in larger scenes.\n    if (\n      options.integerBasedSort === undefined ||\n      options.integerBasedSort === null\n    ) {\n      options.integerBasedSort = true;\n    }\n    this.integerBasedSort = options.integerBasedSort;\n\n    // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n    // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n    // https://web.dev/articles/cross-origin-isolation-guide\n    // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n    // loading the application. More information is available in the README.\n    if (\n      options.sharedMemoryForWorkers === undefined ||\n      options.sharedMemoryForWorkers === null\n    ) {\n      options.sharedMemoryForWorkers = true;\n    }\n    this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n    // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n    // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n    // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n    // SplatMesh.getSplatCenter() by default.\n    this.dynamicScene = !!options.dynamicScene;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = options.antialiased || false;\n\n    this.webXRMode = options.webXRMode || WebXRMode.None;\n    if (this.webXRMode !== WebXRMode.None) {\n      this.gpuAcceleratedSort = false;\n    }\n    this.webXRActive = false;\n\n    this.webXRSessionInit = options.webXRSessionInit || {};\n\n    // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n    // it will only render when something in the scene has changed.\n    this.renderMode = options.renderMode || RenderMode.Always;\n\n    // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n    // and a fast fade-in for non progressively loaded scenes.\n    // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n    // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n    this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n    // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n    // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n    this.focalAdjustment = options.focalAdjustment || 1.0;\n\n    // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\n\n    // The verbosity of console logging\n    this.logLevel = options.logLevel || LogLevel.None;\n\n    // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n    // Valid values are 0 - 2. Default value is 0.\n    this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = options.enableOptionalEffects || false;\n\n    // Enable the usage of SIMD WebAssembly instructions for the splat sort\n    if (\n      options.enableSIMDInSort === undefined ||\n      options.enableSIMDInSort === null\n    ) {\n      options.enableSIMDInSort = true;\n    }\n    this.enableSIMDInSort = options.enableSIMDInSort;\n\n    // Level to compress non KSPLAT files when loading them for direct rendering\n    if (\n      options.inMemoryCompressionLevel === undefined ||\n      options.inMemoryCompressionLevel === null\n    ) {\n      options.inMemoryCompressionLevel = 0;\n    }\n    this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\n\n    // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\n    // Does not apply if splat scene is progressively loaded.\n    if (\n      options.optimizeSplatData === undefined ||\n      options.optimizeSplatData === null\n    ) {\n      options.optimizeSplatData = true;\n    }\n    this.optimizeSplatData = options.optimizeSplatData;\n\n    // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\n    // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\n    // it will need to be re-populated from the splat buffer(s). Default is false.\n    if (\n      options.freeIntermediateSplatData === undefined ||\n      options.freeIntermediateSplatData === null\n    ) {\n      options.freeIntermediateSplatData = false;\n    }\n    this.freeIntermediateSplatData = options.freeIntermediateSplatData;\n\n    // It appears that for certain iOS versions, special actions need to be taken with the\n    // usage of SIMD instructions and shared memory\n    if (isIOS()) {\n      const semver = getIOSSemever();\n      if (semver.major < 17) {\n        this.enableSIMDInSort = false;\n      }\n      if (semver.major < 16) {\n        this.sharedMemoryForWorkers = false;\n      }\n    }\n\n    // Tell the viewer how to render the splats\n    if (\n      options.splatRenderMode === undefined ||\n      options.splatRenderMode === null\n    ) {\n      options.splatRenderMode = SplatRenderMode.ThreeD;\n    }\n    this.splatRenderMode = options.splatRenderMode;\n\n    // Customize the speed at which the scene is revealed\n    this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\n\n    // Set the range for the depth map for the counting sort used to sort the splats\n    this.splatSortDistanceMapPrecision =\n      options.splatSortDistanceMapPrecision ||\n      Constants.DefaultSplatSortDistanceMapPrecision;\n    const maxPrecision = this.integerBasedSort ? 20 : 24;\n    this.splatSortDistanceMapPrecision = clamp(\n      this.splatSortDistanceMapPrecision,\n      10,\n      maxPrecision,\n    );\n\n    this.onSplatMeshChangedCallback = null;\n    this.createSplatMesh();\n\n    this.controls = null;\n    this.perspectiveControls = null;\n    this.orthographicControls = null;\n\n    this.orthographicCamera = null;\n    this.perspectiveCamera = null;\n\n    this.showMeshCursor = false;\n    this.showControlPlane = false;\n    this.showInfo = false;\n\n    this.sceneHelper = null;\n\n    this.sortWorker = null;\n    this.sortRunning = false;\n    this.splatRenderCount = 0;\n    this.splatSortCount = 0;\n    this.lastSplatSortCount = 0;\n    this.sortWorkerIndexesToSort = null;\n    this.sortWorkerSortedIndexes = null;\n    this.sortWorkerPrecomputedDistances = null;\n    this.sortWorkerTransforms = null;\n    this.preSortMessages = [];\n    this.runAfterNextSort = [];\n\n    this.selfDrivenModeRunning = false;\n    this.splatRenderReady = false;\n\n    this.raycaster = new Raycaster();\n\n    this.infoPanel = null;\n\n    this.startInOrthographicMode = false;\n\n    this.currentFPS = 0;\n    this.lastSortTime = 0;\n    this.consecutiveRenderFrames = 0;\n\n    this.previousCameraTarget = new THREE.Vector3();\n    this.nextCameraTarget = new THREE.Vector3();\n\n    this.mousePosition = new THREE.Vector2();\n    this.mouseDownPosition = new THREE.Vector2();\n    this.mouseDownTime = null;\n\n    this.resizeObserver = null;\n    this.mouseMoveListener = null;\n    this.mouseDownListener = null;\n    this.mouseUpListener = null;\n    this.keyDownListener = null;\n\n    this.sortPromise = null;\n    this.sortPromiseResolver = null;\n    this.splatSceneDownloadPromises = {};\n    this.splatSceneDownloadAndBuildPromise = null;\n    this.splatSceneRemovalPromise = null;\n\n    this.loadingSpinner = new LoadingSpinner(\n      null,\n      this.rootElement || document.body,\n    );\n    this.loadingSpinner.hide();\n    this.loadingProgressBar = new LoadingProgressBar(\n      this.rootElement || document.body,\n    );\n    this.loadingProgressBar.hide();\n    this.infoPanel = new InfoPanel(this.rootElement || document.body);\n    this.infoPanel.hide();\n\n    this.usingExternalCamera = this.dropInMode || this.camera ? true : false;\n    this.usingExternalRenderer =\n      this.dropInMode || this.renderer ? true : false;\n\n    this.initialized = false;\n    this.disposing = false;\n    this.disposed = false;\n    this.disposePromise = null;\n\n    this.fetch = options.fetch || ((url, opts) => fetch(url, opts));\n    this.fetchWithProgress = makeProgressiveFetchFunction(this.fetch);\n\n    if (!this.dropInMode) this.init();\n  }\n\n  createSplatMesh() {\n    this.splatMesh = new SplatMesh(\n      this.splatRenderMode,\n      this.dynamicScene,\n      this.enableOptionalEffects,\n      this.halfPrecisionCovariancesOnGPU,\n      this.devicePixelRatio,\n      this.gpuAcceleratedSort,\n      this.integerBasedSort,\n      this.antialiased,\n      this.maxScreenSpaceSplatSize,\n      this.logLevel,\n      this.sphericalHarmonicsDegree,\n      this.sceneFadeInRateMultiplier,\n    );\n    this.splatMesh.frustumCulled = false;\n    if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\n  }\n\n  init() {\n    if (this.initialized) return;\n\n    if (!this.rootElement) {\n      if (!this.usingExternalRenderer) {\n        this.rootElement = document.createElement('div');\n        this.rootElement.style.width = '100%';\n        this.rootElement.style.height = '100%';\n        this.rootElement.style.position = 'absolute';\n        document.body.appendChild(this.rootElement);\n      } else {\n        this.rootElement =\n          this.renderer.domElement.parentElement || document.body;\n      }\n    }\n\n    this.setupCamera();\n    this.setupRenderer();\n    this.setupWebXR(this.webXRSessionInit);\n    this.setupControls();\n    this.setupEventHandlers();\n\n    this.threeScene = this.threeScene || new THREE.Scene();\n    this.sceneHelper = new SceneHelper(this.threeScene);\n    this.sceneHelper.setupMeshCursor();\n    this.sceneHelper.setupFocusMarker();\n    this.sceneHelper.setupControlPlane();\n\n    this.loadingProgressBar.setContainer(this.rootElement);\n    this.loadingSpinner.setContainer(this.rootElement);\n    this.infoPanel.setContainer(this.rootElement);\n\n    this.initialized = true;\n  }\n\n  setupCamera() {\n    if (!this.usingExternalCamera) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.perspectiveCamera = new THREE.PerspectiveCamera(\n        THREE_CAMERA_FOV,\n        renderDimensions.x / renderDimensions.y,\n        0.1,\n        1000,\n      );\n      this.orthographicCamera = new THREE.OrthographicCamera(\n        renderDimensions.x / -2,\n        renderDimensions.x / 2,\n        renderDimensions.y / 2,\n        renderDimensions.y / -2,\n        0.1,\n        1000,\n      );\n      this.camera = this.startInOrthographicMode ?\n        this.orthographicCamera :\n        this.perspectiveCamera;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupRenderer() {\n    if (!this.usingExternalRenderer) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: false,\n        precision: 'highp',\n      });\n      this.renderer.setPixelRatio(this.devicePixelRatio);\n      this.renderer.autoClear = true;\n      this.renderer.setClearColor(new THREE.Color(0x000000), 0.0);\n      this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n      this.resizeObserver = new ResizeObserver(() => {\n        this.getRenderDimensions(renderDimensions);\n        this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        this.forceRenderNextFrame();\n      });\n      this.resizeObserver.observe(this.rootElement);\n      this.rootElement.appendChild(this.renderer.domElement);\n    }\n  }\n\n  setupWebXR(webXRSessionInit) {\n    if (this.webXRMode) {\n      if (this.webXRMode === WebXRMode.VR) {\n        this.rootElement.appendChild(\n          VRButton.createButton(this.renderer, webXRSessionInit),\n        );\n      } else if (this.webXRMode === WebXRMode.AR) {\n        this.rootElement.appendChild(\n          ARButton.createButton(this.renderer, webXRSessionInit),\n        );\n      }\n      this.renderer.xr.addEventListener('sessionstart', (e) => {\n        this.webXRActive = true;\n      });\n      this.renderer.xr.addEventListener('sessionend', (e) => {\n        this.webXRActive = false;\n      });\n      this.renderer.xr.enabled = true;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupControls() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      if (!this.usingExternalCamera) {\n        this.perspectiveControls = new OrbitControls(\n          this.perspectiveCamera,\n          this.renderer.domElement,\n        );\n        this.orthographicControls = new OrbitControls(\n          this.orthographicCamera,\n          this.renderer.domElement,\n        );\n      } else {\n        if (this.camera.isOrthographicCamera) {\n          this.orthographicControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        } else {\n          this.perspectiveControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        }\n      }\n      for (let controls of [\n        this.orthographicControls,\n        this.perspectiveControls,\n      ]) {\n        if (controls) {\n          controls.listenToKeyEvents(window);\n          controls.rotateSpeed = 0.5;\n          controls.maxPolarAngle = Math.PI * 0.75;\n          controls.minPolarAngle = 0.1;\n          controls.enableDamping = true;\n          controls.dampingFactor = 0.05;\n          controls.target.copy(this.initialCameraLookAt);\n          controls.update();\n        }\n      }\n      this.controls = this.camera.isOrthographicCamera ?\n        this.orthographicControls :\n        this.perspectiveControls;\n      this.controls.update();\n    }\n  }\n\n  setupEventHandlers() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      this.mouseMoveListener = this.onMouseMove.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n        false,\n      );\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n        false,\n      );\n      this.mouseUpListener = this.onMouseUp.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerup',\n        this.mouseUpListener,\n        false,\n      );\n      this.keyDownListener = this.onKeyDown.bind(this);\n      window.addEventListener('keydown', this.keyDownListener, false);\n    }\n  }\n\n  removeEventHandlers() {\n    if (this.useBuiltInControls) {\n      this.renderer.domElement.removeEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n      );\n      this.mouseMoveListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n      );\n      this.mouseDownListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerup',\n        this.mouseUpListener,\n      );\n      this.mouseUpListener = null;\n      window.removeEventListener('keydown', this.keyDownListener);\n      this.keyDownListener = null;\n    }\n  }\n\n  setRenderMode(renderMode) {\n    this.renderMode = renderMode;\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value =\n      activeSphericalHarmonicsDegrees;\n    this.splatMesh.material.uniformsNeedUpdate = true;\n  }\n\n  onSplatMeshChanged(callback) {\n    this.onSplatMeshChangedCallback = callback;\n  }\n\n  onKeyDown = (function() {\n    const forward = new THREE.Vector3();\n    const tempMatrixLeft = new THREE.Matrix4();\n    const tempMatrixRight = new THREE.Matrix4();\n\n    return function(e) {\n      forward.set(0, 0, -1);\n      forward.transformDirection(this.camera.matrixWorld);\n      tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n      tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n      switch (e.code) {\n        case 'KeyG':\n          this.focalAdjustment += 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'KeyF':\n          this.focalAdjustment -= 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'ArrowLeft':\n          this.camera.up.transformDirection(tempMatrixLeft);\n          break;\n        case 'ArrowRight':\n          this.camera.up.transformDirection(tempMatrixRight);\n          break;\n        case 'KeyC':\n          this.showMeshCursor = !this.showMeshCursor;\n          break;\n        case 'KeyU':\n          this.showControlPlane = !this.showControlPlane;\n          break;\n        case 'KeyI':\n          this.showInfo = !this.showInfo;\n          if (this.showInfo) {\n            this.infoPanel.show();\n          } else {\n            this.infoPanel.hide();\n          }\n          break;\n        case 'KeyO':\n          if (!this.usingExternalCamera) {\n            this.setOrthographicMode(!this.camera.isOrthographicCamera);\n          }\n          break;\n        case 'KeyP':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setPointCloudModeEnabled(\n              !this.splatMesh.getPointCloudModeEnabled(),\n            );\n          }\n          break;\n        case 'Equal':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n          }\n          break;\n        case 'Minus':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(\n              Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0),\n            );\n          }\n          break;\n      }\n    };\n  })();\n\n  onMouseMove(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n  }\n\n  onMouseDown() {\n    this.mouseDownPosition.copy(this.mousePosition);\n    this.mouseDownTime = getCurrentTime();\n  }\n\n  onMouseUp = (function() {\n    const clickOffset = new THREE.Vector2();\n\n    return function(mouse) {\n      clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n      const mouseUpTime = getCurrentTime();\n      const wasClick =\n        mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n      if (wasClick) {\n        this.onMouseClick(mouse);\n      }\n    };\n  })();\n\n  onMouseClick(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    this.checkForFocalPointChange();\n  }\n\n  checkForFocalPointChange = (function() {\n    const renderDimensions = new THREE.Vector2();\n    const toNewFocalPoint = new THREE.Vector3();\n    const outHits = [];\n\n    return function() {\n      if (!this.transitioningCameraTarget) {\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          const hit = outHits[0];\n\n          const intersectionPoint = hit.origin;\n\n          toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n          if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n            this.previousCameraTarget.copy(this.controls.target);\n            this.nextCameraTarget.copy(intersectionPoint);\n            this.transitioningCameraTarget = true;\n            this.transitioningCameraTargetStartTime = getCurrentTime();\n          }\n        }\n      }\n    };\n  })();\n\n  getRenderDimensions(outDimensions) {\n    if (this.rootElement) {\n      outDimensions.x = this.rootElement.offsetWidth;\n      outDimensions.y = this.rootElement.offsetHeight;\n    } else {\n      this.renderer.getSize(outDimensions);\n    }\n  }\n\n  setOrthographicMode(orthographicMode) {\n    if (orthographicMode === this.camera.isOrthographicCamera) return;\n    const fromCamera = this.camera;\n    const toCamera = orthographicMode ?\n      this.orthographicCamera :\n      this.perspectiveCamera;\n    toCamera.position.copy(fromCamera.position);\n    toCamera.up.copy(fromCamera.up);\n    toCamera.rotation.copy(fromCamera.rotation);\n    toCamera.quaternion.copy(fromCamera.quaternion);\n    toCamera.matrix.copy(fromCamera.matrix);\n    this.camera = toCamera;\n\n    if (this.controls) {\n      const resetControls = (controls) => {\n        controls.saveState();\n        controls.reset();\n      };\n\n      const fromControls = this.controls;\n      const toControls = orthographicMode ?\n        this.orthographicControls :\n        this.perspectiveControls;\n\n      resetControls(toControls);\n      resetControls(fromControls);\n\n      toControls.target.copy(fromControls.target);\n      if (orthographicMode) {\n        Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n      } else {\n        Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n      }\n      this.controls = toControls;\n      this.camera.lookAt(this.controls.target);\n    }\n  }\n\n  static setCameraPositionFromZoom = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(positionCamera, zoomedCamera, controls) {\n      const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n      tempVector\n        .copy(controls.target)\n        .sub(positionCamera.position)\n        .normalize()\n        .multiplyScalar(toLookAtDistance)\n        .negate();\n      positionCamera.position.copy(controls.target).add(tempVector);\n    };\n  })();\n\n  static setCameraZoomFromPosition = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(zoomCamera, positionZamera, controls) {\n      const toLookAtDistance = tempVector\n        .copy(controls.target)\n        .sub(positionZamera.position)\n        .length();\n      zoomCamera.zoom = 1 / (toLookAtDistance * 0.001);\n    };\n  })();\n\n  updateSplatMesh = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.splatMesh) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      if (splatCount > 0) {\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.splatMesh.updateTransforms();\n        this.getRenderDimensions(renderDimensions);\n        const focalLengthX =\n          this.camera.projectionMatrix.elements[0] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.x;\n        const focalLengthY =\n          this.camera.projectionMatrix.elements[5] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.y;\n\n        const focalMultiplier = this.camera.isOrthographicCamera ?\n          1.0 / this.devicePixelRatio :\n          1.0;\n        const focalAdjustment = this.focalAdjustment * focalMultiplier;\n        const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n        this.adjustForWebXRStereo(renderDimensions);\n        this.splatMesh.updateUniforms(\n          renderDimensions,\n          focalLengthX * focalAdjustment,\n          focalLengthY * focalAdjustment,\n          this.camera.isOrthographicCamera,\n          this.camera.zoom || 1.0,\n          inverseFocalAdjustment,\n        );\n      }\n    };\n  })();\n\n  adjustForWebXRStereo(renderDimensions) {\n    // TODO: Figure out a less hacky way to determine if stereo rendering is active\n    if (this.camera && this.webXRActive) {\n      const xrCamera = this.renderer.xr.getCamera();\n      const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n      const cameraProj00 = this.camera.projectionMatrix.elements[0];\n      renderDimensions.x *= cameraProj00 / xrCameraProj00;\n    }\n  }\n\n  isLoadingOrUnloading() {\n    return (\n      Object.keys(this.splatSceneDownloadPromises).length > 0 ||\n      this.splatSceneDownloadAndBuildPromise !== null ||\n      this.splatSceneRemovalPromise !== null\n    );\n  }\n\n  isDisposingOrDisposed() {\n    return this.disposing || this.disposed;\n  }\n\n  addSplatSceneDownloadPromise(promise) {\n    this.splatSceneDownloadPromises[promise.id] = promise;\n  }\n\n  removeSplatSceneDownloadPromise(promise) {\n    delete this.splatSceneDownloadPromises[promise.id];\n  }\n\n  setSplatSceneDownloadAndBuildPromise(promise) {\n    this.splatSceneDownloadAndBuildPromise = promise;\n  }\n\n  clearSplatSceneDownloadAndBuildPromise() {\n    this.splatSceneDownloadAndBuildPromise = null;\n  }\n\n  /**\n   * Add a splat scene to the viewer and display any loading UI if appropriate.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received, or other processing occurs\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    if (\n      options.progressiveLoad &&\n      this.splatMesh.scenes &&\n      this.splatMesh.scenes.length > 0\n    ) {\n      console.log(\n        'addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes',\n      );\n      options.progressiveLoad = false;\n    }\n\n    const format =\n      options.format !== undefined && options.format !== null ?\n        options.format :\n        sceneFormatFromPath(path);\n    const progressiveLoad =\n      Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\n    const showLoadingUI =\n      options.showLoadingUI !== undefined && options.showLoadingUI !== null ?\n        options.showLoadingUI :\n        true;\n\n    let loadingUITaskId = null;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n    const hideLoadingUI = () => {\n      this.loadingProgressBar.hide();\n      this.loadingSpinner.removeAllTasks();\n    };\n\n    const onProgressUIUpdate = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          if (percentComplete == 100) {\n            this.loadingSpinner.setMessageForTask(\n              loadingUITaskId,\n              'Download complete!',\n            );\n          } else {\n            if (progressiveLoad) {\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                'Downloading splats...',\n              );\n            } else {\n              const suffix = percentCompleteLabel ?\n                `: ${percentCompleteLabel}` :\n                `...`;\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                `Downloading${suffix}`,\n              );\n            }\n          }\n        } else if (loaderStatus === LoaderStatus.Processing) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            'Processing splats...',\n          );\n        }\n      }\n    };\n\n    let downloadDone = false;\n    let downloadedPercentage = 0;\n    const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n      if (showLoadingUI) {\n        if (\n          (firstBuild && progressiveLoad) ||\n          (finalBuild && !progressiveLoad)\n        ) {\n          this.loadingSpinner.removeTask(loadingUITaskId);\n          if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n        }\n        if (progressiveLoad) {\n          if (finalBuild) {\n            downloadDone = true;\n            this.loadingProgressBar.hide();\n          } else {\n            this.loadingProgressBar.setProgress(downloadedPercentage);\n          }\n        }\n      }\n    };\n\n    const onProgress = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      downloadedPercentage = percentComplete;\n      onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n      if (options.onProgress) {\n        options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n      }\n    };\n\n    const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n      if (!progressiveLoad && options.onProgress) {\n        options.onProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const addSplatBufferOptions = {\n        rotation: options.rotation || options.orientation,\n        position: options.position,\n        scale: options.scale,\n        splatAlphaRemovalThreshold: options.splatAlphaRemovalThreshold,\n      };\n      return this.addSplatBuffers(\n        [splatBuffer],\n        [addSplatBufferOptions],\n        finalBuild,\n        firstBuild && showLoadingUI,\n        showLoadingUI,\n        progressiveLoad,\n        progressiveLoad,\n      ).then(() => {\n        if (!progressiveLoad && options.onProgress) {\n          options.onProgress(100, '100%', LoaderStatus.Processing);\n        }\n        splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n      });\n    };\n\n    const loadFunc = progressiveLoad ?\n      this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\n      this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\n    return loadFunc(\n      path,\n      format,\n      options.splatAlphaRemovalThreshold,\n      buildSection.bind(this),\n      onProgress,\n      hideLoadingUI.bind(this),\n    );\n  }\n\n  /**\n   * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n   * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\n   * and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n   * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n   * @param {function} onException Function to be called when exception occurs\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneStandardLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onProgress,\n    onException,\n  ) {\n    const downloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onProgress,\n      false,\n      undefined,\n      format,\n    );\n    const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(\n      downloadPromise.abortHandler,\n    );\n\n    downloadPromise\n      .then((splatBuffer) => {\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        return buildFunc(splatBuffer, true, true).then(() => {\n          downloadAndBuildPromise.resolve();\n          this.clearSplatSceneDownloadAndBuildPromise();\n        });\n      })\n      .catch((e) => {\n        if (onException) onException();\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(`Viewer::addSplatScene -> Could not load file ${path}`);\n        downloadAndBuildPromise.reject(error);\n      });\n\n    this.addSplatSceneDownloadPromise(downloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\n\n    return downloadAndBuildPromise.promise;\n  }\n\n  /**\n   * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\n   * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n   * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n   * @param {function} onDownloadProgress Function to be called as file data are received\n   * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneProgressiveLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onDownloadProgress,\n    onDownloadException,\n  ) {\n    let progressiveLoadedSectionBuildCount = 0;\n    let progressiveLoadedSectionBuilding = false;\n    const queuedProgressiveLoadSectionBuilds = [];\n\n    const checkAndBuildProgressiveLoadSections = () => {\n      if (\n        queuedProgressiveLoadSectionBuilds.length > 0 &&\n        !progressiveLoadedSectionBuilding &&\n        !this.isDisposingOrDisposed()\n      ) {\n        progressiveLoadedSectionBuilding = true;\n        const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\n        buildFunc(\n          queuedBuild.splatBuffer,\n          queuedBuild.firstBuild,\n          queuedBuild.finalBuild,\n        ).then(() => {\n          progressiveLoadedSectionBuilding = false;\n          if (queuedBuild.firstBuild) {\n            progressiveLoadFirstSectionBuildPromise.resolve();\n          } else if (queuedBuild.finalBuild) {\n            splatSceneDownloadAndBuildPromise.resolve();\n            this.clearSplatSceneDownloadAndBuildPromise();\n          }\n          if (queuedProgressiveLoadSectionBuilds.length > 0) {\n            delayedExecute(() => checkAndBuildProgressiveLoadSections());\n          }\n        });\n      }\n    };\n\n    const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\n      if (!this.isDisposingOrDisposed()) {\n        if (\n          finalBuild ||\n          queuedProgressiveLoadSectionBuilds.length === 0 ||\n          splatBuffer.getSplatCount() >\n            queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()\n        ) {\n          queuedProgressiveLoadSectionBuilds.push({\n            splatBuffer,\n            firstBuild: progressiveLoadedSectionBuildCount === 0,\n            finalBuild,\n          });\n          progressiveLoadedSectionBuildCount++;\n          checkAndBuildProgressiveLoadSections();\n        }\n      }\n    };\n\n    const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onDownloadProgress,\n      true,\n      onProgressiveLoadSectionProgress,\n      format,\n    );\n\n    const progressiveLoadFirstSectionBuildPromise =\n      abortablePromiseWithExtractedComponents(\n        splatSceneDownloadPromise.abortHandler,\n      );\n    const splatSceneDownloadAndBuildPromise =\n      abortablePromiseWithExtractedComponents();\n\n    this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(\n      splatSceneDownloadAndBuildPromise.promise,\n    );\n\n    splatSceneDownloadPromise\n      .then(() => {\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n      })\n      .catch((e) => {\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(\n                `Viewer::addSplatScene -> Could not load one or more scenes`,\n              );\n        progressiveLoadFirstSectionBuildPromise.reject(error);\n        if (onDownloadException) onDownloadException(error);\n      });\n\n    return progressiveLoadFirstSectionBuildPromise.promise;\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @param {function} onProgress Function to be called as file data are received\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    const fileCount = sceneOptions.length;\n    const percentComplete = [];\n\n    let loadingUITaskId;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n\n    const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\n      percentComplete[fileIndex] = percent;\n      let totalPercent = 0;\n      for (let i = 0; i < fileCount; i++) {\n        totalPercent += percentComplete[i] || 0;\n      }\n      totalPercent = totalPercent / fileCount;\n      percentLabel = `${totalPercent.toFixed(2)}%`;\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            totalPercent == 100 ?\n              `Download complete!` :\n              `Downloading: ${percentLabel}`,\n          );\n        }\n      }\n      if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\n    };\n\n    const baseDownloadPromises = [];\n    const nativeDownloadPromises = [];\n    for (let i = 0; i < sceneOptions.length; i++) {\n      const options = sceneOptions[i];\n      const format =\n        options.format !== undefined && options.format !== null ?\n          options.format :\n          sceneFormatFromPath(options.path);\n      const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n        options.path,\n        options.splatAlphaRemovalThreshold,\n        onLoadProgress.bind(this, i),\n        false,\n        undefined,\n        format,\n      );\n      baseDownloadPromises.push(baseDownloadPromise);\n      nativeDownloadPromises.push(baseDownloadPromise.promise);\n    }\n\n    const downloadAndBuildPromise = new AbortablePromise(\n      (resolve, reject) => {\n        Promise.all(nativeDownloadPromises)\n          .then((splatBuffers) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            this.addSplatBuffers(\n              splatBuffers,\n              sceneOptions,\n              true,\n              showLoadingUI,\n              showLoadingUI,\n              false,\n              false,\n            ).then(() => {\n              if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n              this.clearSplatSceneDownloadAndBuildPromise();\n              resolve();\n            });\n          })\n          .catch((e) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            this.clearSplatSceneDownloadAndBuildPromise();\n            const error =\n              e instanceof AbortedPromiseError ?\n                e :\n                new Error(\n                    `Viewer::addSplatScenes -> Could not load one or more splat scenes.`,\n                  );\n            reject(error);\n          })\n          .finally(() => {\n            this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\n          });\n      },\n      (reason) => {\n        for (let baseDownloadPromise of baseDownloadPromises) {\n          baseDownloadPromise.abort(reason);\n        }\n      },\n    );\n    this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\n    return downloadAndBuildPromise;\n  }\n\n  /**\n   * Download a splat scene and convert to SplatBuffer instance.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n   *                                            value (valid range: 0 - 255), defaults to 1\n   *\n   * @param {function} onProgress Function to be called as file data are received\n   * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\n   * @param {function} onSectionBuilt Function to be called when new section is added to the file\n   * @param {string} format File format of the scene\n   * @return {AbortablePromise}\n   */\n  downloadSplatSceneToSplatBuffer(\n    path,\n    splatAlphaRemovalThreshold = 1,\n    onProgress = undefined,\n    progressiveBuild = false,\n    onSectionBuilt = undefined,\n    format,\n  ) {\n    const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\n    try {\n      if (format === SceneFormat.Splat) {\n        return SplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.KSplat) {\n        return KSplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.Ply) {\n        return PlyLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          this.sphericalHarmonicsDegree,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.GLTF) {\n        return new GLTFLoader(this).loadFromURL(path);\n      }\n    } catch (e) {\n      if (e instanceof DirectLoadError) {\n        throw new Error(\n          'File type or server does not support progressive loading.',\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    throw new Error(\n      `Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`,\n    );\n  }\n\n  static isProgressivelyLoadable(format) {\n    return (\n      format === SceneFormat.Splat ||\n      format === SceneFormat.KSplat ||\n      format === SceneFormat.Ply\n    );\n  }\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n   * This function will terminate the existing sort worker (if there is one).\n   */\n  addSplatBuffers = (function() {\n    return function(\n      splatBuffers,\n      splatBufferOptions = [],\n      finalBuild = true,\n      showLoadingUI = true,\n      showLoadingUIForSplatTreeBuild = true,\n      replaceExisting = false,\n      enableRenderBeforeFirstSort = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n      let splatProcessingTaskId = null;\n      const removeSplatProcessingTask = () => {\n        if (splatProcessingTaskId !== null) {\n          this.loadingSpinner.removeTask(splatProcessingTaskId);\n          splatProcessingTaskId = null;\n        }\n      };\n\n      this.splatRenderReady = false;\n      return new Promise((resolve) => {\n        if (showLoadingUI) {\n          splatProcessingTaskId = this.loadingSpinner.addTask(\n            'Processing splats...',\n          );\n        }\n        delayedExecute(() => {\n          if (this.isDisposingOrDisposed()) {\n            resolve();\n          } else {\n            const buildResults = this.addSplatBuffersToMesh(\n              splatBuffers,\n              splatBufferOptions,\n              finalBuild,\n              showLoadingUIForSplatTreeBuild,\n              replaceExisting,\n              preserveVisibleRegion,\n            );\n\n            const maxSplatCount = this.splatMesh.getMaxSplatCount();\n            if (\n              this.sortWorker &&\n              this.sortWorker.maxSplatCount !== maxSplatCount\n            ) {\n              this.disposeSortWorker();\n            }\n            // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\n            // splat centers and transform indexes so that it can calculate those distance values.\n            if (!this.gpuAcceleratedSort) {\n              this.preSortMessages.push({\n                centers: buildResults.centers.buffer,\n                sceneIndexes: buildResults.sceneIndexes.buffer,\n                range: {\n                  from: buildResults.from,\n                  to: buildResults.to,\n                  count: buildResults.count,\n                },\n              });\n            }\n            const sortWorkerSetupPromise =\n              !this.sortWorker && maxSplatCount > 0 ?\n                this.setupSortWorker(this.splatMesh) :\n                Promise.resolve();\n            sortWorkerSetupPromise.then(() => {\n              if (this.isDisposingOrDisposed()) return;\n              this.runSplatSort(true, true).then((sortRunning) => {\n                if (!this.sortWorker || !sortRunning) {\n                  this.splatRenderReady = true;\n                  removeSplatProcessingTask();\n                  resolve();\n                } else {\n                  if (enableRenderBeforeFirstSort) {\n                    this.splatRenderReady = true;\n                  } else {\n                    this.runAfterNextSort.push(() => {\n                      this.splatRenderReady = true;\n                    });\n                  }\n                  this.runAfterNextSort.push(() => {\n                    removeSplatProcessingTask();\n                    resolve();\n                  });\n                }\n              });\n            });\n          }\n        }, true);\n      });\n    };\n  })();\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\n   * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\n   * changed by passing 'true' for 'replaceExisting'.\n   * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n   * @param {Array<object>} splatBufferOptions Array of options objects: {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  addSplatBuffersToMesh = (function() {\n    let splatOptimizingTaskId;\n\n    return function(\n      splatBuffers,\n      splatBufferOptions,\n      finalBuild = true,\n      showLoadingUIForSplatTreeBuild = false,\n      replaceExisting = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return;\n      let allSplatBuffers = [];\n      let allSplatBufferOptions = [];\n      if (!replaceExisting) {\n        allSplatBuffers =\n          this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\n        allSplatBufferOptions = this.splatMesh.sceneOptions ?\n          this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) :\n          [];\n      }\n      allSplatBuffers.push(...splatBuffers);\n      allSplatBufferOptions.push(...splatBufferOptions);\n      if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n      const onSplatTreeIndexesUpload = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        const splatCount = this.splatMesh.getSplatCount();\n        if (\n          showLoadingUIForSplatTreeBuild &&\n          splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER\n        ) {\n          if (!finished && !splatOptimizingTaskId) {\n            this.loadingSpinner.setMinimized(true, true);\n            splatOptimizingTaskId = this.loadingSpinner.addTask(\n              'Optimizing data structures...',\n            );\n          }\n        }\n      };\n      const onSplatTreeReady = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        if (finished && splatOptimizingTaskId) {\n          this.loadingSpinner.removeTask(splatOptimizingTaskId);\n          splatOptimizingTaskId = null;\n        }\n      };\n      const buildResults = this.splatMesh.build(\n        allSplatBuffers,\n        allSplatBufferOptions,\n        true,\n        finalBuild,\n        onSplatTreeIndexesUpload,\n        onSplatTreeReady,\n        preserveVisibleRegion,\n      );\n      if (finalBuild && this.freeIntermediateSplatData) {\n        this.splatMesh.freeIntermediateSplatData();\n      }\n      return buildResults;\n    };\n  })();\n\n  /**\n   * Set up the splat sorting web worker.\n   * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n   * @return {Promise}\n   */\n  setupSortWorker(splatMesh) {\n    if (this.isDisposingOrDisposed()) return;\n    return new Promise((resolve) => {\n      const DistancesArrayType = this.integerBasedSort ?\n        Int32Array :\n        Float32Array;\n      const splatCount = splatMesh.getSplatCount();\n      const maxSplatCount = splatMesh.getMaxSplatCount();\n      this.sortWorker = createSortWorker(\n        maxSplatCount,\n        this.sharedMemoryForWorkers,\n        this.enableSIMDInSort,\n        this.integerBasedSort,\n        this.splatMesh.dynamicMode,\n        this.splatSortDistanceMapPrecision,\n      );\n      this.sortWorker.onmessage = (e) => {\n        if (e.data.sortDone) {\n          this.sortRunning = false;\n          if (this.sharedMemoryForWorkers) {\n            this.splatMesh.updateRenderIndexes(\n              this.sortWorkerSortedIndexes,\n              e.data.splatRenderCount,\n            );\n          } else {\n            const sortedIndexes = new Uint32Array(\n              e.data.sortedIndexes.buffer,\n              0,\n              e.data.splatRenderCount,\n            );\n            this.splatMesh.updateRenderIndexes(\n              sortedIndexes,\n              e.data.splatRenderCount,\n            );\n          }\n\n          this.lastSplatSortCount = this.splatSortCount;\n\n          this.lastSortTime = e.data.sortTime;\n          this.sortPromiseResolver();\n          this.sortPromiseResolver = null;\n          this.forceRenderNextFrame();\n          if (this.runAfterNextSort.length > 0) {\n            this.runAfterNextSort.forEach((func) => {\n              func();\n            });\n            this.runAfterNextSort.length = 0;\n          }\n        } else if (e.data.sortCanceled) {\n          this.sortRunning = false;\n        } else if (e.data.sortSetupPhase1Complete) {\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker WASM setup complete.');\n          }\n          if (this.sharedMemoryForWorkers) {\n            this.sortWorkerSortedIndexes = new Uint32Array(\n              e.data.sortedIndexesBuffer,\n              e.data.sortedIndexesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerIndexesToSort = new Uint32Array(\n              e.data.indexesToSortBuffer,\n              e.data.indexesToSortOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              e.data.precomputedDistancesBuffer,\n              e.data.precomputedDistancesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              e.data.transformsBuffer,\n              e.data.transformsOffset,\n              Constants.MaxScenes * 16,\n            );\n          } else {\n            this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              Constants.MaxScenes * 16,\n            );\n          }\n          for (let i = 0; i < splatCount; i++) {\n            this.sortWorkerIndexesToSort[i] = i;\n          }\n          this.sortWorker.maxSplatCount = maxSplatCount;\n\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker ready.');\n            const splatDataTextures = this.splatMesh.getSplatDataTextures();\n            const covariancesTextureSize = splatDataTextures.covariances.size;\n            const centersColorsTextureSize =\n              splatDataTextures.centerColors.size;\n            console.log(\n              'Covariances texture size: ' +\n                covariancesTextureSize.x +\n                ' x ' +\n                covariancesTextureSize.y,\n            );\n            console.log(\n              'Centers/colors texture size: ' +\n                centersColorsTextureSize.x +\n                ' x ' +\n                centersColorsTextureSize.y,\n            );\n          }\n\n          resolve();\n        }\n      };\n    });\n  }\n\n  disposeSortWorker() {\n    if (this.sortWorker) this.sortWorker.terminate();\n    this.sortWorker = null;\n    this.sortPromise = null;\n    if (this.sortPromiseResolver) {\n      this.sortPromiseResolver();\n      this.sortPromiseResolver = null;\n    }\n    this.preSortMessages = [];\n    this.sortRunning = false;\n  }\n\n  removeSplatScene(indexToRemove, showLoadingUI = true) {\n    return this.removeSplatScenes([indexToRemove], showLoadingUI);\n  }\n\n  removeSplatScenes(indexesToRemove, showLoadingUI = true) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot remove splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot remove splat scene after dispose() is called.');\n    }\n\n    let sortPromise;\n\n    this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n      let revmovalTaskId;\n\n      if (showLoadingUI) {\n        this.loadingSpinner.removeAllTasks();\n        this.loadingSpinner.show();\n        revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n      }\n\n      const checkAndHideLoadingUI = () => {\n        if (showLoadingUI) {\n          this.loadingSpinner.hide();\n          this.loadingSpinner.removeTask(revmovalTaskId);\n        }\n      };\n\n      const onDone = (error) => {\n        checkAndHideLoadingUI();\n        this.splatSceneRemovalPromise = null;\n        if (!error) resolve();\n        else reject(error);\n      };\n\n      const checkForEarlyExit = () => {\n        if (this.isDisposingOrDisposed()) {\n          onDone();\n          return true;\n        }\n        return false;\n      };\n\n      sortPromise = this.sortPromise || Promise.resolve();\n      sortPromise.then(() => {\n        if (checkForEarlyExit()) return;\n        const savedSplatBuffers = [];\n        const savedSceneOptions = [];\n        const savedSceneTransformComponents = [];\n        for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n          let shouldRemove = false;\n          for (let indexToRemove of indexesToRemove) {\n            if (indexToRemove === i) {\n              shouldRemove = true;\n              break;\n            }\n          }\n          if (!shouldRemove) {\n            const scene = this.splatMesh.scenes[i];\n            savedSplatBuffers.push(scene.splatBuffer);\n            savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n            savedSceneTransformComponents.push({\n              position: scene.position.clone(),\n              quaternion: scene.quaternion.clone(),\n              scale: scene.scale.clone(),\n            });\n          }\n        }\n        this.disposeSortWorker();\n        this.splatMesh.dispose();\n        this.sceneRevealMode = SceneRevealMode.Instant;\n        this.createSplatMesh();\n        this.addSplatBuffers(\n          savedSplatBuffers,\n          savedSceneOptions,\n          true,\n          false,\n          true,\n        )\n          .then(() => {\n            if (checkForEarlyExit()) return;\n            checkAndHideLoadingUI();\n            this.splatMesh.scenes.forEach((scene, index) => {\n              scene.position.copy(\n                savedSceneTransformComponents[index].position,\n              );\n              scene.quaternion.copy(\n                savedSceneTransformComponents[index].quaternion,\n              );\n              scene.scale.copy(savedSceneTransformComponents[index].scale);\n            });\n            this.splatMesh.updateTransforms();\n            this.splatRenderReady = false;\n\n            this.runSplatSort(true).then(() => {\n              if (checkForEarlyExit()) {\n                this.splatRenderReady = true;\n                return;\n              }\n              sortPromise = this.sortPromise || Promise.resolve();\n              sortPromise.then(() => {\n                this.splatRenderReady = true;\n                onDone();\n              });\n            });\n          })\n          .catch((e) => {\n            onDone(e);\n          });\n      });\n    });\n\n    return this.splatSceneRemovalPromise;\n  }\n\n  /**\n   * Start self-driven mode\n   */\n  start() {\n    if (this.selfDrivenMode) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n      } else {\n        this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n      }\n      this.selfDrivenModeRunning = true;\n    } else {\n      throw new Error('Cannot start viewer unless it is in self driven mode.');\n    }\n  }\n\n  /**\n   * Stop self-driven mode\n   */\n  stop() {\n    if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(null);\n      } else {\n        cancelAnimationFrame(this.requestFrameId);\n      }\n      this.selfDrivenModeRunning = false;\n    }\n  }\n\n  /**\n   * Dispose of all resources held directly and indirectly by this viewer.\n   */\n  async dispose() {\n    if (this.isDisposingOrDisposed()) return this.disposePromise;\n\n    let waitPromises = [];\n    let promisesToAbort = [];\n    for (let promiseKey in this.splatSceneDownloadPromises) {\n      if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n        const downloadPromiseToAbort =\n          this.splatSceneDownloadPromises[promiseKey];\n        promisesToAbort.push(downloadPromiseToAbort);\n        waitPromises.push(downloadPromiseToAbort.promise);\n      }\n    }\n    if (this.sortPromise) {\n      waitPromises.push(this.sortPromise);\n    }\n\n    this.disposing = true;\n    this.disposePromise = Promise.all(waitPromises).finally(() => {\n      this.stop();\n      if (this.orthographicControls) {\n        this.orthographicControls.dispose();\n        this.orthographicControls = null;\n      }\n      if (this.perspectiveControls) {\n        this.perspectiveControls.dispose();\n        this.perspectiveControls = null;\n      }\n      this.controls = null;\n      if (this.splatMesh) {\n        this.splatMesh.dispose();\n        this.splatMesh = null;\n      }\n      if (this.sceneHelper) {\n        this.sceneHelper.dispose();\n        this.sceneHelper = null;\n      }\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(this.rootElement);\n        this.resizeObserver = null;\n      }\n      this.disposeSortWorker();\n      this.removeEventHandlers();\n\n      this.loadingSpinner.removeAllTasks();\n      this.loadingSpinner.setContainer(null);\n      this.loadingProgressBar.hide();\n      this.loadingProgressBar.setContainer(null);\n      this.infoPanel.setContainer(null);\n\n      this.camera = null;\n      this.threeScene = null;\n      this.splatRenderReady = false;\n      this.initialized = false;\n      if (this.renderer) {\n        if (!this.usingExternalRenderer) {\n          this.rootElement.removeChild(this.renderer.domElement);\n          this.renderer.dispose();\n        }\n        this.renderer = null;\n      }\n\n      if (!this.usingExternalRenderer) {\n        document.body.removeChild(this.rootElement);\n      }\n\n      this.sortWorkerSortedIndexes = null;\n      this.sortWorkerIndexesToSort = null;\n      this.sortWorkerPrecomputedDistances = null;\n      this.sortWorkerTransforms = null;\n      this.disposed = true;\n      this.disposing = false;\n      this.disposePromise = null;\n    });\n    promisesToAbort.forEach((toAbort) => {\n      toAbort.abort('Scene disposed');\n    });\n    return this.disposePromise;\n  }\n\n  selfDrivenUpdate() {\n    if (this.selfDrivenMode && !this.webXRMode) {\n      this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n    }\n    this.update();\n    if (this.shouldRender()) {\n      this.render();\n      this.consecutiveRenderFrames++;\n    } else {\n      this.consecutiveRenderFrames = 0;\n    }\n    this.renderNextFrame = false;\n  }\n\n  forceRenderNextFrame() {\n    this.renderNextFrame = true;\n  }\n\n  shouldRender = (function() {\n    let renderCount = 0;\n    const lastCameraPosition = new THREE.Vector3();\n    const lastCameraOrientation = new THREE.Quaternion();\n    const changeEpsilon = 0.0001;\n\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return false;\n      }\n\n      let shouldRender = false;\n      let cameraChanged = false;\n      if (this.camera) {\n        const cp = this.camera.position;\n        const co = this.camera.quaternion;\n        cameraChanged =\n          Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n          Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n          Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n          Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n          Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n          Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n          Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n      }\n\n      shouldRender =\n        this.renderMode !== RenderMode.Never &&\n        (renderCount === 0 ||\n          this.splatMesh.visibleRegionChanging ||\n          cameraChanged ||\n          this.renderMode === RenderMode.Always ||\n          this.dynamicMode === true ||\n          this.renderNextFrame);\n\n      if (this.camera) {\n        lastCameraPosition.copy(this.camera.position);\n        lastCameraOrientation.copy(this.camera.quaternion);\n      }\n\n      renderCount++;\n      return shouldRender;\n    };\n  })();\n\n  render = (function() {\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return;\n      }\n\n      const hasRenderables = (threeScene) => {\n        for (let child of threeScene.children) {\n          if (child.visible) return true;\n        }\n        return false;\n      };\n\n      const savedAuoClear = this.renderer.autoClear;\n      if (hasRenderables(this.threeScene)) {\n        this.renderer.render(this.threeScene, this.camera);\n        this.renderer.autoClear = false;\n      }\n      this.renderer.render(this.splatMesh, this.camera);\n      this.renderer.autoClear = false;\n      if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) {\n        this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n      }\n      if (this.showControlPlane) {\n        this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n      }\n      this.renderer.autoClear = savedAuoClear;\n    };\n  })();\n\n  update(renderer, camera) {\n    if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n\n    if (\n      !this.initialized ||\n      !this.splatRenderReady ||\n      this.isDisposingOrDisposed()\n    ) {\n      return;\n    }\n\n    if (this.controls) {\n      this.controls.update();\n      if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n        Viewer.setCameraPositionFromZoom(\n          this.camera,\n          this.camera,\n          this.controls,\n        );\n      }\n    }\n    this.runSplatSort();\n    this.updateForRendererSizeChanges();\n    this.updateSplatMesh();\n    this.updateMeshCursor();\n    this.updateFPS();\n    this.timingSensitiveUpdates();\n    this.updateInfoPanel();\n    this.updateControlPlane();\n  }\n\n  updateForDropInMode(renderer, camera) {\n    this.renderer = renderer;\n    if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n    this.camera = camera;\n    if (this.controls) this.controls.object = camera;\n    this.init();\n  }\n\n  updateFPS = (function() {\n    let lastCalcTime = getCurrentTime();\n    let frameCount = 0;\n\n    return function() {\n      if (\n        this.consecutiveRenderFrames >\n        CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION\n      ) {\n        const currentTime = getCurrentTime();\n        const calcDelta = currentTime - lastCalcTime;\n        if (calcDelta >= 1.0) {\n          this.currentFPS = frameCount;\n          frameCount = 0;\n          lastCalcTime = currentTime;\n        } else {\n          frameCount++;\n        }\n      } else {\n        this.currentFPS = null;\n      }\n    };\n  })();\n\n  updateForRendererSizeChanges = (function() {\n    const lastRendererSize = new THREE.Vector2();\n    const currentRendererSize = new THREE.Vector2();\n    let lastCameraOrthographic;\n\n    return function() {\n      if (!this.usingExternalCamera) {\n        this.renderer.getSize(currentRendererSize);\n        if (\n          lastCameraOrthographic === undefined ||\n          lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n          currentRendererSize.x !== lastRendererSize.x ||\n          currentRendererSize.y !== lastRendererSize.y\n        ) {\n          if (this.camera.isOrthographicCamera) {\n            this.camera.left = -currentRendererSize.x / 2.0;\n            this.camera.right = currentRendererSize.x / 2.0;\n            this.camera.top = currentRendererSize.y / 2.0;\n            this.camera.bottom = -currentRendererSize.y / 2.0;\n          } else {\n            this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n          }\n          this.camera.updateProjectionMatrix();\n          lastRendererSize.copy(currentRendererSize);\n          lastCameraOrthographic = this.camera.isOrthographicCamera;\n        }\n      }\n    };\n  })();\n\n  timingSensitiveUpdates = (function() {\n    let lastUpdateTime;\n\n    return function() {\n      const currentTime = getCurrentTime();\n      if (!lastUpdateTime) lastUpdateTime = currentTime;\n      const timeDelta = currentTime - lastUpdateTime;\n\n      this.updateCameraTransition(currentTime);\n      this.updateFocusMarker(timeDelta);\n\n      lastUpdateTime = currentTime;\n    };\n  })();\n\n  updateCameraTransition = (function() {\n    let tempCameraTarget = new THREE.Vector3();\n    let toPreviousTarget = new THREE.Vector3();\n    let toNextTarget = new THREE.Vector3();\n\n    return function(currentTime) {\n      if (this.transitioningCameraTarget) {\n        toPreviousTarget\n          .copy(this.previousCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        toNextTarget\n          .copy(this.nextCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n        const rotationSpeed = (rotationAngle / (Math.PI / 3)) * 0.65 + 0.3;\n        const t =\n          (rotationSpeed / rotationAngle) *\n          (currentTime - this.transitioningCameraTargetStartTime);\n        tempCameraTarget\n          .copy(this.previousCameraTarget)\n          .lerp(this.nextCameraTarget, t);\n        this.camera.lookAt(tempCameraTarget);\n        this.controls.target.copy(tempCameraTarget);\n        if (t >= 1.0) {\n          this.transitioningCameraTarget = false;\n        }\n      }\n    };\n  })();\n\n  updateFocusMarker = (function() {\n    const renderDimensions = new THREE.Vector2();\n    let wasTransitioning = false;\n\n    return function(timeDelta) {\n      this.getRenderDimensions(renderDimensions);\n      if (this.transitioningCameraTarget) {\n        this.sceneHelper.setFocusMarkerVisibility(true);\n        const currentFocusMarkerOpacity = Math.max(\n          this.sceneHelper.getFocusMarkerOpacity(),\n          0.0,\n        );\n        let newFocusMarkerOpacity = Math.min(\n          currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta,\n          1.0,\n        );\n        this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n        this.sceneHelper.updateFocusMarker(\n          this.nextCameraTarget,\n          this.camera,\n          renderDimensions,\n        );\n        wasTransitioning = true;\n        this.forceRenderNextFrame();\n      } else {\n        let currentFocusMarkerOpacity;\n        if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n        else {\n          currentFocusMarkerOpacity = Math.min(\n            this.sceneHelper.getFocusMarkerOpacity(),\n            1.0,\n          );\n        }\n        if (currentFocusMarkerOpacity > 0) {\n          this.sceneHelper.updateFocusMarker(\n            this.nextCameraTarget,\n            this.camera,\n            renderDimensions,\n          );\n          let newFocusMarkerOpacity = Math.max(\n            currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta,\n            0.0,\n          );\n          this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n          if (newFocusMarkerOpacity === 0.0) {\n            this.sceneHelper.setFocusMarkerVisibility(false);\n          }\n        }\n        if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n        wasTransitioning = false;\n      }\n    };\n  })();\n\n  updateMeshCursor = (function() {\n    const outHits = [];\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (this.showMeshCursor) {\n        this.forceRenderNextFrame();\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          this.sceneHelper.setMeshCursorVisibility(true);\n          this.sceneHelper.positionAndOrientMeshCursor(\n            outHits[0].origin,\n            this.camera,\n          );\n        } else {\n          this.sceneHelper.setMeshCursorVisibility(false);\n        }\n      } else {\n        if (this.sceneHelper.getMeschCursorVisibility()) {\n          this.forceRenderNextFrame();\n        }\n        this.sceneHelper.setMeshCursorVisibility(false);\n      }\n    };\n  })();\n\n  updateInfoPanel = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.showInfo) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      this.getRenderDimensions(renderDimensions);\n      const cameraLookAtPosition = this.controls ? this.controls.target : null;\n      const meshCursorPosition = this.showMeshCursor ?\n        this.sceneHelper.meshCursor.position :\n        null;\n      const splatRenderCountPct =\n        splatCount > 0 ? (this.splatRenderCount / splatCount) * 100 : 0;\n      this.infoPanel.update(\n        renderDimensions,\n        this.camera.position,\n        cameraLookAtPosition,\n        this.camera.up,\n        this.camera.isOrthographicCamera,\n        meshCursorPosition,\n        this.currentFPS || 'N/A',\n        splatCount,\n        this.splatRenderCount,\n        splatRenderCountPct,\n        this.lastSortTime,\n        this.focalAdjustment,\n        this.splatMesh.getSplatScale(),\n        this.splatMesh.getPointCloudModeEnabled(),\n      );\n    };\n  })();\n\n  updateControlPlane() {\n    if (this.showControlPlane) {\n      this.sceneHelper.setControlPlaneVisibility(true);\n      this.sceneHelper.positionAndOrientControlPlane(\n        this.controls.target,\n        this.camera.up,\n      );\n    } else {\n      this.sceneHelper.setControlPlaneVisibility(false);\n    }\n  }\n\n  runSplatSort = (function() {\n    const mvpMatrix = new THREE.Matrix4();\n    const cameraPositionArray = [];\n    const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n    const sortViewDir = new THREE.Vector3(0, 0, -1);\n    const lastSortViewPos = new THREE.Vector3();\n    const sortViewOffset = new THREE.Vector3();\n    const queuedSorts = [];\n\n    const partialSorts = [\n      {\n        angleThreshold: 0.55,\n        sortFractions: [0.125, 0.33333, 0.75],\n      },\n      {\n        angleThreshold: 0.65,\n        sortFractions: [0.33333, 0.66667],\n      },\n      {\n        angleThreshold: 0.8,\n        sortFractions: [0.5],\n      },\n    ];\n\n    return function(force = false, forceSortAll = false) {\n      if (!this.initialized) return Promise.resolve(false);\n      if (this.sortRunning) return Promise.resolve(true);\n      if (this.splatMesh.getSplatCount() <= 0) {\n        this.splatRenderCount = 0;\n        return Promise.resolve(false);\n      }\n\n      let angleDiff = 0;\n      let positionDiff = 0;\n      let needsRefreshForRotation = false;\n      let needsRefreshForPosition = false;\n\n      sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n      angleDiff = sortViewDir.dot(lastSortViewDir);\n      positionDiff = sortViewOffset\n        .copy(this.camera.position)\n        .sub(lastSortViewPos)\n        .length();\n\n      if (!force) {\n        if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n          if (angleDiff <= 0.99) needsRefreshForRotation = true;\n          if (positionDiff >= 1.0) needsRefreshForPosition = true;\n          if (!needsRefreshForRotation && !needsRefreshForPosition) {\n            return Promise.resolve(false);\n          }\n        }\n      }\n\n      this.sortRunning = true;\n      let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n      shouldSortAll = shouldSortAll || forceSortAll;\n      this.splatRenderCount = splatRenderCount;\n\n      mvpMatrix.copy(this.camera.matrixWorld).invert();\n      const mvpCamera = this.perspectiveCamera || this.camera;\n      mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n      mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n      let gpuAcceleratedSortPromise = Promise.resolve(true);\n      if (\n        this.gpuAcceleratedSort &&\n        (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)\n      ) {\n        gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(\n          mvpMatrix,\n          this.sortWorkerPrecomputedDistances,\n        );\n      }\n\n      gpuAcceleratedSortPromise.then(() => {\n        if (queuedSorts.length === 0) {\n          if (this.splatMesh.dynamicMode || shouldSortAll) {\n            queuedSorts.push(this.splatRenderCount);\n          } else {\n            for (let partialSort of partialSorts) {\n              if (angleDiff < partialSort.angleThreshold) {\n                for (let sortFraction of partialSort.sortFractions) {\n                  queuedSorts.push(\n                    Math.floor(this.splatRenderCount * sortFraction),\n                  );\n                }\n                break;\n              }\n            }\n            queuedSorts.push(this.splatRenderCount);\n          }\n        }\n        let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n        this.splatSortCount = sortCount;\n\n        cameraPositionArray[0] = this.camera.position.x;\n        cameraPositionArray[1] = this.camera.position.y;\n        cameraPositionArray[2] = this.camera.position.z;\n\n        const sortMessage = {\n          modelViewProj: mvpMatrix.elements,\n          cameraPosition: cameraPositionArray,\n          splatRenderCount: this.splatRenderCount,\n          splatSortCount: sortCount,\n          usePrecomputedDistances: this.gpuAcceleratedSort,\n        };\n        if (this.splatMesh.dynamicMode) {\n          this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n        }\n        if (!this.sharedMemoryForWorkers) {\n          sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n          sortMessage.transforms = this.sortWorkerTransforms;\n          if (this.gpuAcceleratedSort) {\n            sortMessage.precomputedDistances =\n              this.sortWorkerPrecomputedDistances;\n          }\n        }\n\n        this.sortPromise = new Promise((resolve) => {\n          this.sortPromiseResolver = resolve;\n        });\n\n        if (this.preSortMessages.length > 0) {\n          this.preSortMessages.forEach((message) => {\n            this.sortWorker.postMessage(message);\n          });\n          this.preSortMessages = [];\n        }\n        this.sortWorker.postMessage({\n          sort: sortMessage,\n        });\n\n        if (queuedSorts.length === 0) {\n          lastSortViewPos.copy(this.camera.position);\n          lastSortViewDir.copy(sortViewDir);\n        }\n\n        return true;\n      });\n\n      return gpuAcceleratedSortPromise;\n    };\n  })();\n\n  /**\n   * Determine which splats to render by checking which are inside or close to the view frustum\n   */\n  gatherSceneNodesForSort = (function() {\n    const nodeRenderList = [];\n    let allSplatsSortBuffer = null;\n    const tempVectorYZ = new THREE.Vector3();\n    const tempVectorXZ = new THREE.Vector3();\n    const tempVector = new THREE.Vector3();\n    const modelView = new THREE.Matrix4();\n    const baseModelView = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const renderDimensions = new THREE.Vector3();\n    const forward = new THREE.Vector3(0, 0, -1);\n\n    const tempMax = new THREE.Vector3();\n    const nodeSize = (node) => {\n      return tempMax.copy(node.max).sub(node.min).length();\n    };\n\n    return function(gatherAllNodes = false) {\n      this.getRenderDimensions(renderDimensions);\n      const cameraFocalLength =\n        renderDimensions.y /\n        2.0 /\n        Math.tan((this.camera.fov / 2.0) * THREE.MathUtils.DEG2RAD);\n      const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n      const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n      const cosFovXOver2 = Math.cos(fovXOver2);\n      const cosFovYOver2 = Math.cos(fovYOver2);\n\n      const splatTree = this.splatMesh.getSplatTree();\n\n      if (splatTree) {\n        baseModelView.copy(this.camera.matrixWorld).invert();\n        baseModelView.multiply(this.splatMesh.matrixWorld);\n\n        let nodeRenderCount = 0;\n        let splatRenderCount = 0;\n\n        for (let s = 0; s < splatTree.subTrees.length; s++) {\n          const subTree = splatTree.subTrees[s];\n          modelView.copy(baseModelView);\n          if (this.splatMesh.dynamicMode) {\n            this.splatMesh.getSceneTransform(s, sceneTransform);\n            modelView.multiply(sceneTransform);\n          }\n          const nodeCount = subTree.nodesWithIndexes.length;\n          for (let i = 0; i < nodeCount; i++) {\n            const node = subTree.nodesWithIndexes[i];\n            if (\n              !node.data ||\n              !node.data.indexes ||\n              node.data.indexes.length === 0\n            ) {\n              continue;\n            }\n            tempVector.copy(node.center).applyMatrix4(modelView);\n\n            const distanceToNode = tempVector.length();\n            tempVector.normalize();\n\n            tempVectorYZ.copy(tempVector).setX(0).normalize();\n            tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n            const cameraAngleXZDot = forward.dot(tempVectorXZ);\n            const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n            const ns = nodeSize(node);\n            const outOfFovY = cameraAngleYZDot < cosFovYOver2 - 0.6;\n            const outOfFovX = cameraAngleXZDot < cosFovXOver2 - 0.6;\n            if (\n              !gatherAllNodes &&\n              (outOfFovX || outOfFovY) &&\n              distanceToNode > ns\n            ) {\n              continue;\n            }\n            splatRenderCount += node.data.indexes.length;\n            nodeRenderList[nodeRenderCount] = node;\n            node.data.distanceToNode = distanceToNode;\n            nodeRenderCount++;\n          }\n        }\n\n        nodeRenderList.length = nodeRenderCount;\n        nodeRenderList.sort((a, b) => {\n          if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n          else return 1;\n        });\n\n        let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n        for (let i = 0; i < nodeRenderCount; i++) {\n          const node = nodeRenderList[i];\n          const windowSizeInts = node.data.indexes.length;\n          const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n          let destView = new Uint32Array(\n            this.sortWorkerIndexesToSort.buffer,\n            currentByteOffset - windowSizeBytes,\n            windowSizeInts,\n          );\n          destView.set(node.data.indexes);\n          currentByteOffset -= windowSizeBytes;\n        }\n\n        return {\n          splatRenderCount: splatRenderCount,\n          shouldSortAll: false,\n        };\n      } else {\n        const totalSplatCount = this.splatMesh.getSplatCount();\n        if (\n          !allSplatsSortBuffer ||\n          allSplatsSortBuffer.length !== totalSplatCount\n        ) {\n          allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n          for (let i = 0; i < totalSplatCount; i++) {\n            allSplatsSortBuffer[i] = i;\n          }\n        }\n        this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n        return {\n          splatRenderCount: totalSplatCount,\n          shouldSortAll: true,\n        };\n      }\n    };\n  })();\n\n  getSplatMesh() {\n    return this.splatMesh;\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.splatMesh.getScene(sceneIndex);\n  }\n\n  getSceneCount() {\n    return this.splatMesh.getSceneCount();\n  }\n\n  isMobile() {\n    return navigator.userAgent.includes('Mobi');\n  }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n  constructor(options = {}) {\n    super();\n    options.selfDrivenMode = false;\n    options.useBuiltInControls = false;\n    options.rootElement = null;\n    options.ignoreDevicePixelRatio = false;\n    options.dropInMode = true;\n    options.camera = undefined;\n    options.renderer = undefined;\n\n    this.viewer = new Viewer(options);\n    this.splatMesh = null;\n    this.updateSplatMesh();\n\n    this.callbackMesh = DropInViewer.createCallbackMesh();\n    this.add(this.callbackMesh);\n    this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(\n      this,\n      this.viewer,\n    );\n\n    this.viewer.onSplatMeshChanged(() => {\n      this.updateSplatMesh();\n    });\n  }\n\n  updateSplatMesh() {\n    if (this.splatMesh !== this.viewer.splatMesh) {\n      if (this.splatMesh) {\n        this.remove(this.splatMesh);\n      }\n      this.splatMesh = this.viewer.splatMesh;\n      this.add(this.viewer.splatMesh);\n    }\n  }\n\n  renderSplatsID = (function() {\n    /**\n     * Modifies the uniforms of the shader to render the splats reflecting their\n     * ids, it also removes the transparency mode.\n     * @param {status} boolean value used to set if the shader renders IDs or the splats in regular mode\n     */\n\n    return function(status) {\n      if (this.splatMesh !== null) {\n        this.splatMesh.renderSplatsID(status);\n      }\n    };\n  })();\n\n  /**\n   * Add a single splat scene to the viewer.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (options.showLoadingUI !== false) options.showLoadingUI = true;\n    return this.viewer.addSplatScene(path, options);\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI) {\n    if (showLoadingUI !== false) showLoadingUI = true;\n    return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.viewer.getSplatScene(sceneIndex);\n  }\n\n  removeSplatScene(index, showLoadingUI = true) {\n    return this.viewer.removeSplatScene(index, showLoadingUI);\n  }\n\n  removeSplatScenes(indexes, showLoadingUI = true) {\n    return this.viewer.removeSplatScenes(indexes, showLoadingUI);\n  }\n\n  getSceneCount() {\n    return this.viewer.getSceneCount();\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.viewer.setActiveSphericalHarmonicsDegrees(\n      activeSphericalHarmonicsDegrees,\n    );\n  }\n\n  async dispose() {\n    return await this.viewer.dispose();\n  }\n\n  static onBeforeRender(viewer, renderer, threeScene, camera) {\n    viewer.update(renderer, camera);\n  }\n\n  static createCallbackMesh() {\n    const geometry = new THREE.SphereGeometry(1, 8, 8);\n    const material = new THREE.MeshBasicMaterial();\n    material.colorWrite = false;\n    material.depthWrite = false;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.frustumCulled = false;\n    return mesh;\n  }\n}\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","reason","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","makeProgressiveFetchFunction","get","globalThis","fetch","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","async","data","ok","errorText","text","status","statusText","reader","body","getReader","bytesDownloaded","_fileSize","headers","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","fetchWithProgress","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","FRC24","FRC25","FRC26","FRC27","FRC28","FRC29","FRC30","FRC31","FRC32","FRC33","FRC34","FRC35","FRC36","FRC37","FRC38","FRC39","FRC40","FRC41","FRC42","FRC43","FRC44","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","DefaultSphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","range8BitMin","range8BitMax","fromUint8","toUint8","v","rangeMin","rangeMax","range","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","getSplatHarmonics","srcSplatHarmonicsBase","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","shOut1","shOut2","shOut3","shOut21","shOut22","shOut23","shOut24","shOut25","shOut31","shOut32","shOut33","shOut34","shOut35","shOut36","shOut37","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","setOutput3","srcArray","destArray","destBase","conversionFunc","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","localFromHalfFloatToUint8","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","localToUint8","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","minShCoeff","maxShCoeff","abs","toUintMax","Max","toUintMaxArray","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET_FRC24","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sc","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","sqrt","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArraySection","parseToUncompressedSplatArray","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","plyParserutils","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","DirectLoadError","InternalLoadType","LoaderStatus","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","storeChunksInBuffer","inBytes","sizeBytes","finalize","optimizeSplatData","PlyLoader","loadFromURL","fileName","loadDirectoToSplatBuffer","onProgressiveLoadSectionProgress","defaultFetchWithProgress","internalLoadType","directLoadSectionSizeBytes","ProgressiveLoadSectionSize","splatDataOffsetBytes","directLoadBufferIn","directLoadBufferOut","directLoadSplatBuffer","compressedPlyHeaderChunksBuffer","headerLoaded","readyToLoadSplatData","compressed","loadPromise","standardLoadUncompressedSplatArray","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","inriaV1PlyParser","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","shDescriptor","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","chunkDatas","plyFileData","loadFromFileData","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","directLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","directLoadPromise","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fullBuffer","splatBuffer","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","GLTF","sceneFormatFromPath","endsWith","LogLevel","None","Warning","Info","Debug","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","RenderMode","Always","OnChange","Never","_axis","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","SceneRevealMode","Default","Gradual","Instant","SplatRenderMode","ThreeD","TwoD","GLTFParser","decodeSplatData","splatBuffers","shBuffers","positions","POSITION","scales","sx","sy","sz","rotations","rx","ry","rz","rw","opacities","sh0","sh_band_0","dcx","dcy","dcz","sh_band_1_0","sh_band_1_1","sh_band_1_2","sh_band_2_0","sh_band_2_1","sh_band_2_2","sh_band_2_3","sh_band_2_4","sh_band_3_0","sh_band_3_1","sh_band_3_2","sh_band_3_3","sh_band_3_4","sh_band_3_5","sh_band_3_6","GLTFLoader","viewer","url","gltf","fetchGLTF","filePaths","gltfUrl","baseUrl","substring","lastIndexOf","attributes","meshes","primitives","OPF_mesh_primitive_custom_attributes","attributeMapping","sh_band_1_triplet_0","sh_band_1_triplet_1","sh_band_1_triplet_2","sh_band_2_triplet_0","sh_band_2_triplet_1","sh_band_2_triplet_2","sh_band_2_triplet_3","sh_band_2_triplet_4","sh_band_3_triplet_0","sh_band_3_triplet_1","sh_band_3_triplet_2","sh_band_3_triplet_3","sh_band_3_triplet_4","sh_band_3_triplet_5","sh_band_3_triplet_6","Object","fromEntries","entries","key","bufferIndex","bufferViews","accessors","bufferView","buffers","uri","getFilePaths","fetchBuffers","firstBandBuffers","secondBandBuffers","thirdBandBuffers","bandBuffers","getSplatCountFromGLTF","loadFromBufferData","response","json","bufferNames","bufferPromises","all","assign","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","splatScale","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","sphericalHarmonics8BitCompressionRangeMin","sphericalHarmonics8BitCompressionRangeMax","harmonicsRangeMin","harmonicsRange","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneIndexesTexture","sceneIndexesTextureSize","sceneCount","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","antialiased","maxScreenSpaceSplatSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","glslVersion","GLSL3","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","copyTransformData","otherScene","updateTransform","matrixWorldAutoUpdate","updateWorldMatrix","updateMatrix","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","dummyGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","sceneFadeInRateMultiplier","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","renderSplatsID","uColorID","buildScenes","parentObject","sceneOptions","scene","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","splatBufferSplatCount","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","colors","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","start","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","setupDataTextures","updateDataTexturesFromBaseData","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","paddedSHComponentCount","shElementsPerTexel","shTexSize","shComponentCountPerChannel","paddedSHArrays","shTextures","degree1DataAmount","degree2DataAmount","degree3DataAmount","degree1TextureSize","degree2TextureSize","degree3TextureSize","paddedSHArray1","paddedSHArray2","paddedSHArray3","totalSHDataPerSplat","shTextureDegree1","RedIntegerFormat","shTextureDegree2","shTextureDegree3","componentCountPerChannel","paddedComponentCount","textureCount","sceneIndexesTexSize","paddedTransformIndexes","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","fillSplatDataArrays","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","sceneIndexesTexDesc","paddedSceneIndexes","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","fastFadeRate","gradualFadeRate","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","renderSplatCount","setDrawRange","updateTransforms","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","includeSinceLastBuild","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","tempTransform","startSceneIndex","endSceneIndex","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","getSceneCount","matrixElements","intMatrixArray","computeBoundingBox","applySceneTransforms","InfoPanel","container","infoCells","layout","infoPanelContainer","innerHTML","append","infoPanel","className","infoTable","display","layoutEntry","labelCell","classList","spacerCell","infoCell","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","sortTime","setContainer","parentElement","removeChild","zIndex","show","hide","LoadingProgressBar","tasks","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","LoadingSpinner","message","taskIDGen","elementID","elementIDGen","spinnerContainerOuter","spinnerContainerPrimary","spinnerPrimary","messageContainerPrimary","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","setMessage","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","ARButton","createButton","sessionInit","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","domOverlay","overlay","svg","createElementNS","currentSession","optionalFeatures","root","onSessionStarted","session","onSessionEnded","setReferenceSpaceType","setSession","textContent","requestSession","offerSession","err","showStartAR","exception","isSecureContext","location","replace","textDecoration","VRButton","sessionOptions","showEnterVR","xrSessionIsGranted","registerSessionGrantedListener","test","WebXRMode","VR","AR","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","distanceMapRange","uploadedSplatCount","BytesPerInt","BytesPerFloat","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","webXRSessionInit","renderMode","enableSIMDInSort","inMemoryCompressionLevel","semver","splatSortDistanceMapPrecision","DefaultSplatSortDistanceMapPrecision","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","lastSplatSortCount","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","preSortMessages","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","opts","frustumCulled","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","setActiveSphericalHarmonicsDegrees","activeSphericalHarmonicsDegrees","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","progressiveLoad","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","downloadAndBuildPromise","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","baseDownloadPromises","nativeDownloadPromises","baseDownloadPromise","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","buildResults","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","runSplatSort","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","forceSortAll","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","gpuAcceleratedSortPromise","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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uBAAuBjL,GACrCld,EAAakR,EAAOlR,WACpBuoB,EAAYrzB,KAAKkzB,cAAclL,EAAWhM,GAOhD,OANmBhc,KAAK2zB,uBACtBN,EACAvoB,EACAkR,EACA9B,EAGH,EC3VH,MAAMma,GAA2B,CAC/B,cACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,UACA,UACA,cACA,eAEIC,GAA+BD,GAAyB9Q,KAAI,CAACuF,EAAG5d,IAAMA,KAG1EqpB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACE,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAEpBC,GAAmB,CACvB,UACA,UACA,UACA,QACA,QACA,QACA,QACA,IACA,IACA,IACA,SACA,SACA,SACA,UACA,MACA,QACA,OACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEIC,GAAsBD,GAAiBvR,KAAI,CAACuF,EAAG5d,IAAMA,KAGzD8pB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,IACEd,GAEEe,GAAUJ,GACVK,GAAYJ,GACZK,GAAWJ,GAEXzoB,GAAiB8oB,IACrB,MAAMjQ,GAAK,MAAQiQ,IAAO,GACpB7P,EAAI,KAAO6P,EACjB,OACGA,GAAM,IAAM,EAAI,IAChBjQ,EACO,KAANA,EACEI,EACE8P,IACA,IACFvxB,KAAKwxB,IAAI,EAAGnQ,EAAI,KAAO,EAAII,EAAI,MAChCA,EAAI,KAAQ,eACf,EAGG,MAAMgQ,GACX,WAAAz2B,GACEK,KAAKsyB,eAAiB,IAAIpF,EAC3B,CAED,mCAAAmJ,CAAoCpP,GAClC,MAAMmG,EAAiB2H,GAAoBhC,QAAO,CAACC,EAAK1M,KACtD0M,EAAI8B,GAAiBxO,IAAYA,EAC1B0M,IACN,CAAE,GAECsD,EAA6BhC,GAA6BvB,QAC9D,CAACC,EAAK1M,KACJ0M,EAAIqB,GAAyB/N,IAAYA,EAClC0M,IAET,CAAE,GAGErD,EAAezC,GAAewC,sBAAsBzI,GAC1D,IAAIsP,EACJ,IAAK,IAAIhV,EAAI,EAAGA,EAAIoO,EAAaxrB,OAAQod,IAAK,CAExB,qBADAoO,EAAapO,KAE/BgV,EAAuBhV,EAE1B,CAED,IAAIiV,EAAmB,EACnBC,GAAmB,EACvB,MAAMla,EAAiB,GACvB,IAAI5K,EAAe,EACnB,MAAQ8kB,GAAkB,CACxB,IAAInZ,EAEFA,EADE3L,IAAiB4kB,EACHv2B,KAAKsyB,eAAenF,oBAClClG,EACAqP,EACAE,GAGcx2B,KAAKsyB,eAAenF,oBAClClG,EACAmG,EACAoJ,GAGJC,EAAmBnZ,EAAcoQ,YACjC8I,EAAmBlZ,EAAckQ,cAAgB,EAC5CiJ,IACHnZ,EAAcxS,WAAawS,EAAcmQ,YACzCnQ,EAAcvL,cAAgBuL,EAAcsR,gBAE9CrS,EAAelY,KAAKiZ,GACpB3L,GACD,CACD,OAAO4K,CACR,CAED,kCAAAma,CAAmC5P,GACjC,MAAMG,EAAciG,GAAewD,yBAAyB5J,GAC5D,OAAO9mB,KAAKq2B,oCAAoCpP,EACjD,CAED,+BAAA0P,CAAgCpa,GAC9B,IAAIzR,EAAa,EACjB,IAAK,IAAIwS,KAAiBf,EACU,qBAA9Be,EAAcqQ,cAChB7iB,GAAcwS,EAAcmQ,aAGhC,OAAO3iB,CACR,CAED,0BAAA8rB,CAA2B9P,GACzB,MAAMgB,EACJhB,EAAWtgB,QAAQ0mB,GAAe1H,gBAClC0H,GAAe1H,eAAerhB,OAC9B,EACIoY,EAAiBvc,KAAK02B,mCAAmC5P,GAE/D,MAAO,CACLgB,gBAAiBA,EACjBvL,eAAgBA,EAChBzR,WAJiB9K,KAAK22B,gCAAgCpa,GAMzD,CAED,sBAAA0W,CAAuBjL,GACrB,MAAMlB,EAAa9mB,KAAKsyB,eAAe7B,qBAAqBzI,GAC5D,OAAOhoB,KAAK42B,2BAA2B9P,EACxC,CAED,cAAA+P,CAAe7O,EAAWhM,EAAQ8a,GAChC,IAAIC,EAAa/a,EAAO8L,gBACxB,IACE,IAAIvG,EAAI,EACRA,EAAIuV,GAAiBvV,EAAIvF,EAAOO,eAAepY,OAC/Cod,IACA,CAEAwV,GADsB/a,EAAOO,eAAegF,GAChBwN,aAC7B,CACD,OAAO,IAAI/c,SACTgW,EACA+O,EACA/a,EAAOO,eAAeua,GAAe/H,cAExC,CAED,cAAAiI,CAAeC,EAAc3Z,GAC3B,MAAM8T,EAAY,GACZ8F,EAAW,GACjB,IAAK,IAAIlT,EAAM,EAAGA,EAAM1G,EAAcmQ,YAAazJ,IAAO,CACxDkJ,GAAe8D,WACbiG,EACA3Z,EACA0G,EACA,EACAsQ,GACAlD,GAEF,IAAK,IAAI9lB,KAASgpB,GAA8B,CAC9C,MAAM6C,EAAwB7C,GAA6BhpB,GAC3D,IAAI8rB,EAAeF,EAASC,GACvBC,IACHF,EAASC,GAAyBC,EAAe,IAEnDA,EAAa/yB,KAAK+sB,EAAU9lB,GAC7B,CACF,CACD,IAAK,IAAI+rB,EAAO,EAAGA,EAAOH,EAAS/yB,OAAQkzB,IAAQ,CACjD,MAAMD,EAAeF,EAASG,GACxBjD,EAAQ,mBACd,IAAK,IAAIlpB,EAAI,EAAGA,EAAIksB,EAAajzB,OAAQ+G,IAAK,CAC5C,MAAMosB,EAAYnqB,GAAciqB,EAAalsB,IAE3CksB,EAAalsB,GADXmsB,IAAS3C,GACO/vB,KAAKgc,MAAO,GAAK,EAAIhc,KAAK2mB,KAAKgM,IAAe,KACvDD,IAAS9C,GACA5vB,KAAKgc,MAAkC,KAA3B,GAAMyT,EAAQkD,IACnCD,IAAS1C,GACAhwB,KAAK2mB,IAAIgM,GAETA,CAErB,CACF,CACD,OAAOJ,CACR,CAED,sBAAAvD,CACEC,EACA9oB,EACAwS,EACA4Z,EACAhd,GAEAA,EAA8BvV,KAAKF,IACjCyV,EACAoD,EAAc1X,0BAEhB,MAAMwc,EAAa,IAAIxb,EAAuBsT,GAC9C,IAAK,IAAI8J,EAAM,EAAGA,EAAMlZ,EAAYkZ,IAAO,CACzC,MAAMxY,EAAW4qB,GAAiB1C,yBAChCE,EACA5P,EACA1G,EACA4Z,EACA,EACAhd,GAEFkI,EAAWjX,SAASK,EACrB,CACD,OAAO4W,CACR,CAED1iB,gCAAkC,WAChC,IAAIm0B,EAAW,GACf,MAAM7b,EAAe,IAAI/K,EAAMkG,WAEzBoM,EAAW3Y,EAAuB4Z,OAAO3Z,EACzC2Y,EAAW5Y,EAAuB4Z,OAAO1Z,EACzC2Y,EAAW7Y,EAAuB4Z,OAAOzZ,EAEzC2Y,EAAgB9Y,EAAuB4Z,OAAOxZ,OAC9C2Y,EAAgB/Y,EAAuB4Z,OAAOvZ,OAC9C2Y,EAAgBhZ,EAAuB4Z,OAAOtZ,OAE9C4sB,EAAmBltB,EAAuB4Z,OAAOrZ,UACjD4sB,EAAmBntB,EAAuB4Z,OAAOpZ,UACjD4sB,EAAmBptB,EAAuB4Z,OAAOnZ,UACjD4sB,EAAmBrtB,EAAuB4Z,OAAOlZ,UAEjD2Y,EAAcrZ,EAAuB4Z,OAAOjZ,KAC5C2Y,EAActZ,EAAuB4Z,OAAOhZ,KAC5C2Y,EAAcvZ,EAAuB4Z,OAAO/Y,KAC5C2Y,EAAiBxZ,EAAuB4Z,OAAO9Y,QAE/CwsB,EAAa,GAEnB,IAAK,IAAIhpB,EAAI,EAAGA,EAAI,GAAIA,IACtBgpB,EAAWhpB,GAAKtE,EAAuB4Z,OAAO7Y,KAAOuD,EAGvD,OAAO,SACLmoB,EACArP,EACAhI,EACAkb,EACA5D,EAAkB,EAClBpZ,EAA8B,GAE9BA,EAA8BvV,KAAKF,IACjCyV,EACA8B,EAAOpW,0BAETwwB,GAAiBjC,UACfd,EACArX,EACAgI,EACAsP,EACAO,GAEF,MAAMroB,EAAW5E,EAAuBmE,YACtCmP,GAuCF,QArC8BzW,IAA1BowB,EAASmB,KACXxpB,EAASkU,GAAiBwX,EAASvC,IAAYd,EAASmB,KACxDxpB,EAASmU,GAAiBuX,EAASvC,IAAYd,EAASoB,KACxDzpB,EAASoU,GAAiBsX,EAASvC,IAAYd,EAASqB,OAExD1pB,EAASkU,GAAiB,IAC1BlU,EAASmU,GAAiB,IAC1BnU,EAASoU,GAAiB,UAGCnc,IAAzBowB,EAAS6B,KACXlqB,EAASyU,GAAeiX,EAAS3C,IAAgBV,EAAS6B,KAC1DlqB,EAAS0U,GAAegX,EAAS3C,IAAgBV,EAAS8B,KAC1DnqB,EAAS2U,GAAe+W,EAAS3C,IAAgBV,EAAS+B,WAC3BnyB,IAAtBowB,EAASiC,KAClBtqB,EAASyU,GAAmC,IAApB4T,EAASiC,IACjCtqB,EAAS0U,GAAqC,IAAtB2T,EAASkC,IACjCvqB,EAAS2U,GAAoC,IAArB0T,EAASmC,MAEjCxqB,EAASyU,GAAe,EACxBzU,EAAS0U,GAAe,EACxB1U,EAAS2U,GAAe,QAGI1c,IAA1BowB,EAASgC,MACXrqB,EAAS4U,GAAkB8W,EAASxC,IAAYb,EAASgC,MAG3DrqB,EAASyU,GAAe1b,EAAMI,KAAKoJ,MAAMvC,EAASyU,IAAe,EAAG,KACpEzU,EAAS0U,GAAe3b,EAAMI,KAAKoJ,MAAMvC,EAAS0U,IAAe,EAAG,KACpE1U,EAAS2U,GAAe5b,EAAMI,KAAKoJ,MAAMvC,EAAS2U,IAAe,EAAG,KACpE3U,EAAS4U,GAAkB7b,EACzBI,KAAKoJ,MAAMvC,EAAS4U,IACpB,EACA,KAIAlG,GAA+B,GAC/B8B,EAAOpW,0BAA4B,EACnC,CACA,IAAK,IAAIsF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMksB,EAAeF,EAAS1C,GAAsBtpB,EAAI,GACxDM,EAAS0oB,EAAWhpB,IAClBksB,EAAavD,EAAS7X,EAAOmT,gCAAgCjkB,IAChE,CACD,GACEgP,GAA+B,GAC/B8B,EAAOpW,0BAA4B,EAEnC,IAAK,IAAIsF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMksB,EAAeF,EAASzC,GAAsBvpB,EAAI,GACxDM,EAAS0oB,EAAW,EAAIhpB,IACtBksB,EAAavD,EAAS7X,EAAOqT,gCAAgCnkB,IAChE,CAEJ,CAED,MAAMc,EAAOkrB,EAAStC,IAAgBf,EAASsB,KACzClpB,EAAOirB,EAASrC,IAAgBhB,EAASuB,KACzClpB,EAAOgrB,EAASrC,IAAgBhB,EAASwB,KACzClpB,EAAO+qB,EAASrC,IAAgBhB,EAASyB,KAa/C,OAZAtd,EAAavE,IAAIzH,EAAMC,EAAMC,EAAMC,GACnC6L,EAAa9B,YAEb1K,EAASsoB,GAAoB9b,EAAatM,EAC1CF,EAASuoB,GAAoB/b,EAAarM,EAC1CH,EAASwoB,GAAoBhc,EAAapM,EAC1CJ,EAASyoB,GAAoBjc,EAAa/C,EAE1CzJ,EAAS+T,GAAYpS,GAAc0mB,EAAS0B,KAC5C/pB,EAASgU,GAAYrS,GAAc0mB,EAAS2B,KAC5ChqB,EAASiU,GAAYtS,GAAc0mB,EAAS4B,KAErCjqB,CACb,CACG,CA9HiC,GAgIlC,gBAAO2oB,CAAUd,EAAWrX,EAAQgI,EAAKkN,EAAY2C,GACnD,OAAO3G,GAAe8D,WACpBqC,EACArX,EACAgI,EACAkN,EACA6D,GACAlB,GACA,EAEH,CAED,6BAAA7H,CAA8BhE,EAAW9N,EAA8B,GACrE,MAAM6H,EAAc,GACd/F,EAAShc,KAAKizB,uBAClBjL,EACA9N,GAEF,IAAIgd,EAEJ,IAAK,IAAI3V,EAAI,EAAGA,EAAIvF,EAAOO,eAAepY,OAAQod,IAAK,CACrD,MAAMjE,EAAgBtB,EAAOO,eAAegF,GAC5C,GAAkC,qBAA9BjE,EAAcqQ,YAAoC,CACpD,MAAMsJ,EAAej3B,KAAK62B,eAAe7O,EAAWhM,EAAQuF,GAC5D2V,EAAWl3B,KAAKg3B,eAAeC,EAAc3Z,EAC9C,CACF,CACD,IAAK,IAAIiE,EAAI,EAAGA,EAAIvF,EAAOO,eAAepY,OAAQod,IAAK,CACrD,MAAMjE,EAAgBtB,EAAOO,eAAegF,GAC5C,GAAkC,qBAA9BjE,EAAcqQ,YAAoC,CACpD,MAAM7iB,EAAawS,EAAcmQ,YAC3BwD,EAAajxB,KAAK62B,eAAe7O,EAAWhM,EAAQuF,GACpDa,EAAapiB,KAAK2zB,uBACtB1C,EACAnmB,EACAwS,EACA4Z,EACAhd,GAEF6H,EAAY1d,KAAK+d,EAClB,CACF,CAED,MAAMmV,EAAU,IAAI3wB,EAAuBsT,GAC3C,IAAK,IAAIkI,KAAcL,EACrB,IAAK,IAAI3W,KAASgX,EAAWvX,OAC3B0sB,EAAQpsB,SAASC,GAIrB,OAAOmsB,CACR,EC3eI,MAAMC,GACX,oCAAOxL,CACLhE,EACA9N,EAA8B,GAE9B,MAAMud,EACJvK,GAAe6D,mCAAmC/I,GAEpD,OAAIyP,IAAcxL,EACTrF,EAA8BoF,8BACnChE,GAEOyP,IAAcxL,GAChB,IAAIoG,IAAmBrG,8BAC5BhE,EACA9N,GAEOud,IAAcxL,GAChB,IAAImK,IAAmBpK,8BAC5BhE,EACA9N,QAHG,CAMR,EC7BI,MAAMwd,WAAwBr2B,MACnC,WAAA1B,CAAY2B,GACVC,MAAMD,EACP,ECHI,MAAMq2B,GACU,EADVA,GAES,EAFTA,GAGe,ECHfC,GACE,EADFA,GAEC,EAFDA,GAGL,ECCD,MAAMC,GACX,WAAAl4B,CACEic,EACAkc,EACAC,EACAC,GAEAh4B,KAAK4b,aAAeA,EACpB5b,KAAK83B,eAAiBA,EACtB93B,KAAK+3B,mBAAqBA,EAC1B/3B,KAAKg4B,mBAAqBA,CAC3B,CAED,+BAAAC,CAAgC7V,GAC9B,IAAI2V,EACAnc,EACAkc,EACJ,GAAI93B,KAAKg4B,mBAAoB,CAC3B,MAAME,EAAUl4B,KAAKg4B,mBAAmB5V,GACxC2V,EAAqBG,EAAQH,mBAC7Bnc,EAAesc,EAAQtc,aACvBkc,EAAiBI,EAAQJ,cAC/B,MACMC,EAAqB/3B,KAAK+3B,mBAC1Bnc,EAAe5b,KAAK4b,aACpBkc,EAAiB93B,KAAK83B,eAGxB,MAAMK,EAAY,GAClB,IAAK,IAAI5W,EAAI,EAAGA,EAAI3F,EAAc2F,IAAK,CACrC,MAAM6W,EAAgB,IAAIxxB,EACxBwb,EAAWxc,0BAEPyyB,EAAgBP,EAAevW,GACrC,IAAK,IAAIrW,EAAI,EAAGA,EAAIkX,EAAWtX,WAAYI,IACrCmtB,EAAcntB,IAChBktB,EAAcjtB,SAASiX,EAAWvX,OAAOK,IAG7CitB,EAAU9zB,KAAK+zB,EAChB,CACD,MAAO,CACLrW,YAAaoW,EACbG,WAAYP,EAEf,CAED,6BAAOQ,CACLC,EAAgB,EAChB3c,EAAc,IAAI5O,EAAM+F,QACxBgP,EAAY3S,EAAYwT,gBACxB3R,EAAa7B,EAAY4T,YAsDzB,OAAO,IAAI4U,QACTp0B,OACAA,OACAA,GAvD0B2e,IAC1B,MAAM7C,EAAW3Y,EAAuB4Z,OAAO3Z,EACzC2Y,EAAW5Y,EAAuB4Z,OAAO1Z,EACzC2Y,EAAW7Y,EAAuB4Z,OAAOzZ,EAE3CyxB,GAAiB,IAAGA,EAAgBpW,EAAWtX,YAEnD,MAAM4J,EAAS,IAAIzH,EAAM+F,QACnBylB,EAAgB,GAMtBrW,EAAWvX,OAAO4nB,SAASrnB,IALR,IAACstB,EAMlBhkB,EACGjB,IAAIrI,EAAMmU,GAAWnU,EAAMoU,GAAWpU,EAAMqU,IAC5C+B,IAAI3F,IARW6c,EASPhkB,GARLhJ,EAAI/G,KAAKoJ,MAAM2qB,EAAMhtB,EAAI+sB,GAAiBA,EAChDC,EAAM/sB,EAAIhH,KAAKoJ,MAAM2qB,EAAM/sB,EAAI8sB,GAAiBA,EAChDC,EAAM9sB,EAAIjH,KAAKoJ,MAAM2qB,EAAM9sB,EAAI6sB,GAAiBA,EAOhDrtB,EAAMutB,WAAajkB,EAAOkkB,UAAU,IAEtCxW,EAAWvX,OAAOguB,MAAK,CAACzS,EAAG9Z,IACP8Z,EAAEuS,WACFrsB,EAAEqsB,WACkB,GACzB,IAGf,MAAMb,EAAiB,GACjBC,EAAqB,GAC3BS,EAAgB7zB,KAAKF,IAAI2d,EAAWtX,WAAY0tB,GAChD,MAAMM,EAAgBn0B,KAAKoe,KAAKX,EAAWtX,WAAa0tB,GACxD,IAAIO,EAAoB,EACxB,IAAK,IAAI7tB,EAAI,EAAGA,EAAI4tB,EAAe5tB,IAAK,CACtC,IAAI8tB,EAAaD,EACjBjB,EAAezzB,MAAM40B,GAEjBA,GAAcD,GAAcC,EAAaD,EAAaR,IAG1DT,EAAmB1zB,KAAK,CACtB60B,WAAYlX,EACZ9Q,WAAYA,IAEd6nB,GAAqBP,CACtB,CACD,MAAO,CACL5c,aAAckc,EAAe3zB,OAC7B2zB,iBACAC,qBACD,GAQJ,EC/GI,MAAMoB,GACX,WAAAx5B,CACEy5B,EACAC,EACAhsB,EACAisB,EACAzd,EACAmG,EACA9Q,GAEAlR,KAAKo5B,iBAAmBA,EACxBp5B,KAAKq5B,sBAAwBA,EAC7Br5B,KAAKqN,iBAAmBA,EACxBrN,KAAKs5B,YAAcA,EACnBt5B,KAAK6b,YAAcA,GACjB,IAAI5O,EAAM+F,SAAUY,KAAKiI,QACzBpY,EACFzD,KAAKgiB,UAAYA,EACjBhiB,KAAKkR,WAAaA,CACnB,CAED,kCAAAqoB,CAAmCnX,GACjC,MAAMoX,EACJx5B,KAAKo5B,iBAAiBnB,gCAAgC7V,GACxD,OAAO/S,EAAYyS,oCACjB0X,EAAiBzX,YACjB/hB,KAAKq5B,sBACLr5B,KAAKqN,iBACLrN,KAAK6b,YACL7b,KAAKgiB,UACLhiB,KAAKkR,WACLsoB,EAAiBlB,WAEpB,CAED,2BAAOmB,CACLJ,EAAwB,EACxBhsB,EAAmB,EACnBisB,EAAc,EACdzd,EAAc,IAAI5O,EAAM+F,QACxBgP,EAAY3S,EAAYwT,gBACxB3R,EAAa7B,EAAY4T,YAEzB,MAAMmW,EAAmBvB,GAAiBU,uBACxCe,EACAzd,EACAmG,EACA9Q,GAEF,OAAO,IAAIioB,GACTC,EACAC,EACAhsB,EACAisB,EACAzd,EACAmG,EACA9Q,EAEH,EC3CH,SAASwoB,GAAoBh2B,EAAQ9B,GACnC,IAAI+3B,EAAU,EACd,IAAK,IAAI/1B,KAASF,EAAQi2B,GAAW/1B,EAAMg2B,YAEtCh4B,GAAUA,EAAO0iB,WAAaqV,KACjC/3B,EAAS,IAAIod,YAAY2a,IAG3B,IAAIzd,EAAS,EACb,IAAK,IAAItY,KAASF,EAChB,IAAIyL,WAAWvN,EAAQsa,EAAQtY,EAAMg2B,WAAWnmB,IAAI7P,EAAMjB,MAC1DuZ,GAAUtY,EAAMg2B,UAGlB,OAAOh4B,CACT,CAEA,SAASi4B,GACPxG,EACAyG,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,GAEA,GAAI4oB,EAAmB,CASrB,OAR6BX,GAAqBM,qBAChDliB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,GAE0BqoB,mCAAmClG,EACnE,CACI,OAAOhkB,EAAYyS,oCACjB,CAACuR,GACD9b,EACA,EACA,IAAItK,EAAM+F,QAGhB,CAEO,MAAM+mB,GACX,kBAAOC,CACLC,EACA73B,EACA83B,EACAC,EACA5iB,EACAlK,EACAysB,GAAoB,EACpB5f,EAA8B,EAC9Bof,EACAzd,EACAmG,EACA9Q,EACA5M,EAAoB81B,GAEpB,IAAIC,EAAmBH,EACrBvC,GACAA,GACEmC,IACFO,EAAmB1C,IAGrB,MAAM2C,EAA6BztB,EAAU0tB,2BACvCC,EACJnrB,EAAY8L,gBAAkB9L,EAAY+M,uBAG5C,IAAIqe,EACAC,EACAC,EACAC,EACApqB,EAAgB,EAChB1F,EAAa,EAEb+vB,GAAe,EACfC,GAAuB,EACvBC,GAAa,EAEjB,MAAMC,EAAcn1B,IAEpB,IAOIo1B,EAPAC,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBtU,EAAa,GACb9K,EAAS,KACTtY,EAAS,GAIb,MAAM23B,EAAc,IAAIhT,YAClBiT,EAAmB,IAAIjJ,GAoQ7B,OADIjwB,GAAYA,EAAW,EAAG,KAAMw1B,IAC7BtzB,EAAkB21B,GAlQD,CAACh2B,EAASC,EAAcq3B,KAC9C,MAAMC,EAAev3B,GAAW,IAYhC,GAVIs3B,IACF73B,EAAOW,KAAK,CACV1B,KAAM44B,EACN3B,UAAW2B,EAAUjX,WACrBmX,WAAYL,EACZM,SAAUN,EAAqBG,EAAUjX,aAE3C8W,GAAsBG,EAAUjX,YAG9B+V,IAAqB1C,GACnB6D,GACFR,EAAY76B,QAAQuD,OAEjB,CACL,GAAKm3B,GA8DE,GAAIE,IAAeD,EAAsB,CAC9C,MAAMa,EACJ3f,EAAO8L,gBAAkB9L,EAAO+K,aAAa1J,iBAC/Cud,EAAkClB,GAChCh2B,EACAk3B,GAGAA,EAAgCtW,YAChCqX,IAEA/U,EAA8B4B,gBAC5BxM,EAAO+K,aACP6T,EACA5e,EAAO8L,iBAEToT,EAAmBS,EACnBR,EAAiBQ,EACjBb,GAAuB,EAE1B,OAhFC,GADAhU,GAAcuU,EAAY/S,OAAOiT,GAC7BrO,GAAe2C,sBAAsB/I,GAAa,CACpD,MAAM2Q,EACJvK,GAAe0D,oCAAoC9J,GACrD,GAAI2Q,IAAcxL,EAChBjQ,EAASsf,EAAiBzU,iBAAiBC,GAC3CtW,EAAgBwL,EAAOlR,WACvBgwB,GAAuB,EACvBC,GAAa,MACR,IAAItD,IAAcxL,EAKlB,CACL,GAAIiO,EACF,MAAM,IAAIxC,GACR,6EAIF,YADA2C,EAAmB1C,GAGtB,CAbC3b,EACE4K,EAA8BC,iBAAiBC,GACjDtW,EAAgBwL,EAAOgL,cAAcO,MACrCwT,GAAa,CAUd,CACD7gB,EAA8BvV,KAAKF,IACjCyV,EACA8B,EAAOpW,0BAGT,MAAMg2B,EACJvsB,EAAYmE,kBAAkB,GAAGvD,0BAC/BiK,GAEE2hB,EACJrB,EAAuBoB,EAAa1rB,cAAgBM,EAElD6pB,IAAqB1C,IACvB+C,EAAsB,IAAI1b,YAAY6c,GACtCxsB,EAAY0M,oBACV,CACEN,aAAcpM,EAAYysB,oBAC1BpgB,aAAcrM,EAAY0sB,oBAC1BpgB,gBAxFO,EAyFPC,aAzFO,EA0FPpL,cAAeA,EACf1F,WAAYA,EACZuC,iBAAkB,EAClBwO,YAAa,IAAI5O,EAAM+F,SAEzB0nB,IAGFO,EAAqC,IAAIr0B,EACvCsT,GAIJghB,EAAmBlf,EAAO8L,gBAC1BqT,EAAiBnf,EAAO8L,gBACxB+S,GAAe,CAChB,CAuBH,GAAIA,GAAgBC,EAAsB,CACxC,GAAIp3B,EAAOS,OAAS,EAAG,CACrBs2B,EAAqBf,GACnBh2B,EACA+2B,GAKF,GADEW,EAAqBF,EAGnBZ,GACFkB,EACA,CACA,MAAMQ,EAAoBZ,EAAqBD,EACzCc,EAAkBt3B,KAAKoJ,MAC3BiuB,EAAoBhgB,EAAOjK,eAEvBmqB,EAAkBD,EAAkBjgB,EAAOjK,cAC3CoqB,EAAmBH,EAAoBE,EACvCtd,EAAgB9T,EAAamxB,EAC7BG,EACJjB,EAAiBz3B,EAAO,GAAG+3B,WACvBY,EAAc,IAAIrqB,SACtByoB,EACA2B,EACAF,GAGIN,EACJvsB,EAAYmE,kBAAkB,GAAGvD,0BAC/BiK,GAEEtD,EACJ9L,EAAa8wB,EAAa1rB,cAAgBsqB,EA0F5C,GAxFIH,IAAqB1C,GACnBoD,EACFnU,EAA8B2E,sCAC5BvP,EAAO+K,aACP/K,EAAOgL,cACP,EACAiV,EAAkB,EAClBnxB,EACAuxB,EACA,EACA3B,EACA9jB,GAGF0kB,EAAiB/P,sCACfvP,EACA,EACAigB,EAAkB,EAClBI,EACA,EACA3B,EACA9jB,EACAsD,GAIA6gB,EACFnU,EAA8BmF,qCAC5B/P,EAAO+K,aACP/K,EAAOgL,cACP,EACAiV,EAAkB,EAClBnxB,EACAuxB,EACA,EACApB,GAGFK,EAAiBvP,qCACf/P,EACA,EACAigB,EAAkB,EAClBI,EACA,EACApB,EACA/gB,GAKNpP,EAAa8T,EAETyb,IAAqB1C,KAClBgD,IACHtrB,EAAYoO,2BACV,CACEjN,cAAeA,EACf1F,WAAYA,EACZoG,WAAY,EACZ0L,YAAa,EACbC,gBAAiB,EACjBtK,sBAAuB,EACvB8K,iBAAkB,EAClBpM,gBAAiB,EACjB+L,2BAA4B,EAC5BpX,yBAA0BsU,GAE5B,EACAwgB,EACArrB,EAAY8L,iBAEdwf,EAAwB,IAAItrB,EAC1BqrB,GACA,IAGJC,EAAsBjc,mBAAmB,EAAG5T,GACxCqvB,GACFA,EACEQ,EACAa,IAKNN,GAAoBZ,EACpBa,GAAkBe,EAEO,IAArBC,EACFz4B,EAAS,OACJ,CACL,IAAI44B,EAAa,GACbC,EAAW,EACf,IAAK,IAAIrxB,EAAIxH,EAAOS,OAAS,EAAG+G,GAAK,EAAGA,IAAK,CAC3C,MAAMtH,EAAQF,EAAOwH,GAGrB,GAFAqxB,GAAY34B,EAAMg2B,UAClB0C,EAAWE,QAAQ54B,GACf24B,GAAYJ,EAAkB,KACnC,CACDz4B,EAAS44B,CACV,CACF,CACF,CAEGd,IACEnB,IAAqB1C,GACvBqD,EAAY76B,QAAQw6B,GAEpBK,EAAY76B,QAAQ86B,GAGzB,CACF,CAEG74B,GACFA,EAAW6B,EAASC,EAAc0zB,GACnC,IAIiD,GAAOh3B,MAAK,KAC1DwB,GAAYA,EAAW,EAAG,KAAMw1B,IAC7BoD,EAAY/6B,QAAQW,MAAMyyB,IAE/B,GADIjxB,GAAYA,EAAW,IAAK,OAAQw1B,IACpCyC,IAAqB1C,GAA2C,CAClE,MAAM8E,EAAa/4B,EAAO6f,KAAK3f,GAAUA,EAAMjB,OAC/C,OAAO,IAAIoB,KAAK04B,GAAYz4B,cAAcpD,MAAM87B,GACvC3C,GAAU4C,iBACfD,EACAnlB,EACAlK,EACAysB,EACA5f,EACAof,EACAzd,EACAmG,EACA9Q,IAGd,CAAe,OAAImpB,IAAqB1C,GACvBtE,EAEA/tB,GAAe,IACbu0B,GACLxG,EACAyG,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,IAGL,MAGN,CAED,uBAAOyrB,CACLD,EACAnlB,EACAlK,EACAysB,EACA5f,EAA8B,EAC9Bof,EACAzd,EACAmG,EACA9Q,GAEA,OAAO5L,GAAe,IACbkyB,GAAUxL,8BACf0Q,EACAxiB,KAEDtZ,MAAMwhB,GACAyX,GACLzX,EACA0X,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,IAGL,ECxbI,MAAM0rB,GACXl9B,oBAAsB,GACtBA,uBAAyB,GACzBA,sBAAwB,GACxBA,yBAA2B,EAC3BA,sBAAwB,EAExB,4CAAO6rB,CACL4H,EACAC,EACAyJ,EACAC,EACAvJ,EACAC,GAEA,MAAMuJ,EAAoB1tB,EAAYmE,kBAAkB,GAAGlE,eACrD0tB,EAAmB3tB,EAAYmE,kBAAkB,GAAGjE,cACpD0tB,EACJ5tB,EAAYmE,kBAAkB,GAAGhE,iBAC7Bmc,EACJtc,EAAYmE,kBAAkB,GAAGvD,0BAA0B,GACxDC,cAEL,IAAK,IAAIhF,EAAIioB,EAAWjoB,GAAKkoB,EAASloB,IAAK,CACzC,MAAMgyB,EAAShyB,EAAI0xB,GAAYO,aAAeL,EACxCM,EAAW,IAAI37B,aAAao7B,EAAYK,EAAQ,GAChDG,EAAU,IAAI57B,aAClBo7B,EACAK,EAASN,GAAYU,gBACrB,GAEIC,EAAU,IAAIpuB,WAClB0tB,EACAK,EAASN,GAAYU,gBAAkBV,GAAYY,eACnD,GAEIC,EAAa,IAAItuB,WACrB0tB,EACAK,EACEN,GAAYU,gBACZV,GAAYY,eACZZ,GAAYc,kBACd,GAGIC,EAAO,IAAI1wB,EAAMkG,YACpBsqB,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KAE1BE,EAAKznB,YAEL,MAAM4V,EAAU5gB,EAAIygB,EAAmB6H,EACjC/hB,EAAY,IAAIhQ,aAAa8xB,EAAUzH,EAAS,GAChD1Y,EAAW,IAAI3R,aACnB8xB,EACAzH,EAAUiR,EACV,GAEI1pB,EAAc,IAAI5R,aACtB8xB,EACAzH,EAAUiR,EAAoBC,EAC9B,GAEIhpB,EAAW,IAAI7E,WACnBokB,EACAzH,EAAUiR,EAAoBC,EAAmBC,EACjD,GAGFxrB,EAAU,GAAK2rB,EAAS,GACxB3rB,EAAU,GAAK2rB,EAAS,GACxB3rB,EAAU,GAAK2rB,EAAS,GAExBhqB,EAAS,GAAKiqB,EAAQ,GACtBjqB,EAAS,GAAKiqB,EAAQ,GACtBjqB,EAAS,GAAKiqB,EAAQ,GAEtBhqB,EAAY,GAAKsqB,EAAK1oB,EACtB5B,EAAY,GAAKsqB,EAAKjyB,EACtB2H,EAAY,GAAKsqB,EAAKhyB,EACtB0H,EAAY,GAAKsqB,EAAK/xB,EAEtBoI,EAAS,GAAKupB,EAAQ,GACtBvpB,EAAS,GAAKupB,EAAQ,GACtBvpB,EAAS,GAAKupB,EAAQ,GACtBvpB,EAAS,GAAKupB,EAAQ,EACvB,CACF,CAED,2CAAOxR,CACLoH,EACAC,EACAyJ,EACAC,EACA1a,GAEA,IAAK,IAAIlX,EAAIioB,EAAWjoB,GAAKkoB,EAASloB,IAAK,CACzC,MAAMgyB,EAAShyB,EAAI0xB,GAAYO,aAAeL,EACxCM,EAAW,IAAI37B,aAAao7B,EAAYK,EAAQ,GAChDG,EAAU,IAAI57B,aAClBo7B,EACAK,EAASN,GAAYU,gBACrB,GAEIC,EAAU,IAAIpuB,WAClB0tB,EACAK,EAASN,GAAYU,gBAAkBV,GAAYY,eACnD,GAEIC,EAAa,IAAItuB,WACrB0tB,EACAK,EACEN,GAAYU,gBACZV,GAAYY,eACZZ,GAAYc,kBACd,GAGIC,EAAO,IAAI1wB,EAAMkG,YACpBsqB,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KAE1BE,EAAKznB,YAELkM,EAAW3W,sBACT2xB,EAAS,GACTA,EAAS,GACTA,EAAS,GACTC,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACRM,EAAK1oB,EACL0oB,EAAKjyB,EACLiyB,EAAKhyB,EACLgyB,EAAK/xB,EACL2xB,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GAEX,CACF,CAED,iDAAOK,CAA2CC,GAOhD,MAAM/yB,EAAa+yB,EAASvZ,WAAasY,GAAYO,aAE/C/a,EAAa,IAAIxb,EAEvB,IAAK,IAAIsE,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,MAAMgyB,EAAShyB,EAAI0xB,GAAYO,aACzBC,EAAW,IAAI37B,aAAao8B,EAAUX,EAAQ,GAC9CG,EAAU,IAAI57B,aAClBo8B,EACAX,EAASN,GAAYU,gBACrB,GAEIC,EAAU,IAAIpuB,WAClB0uB,EACAX,EAASN,GAAYU,gBAAkBV,GAAYY,eACnD,GAEIC,EAAa,IAAItuB,WACrB0uB,EACAX,EACEN,GAAYU,gBACZV,GAAYY,eACZZ,GAAYkB,eACd,GAGIH,EAAO,IAAI1wB,EAAMkG,YACpBsqB,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KACvBA,EAAW,GAAK,KAAO,KAE1BE,EAAKznB,YAELkM,EAAW3W,sBACT2xB,EAAS,GACTA,EAAS,GACTA,EAAS,GACTC,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACRM,EAAK1oB,EACL0oB,EAAKjyB,EACLiyB,EAAKhyB,EACLgyB,EAAK/xB,EACL2xB,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GACRA,EAAQ,GAEX,CAED,OAAOnb,CACR,ECpMH,SAASyX,GACPxG,EACAyG,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,GAEA,GAAI4oB,EAAmB,CASrB,OAR6BX,GAAqBM,qBAChDliB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,GAE0BqoB,mCAAmClG,EACnE,CACI,OAAOhkB,EAAYyS,oCACjB,CAACuR,GACD9b,EACA,EACA,IAAItK,EAAM+F,QAGhB,CAEO,MAAM+qB,GACX,kBAAO/D,CACLC,EACA73B,EACA83B,EACAC,EACA5iB,EACAlK,EACAysB,GAAoB,EACpBR,EACAzd,EACAmG,EACA9Q,EACA5M,EAAoB81B,GAEpB,IAAIC,EAAmBH,EACrBvC,GACAA,GACEmC,IACFO,EAAmB1C,IAGrB,MAAM6C,EACJnrB,EAAY8L,gBAAkB9L,EAAY+M,uBACtCke,EAA6BztB,EAAU0tB,2BAG7C,IAAIE,EACAC,EACAC,EAIAM,EAHAzqB,EAAgB,EAChB1F,EAAa,EAIjB,MAAMkwB,EAAcn1B,IAEpB,IAAIq1B,EAAmB,EACnB8C,EAAiB,EACjBt6B,EAAS,GAgJb,OADItB,GAAYA,EAAW,EAAG,KAAMw1B,IAC7BtzB,EAAkB21B,GA9ID,CAACh2B,EAASg6B,EAAYr6B,EAAOL,KACnD,MAAMi4B,EAAev3B,GAAW,IAMhC,GAJIL,GACFF,EAAOW,KAAKT,GAGVy2B,IAAqB1C,GAOzB,GAAKp0B,EAAL,CAWA,IAAKk3B,EAAoB,CACvBjqB,EAAgBjN,EAAWq5B,GAAYO,aACvC1C,EAAqB,IAAIzb,YAAYzb,GACrC,MAAMwO,EACJ1C,EAAYmE,kBAAkB,GAAGvD,0BAA0B,GACxDC,cAIDmqB,IAAqB1C,IACvB+C,EAAsB,IAAI1b,YAH1Bwb,EAAuBzoB,EAAgBvB,GAIvCnB,EAAY0M,oBACV,CACEN,aAAcpM,EAAYysB,oBAC1BpgB,aAAcrM,EAAY0sB,oBAC1BpgB,gBAxDW,EAyDXC,aAzDW,EA0DXpL,cAAeA,EACf1F,WAAYA,EACZuC,iBAAkB,EAClBwO,YAAa,IAAI5O,EAAM+F,SAEzB0nB,IAGFO,EAAqC,IAAIr0B,EAAuB,EAEnE,CAED,GAAIhD,EAAO,CACT,IAAIuL,WACFsrB,EACAuD,EACAp6B,EAAM0gB,YACN7Q,IAAI,IAAItE,WAAWvL,IACrBo6B,GAAkBp6B,EAAM0gB,WAExB,MAAM4Z,EAA8BF,EAAiB9C,EACrD,GACEgD,EAA8B5D,GAC9BkB,EACA,CACA,MAGMS,GAHgBT,EACpB0C,EACA5D,GACsCsC,GAAYO,aAC9Cve,EAAgB9T,EAAamxB,EAE/B5B,IAAqB1C,GACvBiF,GAAYrR,sCACVzgB,EACA8T,EAAgB,EAChB6b,EACA,EACAC,EACAF,GAGFoC,GAAY7Q,qCACVjhB,EACA8T,EAAgB,EAChB6b,EACA,EACAQ,GAIJnwB,EAAa8T,EAETyb,IAAqB1C,KAClBgD,IACHtrB,EAAYoO,2BACV,CACEjN,cAAeA,EACf1F,WAAYA,EACZoG,WAAY,EACZ0L,YAAa,EACbC,gBAAiB,EACjBtK,sBAAuB,EACvB8K,iBAAkB,EAClBpM,gBAAiB,EACjB+L,2BAA4B,GAE9B,EACA0d,EACArrB,EAAY8L,iBAEdwf,EAAwB,IAAItrB,EAC1BqrB,GACA,IAGJC,EAAsBjc,mBAAmB,EAAG5T,GACxCqvB,GACFA,EACEQ,EACAa,IAKNN,GAAoBZ,CACrB,CACF,CAEGkB,IACEnB,IAAqB1C,GACvBqD,EAAY76B,QAAQw6B,GAEpBK,EAAY76B,QAAQ86B,IAIpB74B,GAAYA,EAAW6B,EAASg6B,EAAYrG,GAnH/C,KATD,CACE,GAAIsC,EACF,MAAM,IAAIxC,GACR,uEAGF2C,EAAmB1C,EAGtB,MAfK6D,GACFR,EAAY76B,QAAQuD,EAiIiD,IAIvB,GAAO9C,MAAK,KAC1DwB,GAAYA,EAAW,EAAG,KAAMw1B,IAC7BoD,EAAY/6B,QAAQW,MAAMyyB,IAC3BjxB,GAAYA,EAAW,IAAK,OAAQw1B,IACpCyC,IAAqB1C,GAChB,IAAI5zB,KAAKL,GAAQM,cAAcpD,MAAMyyB,GACnC0K,GAAYpB,iBACjBtJ,EACA9b,EACAlK,EACAysB,EACAR,EACAzd,EACAmG,EACA9Q,KAGKmpB,IAAqB1C,GACvBtE,EAEA/tB,GAAe,IACbu0B,GACLxG,EACAyG,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,UAMX,CAED,uBAAOyrB,CACLwB,EACA5mB,EACAlK,EACAysB,EACAR,EACAzd,EACAmG,EACA9Q,GAEA,OAAO5L,GAAe,IAGbu0B,GADL+C,GAAYgB,2CAA2CO,GAGvDrE,EACAviB,EACAlK,EACAisB,EACAzd,EACAmG,EACA9Q,IAGL,ECxRI,MAAMktB,GACX,mBAAOC,CAAaz8B,GAClB,MAAM08B,EAAkBjvB,EAAYysB,oBAC9ByC,EAAkBlvB,EAAY0sB,oBAC9B/f,EAAS3M,EAAY4L,YAAYrZ,GACvC,GACGoa,EAAOP,eAAiB6iB,GACvBtiB,EAAON,cAAgB6iB,GACzBviB,EAAOP,aAAe6iB,EAEtB,OAAO,EAEP,MAAM,IAAIj9B,MACR,kCAAkC2a,EAAOP,gBAAgBO,EAAON,oCACxC4iB,KAAmBC,IAGhD,CAED,kBAAOvE,CACLC,EACAuE,EACAtE,EACAuE,EACAn6B,EAAoB81B,GAEpB,IAAIsE,EACA/D,EAEAgE,EACA3iB,EAIA4iB,EAHA/D,GAAe,EACfgE,GAAgB,EAGhBtiB,EAAiB,GACjBuiB,GAAuB,EACvBC,GAAwB,EAExBf,EAAiB,EACjBgB,EAA8B,EAC9BC,EAAuB,EAEvBC,GAAmB,EACnB1D,GAAe,EACf2D,GAAoB,EAEpBz7B,EAAS,GAEb,MAAM07B,EAAoBv5B,IA0B1B,IAAIw5B,EAAkC,EACtC,MAUMC,EAA6B,KACjC,MAAMC,EAAc,KAClBR,GAAwB,EACc,IAAIh7B,KAAKL,GAAQM,cACzBpD,MAAMuP,IAClC4uB,GAAwB,EACxBD,GAAuB,EACvBF,EAAuB,IAAI5f,YACzBhD,EAAOL,gBAAkBtM,EAAY+M,wBAEvC,IAAIjN,WAAWyvB,GAAsBnrB,IACnC,IAAItE,WACFgB,EACAd,EAAY8L,gBACZa,EAAOL,gBAAkBtM,EAAY+M,yBAGzCG,EAAiBlN,EAAY4M,oBAC3BD,EACA4iB,EACA,GACA,GAEF,IAAIY,EAAiC,EACrC,IAAK,IAAIt0B,EAAI,EAAGA,EAAI8Q,EAAOL,gBAAiBzQ,IAC1Cs0B,GACEjjB,EAAerR,GAAGmS,iBAEtB,MAAMoiB,EACJpwB,EAAY8L,gBACZa,EAAOL,gBAAkBtM,EAAY+M,uBACrCojB,EACF,IAAKd,EAAkB,CACrBA,EAAmB,IAAI1f,YAAYygB,GACnC,IAAIvjB,EAAS,EACb,IAAK,IAAIhR,EAAI,EAAGA,EAAIxH,EAAOS,OAAQ+G,IAAK,CACtC,MAAMtH,EAAQF,EAAOwH,GACrB,IAAIiE,WAAWuvB,EAAkBxiB,EAAQtY,EAAM0gB,YAAY7Q,IACzD,IAAItE,WAAWvL,IAEjBsY,GAAUtY,EAAM0gB,UACjB,CACF,CAED2a,EACE5vB,EAAY8L,gBACZ9L,EAAY+M,uBAAyBJ,EAAOL,gBAC9C,IACE,IAAIzQ,EAAI,EACRA,GAAKqR,EAAepY,QAAU+G,EAAI8Q,EAAOL,gBACzCzQ,IAEA+zB,GAAwB1iB,EAAerR,GAAGmS,iBA7DR,IAApCgiB,IACFA,IACA55B,OAAOC,YAAW,KAChB25B,IACAK,GAAsB,GACrB,GA2D0B,GAC3B,GAIDX,IACAD,GACDjE,GACAmD,GACE3uB,EAAY8L,gBACV9L,EAAY+M,uBAAyBJ,EAAOL,iBAEhD4jB,GACD,EAGGG,EAAuB,KAC3B,GAAIP,EAAmB,OACvBA,GAAoB,EAgGpB15B,OAAOC,YA/FkB,KAEvB,GADAy5B,GAAoB,EAChBL,EAAsB,CACxB,GAAItD,EAAc,OAMlB,GAJA0D,EAAmBlB,GAAkBiB,EAGnCjB,EAAiBgB,EAGfnyB,EAAU0tB,4BACZ2E,EACA,CACAF,GAA+BnyB,EAAU0tB,2BACzCiB,EAAewD,GAA+BC,EAEzCtE,IACHA,EAAwB,IAAItrB,EAAYqvB,GAAkB,IAG5D,MAAMiB,EACJtwB,EAAY8L,gBACZ9L,EAAY+M,uBAAyBJ,EAAOL,gBAC9C,IAAIgB,EAAc,EACdijB,EAAkB,EAClBC,EAAmB,EACvB,IAAK,IAAI30B,EAAI,EAAGA,EAAI8Q,EAAOL,gBAAiBzQ,IAAK,CAC/C,MAAMoS,EAAgBf,EAAerR,GAM/B40B,EACJH,GALAhjB,EAC2C,EAA3CW,EAAcN,2BACdM,EAAcP,uBACZO,EAAcV,aAGlB,KACEoiB,GACAc,GA8BA,MA7BA,CACAF,IACA,MAAMG,EACJf,EACAc,EAOI/tB,EALJ1C,EAAYmE,kBAAkBwI,EAAO3O,kBAEtB4C,0BACbqN,EAAc1X,0BAEWsK,cAC7B,IAAI8vB,EAAyBr7B,KAAKoJ,MAChCgyB,EAAkChuB,GAEpCiuB,EAAyBr7B,KAAKF,IAC5Bu7B,EACA1iB,EAAc9M,eAEhBqvB,GAAoBG,EACpBrF,EAAsBjc,mBACpBkhB,EACAC,GAEFlF,EAAsB9b,0BACpB3T,EACA80B,EAElB,CAGcrjB,GAAeW,EAAcD,gBAC9B,CAEDohB,EAAe9D,EAAuBa,GAEtC,MAAMyE,EACHjB,EAA8BC,EAAwB,IACnD/6B,EAAe+7B,EAAgB77B,QAAQ,GAAK,IAE9Co6B,GACFA,EACEyB,EACA/7B,EACA0zB,IAIA4D,EACF4D,EAAkBj/B,QAAQw6B,GAE1B+E,GAEH,CACF,IAID7yB,EAAUqzB,oCACX,EA0BH,OAAO57B,EACL21B,GAxBsB,CAACh2B,EAASg6B,EAAYr6B,KACxCA,IACFF,EAAOW,KAAKT,GACR86B,GACF,IAAIvvB,WACFuvB,EACAV,EACAp6B,EAAM0gB,YACN7Q,IAAI,IAAItE,WAAWvL,IAEvBo6B,GAAkBp6B,EAAM0gB,YAEtB4V,IA5NDW,IACAgE,GACDb,GAAkB3uB,EAAY8L,kBAE9B0jB,GAAgB,EACc,IAAI96B,KAAKL,GAAQM,cACzBpD,MAAMuP,IAC1BwuB,EAAe,IAAI3f,YAAY3P,EAAY8L,iBAC3C,IAAIhM,WAAWwvB,GAAclrB,IAC3B,IAAItE,WAAWgB,EAAY,EAAGd,EAAY8L,kBAE5CijB,GAAaC,aAAaM,GAC1BE,GAAgB,EAChBhE,GAAe,EACf7e,EAAS3M,EAAY4L,YAAY0jB,GACjCl5B,OAAOC,YAAW,KAChB45B,GAA4B,GAC3B,EAAE,KA6MPA,IACAI,KAEIlB,GACFA,EAAmBv6B,EAASg6B,EAAYrG,GAE3C,IAMAsC,GACDt5B,MAAMu/B,IACF3B,GACFA,EAAmB,EAAG,KAAM5G,IAK9B,OAHoBsC,EAClBkF,EAAkBn/B,QAClBm+B,GAAazB,iBAAiBwD,IACbv/B,MAAMw/B,IACnB5B,GACFA,EAAmB,IAAK,OAAQ5G,IAE3BwI,IACP,GAEL,CAED,uBAAOzD,CAAiB0D,GACtB,OAAO/6B,GAAe,KACpB84B,GAAaC,aAAagC,GACnB,IAAIhxB,EAAYgxB,KAE1B,CAED3gC,oBAAsB,WACpB,IAAI4gC,EAEJ,OAAO,SAASF,EAAanG,GAC3B,MAAMsG,EAAO,IAAIx8B,KAAK,CAACq8B,EAAYjwB,YAAa,CAC9CyX,KAAM,6BAGH0Y,IACHA,EAAeE,SAASC,cAAc,KACtCD,SAASt9B,KAAKw9B,YAAYJ,IAE5BA,EAAaK,SAAW1G,EACxBqG,EAAaM,KAAOC,IAAIC,gBAAgBP,GACxCD,EAAaS,OACnB,CACG,CAhBqB,GChUZ,MAACC,GAAc,CACzBC,MAAO,EACPC,OAAQ,EACRC,IAAK,EACLC,KAAM,GCFKC,GAAuBl/B,GAC9BA,EAAKm/B,SAAS,QAAgBN,GAAYG,IACrCh/B,EAAKm/B,SAAS,UAAkBN,GAAYC,MAC5C9+B,EAAKm/B,SAAS,WAAmBN,GAAYE,OAC7C/+B,EAAKm/B,SAAS,SAAiBN,GAAYI,KAC7C,mECPG,MAACG,GAAW,CACtBC,KAAM,EACNngC,MAAO,EACPogC,QAAS,EACTC,KAAM,EACNC,MAAO,GC6BHC,GAAe,CAAEha,KAAM,UACvBia,GAAc,CAAEja,KAAM,SACtBka,GAAY,CAAEla,KAAM,OACpBma,GAAO,IAAIC,EAAAA,IACXC,GAAS,IAAIC,EAAAA,MACbC,GAAax9B,KAAKy9B,IAAI,GAAKC,EAASA,UAACC,SAE3C,MAAMC,WAAsBC,EAAAA,gBAC1B,WAAA7iC,CAAY8iC,EAAQC,GAClBnhC,QAEAvB,KAAKyiC,OAASA,EACdziC,KAAK0iC,WAAaA,EAClB1iC,KAAK0iC,WAAWC,MAAMC,YAAc,OAGpC5iC,KAAK6iC,SAAU,EAGf7iC,KAAK8iC,OAAS,IAAI9vB,EAAAA,QAGlBhT,KAAK+iC,YAAc,EACnB/iC,KAAKgjC,YAAcC,IAGnBjjC,KAAKkjC,QAAU,EACfljC,KAAKmjC,QAAUF,IAIfjjC,KAAKojC,cAAgB,EACrBpjC,KAAKqjC,cAAgB1+B,KAAK2+B,GAI1BtjC,KAAKujC,iBAAmBN,IACxBjjC,KAAKwjC,gBAAkBP,IAIvBjjC,KAAKyjC,eAAgB,EACrBzjC,KAAK0jC,cAAgB,IAIrB1jC,KAAK2jC,YAAa,EAClB3jC,KAAK4jC,UAAY,EAGjB5jC,KAAK6jC,cAAe,EACpB7jC,KAAK8jC,YAAc,EAGnB9jC,KAAK+jC,WAAY,EACjB/jC,KAAKgkC,SAAW,EAChBhkC,KAAKikC,oBAAqB,EAC1BjkC,KAAKkkC,YAAc,EACnBlkC,KAAKmkC,cAAe,EAIpBnkC,KAAKokC,YAAa,EAClBpkC,KAAKqkC,gBAAkB,EAGvBrkC,KAAKskC,KAAO,CAAEC,KAAM,OAAQC,GAAI,OAAQC,MAAO,OAAQC,OAAQ,QAG/D1kC,KAAK2kC,aAAe,CAClBJ,KAAMK,EAAKA,MAACC,OACZC,OAAQF,EAAKA,MAACG,MACdN,MAAOG,EAAKA,MAACI,KAIfhlC,KAAKilC,QAAU,CAAEC,IAAKC,EAAAA,MAAMN,OAAQO,IAAKD,QAAME,WAG/CrlC,KAAKslC,QAAUtlC,KAAK8iC,OAAOyC,QAC3BvlC,KAAKwlC,UAAYxlC,KAAKyiC,OAAOlY,SAASgb,QACtCvlC,KAAKylC,MAAQzlC,KAAKyiC,OAAOiD,KAGzB1lC,KAAK2lC,qBAAuB,KAM5B3lC,KAAK4lC,cAAgB,WACnB,OAAOC,EAAUC,GACvB,EAEI9lC,KAAK+lC,kBAAoB,WACvB,OAAOF,EAAUG,KACvB,EAEIhmC,KAAKimC,YAAc,WACjB,OAAOjmC,KAAKyiC,OAAOlY,SAAS2b,WAAWlmC,KAAK8iC,OAClD,EAEI9iC,KAAKmmC,kBAAoB,SAASzD,GAChCA,EAAW0D,iBAAiB,UAAWC,GACvCrmC,KAAK2lC,qBAAuBjD,CAClC,EAEI1iC,KAAKsmC,sBAAwB,WAC3BtmC,KAAK2lC,qBAAqBY,oBAAoB,UAAWF,GACzDrmC,KAAK2lC,qBAAuB,IAClC,EAEI3lC,KAAKwmC,UAAY,WACfC,EAAMnB,QAAQ1xB,KAAK6yB,EAAM3D,QACzB2D,EAAMjB,UAAU5xB,KAAK6yB,EAAMhE,OAAOlY,UAClCkc,EAAMhB,MAAQgB,EAAMhE,OAAOiD,IACjC,EAEI1lC,KAAK0mC,MAAQ,WACXD,EAAM3D,OAAOlvB,KAAK6yB,EAAMnB,SACxBmB,EAAMhE,OAAOlY,SAAS3W,KAAK6yB,EAAMjB,WACjCiB,EAAMhE,OAAOiD,KAAOe,EAAMhB,MAC1BzlC,KAAK2mC,sBACL3mC,KAAK4mC,iBAELH,EAAMhE,OAAOoE,yBACbJ,EAAMK,cAAclF,IAEpB6E,EAAMM,SAENC,EAAQC,EAAMC,IACpB,EAEIlnC,KAAK2mC,oBAAsB,WACzBQ,EAAenB,MAAQ,EACvBmB,EAAerB,IAAM,CAC3B,EAEI9lC,KAAK4mC,eAAiB,WACpBQ,EAAU3zB,IAAI,EAAG,EAAG,EAC1B,EAGIzT,KAAK+mC,OAAS,WACZ,MAAM7qB,EAAS,IAAIlJ,EAAAA,QAGb2qB,GAAO,IAAIxqB,EAAUA,YAAGk0B,mBAC5B5E,EAAO6E,GACP,IAAIt0B,UAAQ,EAAG,EAAG,IAEdu0B,EAAc5J,EAAK4H,QAAQiC,SAE3BC,EAAe,IAAIz0B,EAAAA,QACnB00B,EAAiB,IAAIv0B,EAAAA,WACrBw0B,EAAqB,IAAI30B,EAAAA,QAEzB40B,EAAQ,EAAIjjC,KAAK2+B,GAEvB,OAAO,WACL3F,EAAK0J,mBAAmB5E,EAAO6E,GAAI,IAAIt0B,EAAOA,QAAC,EAAG,EAAG,IACrDu0B,EAAY3zB,KAAK+pB,GAAM6J,SAEvB,MAAMjd,EAAWkc,EAAMhE,OAAOlY,SAE9BrO,EAAOtI,KAAK2W,GAAU/I,IAAIilB,EAAM3D,QAGhC5mB,EAAO2rB,gBAAgBlK,GAGvBkI,EAAUiC,eAAe5rB,GAErBuqB,EAAMrC,YAAc4C,IAAUC,EAAMC,MACtCa,EAyPK,EAAIpjC,KAAK2+B,GAAM,GAAK,GAAMmD,EAAMpC,iBAtPnCoC,EAAMhD,eACRoC,EAAUG,OAASmB,EAAenB,MAAQS,EAAM/C,cAChDmC,EAAUC,KAAOqB,EAAerB,IAAMW,EAAM/C,gBAE5CmC,EAAUG,OAASmB,EAAenB,MAClCH,EAAUC,KAAOqB,EAAerB,KAKlC,IAAIrhC,EAAMgiC,EAAMlD,gBACZ7+B,EAAM+hC,EAAMjD,gBAEZwE,SAASvjC,IAAQujC,SAAStjC,KACxBD,GAAOE,KAAK2+B,GAAI7+B,GAAOmjC,EAClBnjC,EAAME,KAAK2+B,KAAI7+B,GAAOmjC,GAE3BljC,GAAOC,KAAK2+B,GAAI5+B,GAAOkjC,EAClBljC,EAAMC,KAAK2+B,KAAI5+B,GAAOkjC,GAG7B/B,EAAUG,MADRvhC,GAAOC,EACSC,KAAKD,IAAID,EAAKE,KAAKF,IAAIC,EAAKmhC,EAAUG,QAGtDH,EAAUG,OAASvhC,EAAMC,GAAO,EAC9BC,KAAKD,IAAID,EAAKohC,EAAUG,OACxBrhC,KAAKF,IAAIC,EAAKmhC,EAAUG,QAKhCH,EAAUC,IAAMnhC,KAAKD,IACnB+hC,EAAMrD,cACNz+B,KAAKF,IAAIgiC,EAAMpD,cAAewC,EAAUC,MAG1CD,EAAUoC,YAIkB,IAAxBxB,EAAMhD,cACRgD,EAAM3D,OAAOoF,gBAAgBd,EAAWX,EAAM/C,eAE9C+C,EAAM3D,OAAOqF,IAAIf,GAMhBX,EAAMtC,cAAgBiE,GACvB3B,EAAMhE,OAAO4F,qBAEbxC,EAAUyC,OAAS7P,EAAcoN,EAAUyC,QAE3CzC,EAAUyC,OAAS7P,EAAcoN,EAAUyC,OAASr1B,GAGtDiJ,EAAOqsB,iBAAiB1C,GAGxB3pB,EAAO2rB,gBAAgBN,GAEvBhd,EAAS3W,KAAK6yB,EAAM3D,QAAQqF,IAAIjsB,GAEhCuqB,EAAMhE,OAAO+F,OAAO/B,EAAM3D,SAEE,IAAxB2D,EAAMhD,eACR0D,EAAenB,OAAS,EAAIS,EAAM/C,cAClCyD,EAAerB,KAAO,EAAIW,EAAM/C,cAEhC0D,EAAUqB,eAAe,EAAIhC,EAAM/C,iBAEnCyD,EAAe1zB,IAAI,EAAG,EAAG,GAEzB2zB,EAAU3zB,IAAI,EAAG,EAAG,IAItB,IAAIi1B,GAAc,EAClB,GAAIjC,EAAMtC,cAAgBiE,EAAmB,CAC3C,IAAIO,EAAY,KAChB,GAAIlC,EAAMhE,OAAOmG,oBAAqB,CAGpC,MAAMC,EAAa3sB,EAAO/X,SAC1BwkC,EAAYlQ,EAAcoQ,EAAa51B,GAEvC,MAAM61B,EAAcD,EAAaF,EACjClC,EAAMhE,OAAOlY,SAAS2d,gBAAgBa,EAAgBD,GACtDrC,EAAMhE,OAAOuG,mBACzB,MAAiB,GAAIvC,EAAMhE,OAAO4F,qBAAsB,CAE5C,MAAMY,EAAc,IAAIj2B,EAAAA,QAAQk2B,EAAMx9B,EAAGw9B,EAAMv9B,EAAG,GAClDs9B,EAAYE,UAAU1C,EAAMhE,QAE5BgE,EAAMhE,OAAOiD,KAAO/gC,KAAKD,IACvB+hC,EAAMvD,QACNv+B,KAAKF,IAAIgiC,EAAMtD,QAASsD,EAAMhE,OAAOiD,KAAOzyB,IAE9CwzB,EAAMhE,OAAOoE,yBACb6B,GAAc,EAEd,MAAMU,EAAa,IAAIp2B,EAAAA,QAAQk2B,EAAMx9B,EAAGw9B,EAAMv9B,EAAG,GACjDy9B,EAAWD,UAAU1C,EAAMhE,QAE3BgE,EAAMhE,OAAOlY,SAAS/I,IAAI4nB,GAAYjB,IAAIc,GAC1CxC,EAAMhE,OAAOuG,oBAEbL,EAAYzsB,EAAO/X,QAC/B,MACYklC,QAAQC,KACN,2FAEF7C,EAAMtC,cAAe,EAIL,OAAdwE,IACE3oC,KAAKikC,mBAEPwC,EAAM3D,OACHrvB,IAAI,EAAG,GAAI,GACX81B,mBAAmB9C,EAAMhE,OAAO+G,QAChCf,eAAeE,GACfR,IAAI1B,EAAMhE,OAAOlY,WAGpBwX,GAAK0H,OAAO71B,KAAK6yB,EAAMhE,OAAOlY,UAC9BwX,GAAK2H,UACFj2B,IAAI,EAAG,GAAI,GACX81B,mBAAmB9C,EAAMhE,OAAO+G,QAI/B7kC,KAAKkW,IAAI4rB,EAAMhE,OAAO6E,GAAGqC,IAAI5H,GAAK2H,YAAcvH,GAClDM,EAAO+F,OAAO/B,EAAM3D,SAEpBb,GAAO2H,8BACLnD,EAAMhE,OAAO6E,GACbb,EAAM3D,QAERf,GAAK8H,eAAe5H,GAAQwE,EAAM3D,UAIlD,MAAmB2D,EAAMhE,OAAO4F,uBACtB5B,EAAMhE,OAAOiD,KAAO/gC,KAAKD,IACvB+hC,EAAMvD,QACNv+B,KAAKF,IAAIgiC,EAAMtD,QAASsD,EAAMhE,OAAOiD,KAAOzyB,IAE9CwzB,EAAMhE,OAAOoE,yBACb6B,GAAc,GAUhB,OAPAz1B,EAAQ,EACRm1B,GAAoB,KAOlBM,GACAjB,EAAaqC,kBAAkBrD,EAAMhE,OAAOlY,UAAYwf,GACxD,GAAK,EAAIrC,EAAeiC,IAAIlD,EAAMhE,OAAO1tB,aAAeg1B,GACxDpC,EAAmBmC,kBAAkBrD,EAAM3D,QAAU,KAErD2D,EAAMK,cAAclF,IAEpB6F,EAAa7zB,KAAK6yB,EAAMhE,OAAOlY,UAC/Bmd,EAAe9zB,KAAK6yB,EAAMhE,OAAO1tB,YACjC4yB,EAAmB/zB,KAAK6yB,EAAM3D,QAE9B4F,GAAc,GAEP,EAIjB,CACK,CAtNa,GAwNd1oC,KAAKkF,QAAU,WACbuhC,EAAM/D,WAAW6D,oBAAoB,cAAeyD,GAEpDvD,EAAM/D,WAAW6D,oBAAoB,cAAe0D,GACpDxD,EAAM/D,WAAW6D,oBAAoB,gBAAiB2D,GACtDzD,EAAM/D,WAAW6D,oBAAoB,QAAS4D,GAE9C1D,EAAM/D,WAAW6D,oBAAoB,cAAe6D,GACpD3D,EAAM/D,WAAW6D,oBAAoB,YAAa2D,GAEf,OAA/BzD,EAAMd,uBACRc,EAAMd,qBAAqBY,oBAAoB,UAAWF,GAC1DI,EAAMd,qBAAuB,KAErC,EAMI,MAAMc,EAAQzmC,KAERinC,EAAQ,CACZC,MAAO,EACPrC,OAAQ,EACRE,MAAO,EACPC,IAAK,EACLqF,aAAc,EACdC,UAAW,EACXC,gBAAiB,EACjBC,mBAAoB,GAGtB,IAAIxD,EAAQC,EAAMC,KAElB,MAAM6C,EAAM,KAGNlE,EAAY,IAAI4E,EAAAA,UAChBtD,EAAiB,IAAIsD,EAAAA,UAE3B,IAAIx3B,EAAQ,EACZ,MAAMm0B,EAAY,IAAIp0B,EAAAA,QAEhB03B,EAAc,IAAIC,EAAAA,QAClBC,EAAY,IAAID,EAAAA,QAChBE,EAAc,IAAIF,EAAAA,QAElBG,EAAW,IAAIH,EAAAA,QACfI,EAAS,IAAIJ,EAAAA,QACbK,EAAW,IAAIL,EAAAA,QAEfM,EAAa,IAAIN,EAAAA,QACjBO,EAAW,IAAIP,EAAAA,QACfQ,EAAa,IAAIR,EAAAA,QAEjB5B,EAAiB,IAAI/1B,EAAAA,QACrBk2B,EAAQ,IAAIyB,EAAAA,QAClB,IAAIvC,GAAoB,EAExB,MAAMgD,EAAW,GACXC,EAAmB,CAAA,EAMzB,SAASC,IACP,OAAO3mC,KAAKwxB,IAAI,IAAMsQ,EAAM7C,UAC7B,CAED,SAASmE,EAAWwD,GAClBpE,EAAenB,OAASuF,CACzB,CAED,SAASC,EAASD,GAChBpE,EAAerB,KAAOyF,CACvB,CAED,MAAME,EAAU,WACd,MAAM99B,EAAI,IAAIqF,EAAAA,QAEd,OAAO,SAAiB04B,EAAUC,GAChCh+B,EAAEi+B,oBAAoBD,EAAc,GACpCh+B,EAAE86B,gBAAgBiD,GAElBtE,EAAUe,IAAIx6B,EACtB,CACK,CATe,GAWVk+B,EAAQ,WACZ,MAAMl+B,EAAI,IAAIqF,EAAAA,QAEd,OAAO,SAAe04B,EAAUC,IACG,IAA7BlF,EAAMxC,mBACRt2B,EAAEi+B,oBAAoBD,EAAc,IAEpCh+B,EAAEi+B,oBAAoBD,EAAc,GACpCh+B,EAAEm+B,aAAarF,EAAMhE,OAAO6E,GAAI35B,IAGlCA,EAAE86B,eAAeiD,GAEjBtE,EAAUe,IAAIx6B,EACtB,CACK,CAfa,GAkBRo+B,EAAM,WACV,MAAM7vB,EAAS,IAAIlJ,EAAAA,QAEnB,OAAO,SAAag5B,EAAQC,GAC1B,MAAM3lB,EAAUmgB,EAAM/D,WAEtB,GAAI+D,EAAMhE,OAAOmG,oBAAqB,CAEpC,MAAMre,EAAWkc,EAAMhE,OAAOlY,SAC9BrO,EAAOtI,KAAK2W,GAAU/I,IAAIilB,EAAM3D,QAChC,IAAIoJ,EAAiBhwB,EAAO/X,SAG5B+nC,GAAkBvnC,KAAKwnC,IACnB1F,EAAMhE,OAAO2J,IAAM,EAAKznC,KAAK2+B,GAAM,KAIvCmI,EACG,EAAIO,EAASE,EAAkB5lB,EAAQ+lB,aACxC5F,EAAMhE,OAAO+G,QAEfqC,EACG,EAAII,EAASC,EAAkB5lB,EAAQ+lB,aACxC5F,EAAMhE,OAAO+G,OAEzB,MAAmB/C,EAAMhE,OAAO4F,sBAEtBoD,EACGO,GAAUvF,EAAMhE,OAAO6J,MAAQ7F,EAAMhE,OAAO8J,MAC3C9F,EAAMhE,OAAOiD,KACbpf,EAAQkmB,YACV/F,EAAMhE,OAAO+G,QAEfqC,EACGI,GAAUxF,EAAMhE,OAAOgK,IAAMhG,EAAMhE,OAAOiK,QACzCjG,EAAMhE,OAAOiD,KACbpf,EAAQ+lB,aACV5F,EAAMhE,OAAO+G,UAIfH,QAAQC,KACN,gFAEF7C,EAAM1C,WAAY,EAE5B,CACK,CAhDW,GAkDZ,SAAS4I,EAASC,GAEdnG,EAAMhE,OAAOmG,qBACbnC,EAAMhE,OAAO4F,qBAEbp1B,GAAS25B,GAETvD,QAAQC,KACN,uFAEF7C,EAAM9C,YAAa,EAEtB,CAED,SAASkJ,EAAQD,GAEbnG,EAAMhE,OAAOmG,qBACbnC,EAAMhE,OAAO4F,qBAEbp1B,GAAS25B,GAETvD,QAAQC,KACN,uFAEF7C,EAAM9C,YAAa,EAEtB,CAED,SAASmJ,EAAsBC,GAC7B,IAAKtG,EAAMtC,aACT,OAGFiE,GAAoB,EAEpB,MAAM4E,EAAOvG,EAAM/D,WAAWuK,wBACxBvhC,EAAIqhC,EAAMG,QAAUF,EAAKT,KACzB5gC,EAAIohC,EAAMI,QAAUH,EAAKP,IACzBx3B,EAAI+3B,EAAKI,MACTC,EAAIL,EAAKM,OAEfpE,EAAMx9B,EAAKA,EAAIuJ,EAAK,EAAI,EACxBi0B,EAAMv9B,GAAMA,EAAI0hC,EAAK,EAAI,EAEzBtE,EACGt1B,IAAIy1B,EAAMx9B,EAAGw9B,EAAMv9B,EAAG,GACtBw9B,UAAU1G,GACVjhB,IAAIihB,EAAOlY,UACXrU,WACJ,CAED,SAASuiB,EAAc8U,GACrB,OAAO5oC,KAAKD,IAAI+hC,EAAM1D,YAAap+B,KAAKF,IAAIgiC,EAAMzD,YAAauK,GAChE,CAMD,SAASC,EAAsBT,GAC7BrC,EAAYj3B,IAAIs5B,EAAMG,QAASH,EAAMI,QACtC,CAOD,SAASM,EAAmBV,GAC1BjC,EAASr3B,IAAIs5B,EAAMG,QAASH,EAAMI,QACnC,CA2HD,SAASO,IACP,GAAwB,IAApBtC,EAASjnC,OACXumC,EAAYj3B,IAAI23B,EAAS,GAAGuC,MAAOvC,EAAS,GAAGwC,WAC1C,CACL,MAAMliC,EAAI,IAAO0/B,EAAS,GAAGuC,MAAQvC,EAAS,GAAGuC,OAC3ChiC,EAAI,IAAOy/B,EAAS,GAAGwC,MAAQxC,EAAS,GAAGwC,OAEjDlD,EAAYj3B,IAAI/H,EAAGC,EACpB,CACF,CAED,SAASkiC,IACP,GAAwB,IAApBzC,EAASjnC,OACX2mC,EAASr3B,IAAI23B,EAAS,GAAGuC,MAAOvC,EAAS,GAAGwC,WACvC,CACL,MAAMliC,EAAI,IAAO0/B,EAAS,GAAGuC,MAAQvC,EAAS,GAAGuC,OAC3ChiC,EAAI,IAAOy/B,EAAS,GAAGwC,MAAQxC,EAAS,GAAGwC,OAEjD9C,EAASr3B,IAAI/H,EAAGC,EACjB,CACF,CAED,SAASmiC,IACP,MAAMC,EAAK3C,EAAS,GAAGuC,MAAQvC,EAAS,GAAGuC,MACrCK,EAAK5C,EAAS,GAAGwC,MAAQxC,EAAS,GAAGwC,MAErClC,EAAW/mC,KAAKwmB,KAAK4iB,EAAKA,EAAKC,EAAKA,GAE1C/C,EAAWx3B,IAAI,EAAGi4B,EACnB,CAcD,SAASuC,EAAsBlB,GAC7B,GAAuB,GAAnB3B,EAASjnC,OACXymC,EAAUn3B,IAAIs5B,EAAMY,MAAOZ,EAAMa,WAC5B,CACL,MAAMrjB,EAAW2jB,EAAyBnB,GAEpCrhC,EAAI,IAAOqhC,EAAMY,MAAQpjB,EAAS7e,GAClCC,EAAI,IAAOohC,EAAMa,MAAQrjB,EAAS5e,GAExCi/B,EAAUn3B,IAAI/H,EAAGC,EAClB,CAEDk/B,EACGsD,WAAWvD,EAAWF,GACtBjC,eAAehC,EAAM3C,aAExB,MAAMxd,EAAUmgB,EAAM/D,WAEtBqF,EAAY,EAAIpjC,KAAK2+B,GAAKuH,EAAYn/B,EAAK4a,EAAQ+lB,cAEnDb,EAAU,EAAI7mC,KAAK2+B,GAAKuH,EAAYl/B,EAAK2a,EAAQ+lB,cAEjD3B,EAAY92B,KAAKg3B,EAClB,CAED,SAASwD,EAAmBrB,GAC1B,GAAwB,IAApB3B,EAASjnC,OACX4mC,EAAOt3B,IAAIs5B,EAAMY,MAAOZ,EAAMa,WACzB,CACL,MAAMrjB,EAAW2jB,EAAyBnB,GAEpCrhC,EAAI,IAAOqhC,EAAMY,MAAQpjB,EAAS7e,GAClCC,EAAI,IAAOohC,EAAMa,MAAQrjB,EAAS5e,GAExCo/B,EAAOt3B,IAAI/H,EAAGC,EACf,CAEDq/B,EAASmD,WAAWpD,EAAQD,GAAUrC,eAAehC,EAAMzC,UAE3D+H,EAAIf,EAASt/B,EAAGs/B,EAASr/B,GAEzBm/B,EAASl3B,KAAKm3B,EACf,CAED,SAASsD,EAAqBtB,GAC5B,MAAMxiB,EAAW2jB,EAAyBnB,GAEpCgB,EAAKhB,EAAMY,MAAQpjB,EAAS7e,EAC5BsiC,EAAKjB,EAAMa,MAAQrjB,EAAS5e,EAE5B+/B,EAAW/mC,KAAKwmB,KAAK4iB,EAAKA,EAAKC,EAAKA,GAE1C9C,EAASz3B,IAAI,EAAGi4B,GAEhBP,EAAW13B,IAAI,EAAG9O,KAAKwxB,IAAI+U,EAASv/B,EAAIs/B,EAAWt/B,EAAG86B,EAAM7C,YAE5D+I,EAASxB,EAAWx/B,GAEpBs/B,EAAWr3B,KAAKs3B,EACjB,CAkBD,SAASjB,EAAc8C,IACC,IAAlBtG,EAAM5D,UAEc,IAApBuI,EAASjnC,SACXsiC,EAAM/D,WAAW4L,kBAAkBvB,EAAMwB,WAEzC9H,EAAM/D,WAAW0D,iBAAiB,cAAegE,GACjD3D,EAAM/D,WAAW0D,iBAAiB,YAAa8D,IA2RnD,SAAoB6C,GAClB3B,EAAS/mC,KAAK0oC,EACf,CAxRCyB,CAAWzB,GAEe,UAAtBA,EAAM0B,YA0JZ,SAAsB1B,GAGpB,OAFA2B,EAAa3B,GAEL3B,EAASjnC,QACf,KAAK,EACH,OAAQsiC,EAAMxB,QAAQC,KACpB,KAAKC,EAAKA,MAACN,OACT,IAA2B,IAAvB4B,EAAM5C,aAAwB,OAElC6J,IAEA1G,EAAQC,EAAMoD,aAEd,MAEF,KAAKlF,EAAKA,MAACH,IACT,IAAwB,IAApByB,EAAM1C,UAAqB,OAE/B8J,IAEA7G,EAAQC,EAAMqD,UAEd,MAEF,QACEtD,EAAQC,EAAMC,KAGlB,MAEF,KAAK,EACH,OAAQT,EAAMxB,QAAQG,KACpB,KAAKD,EAAKA,MAACE,UACT,IAAyB,IAArBoB,EAAM9C,aAA4C,IAApB8C,EAAM1C,UACtC,OAlSN0C,EAAM9C,YAAYmK,IAElBrH,EAAM1C,WAAW8J,IAqSb7G,EAAQC,EAAMsD,gBAEd,MAEF,KAAKpF,EAAKA,MAACwJ,aACT,IAAyB,IAArBlI,EAAM9C,aAA+C,IAAvB8C,EAAM5C,aACtC,OAvSN4C,EAAM9C,YAAYmK,IAElBrH,EAAM5C,cAAc6J,IA0ShB1G,EAAQC,EAAMuD,mBAEd,MAEF,QACExD,EAAQC,EAAMC,KAGlB,MAEF,QACEF,EAAQC,EAAMC,KAGdF,IAAUC,EAAMC,MAClBT,EAAMK,cAAcjF,GAEvB,CA5NG+M,CAAa7B,GA+BjB,SAAqBA,GACnB,IAAI8B,EAEJ,OAAQ9B,EAAM+B,QACZ,KAAK,EACHD,EAAcpI,EAAM9B,aAAaJ,KACjC,MAEF,KAAK,EACHsK,EAAcpI,EAAM9B,aAAaG,OACjC,MAEF,KAAK,EACH+J,EAAcpI,EAAM9B,aAAaF,MACjC,MAEF,QACEoK,GAAe,EAGnB,OAAQA,GACN,KAAKjK,EAAKA,MAACG,MACT,IAAyB,IAArB0B,EAAM9C,WAAsB,QA9TtC,SAA8BoJ,GAC5BD,EAAsBC,GACtB9B,EAAWx3B,IAAIs5B,EAAMG,QAASH,EAAMI,QACrC,CA6TK4B,CAAqBhC,GAErB/F,EAAQC,EAAMlC,MAEd,MAEF,KAAKH,EAAKA,MAACC,OACT,GAAIkI,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAAU,CACpD,IAAwB,IAApBzI,EAAM1C,UAAqB,OAE/B0J,EAAmBV,GAEnB/F,EAAQC,EAAMjC,GAC1B,KAAiB,CACL,IAA2B,IAAvByB,EAAM5C,aAAwB,OAElC2J,EAAsBT,GAEtB/F,EAAQC,EAAMpC,MACf,CAED,MAEF,KAAKD,EAAKA,MAACI,IACT,GAAI+H,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAAU,CACpD,IAA2B,IAAvBzI,EAAM5C,aAAwB,OAElC2J,EAAsBT,GAEtB/F,EAAQC,EAAMpC,MAC1B,KAAiB,CACL,IAAwB,IAApB4B,EAAM1C,UAAqB,OAE/B0J,EAAmBV,GAEnB/F,EAAQC,EAAMjC,GACf,CAED,MAEF,QACEgC,EAAQC,EAAMC,KAGdF,IAAUC,EAAMC,MAClBT,EAAMK,cAAcjF,GAEvB,CApGGsN,CAAYpC,GAEf,CAED,SAAS3C,EAAc2C,IACC,IAAlBtG,EAAM5D,UAEgB,UAAtBkK,EAAM0B,YAqNZ,SAAqB1B,GAGnB,OAFA2B,EAAa3B,GAEL/F,GACN,KAAKC,EAAMoD,aACT,IAA2B,IAAvB5D,EAAM5C,aAAwB,OAElCoK,EAAsBlB,GAEtBtG,EAAMM,SAEN,MAEF,KAAKE,EAAMqD,UACT,IAAwB,IAApB7D,EAAM1C,UAAqB,OAE/BqK,EAAmBrB,GAEnBtG,EAAMM,SAEN,MAEF,KAAKE,EAAMsD,gBACT,IAAyB,IAArB9D,EAAM9C,aAA4C,IAApB8C,EAAM1C,UAAqB,QApRnE,SAAiCgJ,GAC3BtG,EAAM9C,YAAY0K,EAAqBtB,GAEvCtG,EAAM1C,WAAWqK,EAAmBrB,EACzC,CAkRKqC,CAAwBrC,GAExBtG,EAAMM,SAEN,MAEF,KAAKE,EAAMuD,mBACT,IAAyB,IAArB/D,EAAM9C,aAA+C,IAAvB8C,EAAM5C,aACtC,QAxRR,SAAoCkJ,GAC9BtG,EAAM9C,YAAY0K,EAAqBtB,GAEvCtG,EAAM5C,cAAcoK,EAAsBlB,EAC/C,CAuRKsC,CAA2BtC,GAE3BtG,EAAMM,SAEN,MAEF,QACEC,EAAQC,EAAMC,KAEnB,CAjQGoI,CAAYvC,GA8FhB,SAAqBA,GACnB,OAAQ/F,GACN,KAAKC,EAAMpC,OACT,IAA2B,IAAvB4B,EAAM5C,aAAwB,QA3WxC,SAA+BkJ,GAC7BnC,EAAUn3B,IAAIs5B,EAAMG,QAASH,EAAMI,SAEnCtC,EACGsD,WAAWvD,EAAWF,GACtBjC,eAAehC,EAAM3C,aAExB,MAAMxd,EAAUmgB,EAAM/D,WAEtBqF,EAAY,EAAIpjC,KAAK2+B,GAAKuH,EAAYn/B,EAAK4a,EAAQ+lB,cAEnDb,EAAU,EAAI7mC,KAAK2+B,GAAKuH,EAAYl/B,EAAK2a,EAAQ+lB,cAEjD3B,EAAY92B,KAAKg3B,GAEjBnE,EAAMM,QACP,CA6VKwI,CAAsBxC,GAEtB,MAEF,KAAK9F,EAAMlC,MACT,IAAyB,IAArB0B,EAAM9C,WAAsB,QAhWtC,SAA8BoJ,GAC5B7B,EAASz3B,IAAIs5B,EAAMG,QAASH,EAAMI,SAElChC,EAAWgD,WAAWjD,EAAUD,GAE5BE,EAAWx/B,EAAI,EACjBghC,EAASrB,KACAH,EAAWx/B,EAAI,GACxBkhC,EAAQvB,KAGVL,EAAWr3B,KAAKs3B,GAEhBzE,EAAMM,QACP,CAoVKyI,CAAqBzC,GAErB,MAEF,KAAK9F,EAAMjC,IACT,IAAwB,IAApByB,EAAM1C,UAAqB,QAvVrC,SAA4BgJ,GAC1BhC,EAAOt3B,IAAIs5B,EAAMG,QAASH,EAAMI,SAEhCnC,EAASmD,WAAWpD,EAAQD,GAAUrC,eAAehC,EAAMzC,UAE3D+H,EAAIf,EAASt/B,EAAGs/B,EAASr/B,GAEzBm/B,EAASl3B,KAAKm3B,GAEdtE,EAAMM,QACP,CA+UK0I,CAAmB1C,GAIxB,CAnHG2C,CAAY3C,GAEf,CAED,SAAS7C,EAAY6C,IAuQrB,SAAuBA,UACd1B,EAAiB0B,EAAMwB,WAE9B,IAAK,IAAIrjC,EAAI,EAAGA,EAAIkgC,EAASjnC,OAAQ+G,IACnC,GAAIkgC,EAASlgC,GAAGqjC,WAAaxB,EAAMwB,UAEjC,YADAnD,EAASuE,OAAOzkC,EAAG,EAIxB,CA/QC0kC,CAAc7C,GAEU,IAApB3B,EAASjnC,SACXsiC,EAAM/D,WAAWmN,sBAAsB9C,EAAMwB,WAE7C9H,EAAM/D,WAAW6D,oBAAoB,cAAe6D,GACpD3D,EAAM/D,WAAW6D,oBAAoB,YAAa2D,IAGpDzD,EAAMK,cAAchF,IAEpBkF,EAAQC,EAAMC,IACf,CAoGD,SAASiD,EAAa4C,IAEA,IAAlBtG,EAAM5D,UACe,IAArB4D,EAAM9C,YACNqD,IAAUC,EAAMC,OAKlB6F,EAAM+C,iBAENrJ,EAAMK,cAAcjF,IA9VtB,SAA0BkL,GACxBD,EAAsBC,GAElBA,EAAMd,OAAS,EACjBY,EAAQvB,KACCyB,EAAMd,OAAS,GACxBU,EAASrB,KAGX7E,EAAMM,QACP,CAsVCgJ,CAAiBhD,GAEjBtG,EAAMK,cAAchF,IACrB,CAED,SAASuE,EAAU0G,IACK,IAAlBtG,EAAM5D,UAAyC,IAApB4D,EAAM1C,WA1VvC,SAAuBgJ,GACrB,IAAIiD,GAAc,EAElB,OAAQjD,EAAMkD,MACZ,KAAKxJ,EAAMnC,KAAKE,GACVuI,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAC1C1D,EACG,EAAI7mC,KAAK2+B,GAAKmD,EAAM3C,YAAe2C,EAAM/D,WAAW2J,cAGvDN,EAAI,EAAGtF,EAAMvC,aAGf8L,GAAc,EACd,MAEF,KAAKvJ,EAAMnC,KAAKI,OACVqI,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAC1C1D,GACI,EAAI7mC,KAAK2+B,GAAKmD,EAAM3C,YACpB2C,EAAM/D,WAAW2J,cAGrBN,EAAI,GAAItF,EAAMvC,aAGhB8L,GAAc,EACd,MAEF,KAAKvJ,EAAMnC,KAAKC,KACVwI,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAC1CnH,EACG,EAAIpjC,KAAK2+B,GAAKmD,EAAM3C,YAAe2C,EAAM/D,WAAW2J,cAGvDN,EAAItF,EAAMvC,YAAa,GAGzB8L,GAAc,EACd,MAEF,KAAKvJ,EAAMnC,KAAKG,MACVsI,EAAMiC,SAAWjC,EAAMkC,SAAWlC,EAAMmC,SAC1CnH,GACI,EAAIpjC,KAAK2+B,GAAKmD,EAAM3C,YACpB2C,EAAM/D,WAAW2J,cAGrBN,GAAKtF,EAAMvC,YAAa,GAG1B8L,GAAc,EAIdA,IAEFjD,EAAM+C,iBAENrJ,EAAMM,SAET,CA+RCmJ,CAAcnD,EACf,CAsHD,SAAS/C,EAAc+C,IACC,IAAlBtG,EAAM5D,SAEVkK,EAAM+C,gBACP,CAiBD,SAASpB,EAAa3B,GACpB,IAAIxiB,EAAW8gB,EAAiB0B,EAAMwB,gBAErB9qC,IAAb8mB,IACFA,EAAW,IAAIogB,EAAAA,QACfU,EAAiB0B,EAAMwB,WAAahkB,GAGtCA,EAAS9W,IAAIs5B,EAAMY,MAAOZ,EAAMa,MACjC,CAED,SAASM,EAAyBnB,GAChC,MAAMoD,EACJpD,EAAMwB,YAAcnD,EAAS,GAAGmD,UAAYnD,EAAS,GAAKA,EAAS,GAErE,OAAOC,EAAiB8E,EAAQ5B,UACjC,CAID9H,EAAM/D,WAAW0D,iBAAiB,cAAe4D,GAEjDvD,EAAM/D,WAAW0D,iBAAiB,cAAe6D,GACjDxD,EAAM/D,WAAW0D,iBAAiB,gBAAiB8D,GACnDzD,EAAM/D,WAAW0D,iBAAiB,QAAS+D,EAAc,CACvDiG,SAAS,IAKXpwC,KAAK+mC,QACN,EChrCS,MAACsJ,GAAa,CACxBC,OAAQ,EACRC,SAAU,EACVC,MAAO,GCDHC,GAAQ,IAAIxjC,EAAM+F,QAEjB,MAAM09B,WAAoBzjC,EAAM0jC,SACrC,WAAAhxC,CACEixC,EAAM,IAAI3jC,EAAM+F,QAAQ,EAAG,EAAG,GAC9By2B,EAAS,IAAIx8B,EAAM+F,QAAQ,EAAG,EAAG,GACjC7O,EAAS,EACTmkC,EAAS,GACT9d,EAAQ,SACRqmB,EAAsB,GAAT1sC,EACb2sC,EAA0B,GAAbD,GAEbtvC,QAEAvB,KAAK4nB,KAAO,cAEZ,MAAMmpB,EAAe,IAAI9jC,EAAM+jC,iBAAiB1I,EAAQA,EAAQnkC,EAAQ,IACxE4sC,EAAaE,UAAU,EAAG9sC,EAAS,EAAK,GACxC,MAAM+sC,EAAe,IAAIjkC,EAAM+jC,iBAC7B,EACAF,EACAD,EACA,IAEFK,EAAaD,UAAU,EAAG9sC,EAAQ,GAElCnE,KAAKuqB,SAAS3W,KAAK61B,GAEnBzpC,KAAKonB,KAAO,IAAIna,EAAMkkC,KACpBJ,EACA,IAAI9jC,EAAMmkC,kBAAkB,CAAE5mB,MAAOA,EAAO6mB,YAAY,KAE1DrxC,KAAKonB,KAAKkqB,kBAAmB,EAC7BtxC,KAAKmoC,IAAInoC,KAAKonB,MAEdpnB,KAAKuxC,KAAO,IAAItkC,EAAMkkC,KACpBD,EACA,IAAIjkC,EAAMmkC,kBAAkB,CAAE5mB,MAAOA,EAAO6mB,YAAY,KAE1DrxC,KAAKuxC,KAAKD,kBAAmB,EAC7BtxC,KAAKmoC,IAAInoC,KAAKuxC,MAEdvxC,KAAKwxC,aAAaZ,EACnB,CAED,YAAAY,CAAaZ,GACX,GAAIA,EAAIjlC,EAAI,OACV3L,KAAK+U,WAAWtB,IAAI,EAAG,EAAG,EAAG,QACxB,GAAIm9B,EAAIjlC,GAAK,OAClB3L,KAAK+U,WAAWtB,IAAI,EAAG,EAAG,EAAG,OACxB,CACLg9B,GAAMh9B,IAAIm9B,EAAIhlC,EAAG,GAAIglC,EAAIllC,GAAGwK,YAC5B,MAAMu7B,EAAU9sC,KAAK+sC,KAAKd,EAAIjlC,GAC9B3L,KAAK+U,WAAW48B,iBAAiBlB,GAAOgB,EACzC,CACF,CAED,QAAAG,CAASpnB,GACPxqB,KAAKonB,KAAKjiB,SAASqlB,MAAM/W,IAAI+W,GAC7BxqB,KAAKuxC,KAAKpsC,SAASqlB,MAAM/W,IAAI+W,EAC9B,CAED,IAAA5W,CAAKi+B,GAIH,OAHAtwC,MAAMqS,KAAKi+B,GAAQ,GACnB7xC,KAAKonB,KAAKxT,KAAKi+B,EAAOzqB,MACtBpnB,KAAKuxC,KAAK39B,KAAKi+B,EAAON,MACfvxC,IACR,CAED,OAAAkF,GACElF,KAAKonB,KAAKniB,SAASC,UACnBlF,KAAKonB,KAAKjiB,SAASD,UACnBlF,KAAKuxC,KAAKtsC,SAASC,UACnBlF,KAAKuxC,KAAKpsC,SAASD,SACpB,ECxEI,MAAM4sC,GACX,WAAAnyC,CAAYoyC,GACV/xC,KAAK+xC,WAAaA,EAClB/xC,KAAKgyC,kBAAoB,KACzBhyC,KAAKiyC,qBAAuB,KAC5BjyC,KAAKkyC,uBAAyB,KAC9BlyC,KAAKmyC,WAAa,KAClBnyC,KAAKoyC,YAAc,KACnBpyC,KAAKqyC,aAAe,KACpBryC,KAAKsyC,UAAY,KACjBtyC,KAAKuyC,mBAAqB,IAC3B,CAED,0CAAAC,CAA2CpF,EAAOE,GAChDttC,KAAKyyC,2BACLzyC,KAAKgyC,kBAAoB,IAAI/kC,EAAMylC,kBAAkBtF,EAAOE,EAAQ,CAClExc,OAAQ7jB,EAAM0lC,WACdC,eAAe,EACfC,aAAa,IAEf7yC,KAAKgyC,kBAAkBc,aAAe,IAAI7lC,EAAM8lC,aAAa3F,EAAOE,GACpEttC,KAAKgyC,kBAAkBc,aAAahiB,OAAS7jB,EAAM+lC,YACnDhzC,KAAKgyC,kBAAkBc,aAAalrB,KAAO3a,EAAMgmC,eAClD,CAED,wBAAAR,GACMzyC,KAAKgyC,oBACPhyC,KAAKgyC,kBAAoB,KAE5B,CAED,4BAAAkB,GACE,MAUMC,EAA2B,IAAIlmC,EAAMmmC,eAAe,CACxDC,aAAc,2MAOdC,eAAgB,+hBAahBC,SA/Be,CACfC,mBAAoB,CAClB5rB,KAAM,IACNjkB,MAAO,MAET8vC,mBAAoB,CAClB7rB,KAAM,IACNjkB,MAAO,OAyBT+vC,YAAY,EACZC,WAAW,EACXC,aAAa,EACbC,SAAU5mC,EAAM6mC,eAChBC,SAAU9mC,EAAM+mC,eAChBC,cAAehnC,EAAM+mC,eACrBE,SAAUjnC,EAAMknC,uBAChBC,cAAennC,EAAMknC,yBAEvBhB,EAAyBkB,WAAWC,WAAY,EAChDt0C,KAAKiyC,qBAAuB,IAAIhlC,EAAMkkC,KACpC,IAAIlkC,EAAMsnC,cAAc,EAAG,GAC3BpB,GAEFnzC,KAAKkyC,uBAAyB,IAAIjlC,EAAMunC,oBACrC,EACD,EACA,GACC,EACD,EACA,EAEH,CAED,8BAAAC,GACMz0C,KAAKiyC,uBACPltC,EAAiB/E,KAAKiyC,sBACtBjyC,KAAKiyC,qBAAuB,KAE/B,CAED,eAAAyC,GACE,IAAK10C,KAAKmyC,WAAY,CACpB,MAAMjB,EAAe,IAAIjkC,EAAM0nC,aAAa,GAAK,IAAK,IAChDC,EAAe,IAAI3nC,EAAMmkC,kBAAkB,CAAE5mB,MAAO,WAEpDqqB,EAAY,IAAI5nC,EAAMkkC,KAAKD,EAAc0D,GAC/CC,EAAU3hC,SAASO,IAAI,EAAG,EAAG9O,KAAK2+B,IAClCuR,EAAUtqB,SAAS9W,IAAI,EAAG,EAAG,GAC7B,MAAMqhC,EAAU,IAAI7nC,EAAMkkC,KAAKD,EAAc0D,GAC7CE,EAAQvqB,SAAS9W,IAAI,GAAI,EAAG,GAC5B,MAAMshC,EAAY,IAAI9nC,EAAMkkC,KAAKD,EAAc0D,GAC/CG,EAAU7hC,SAASO,IAAI,EAAG,EAAG9O,KAAK2+B,GAAK,GACvCyR,EAAUxqB,SAAS9W,IAAI,EAAG,EAAG,GAC7B,MAAMuhC,EAAa,IAAI/nC,EAAMkkC,KAAKD,EAAc0D,GAChDI,EAAW9hC,SAASO,IAAI,EAAG,GAAI9O,KAAK2+B,GAAK,GACzC0R,EAAWzqB,SAAS9W,KAAK,EAAG,EAAG,GAE/BzT,KAAKmyC,WAAa,IAAIllC,EAAM0jC,SAC5B3wC,KAAKmyC,WAAWhK,IAAI0M,GACpB70C,KAAKmyC,WAAWhK,IAAI2M,GACpB90C,KAAKmyC,WAAWhK,IAAI4M,GACpB/0C,KAAKmyC,WAAWhK,IAAI6M,GACpBh1C,KAAKmyC,WAAWl/B,MAAMQ,IAAI,GAAK,GAAK,IACpCzT,KAAK+xC,WAAW5J,IAAInoC,KAAKmyC,YACzBnyC,KAAKmyC,WAAW8C,SAAU,CAC3B,CACF,CAED,iBAAAC,GACMl1C,KAAKmyC,aACPptC,EAAiB/E,KAAKmyC,YACtBnyC,KAAK+xC,WAAWoD,OAAOn1C,KAAKmyC,YAC5BnyC,KAAKmyC,WAAa,KAErB,CAED,uBAAAiD,CAAwBH,GACtBj1C,KAAKmyC,WAAW8C,QAAUA,CAC3B,CAED,wBAAAI,GACE,OAAOr1C,KAAKmyC,WAAW8C,OACxB,CAED,qBAAAK,CAAsB/qB,GACpBvqB,KAAKmyC,WAAW5nB,SAAS3W,KAAK2W,EAC/B,CAED,2BAAAgrB,CAA4BhrB,EAAUirB,GACpCx1C,KAAKmyC,WAAW5nB,SAAS3W,KAAK2W,GAC9BvqB,KAAKmyC,WAAW7K,GAAG1zB,KAAK4hC,EAAOlO,IAC/BtnC,KAAKmyC,WAAW3J,OAAOgN,EAAOjrB,SAC/B,CAED,gBAAAkrB,GACE,IAAKz1C,KAAKoyC,YAAa,CACrB,MAAMsD,EAAiB,IAAIzoC,EAAM0oC,eAAe,GAAK,GAAI,IACnDC,EAAsB9D,GAAY+D,2BACxCD,EAAoBjC,WAAY,EAChCiC,EAAoBlC,YAAa,EACjCkC,EAAoBhC,aAAc,EAClC5zC,KAAKoyC,YAAc,IAAInlC,EAAMkkC,KAAKuE,EAAgBE,EACnD,CACF,CAED,kBAAAE,GACM91C,KAAKoyC,cACPrtC,EAAiB/E,KAAKoyC,aACtBpyC,KAAKoyC,YAAc,KAEtB,CAED2D,kBAAoB,WAClB,MAAMhjC,EAAe,IAAI9F,EAAM+F,QACzBF,EAAa,IAAI7F,EAAM2F,QACvBojC,EAAW,IAAI/oC,EAAM+F,QAE3B,OAAO,SAASuX,EAAUirB,EAAQS,GAChCnjC,EAAWc,KAAK4hC,EAAOU,aAAa1O,SACpCz0B,EAAaa,KAAK2W,GAAU9X,aAAaK,GACzCC,EAAamD,YAAYuyB,eAAe,IACxC11B,EAAaN,aAAa+iC,EAAOU,aACjCF,EAASpiC,KAAK4hC,EAAOjrB,UAAU/I,IAAI+I,GACnC,MAAM4rB,EAAmBH,EAAS7xC,SAClCnE,KAAKoyC,YAAY7nB,SAAS3W,KAAK2W,GAC/BvqB,KAAKoyC,YAAYn/B,MAAMQ,IACrB0iC,EACAA,EACAA,GAEFn2C,KAAKoyC,YAAYjtC,SAASouC,SAAS6C,kBAAkBzyC,MAAMiQ,KAAK2W,GAChEvqB,KAAKoyC,YAAYjtC,SAASouC,SAAS0C,SAAStyC,MAAMiQ,KAAKqiC,GACvDj2C,KAAKoyC,YAAYjtC,SAASkxC,oBAAqB,CACrD,CACG,CAtBmB,GAwBpB,wBAAAC,CAAyBrB,GACvBj1C,KAAKoyC,YAAY6C,QAAUA,CAC5B,CAED,qBAAAsB,CAAsBhqC,GACpBvM,KAAKoyC,YAAYjtC,SAASouC,SAAShnC,QAAQ5I,MAAQ4I,EACnDvM,KAAKoyC,YAAYjtC,SAASkxC,oBAAqB,CAChD,CAED,qBAAAG,GACE,OAAOx2C,KAAKoyC,YAAYjtC,SAASouC,SAAShnC,QAAQ5I,KACnD,CAED,iBAAA8yC,GACE,IAAKz2C,KAAKqyC,aAAc,CACtB,MAAMqE,EAAgB,IAAIzpC,EAAMsnC,cAAc,EAAG,GACjDmC,EAAcC,SAAShyC,KAAK2+B,GAAK,GACjC,MAAMsT,EAAgB,IAAI3pC,EAAMmkC,kBAAkB,CAAE5mB,MAAO,WAC3DosB,EAAchD,aAAc,EAC5BgD,EAAcrqC,QAAU,GACxBqqC,EAAcjD,WAAY,EAC1BiD,EAAclD,YAAa,EAC3BkD,EAAcC,KAAO5pC,EAAM6pC,WAC3B,MAAMC,EAAY,IAAI9pC,EAAMkkC,KAAKuF,EAAeE,GAE1CI,EAAW,IAAI/pC,EAAM+F,QAAQ,EAAG,EAAG,GACzCgkC,EAAS9gC,YACT,MAAM+gC,EAAc,IAAIhqC,EAAM+F,QAAQ,EAAG,EAAG,GAItCkkC,EAAc,IAAIxG,GACtBsG,EACAC,EALkB,GACA,IACD,MAOjB,GACA,KAGFj3C,KAAKqyC,aAAe,IAAIplC,EAAM0jC,SAC9B3wC,KAAKqyC,aAAalK,IAAI4O,GACtB/2C,KAAKqyC,aAAalK,IAAI+O,EACvB,CACF,CAED,mBAAAC,GACMn3C,KAAKqyC,eACPttC,EAAiB/E,KAAKqyC,cACtBryC,KAAKqyC,aAAe,KAEvB,CAED,yBAAA+E,CAA0BnC,GACxBj1C,KAAKqyC,aAAa4C,QAAUA,CAC7B,CAEDoC,8BAAgC,WAC9B,MAAMC,EAAiB,IAAIrqC,EAAMkG,WAC3BokC,EAAY,IAAItqC,EAAM+F,QAAQ,EAAG,EAAG,GAE1C,OAAO,SAASuX,EAAU+c,GACxBgQ,EAAejQ,mBAAmBkQ,EAAWjQ,GAC7CtnC,KAAKqyC,aAAa9nB,SAAS3W,KAAK2W,GAChCvqB,KAAKqyC,aAAat9B,WAAWnB,KAAK0jC,EACxC,CACG,CAT+B,GAWhC,cAAAE,GACEx3C,KAAKsyC,UAAYtyC,KAAKy3C,oBACtBz3C,KAAKuyC,mBAAqBvyC,KAAK03C,6BAC/B13C,KAAK+xC,WAAW5J,IAAInoC,KAAKsyC,WACzBtyC,KAAK+xC,WAAW5J,IAAInoC,KAAKuyC,mBAC1B,CAED,kBAAAoF,GACE,IAAK,IAAIrF,IAAa,CAACtyC,KAAKsyC,UAAWtyC,KAAKuyC,oBACtCD,IACFvtC,EAAiButC,GACjBtyC,KAAK+xC,WAAWoD,OAAO7C,IAG3BtyC,KAAKsyC,UAAY,KACjBtyC,KAAKuyC,mBAAqB,IAC3B,CAED,iBAAAkF,CAAkBG,GAChB,MAAMlC,EAAiB,IAAIzoC,EAAM0oC,eAAe,EAAG,GAAI,IACjDkC,EAAgB,IAAI5qC,EAAM0jC,SAE1BmH,EAAa,CAACttB,EAAOD,KACzB,IAAIwtB,EAAa,IAAI9qC,EAAMkkC,KACzBuE,EACA5D,GAAYkG,mBAAmBxtB,IAEjCutB,EAAWH,YAAcA,EACzBC,EAAc1P,IAAI4P,GAClBA,EAAWxtB,SAASxG,UAAUwG,EAAS,EASzC,OANAutB,EAAW,SAAU,EAAE,GAAI,EAAG,IAC9BA,EAAW,SAAU,CAAC,GAAI,EAAG,IAC7BA,EAAW,MAAU,CAAC,EAAG,GAAI,KAC7BA,EAAW,MAAU,CAAC,EAAG,EAAG,KAC5BA,EAAW,SAAU,CAAC,EAAG,EAAG,IAErBD,CACR,CAED,0BAAAH,CAA2BE,GACzB,MAAMK,EAAc,IAAIhrC,EAAMirC,YAAY,EAAG,EAAG,GAC1CL,EAAgB,IAAI5qC,EAAM0jC,SAGhC,MAAMmH,EAAcvtB,IAClB,IAAI4tB,EAAU,IAAIlrC,EAAMkkC,KACtB8G,EACAnG,GAAYkG,mBAJD,WAMbG,EAAQP,YAAcA,EACtBC,EAAc1P,IAAIgQ,GAClBA,EAAQ5tB,SAASxG,UAAUwG,EAAS,EAGtC,IAAI6tB,EAAa,GAMjB,OALAN,EAAW,EAAC,GAAa,GAAG,KAC5BA,EAAW,EAAC,GAAa,EAAGM,IAC5BN,EAAW,CAACM,EAAY,GAAG,KAC3BN,EAAW,CAACM,EAAY,EAAGA,IAEpBP,CACR,CAED,yBAAOG,CAAmBxtB,GACxB,MAyBM+oB,EAAW,CACf/oB,MAAO,CACL5C,KAAM,KACNjkB,MAAO,IAAIsJ,EAAMorC,MAAM7tB,KAIrBrlB,EAAW,IAAI8H,EAAMmmC,eAAe,CACxCG,SAAUA,EACVF,aAlCyB,gfAmCzBC,eApB2B,0QAqB3BM,aAAa,EACbD,WAAW,EACXD,YAAY,EACZmD,KAAM5pC,EAAMqrC,YAId,OAFAnzC,EAASkvC,WAAWC,WAAY,EAEzBnvC,CACR,CAED,+BAAO0wC,CAAyBrrB,GAC9B,MA2DM+oB,EAAW,CACf/oB,MAAO,CACL5C,KAAM,KACNjkB,MAAO,IAAIsJ,EAAMorC,MAAM7tB,IAEzB4rB,kBAAmB,CACjBxuB,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM+F,SAEnBijC,SAAU,CACRruB,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,SAEnBp+B,QAAS,CACP5I,MAAO,IAcX,OAViB,IAAIsJ,EAAMmmC,eAAe,CACxCG,SAAUA,EACVF,aA/EyB,ujCAgFzBC,eAjD2B,27BAkD3BM,aAAa,EACbD,WAAW,EACXD,YAAY,EACZmD,KAAM5pC,EAAMqrC,WAIf,CAED,OAAApzC,GACElF,KAAKk1C,oBACLl1C,KAAK81C,qBACL91C,KAAK23C,qBACL33C,KAAKm3C,sBACLn3C,KAAKy0C,iCACLz0C,KAAKyyC,0BACN,EC1dS,MAAC8F,GAAkB,CAC7BC,QAAS,EACTC,QAAS,EACTC,QAAS,GCHEC,GAAkB,CAC7BC,OAAQ,EACRC,KAAM,GCCD,MAAMC,GACX,WAAAn5C,CAAYqvB,GACVhvB,KAAKgvB,OAASA,CACf,CAED,eAAA+pB,CAAgBjuC,EAAYkuC,EAAcC,GACxC,MAAM/2B,EAAWliB,KAAKgvB,OAEhB5M,EAAa,IAAIxb,EAAuBsb,GAE9C,IAAK,IAAI8B,EAAM,EAAGA,EAAMlZ,EAAYkZ,IAAO,CACzC,MAAMxY,EAAWstC,GAAWplB,yBAC1BslB,EACAh1B,EACAi1B,EACA/2B,GAEFE,EAAWjX,SAASK,EACrB,CACD,OAAO4W,CACR,CAED1iB,gCAAkC,WAChC,MAAMsY,EAAe,IAAI/K,EAAMkG,WAEzBqN,EAAS5Z,EAAuB4Z,OAEhC4T,EAAQ,mBAEd,OAAO,SAAS4kB,EAAch1B,EAAKi1B,EAAW/2B,GAC5C,MAAM1W,EAAW5E,EAAuBmE,YAAYmX,GAG9Cg3B,EAAYF,EAAaG,SAEzBztC,EAAIwtC,EAAgB,EAANl1B,GACdrY,EAAIutC,EAAgB,EAANl1B,EAAU,GACxBpY,EAAIstC,EAAgB,EAANl1B,EAAU,GAE9BxY,EAASgV,EAAO3Z,GAAK6E,EACrBF,EAASgV,EAAO1Z,GAAK6E,EACrBH,EAASgV,EAAOzZ,GAAK6E,EAGrB,MAAMwtC,EAASJ,EAAa/lC,MAEtBomC,EAAK10C,KAAK2mB,IAAI8tB,EAAa,EAANp1B,IACrBs1B,EAAK30C,KAAK2mB,IAAI8tB,EAAa,EAANp1B,EAAU,IAC/Bu1B,EAAK50C,KAAK2mB,IAAI8tB,EAAa,EAANp1B,EAAU,IAErCxY,EAASgV,EAAOxZ,QAAUqyC,EAC1B7tC,EAASgV,EAAOvZ,QAAUqyC,EAC1B9tC,EAASgV,EAAOtZ,QAAUqyC,EAG1B,MAAMC,EAAYR,EAAa9lC,SACzBumC,EAAKD,EAAgB,EAANx1B,GACf01B,EAAKF,EAAgB,EAANx1B,EAAU,GACzB21B,EAAKH,EAAgB,EAANx1B,EAAU,GACzB41B,EAAKJ,EAAgB,EAANx1B,EAAU,GAE/BhM,EAAavE,IAAIgmC,EAAIC,EAAIC,EAAIC,GAC7B5hC,EAAa9B,YAEb1K,EAASgV,EAAOrZ,WAAa6Q,EAAatM,EAC1CF,EAASgV,EAAOpZ,WAAa4Q,EAAarM,EAC1CH,EAASgV,EAAOnZ,WAAa2Q,EAAapM,EAC1CJ,EAASgV,EAAOlZ,WAAa0Q,EAAa/C,EAG1C,MAAM4kC,EAAYb,EAAazsC,QACzButC,EAAMd,EAAae,UAEnBxtC,EAAW,GAAK,EAAI5H,KAAK2mB,KAAKuuB,EAAU71B,KAAU,IACxDxY,EAASgV,EAAO9Y,SAAWnD,EAAMI,KAAKoJ,MAAMxB,GAAU,EAAG,KAGzD,MAAMytC,EAAMF,EAAU,EAAN91B,GACVi2B,EAAMH,EAAU,EAAN91B,EAAU,GACpBk2B,EAAMJ,EAAU,EAAN91B,EAAU,GAW1B,GATAxY,EAASgV,EAAOjZ,MAA8B,KAArB,GAAM6sB,EAAQ4lB,GACvCxuC,EAASgV,EAAOhZ,MAA8B,KAArB,GAAM4sB,EAAQ6lB,GACvCzuC,EAASgV,EAAO/Y,MAA8B,KAArB,GAAM2sB,EAAQ8lB,GAEvC1uC,EAASgV,EAAOjZ,MAAQhD,EAAMI,KAAKoJ,MAAMvC,EAASgV,EAAOjZ,OAAQ,EAAG,KACpEiE,EAASgV,EAAOhZ,MAAQjD,EAAMI,KAAKoJ,MAAMvC,EAASgV,EAAOhZ,OAAQ,EAAG,KACpEgE,EAASgV,EAAO/Y,MAAQlD,EAAMI,KAAKoJ,MAAMvC,EAASgV,EAAO/Y,OAAQ,EAAG,KAGhEya,GAAY,EAAG,CACjB,IAAK,IAAIhX,EAAI,EAAGA,EAAI,EAAGA,IACrBM,EAASgV,EAAO,MAAM,EAAItV,MAAQ+tC,EAAUkB,YAAkB,EAANn2B,EAAU9Y,GAClEM,EAASgV,EAAO,MAAM,EAAItV,MAAQ+tC,EAAUmB,YAAkB,EAANp2B,EAAU9Y,GAClEM,EAASgV,EAAO,MAAM,EAAItV,MAAQ+tC,EAAUoB,YAAkB,EAANr2B,EAAU9Y,GAIpE,GAAIgX,GAAY,EACd,IAAK,IAAIhX,EAAI,EAAGA,EAAI,EAAGA,IACrBM,EAASgV,EAAO,MAAM,EAAItV,MACxB+tC,EAAUqB,YAAkB,EAANt2B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAUsB,YAAkB,EAANv2B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAUuB,YAAkB,EAANx2B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAUwB,YAAkB,EAANz2B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAUyB,YAAkB,EAAN12B,EAAU9Y,GAKtC,GAAIgX,GAAY,EACd,IAAK,IAAIhX,EAAI,EAAGA,EAAI,EAAGA,IACrBM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU0B,YAAkB,EAAN32B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU2B,YAAkB,EAAN52B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU4B,YAAkB,EAAN72B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU6B,YAAkB,EAAN92B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU8B,YAAkB,EAAN/2B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAU+B,YAAkB,EAANh3B,EAAU9Y,GAClCM,EAASgV,EAAO,MAAM,GAAKtV,MACzB+tC,EAAUgC,YAAkB,EAANj3B,EAAU9Y,EAGvC,CAED,OAAOM,CACb,CACG,CAlHiC,GAoHlC,6BAAAwgB,CAA8BlhB,EAAYkuC,EAAcC,GACtD,OAAOj5C,KAAK+4C,gBAAgBjuC,EAAYkuC,EAAcC,EACvD,EC1IH,SAASpf,GAASxG,EAAW9b,EAAe,GAC1C,OAAOlI,EAAYyS,oCACjB,CAACuR,GACD9b,EACA,EACA,IAAItK,EAAM+F,QAEd,CAuDO,MAAMkoC,GAKX,WAAAv7C,CAAYw7C,GACVn7C,KAAKm7C,OAASA,CACf,CACD,iBAAMnhB,CAAYohB,EAAM,gDACtB,IACE,MAAMC,QAAar7C,KAAKs7C,UAAUF,GAC5BG,EA5DZ,SAAsBF,EAAMG,GAC1B,MAAMC,GALYL,EAKSI,GAJhBE,UAAU,EAAGN,EAAIO,YAAY,KAAO,GADjD,IAAoBP,EAOlB,IACE,MAAMQ,EAAaP,EAAKQ,OAAO,GAAGC,WAAW,GAAGF,WAC1CvH,EACJgH,EAAKQ,OAAO,GAAGC,WAAW,GAAGzH,WAC1B0H,qCAAqCH,WAEpCI,EAAmB,CACvB7C,SAAUyC,EAAWzC,SACrB5sC,QAAS8nC,EAAW9nC,QACpB0G,MAAOohC,EAAWphC,MAClBC,SAAUmhC,EAAWnhC,SAErB6mC,UAAW1F,EAAW0F,UAEtBI,YAAa9F,EAAW4H,oBACxB7B,YAAa/F,EAAW6H,oBACxB7B,YAAahG,EAAW8H,oBAExB7B,YAAajG,EAAW+H,oBACxB7B,YAAalG,EAAWgI,oBACxB7B,YAAanG,EAAWiI,oBACxB7B,YAAapG,EAAWkI,oBACxB7B,YAAarG,EAAWmI,oBAExB7B,YAAatG,EAAWoI,oBACxB7B,YAAavG,EAAWqI,oBACxB7B,YAAaxG,EAAWsI,oBACxB7B,YAAazG,EAAWuI,oBACxB7B,YAAa1G,EAAWwI,oBACxB7B,YAAa3G,EAAWyI,oBACxB7B,YAAa5G,EAAW0I,qBAG1B,OAAOC,OAAOC,YACZD,OAAOE,QAAQlB,GAAkBz4B,KAAI,EAAE45B,EAAK7xC,MAC1C,MAAM8xC,EACJ/B,EAAKgC,YAAYhC,EAAKiC,UAAUhyC,GAAOiyC,YAAY37C,OACrD,MAAO,CAACu7C,EAAK1B,EAAUJ,EAAKmC,QAAQJ,GAAaK,IAAI,IAG1D,CAAC,MAAOh9C,GAEP,OADA4oC,QAAQ5oC,MAAM,mCAAoCA,GAC3C,EACR,CACH,CAawBi9C,CAAarC,EAAMD,GAC/BpC,QAAqBh5C,KAAK29C,aAAapC,EAAW,CACtD,WACA,UACA,QACA,WACA,cAGF,IAAIqC,EAAmB,CAAC,cAAe,cAAe,eAElDC,EAAoB,CACtB,cACA,cACA,cACA,cACA,eAGEC,EAAmB,CACrB,cACA,cACA,cACA,cACA,cACA,cACA,eAGEC,EAAc,GACd/uB,EAAShvB,KAAKm7C,OAAOv1C,yBAErBopB,GAAU,GACZ+uB,EAAY15C,QAAQu5C,GAGlB5uB,GAAU,GACZ+uB,EAAY15C,QAAQw5C,GAGlB7uB,GAAU,GACZ+uB,EAAY15C,QAAQy5C,GAGtB,MAAM7E,QAAkBj5C,KAAK29C,aAAapC,EAAWwC,GAC/CjzC,EAAa9K,KAAKg+C,sBAAsB3C,GAE9C,OAAOr7C,KAAKi+C,mBAAmBnzC,EAAYkuC,EAAcC,EAC1D,CAAC,MAAOx4C,GAEP,OADA4oC,QAAQ5oC,MAAM,+BAAgCA,GACvC,IACR,CACF,CAED,KAAAyB,CAAMk5C,GACJ,OAAOp7C,KAAKm7C,OAAOj5C,MAAMk5C,EAC1B,CAED,eAAME,CAAUF,GACd,IACE,MAAM8C,QAAiBl+C,KAAKkC,MAAMk5C,GAClC,aAAa8C,EAASC,MACvB,CAAC,MAAO19C,GAEP,OADA4oC,QAAQ5oC,MAAM,uBAAwBA,GAC/B,IACR,CACF,CAED,kBAAMk9C,CAAapC,EAAW6C,GAU5B,IACE,MAAMC,EAAiBD,EAAY76B,KAAI7gB,MAAO6jB,IAC5C,MAAM23B,QAAiBl+C,KAAKkC,MAAMq5C,EAAUh1B,IACtC3kB,QAAes8C,EAASl6C,cAG9B,MAAO,CAAEuiB,CAACA,GAAO,IAAI9kB,aAAaG,GAAS,IAGvCuO,QAAmBjQ,QAAQo+C,IAAID,GACrC,OAAOrB,OAAOuB,OAAO,MAAOpuC,EAC7B,CAAC,MAAO1P,GAEP,OADA4oC,QAAQ5oC,MAAM,0BAA2BA,GAClC,EACR,CACF,CAED,qBAAAu9C,CAAsB3C,GACpB,IACE,OAAOA,EAAKiC,UAAUjC,EAAKQ,OAAO,GAAGC,WAAW,GAAGF,WAAWzC,UAC3D5xB,KACJ,CAAC,MAAO9mB,GAEP,OADA4oC,QAAQ5oC,MAAM,iCAAkCA,GACzC,CACR,CACF,CAED,wBAAMw9C,CAAmBnzC,EAAYkuC,EAAcC,EAAY,IAC7D,OAAO3zC,GAAe,IACpB,IAAIwzC,GACF94C,KAAKm7C,OAAOv1C,0BACZomB,8BAA8BlhB,EAAYkuC,EAAcC,KAC1Dr4C,KAAKi5B,GACR,EC3LH,MAAM2kB,GAAc,IAAIvxC,EAAM+F,QAAQ,EAAG,EAAG,GACtCyrC,GAAW,IAAIxxC,EAAM+F,QAAQ,EAAG,EAAG,GACnC0rC,GAAiB,IAAIzxC,EAAM+F,QAAQ,EAAG,EAAG,GAExC,MAAMgvB,GACX,WAAAriC,CAAY8pC,EAAS,IAAIx8B,EAAM+F,QAAW02B,EAAY,IAAIz8B,EAAM+F,SAC9DhT,KAAKypC,OAAS,IAAIx8B,EAAM+F,QACxBhT,KAAK0pC,UAAY,IAAIz8B,EAAM+F,QAC3BhT,KAAK2+C,cAAclV,EAAQC,EAC5B,CAED,aAAAiV,CAAclV,EAAQC,GACpB1pC,KAAKypC,OAAO71B,KAAK61B,GACjBzpC,KAAK0pC,UAAU91B,KAAK81B,GAAWxzB,WAChC,CAED,gBAAA0oC,CAAiBC,EAAKnmB,EAAOomB,GAC3B,QAAOpmB,EAAMhtB,EAAImzC,EAAIp6C,IAAIiH,EAAIozC,GAC3BpmB,EAAMhtB,EAAImzC,EAAIn6C,IAAIgH,EAAIozC,GACtBpmB,EAAM/sB,EAAIkzC,EAAIp6C,IAAIkH,EAAImzC,GACtBpmB,EAAM/sB,EAAIkzC,EAAIn6C,IAAIiH,EAAImzC,GACtBpmB,EAAM9sB,EAAIizC,EAAIp6C,IAAImH,EAAIkzC,GACtBpmB,EAAM9sB,EAAIizC,EAAIn6C,IAAIkH,EAAIkzC,EAGzB,CAEDC,aAAe,WACb,MAAMC,EAAyB,IAAI/xC,EAAM+F,QACnCisC,EAA8B,GAC9BC,EAAc,GACdC,EAAiB,GAEvB,OAAO,SAASN,EAAKO,GAQnB,GAPAF,EAAY,GAAKl/C,KAAKypC,OAAO/9B,EAC7BwzC,EAAY,GAAKl/C,KAAKypC,OAAO99B,EAC7BuzC,EAAY,GAAKl/C,KAAKypC,OAAO79B,EAC7BuzC,EAAe,GAAKn/C,KAAK0pC,UAAUh+B,EACnCyzC,EAAe,GAAKn/C,KAAK0pC,UAAU/9B,EACnCwzC,EAAe,GAAKn/C,KAAK0pC,UAAU99B,EAE/B5L,KAAK4+C,iBAAiBC,EAAK7+C,KAAKypC,OAAQ,MAM1C,OALI2V,IACFA,EAAO3V,OAAO71B,KAAK5T,KAAKypC,QACxB2V,EAAOC,OAAO5rC,IAAI,EAAG,EAAG,GACxB2rC,EAAO1T,UAAY,IAEd,EAGT,IAAK,IAAIxgC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,GAAyB,GAArBi0C,EAAej0C,GAAW,SAE9B,MAAMo0C,EACC,GAALp0C,EAASszC,GAAmB,GAALtzC,EAASuzC,GAAWC,GACvCa,EAAaJ,EAAej0C,GAAK,EAAI2zC,EAAIn6C,IAAMm6C,EAAIp6C,IACzD,IAAI+6C,GAAc76C,KAAK86C,KAAKN,EAAej0C,IAC3C+zC,EAA4B,GACrB,GAAL/zC,EAASq0C,EAAW7zC,EAAS,GAALR,EAASq0C,EAAW5zC,EAAI4zC,EAAW3zC,EAC7D,IAAI8zC,EAAST,EAA4B,GAAKC,EAAYh0C,GAE1D,GAAIw0C,EAASF,EAAa,EAAG,CAC3B,MAAMG,GAAQz0C,EAAI,GAAK,EACjB00C,GAAQ10C,EAAI,GAAK,EAYvB,GAXA+zC,EAA4B,GACzBE,EAAeQ,GAAQR,EAAej0C,GAAMw0C,EAC7CR,EAAYS,GACdV,EAA4B,GACzBE,EAAeS,GAAQT,EAAej0C,GAAMw0C,EAC7CR,EAAYU,GACdZ,EAAuBvrC,IACrBwrC,EAA4B/zC,GAC5B+zC,EAA4BW,GAC5BX,EAA4BU,IAE1B3/C,KAAK4+C,iBAAiBC,EAAKG,EAAwB,MAQrD,OAPII,IACFA,EAAO3V,OAAO71B,KAAKorC,GACnBI,EAAOC,OAAOzrC,KAAK0rC,GAAW7W,eAAe+W,GAC7CJ,EAAO1T,SAAWsT,EACfx9B,IAAIxhB,KAAKypC,QACTtlC,WAEE,CAEV,CACF,CAED,OAAO,CACb,CACG,CA/Dc,GAiEf07C,gBAAkB,WAChB,MAAMC,EAAoB,IAAI7yC,EAAM+F,QAEpC,OAAO,SAAS0B,EAAQ4zB,EAAQ8W,GAC9BU,EAAkBlsC,KAAKc,GAAQ8M,IAAIxhB,KAAKypC,QACxC,MAAMsW,EAAoBD,EAAkBnW,IAAI3pC,KAAK0pC,WAC/CsW,EAAsBD,EAAoBA,EAE1CE,EADmBH,EAAkBnW,IAAImW,GACbE,EAC5BE,EAAW5X,EAASA,EAE1B,GAAI2X,EAASC,EAAU,OAAO,EAE9B,MAAMC,EAAMx7C,KAAKwmB,KAAK+0B,EAAWD,GAC3BG,EAAKL,EAAoBI,EACzBE,EAAKN,EAAoBI,EAE/B,GAAIE,EAAK,EAAG,OAAO,EACnB,IAAIr6B,EAAIo6B,EAAK,EAAIC,EAAKD,EAOtB,OALIhB,IACFA,EAAO3V,OAAO71B,KAAK5T,KAAKypC,QAAQvB,gBAAgBloC,KAAK0pC,UAAW1jB,GAChEo5B,EAAOC,OAAOzrC,KAAKwrC,EAAO3V,QAAQjoB,IAAI9M,GAAQwB,YAC9CkpC,EAAO1T,SAAW1lB,IAEb,CACb,CACG,CA3BiB,GC5Fb,MAAMs6B,GACX,WAAA3gD,GACEK,KAAKypC,OAAS,IAAIx8B,EAAM+F,QACxBhT,KAAKq/C,OAAS,IAAIpyC,EAAM+F,QACxBhT,KAAK0rC,SAAW,EAChB1rC,KAAKi5B,WAAa,CACnB,CAED,GAAAxlB,CAAIg2B,EAAQ4V,EAAQ3T,EAAUzS,GAC5Bj5B,KAAKypC,OAAO71B,KAAK61B,GACjBzpC,KAAKq/C,OAAOzrC,KAAKyrC,GACjBr/C,KAAK0rC,SAAWA,EAChB1rC,KAAKi5B,WAAaA,CACnB,CAED,KAAAsM,GACE,MAAMgb,EAAW,IAAID,GAKrB,OAJAC,EAAS9W,OAAO71B,KAAK5T,KAAKypC,QAC1B8W,EAASlB,OAAOzrC,KAAK5T,KAAKq/C,QAC1BkB,EAAS7U,SAAW1rC,KAAK0rC,SACzB6U,EAAStnB,WAAaj5B,KAAKi5B,WACpBsnB,CACR,ECnBI,MAAMC,GACX,WAAA7gD,CAAY8pC,EAAQC,EAAW+W,GAAmC,GAChEzgD,KAAK0gD,IAAM,IAAI1e,GAAIyH,EAAQC,GAC3B1pC,KAAKygD,iCAAmCA,CACzC,CAEDE,+BAAiC,WAC/B,MAAMC,EAAY,IAAI3zC,EAAM09B,QAE5B,OAAO,SAAS6K,EAAQqL,EAAgBC,GAKtC,GAJAF,EAAUl1C,EAAKm1C,EAAen1C,EAAIo1C,EAAiBp1C,EAAK,EAAM,EAC9Dk1C,EAAUj1C,GACNm1C,EAAiBn1C,EAAIk1C,EAAel1C,GAAKm1C,EAAiBn1C,EAAK,EACjE,EACE6pC,EAAO5M,oBACT5oC,KAAK0gD,IAAIjX,OAAOsX,sBAAsBvL,EAAOU,aAC7Cl2C,KAAK0gD,IAAIhX,UACNj2B,IAAImtC,EAAUl1C,EAAGk1C,EAAUj1C,EAAG,IAC9Bw9B,UAAUqM,GACVh0B,IAAIxhB,KAAK0gD,IAAIjX,QACbvzB,YACHlW,KAAKw1C,OAASA,MACT,KAAIA,EAAOnN,qBAWhB,MAAM,IAAIhnC,MACR,0EAXFrB,KAAK0gD,IAAIjX,OACNh2B,IACCmtC,EAAUl1C,EACVk1C,EAAUj1C,GACT6pC,EAAOwL,KAAOxL,EAAOyL,MAAQzL,EAAOwL,KAAOxL,EAAOyL,MAEpD9X,UAAUqM,GACbx1C,KAAK0gD,IAAIhX,UAAUj2B,IAAI,EAAG,GAAI,GAAG81B,mBAAmBiM,EAAOU,aAC3Dl2C,KAAKw1C,OAASA,CAKf,CACP,CACG,CAhCgC,GAkCjC0L,mBAAqB,WACnB,MAAMC,EAAU,IAAIl0C,EAAM2F,QACpBwuC,EAAY,IAAIn0C,EAAM2F,QACtByuC,EAAiB,IAAIp0C,EAAM2F,QAC3B0uC,EAAW,IAAItf,GACfuf,EAAY,IAAIt0C,EAAM+F,QAE5B,OAAO,SAASwuC,EAAWC,EAAU,IACnC,MAAMC,EAAYF,EAAUG,eAE5B,GAAKD,EAAL,CAEA,IAAK,IAAIngC,EAAI,EAAGA,EAAImgC,EAAUE,SAASz9C,OAAQod,IAAK,CAClD,MAAMsgC,EAAUH,EAAUE,SAASrgC,GAEnC6/B,EAAUxtC,KAAK4tC,EAAUtL,aACrBsL,EAAUM,cACZN,EAAUO,kBAAkBxgC,EAAG8/B,GAC/BD,EAAUvtC,SAASwtC,IAErBF,EAAQvtC,KAAKwtC,GAAW5Z,SAExB8Z,EAAS7X,OAAO71B,KAAK5T,KAAK0gD,IAAIjX,QAAQh3B,aAAa0uC,GACnDG,EAAS5X,UAAU91B,KAAK5T,KAAK0gD,IAAIjX,QAAQtB,IAAInoC,KAAK0gD,IAAIhX,WACtD4X,EAAS5X,UACNj3B,aAAa0uC,GACb3/B,IAAI8/B,EAAS7X,QACbvzB,YAEH,MAAM8rC,EAAoB,GACtBH,EAAQI,UACVjiD,KAAKkiD,uBACHZ,EACAI,EACAG,EAAQI,SACRD,GAIJA,EAAkBvvB,SAAS0vB,IACzBA,EAAI1Y,OAAOh3B,aAAa2uC,GACxBe,EAAI9C,OAAO5sC,aAAa2uC,GAAWlrC,YACnCisC,EAAIzW,SAAW6V,EACZ3tC,KAAKuuC,EAAI1Y,QACTjoB,IAAIxhB,KAAK0gD,IAAIjX,QACbtlC,QAAQ,IAGbs9C,EAAQp9C,QAAQ29C,EACjB,CAOD,OALAP,EAAQ5oB,MAAK,CAACzS,EAAG9Z,IACX8Z,EAAEslB,SAAWp/B,EAAEo/B,SAAiB,GACvB,IAGR+V,CA9CgB,CA+C7B,CACG,CA1DoB,GA4DrBS,uBAAyB,WACvB,MAAME,EAAY,IAAIn1C,EAAMyd,QACtB23B,EAAa,IAAIp1C,EAAM+F,QACvB+E,EAAY,IAAI9K,EAAM+F,QACtBgF,EAAe,IAAI/K,EAAMkG,WACzBmvC,EAAU,IAAIhC,GACdiC,EAAe,KAEf9Y,EAAS,IAAIx8B,EAAM+F,QAAQ,EAAG,EAAG,GACjCwvC,EAAqB,IAAIv1C,EAAM2F,QAC/BD,EAAc,IAAI1F,EAAM2F,QACxBC,EAAiB,IAAI5F,EAAM2F,QAC3B6vC,EAAgB,IAAIx1C,EAAM2F,QAC1B8vC,EAAkB,IAAIz1C,EAAM2F,QAC5B+vC,EAAU,IAAI3gB,GAEpB,OAAO,SAAS0e,EAAKgB,EAAWkB,EAAMnB,EAAU,IAC9C,GAAKf,EAAI3B,aAAa6D,EAAKC,aAA3B,CAGA,GAAID,EAAKjgD,MAAQigD,EAAKjgD,KAAKmgD,SAAWF,EAAKjgD,KAAKmgD,QAAQ3+C,OAAS,EAC/D,IAAK,IAAI+G,EAAI,EAAGA,EAAI03C,EAAKjgD,KAAKmgD,QAAQ3+C,OAAQ+G,IAAK,CACjD,MAAM63C,EAAmBH,EAAKjgD,KAAKmgD,QAAQ53C,GACrC83C,EACJtB,EAAUF,UAAUyB,sBAAsBF,GAE5C,GADmBrB,EAAUF,UAAU0B,SAASF,GAChC/N,UAEhByM,EAAUF,UAAUztC,cAAcgvC,EAAkBX,GACpDV,EAAUF,UAAUjwC,eAAewxC,EAAkBV,GACrDX,EAAUF,UAAU9uC,yBAClBqwC,EACAhrC,EACAC,KAIAD,EAAUrM,GAAK62C,GACfxqC,EAAUpM,GAAK42C,GACdb,EAAUF,UAAU2B,kBAAoBxK,GAAgBC,QACvD7gC,EAAUnM,GAAK22C,IAKnB,GAAKviD,KAAKygD,iCAeH,CACL9tC,EAAYe,UAAUqE,EAAUrM,EAAGqM,EAAUpM,EAAGoM,EAAUnM,GAC1DiH,EAAec,2BAA2BqE,GAC1C,MAAMorC,EAAyC,EAA1Bz+C,KAAK0+C,MAAMjB,EAAUntC,GAuB1C,GAtBAutC,EAAmB9uC,UACjB0vC,EACAA,EACAA,GAEFV,EACG9uC,KAAK4uC,GACL3uC,SAAShB,GACTgB,SAASlB,GACZ8vC,EAAc7uC,KAAK8uC,GAAiBlb,SACpCmb,EAAQlZ,OACL71B,KAAK8sC,EAAIjX,QACTjoB,IAAI6gC,GACJ5vC,aAAagwC,GAChBE,EAAQjZ,UACL91B,KAAK8sC,EAAIjX,QACTtB,IAAIuY,EAAIhX,WACRloB,IAAI6gC,GACPM,EAAQjZ,UACLj3B,aAAagwC,GACbjhC,IAAImhC,EAAQlZ,QACZvzB,YACCysC,EAAQ9C,gBAAgBpW,EAAQ,EAAK6Y,GAAU,CACjD,MAAM/B,EAAW+B,EAAQ/c,QACzBgb,EAAStnB,WAAa8pB,EACtBxC,EAAS9W,OAAOh3B,aAAaiwC,GAAiBva,IAAIka,GAClDZ,EAAQp9C,KAAKk8C,EACd,CACF,KA/C2C,CAC1C,IAAIjY,EAASvwB,EAAUrM,EAAIqM,EAAUpM,EACjClB,EAAiB,EAQrB,GANEi3C,EAAUF,UAAU2B,kBAAoBxK,GAAgBC,SAExDtQ,GAAUvwB,EAAUnM,EACpBnB,EAAiB,GAEnB69B,GAAkB79B,EACdi2C,EAAIb,gBAAgBwC,EAAY/Z,EAAQga,GAAU,CACpD,MAAM/B,EAAW+B,EAAQ/c,QACzBgb,EAAStnB,WAAa8pB,EACtBtB,EAAQp9C,KAAKk8C,EACd,CACb,CAiCS,CAEH,GAAIqC,EAAKx9C,UAAYw9C,EAAKx9C,SAASjB,OAAS,EAC1C,IAAK,IAAIkB,KAASu9C,EAAKx9C,SACrBpF,KAAKkiD,uBAAuBxB,EAAKgB,EAAWr8C,EAAOo8C,GAGvD,OAAOA,CAjFN,CAkFP,CACG,CAtGwB,GCtGpB,MAAM6B,GACX,4BAAOC,CACLzB,GAAc,EACd0B,GAAwB,EACxBC,EAA8B,EAC9BC,EAAa,IAEb,IAAIC,EAAqB,iiBAwLzB,GAxKIH,IACFG,GAAsB,4CACa92C,EAAU+2C,wDACT/2C,EAAU+2C,yBAI5C9B,IACF6B,GAAsB,+CACgB92C,EAAU+2C,yBAIlDD,GAAsB,aAChBD,k2BAoBwD72C,EAAU+2C,gFACV/2C,EAAU+2C,u8HA6FpEJ,IACFG,GAAsB,oVAWtBA,GADE7B,EACoB,yJAKA,mDAGxB6B,GAAsB,6lBAoBlBF,GAA+B,EAiKjC,OAhKAE,GAAsB,sEAKpBA,GADE7B,EACoB,6IAIA,uGAKxB6B,GAAsB,+KAOlBF,GAA+B,IACjCE,GAAsB,wOAUpBF,GAA+B,IACjCE,GAAsB,kVAapBF,GAA+B,IACjCE,GAAsB,ukCA+BpBF,GAA+B,IACjCE,GAAsB,4iDAoClBF,GAA+B,IACjCE,GAAsB,k4DAmC1BA,GAAsB,6IASfA,CAEV,CAED,4BAAOE,GACL,MAAO,4wBAeR,CAED,kBAAOC,CACLhC,GAAc,EACd0B,GAAwB,EACxBC,EAA8B,EAC9BM,EAAa,EACbC,GAAwB,GAExB,MAAMzQ,EAAW,CACf13B,YAAa,CACX+L,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM+F,SAEnBixC,eAAgB,CACdr8B,KAAM,IACNjkB,MAAO,GAETugD,iBAAkB,CAChBt8B,KAAM,IACNjkB,MAAO,GAETwgD,6BAA8B,CAC5Bv8B,KAAM,IACNjkB,MAAO,GAETygD,oBAAqB,CACnBx8B,KAAM,IACNjkB,MAAO,GAET0gD,YAAa,CACXz8B,KAAM,IACNjkB,MAAO,GAET2gD,gBAAiB,CACf18B,KAAM,IACNjkB,MAAO,GAET4gD,qBAAsB,CACpB38B,KAAM,IACNjkB,MAAO,MAET6gD,0BAA2B,CACzB58B,KAAM,IACNjkB,MAAO,MAET8gD,2BAA4B,CAC1B78B,KAAM,IACNjkB,MAAO,MAET+gD,2BAA4B,CAC1B98B,KAAM,IACNjkB,MAAO,MAETghD,2BAA4B,CAC1B/8B,KAAM,IACNjkB,MAAO,MAETihD,0CAA2C,CACzCh9B,KAAM,IACNjkB,MAAO,IAETkhD,0CAA2C,CACzCj9B,KAAM,IACNjkB,MAAO,IAETmhD,kBAAmB,CACjBl9B,KAAM,IACNjkB,MAAO,GAETohD,eAAgB,CACdn9B,KAAM,IACNjkB,MAAO,GAETqhD,MAAO,CACLp9B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,SAEnBsa,UAAW,CACTr9B,KAAM,IACNjkB,MAAO,GAETuhD,uBAAwB,CACtBt9B,KAAM,IACNjkB,MAAO,GAETsyC,SAAU,CACRruB,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,SAEnBwa,cAAe,CACbv9B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,SAEnBya,WAAY,CACVx9B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAMorC,OAEnBgN,yBAA0B,CACxBz9B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,QAAQ,KAAM,OAEjC/kC,yBAA0B,CACxBgiB,KAAM,IACNjkB,MAAO8/C,GAET6B,8BAA+B,CAC7B19B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,QAAQ,KAAM,OAEjC4a,2BAA4B,CAC1B39B,KAAM,IACNjkB,MAAO,GAET6hD,mCAAoC,CAClC59B,KAAM,IACNjkB,MAAO,GAETogD,WAAY,CACVn8B,KAAM,IACNjkB,MAAOogD,GAETC,sBAAuB,CACrBp8B,KAAM,IACNjkB,MAAOqgD,EAAwB,EAAI,GAErCyB,oBAAqB,CACnB79B,KAAM,IACNjkB,MAAO,MAET+hD,wBAAyB,CACvB99B,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,QAAQ,KAAM,OAEjCgb,WAAY,CACV/9B,KAAM,IACNjkB,MAAO,IAGX,IAAK,IAAIuH,EAAI,EAAGA,EAAI2B,EAAU+2C,UAAW14C,IACvCqoC,EAASqR,0CAA0CjhD,MAAMU,MACtDwI,EAAUE,uCAAyC,GAEtDwmC,EAASsR,0CAA0ClhD,MAAMU,KACvDwI,EAAUE,uCAAyC,GAIvD,GAAIy2C,EAAuB,CACzB,MAAMoC,EAAe,GACrB,IAAK,IAAI16C,EAAI,EAAGA,EAAI2B,EAAU+2C,UAAW14C,IACvC06C,EAAavhD,KAAK,GAEpBkvC,EAAuB,aAAI,CACzB3rB,KAAM,IACNjkB,MAAOiiD,GAGT,MAAMC,EAAkB,GACxB,IAAK,IAAI36C,EAAI,EAAGA,EAAI2B,EAAU+2C,UAAW14C,IACvC26C,EAAgBxhD,KAAK,GAEvBkvC,EAA0B,gBAAI,CAC5B3rB,KAAM,IACNjkB,MAAOkiD,EAEV,CAED,GAAI/D,EAAa,CACf,MAAMgE,EAAoB,GAC1B,IAAK,IAAI56C,EAAI,EAAGA,EAAI2B,EAAU+2C,UAAW14C,IACvC46C,EAAkBzhD,KAAK,IAAI4I,EAAM2F,SAEnC2gC,EAAqB,WAAI,CACvB3rB,KAAM,OACNjkB,MAAOmiD,EAEV,CAED,OAAOvS,CACR,ECxiBI,MAAMwS,GAeX,YAAOC,CACLlE,GAAc,EACd0B,GAAwB,EACxByC,GAAc,EACdC,EAA0B,KAC1BnC,EAAa,EACbC,GAAwB,EACxBP,EAA8B,GAkB9B,IAAIE,EAAqBL,GAAcC,sBACrCzB,EACA0B,EACAC,EAnBuB,qlBAsBzBE,GAAsBoC,GAAgBI,4BACpCF,EACAzC,EACA0C,GAEF,MAAME,EAAuBL,GAAgBM,sBAEvC9S,EAAW+P,GAAcQ,YAC7BhC,EACA0B,EACAC,EACAM,EACAC,GAGFzQ,EAAiC,uBAAI,CACnC3rB,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,QAAQ,KAAM,OAEjC4I,EAA6B,mBAAI,CAC/B3rB,KAAM,IACNjkB,MAAO,MAET4vC,EAAsC,4BAAI,CACxC3rB,KAAM,IACNjkB,MAAO,MAET4vC,EAAkC,wBAAI,CACpC3rB,KAAM,IACNjkB,MAAO,GAGT4vC,EAAmB,SAAI,CACrB5vC,OAAO,GAgBT,OAbiB,IAAIsJ,EAAMmmC,eAAe,CACxCkT,YAAar5C,EAAMs5C,MACnBhT,SAAUA,EACVF,aAAcsQ,EACdrQ,eAAgB8S,EAChBxS,aAAa,EACb4S,UAAW,EACX3S,SAAU5mC,EAAMw5C,eAChB9S,WAAW,EACXD,YAAY,EACZmD,KAAM5pC,EAAM6pC,YAIf,CAED,kCAAOqP,CACLF,EACAzC,EACA0C,GAEA,IAAIvC,EAAqB,0kGAgJzB,OAvFEA,GADEsC,EACoB,uYASA,6FAMxBtC,GAAsB,8uFA0CmEngD,SAC/E0iD,sGAE+E1iD,SAC/E0iD,uBAIN1C,IACFG,GAAsB,sEAKxBA,GAAsB,wdAatBA,GAAsBL,GAAcO,wBACpCF,GAAsB,IAEfA,CACR,CAED,0BAAO0C,GACL,IAAID,EAAuB,qaAoD3B,OApCAA,GAAwB,6+CAAxBA,84DAqCD,EChTI,MAAMM,GAYX,YAAOV,CACLlE,GAAc,EACd0B,GAAwB,EACxBO,EAAa,EACbC,GAAwB,EACxBP,EAA8B,GAU9B,IAAIE,EAAqBL,GAAcC,sBACrCzB,EACA0B,EACAC,EAXuB,0OAczBE,GAAsB+C,GAAgBP,8BACtC,MAAMC,EAAuBM,GAAgBL,sBAEvC9S,EAAW+P,GAAcQ,YAC7BhC,EACA0B,EACAC,EACAM,EACAC,GAGFzQ,EAAgC,sBAAI,CAClC3rB,KAAM,IACNjkB,MAAO,MAET4vC,EAAoC,0BAAI,CACtC3rB,KAAM,KACNjkB,MAAO,IAAIsJ,EAAM09B,QAAQ,KAAM,OAejC,OAZiB,IAAI19B,EAAMmmC,eAAe,CACxCG,SAAUA,EACVF,aAAcsQ,EACdrQ,eAAgB8S,EAChBxS,aAAa,EACb4S,UAAW,EACX3S,SAAU5mC,EAAMw5C,eAChB9S,WAAW,EACXD,YAAY,EACZmD,KAAM5pC,EAAM6pC,YAIf,CAED,kCAAOqP,GAiCL,IAAIxC,EAAqB,giEAiEzB,MAAMgD,EAA0B,i7CAkFhC,OA1CEhD,GAAsB,umCA0BNgD,udAalBhD,GAAsBL,GAAcO,wBACpCF,GAAsB,IAEfA,CACR,CAED,0BAAO0C,GAqGL,MAzD2B,onEA0D5B,EClWI,MAAMO,GAOX,YAAOZ,CAAMx1C,GACX,MAAMq2C,EAAe,IAAI55C,EAAM65C,eAC/BD,EAAaE,SAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAGtC,MAAMC,EAAiB,IAAIvlD,aAAa,IAClCy3C,EAAY,IAAIjsC,EAAMg6C,gBAAgBD,EAAgB,GAC5DH,EAAaK,aAAa,WAAYhO,GACtCA,EAAUiO,OAAO,GAAI,GAAM,EAAK,GAChCjO,EAAUiO,OAAO,GAAI,EAAK,EAAK,GAC/BjO,EAAUiO,OAAO,EAAG,EAAK,EAAK,GAC9BjO,EAAUiO,OAAO,EAAG,GAAM,EAAK,GAC/BjO,EAAUlJ,aAAc,EAExB,MAAM/qC,GAAW,IAAIgI,EAAMm6C,yBAA0BxzC,KAAKizC,GAGpDQ,EAAkB,IAAI9rC,YAAY/K,GAClC82C,EAAe,IAAIr6C,EAAMs6C,yBAC7BF,EACA,GACA,GAOF,OALAC,EAAaE,SAASv6C,EAAMw6C,kBAC5BxiD,EAASiiD,aAAa,aAAcI,GAEpCriD,EAASyiD,cAAgB,EAElBziD,CACR,ECjCI,MAAM0iD,WAAmB16C,EAAM0jC,SACpC,WAAAhxC,CACEygC,EACA7V,EAAW,IAAItd,EAAM+F,QACrB+B,EAAa,IAAI9H,EAAMkG,WACvBF,EAAQ,IAAIhG,EAAM+F,QAAQ,EAAG,EAAG,GAChCuE,EAAe,EACfhL,EAAU,EACV0oC,GAAU,GAEV1zC,QACAvB,KAAKogC,YAAcA,EACnBpgC,KAAKuqB,SAAS3W,KAAK2W,GACnBvqB,KAAK+U,WAAWnB,KAAKmB,GACrB/U,KAAKiT,MAAMW,KAAKX,GAChBjT,KAAK0R,UAAY,IAAIzE,EAAM2F,QAC3B5S,KAAKuX,aAAeA,EACpBvX,KAAKuM,QAAUA,EACfvM,KAAKi1C,QAAUA,CAChB,CAED,iBAAA2S,CAAkBC,GAChB7nD,KAAKuqB,SAAS3W,KAAKi0C,EAAWt9B,UAC9BvqB,KAAK+U,WAAWnB,KAAKi0C,EAAW9yC,YAChC/U,KAAKiT,MAAMW,KAAKi0C,EAAW50C,OAC3BjT,KAAK0R,UAAUkC,KAAKi0C,EAAWn2C,UAChC,CAED,eAAAo2C,CAAgBhG,GACVA,GACE9hD,KAAK+nD,uBAAuB/nD,KAAKgoD,mBAAkB,GAAM,GAC7DhoD,KAAK0R,UAAUkC,KAAK5T,KAAKk2C,eAErBl2C,KAAKsxC,kBAAkBtxC,KAAKioD,eAChCjoD,KAAK0R,UAAUkC,KAAK5T,KAAKwpC,QAE5B,ECtCH,MAAM0e,GACJxoD,aAAe,EAEf,WAAAC,CAAY8E,EAAKC,EAAKyjD,EAAOznD,GAC3BV,KAAKyE,KAAM,IAAIwI,EAAM+F,SAAUY,KAAKnP,GACpCzE,KAAK0E,KAAM,IAAIuI,EAAM+F,SAAUY,KAAKlP,GACpC1E,KAAK6iD,YAAc,IAAI51C,EAAMm7C,KAAKpoD,KAAKyE,IAAKzE,KAAK0E,KACjD1E,KAAK0U,QAAS,IAAIzH,EAAM+F,SACrBY,KAAK5T,KAAK0E,KACV8c,IAAIxhB,KAAKyE,KACTgkC,eAAe,IACfN,IAAInoC,KAAKyE,KACZzE,KAAKmoD,MAAQA,EACbnoD,KAAKoF,SAAW,GAChBpF,KAAK2C,KAAO,KACZ3C,KAAKU,GAAKA,GAAMwnD,GAAcvnD,OAC/B,EAGH,MAAM0nD,GACJ,WAAA1oD,CAAY2oD,EAAUC,GACpBvoD,KAAKsoD,SAAWA,EAChBtoD,KAAKuoD,kBAAoBA,EACzBvoD,KAAKwoD,gBAAkB,IAAIv7C,EAAM+F,QACjChT,KAAKyoD,SAAW,IAAIx7C,EAAM+F,QAC1BhT,KAAK0oD,SAAW,IAAIz7C,EAAM+F,QAC1BhT,KAAKiiD,SAAW,KAChBjiD,KAAK2oD,iBAAmB,GACxB3oD,KAAKwhD,UAAY,IAClB,CAED,+BAAOoH,CAAyBC,GAC9B,MAAMC,GAAY,IAAI77C,EAAM+F,SAAU+Q,UAAU8kC,EAAkBpkD,KAC5DskD,GAAY,IAAI97C,EAAM+F,SAAU+Q,UAAU8kC,EAAkBnkD,KAC5DskD,EAAgB,IAAId,GACxBY,EACAC,EACAF,EAAkBV,MAClBU,EAAkBnoD,IAEpB,GAAImoD,EAAkBlmD,KAAKmgD,QAAS,CAClCkG,EAAcrmD,KAAO,CACnBmgD,QAAS,IAEX,IAAK,IAAIx3C,KAASu9C,EAAkBlmD,KAAKmgD,QACvCkG,EAAcrmD,KAAKmgD,QAAQz+C,KAAKiH,EAEnC,CACD,GAAIu9C,EAAkBzjD,SACpB,IAAK,IAAIC,KAASwjD,EAAkBzjD,SAClC4jD,EAAc5jD,SAASf,KACrBgkD,GAAaO,yBAAyBvjD,IAI5C,OAAO2jD,CACR,CAED,2BAAOC,CAAqBC,EAAe1H,GACzC,MAAM2H,EAAmB,IAAId,GAC3Ba,EAAcZ,SACdY,EAAcX,mBAEhBY,EAAiBV,UAAW,IAAIx7C,EAAM+F,SAAU+Q,UAC9CmlC,EAAcT,UAEhBU,EAAiBT,UAAW,IAAIz7C,EAAM+F,SAAU+Q,UAC9CmlC,EAAcR,UAGhBS,EAAiB3H,UAAYA,EAC7B2H,EAAiBlH,SAAWoG,GAAaO,yBACvCM,EAAcjH,UAGhB,MAAMmH,EAAsB,CAACxG,EAAMyG,KACJ,IAAzBzG,EAAKx9C,SAASjB,QAAcklD,EAAUzG,GAC1C,IAAK,IAAIv9C,KAASu9C,EAAKx9C,SACrBgkD,EAAoB/jD,EAAOgkD,EAC5B,EAUH,OAPAF,EAAiBR,iBAAmB,GACpCS,EAAoBD,EAAiBlH,UAAWW,IAC1CA,EAAKjgD,MAAQigD,EAAKjgD,KAAKmgD,SAAWF,EAAKjgD,KAAKmgD,QAAQ3+C,OAAS,GAC/DglD,EAAiBR,iBAAiBtkD,KAAKu+C,EACxC,IAGIuG,CACR,EAGH,SAASG,GAAsBC,GAC7B,IAAIC,EAA2B,EAE/B,MAAMC,EACJ,WAAA9pD,CAAY8E,EAAKC,GACf1E,KAAKyE,IAAM,CAACA,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAChCzE,KAAK0E,IAAM,CAACA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GACjC,CAED,aAAAglD,CAAchxB,GACZ,OACEA,EAAM,IAAM14B,KAAKyE,IAAI,IACrBi0B,EAAM,IAAM14B,KAAK0E,IAAI,IACrBg0B,EAAM,IAAM14B,KAAKyE,IAAI,IACrBi0B,EAAM,IAAM14B,KAAK0E,IAAI,IACrBg0B,EAAM,IAAM14B,KAAKyE,IAAI,IACrBi0B,EAAM,IAAM14B,KAAK0E,IAAI,EAExB,EAGH,MAAMilD,EACJ,WAAAhqD,CAAY2oD,EAAUC,GACpBvoD,KAAKsoD,SAAWA,EAChBtoD,KAAKuoD,kBAAoBA,EACzBvoD,KAAKwoD,gBAAkB,GACvBxoD,KAAKyoD,SAAW,GAChBzoD,KAAK0oD,SAAW,GAChB1oD,KAAKiiD,SAAW,KAChBjiD,KAAK4pD,aAAe,GACpB5pD,KAAK2oD,iBAAmB,GACxB3oD,KAAKwhD,UAAY,KACjBxhD,KAAK6pD,UAAW,CACjB,EAGH,MAAMC,EACJ,WAAAnqD,CAAY8E,EAAKC,EAAKyjD,EAAOznD,GAC3BV,KAAKyE,IAAM,CAACA,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAChCzE,KAAK0E,IAAM,CAACA,EAAI,GAAIA,EAAI,GAAIA,EAAI,IAChC1E,KAAK0U,OAAS,CACQ,IAAnBhQ,EAAI,GAAKD,EAAI,IAAYA,EAAI,GACV,IAAnBC,EAAI,GAAKD,EAAI,IAAYA,EAAI,GACV,IAAnBC,EAAI,GAAKD,EAAI,IAAYA,EAAI,IAEhCzE,KAAKmoD,MAAQA,EACbnoD,KAAKoF,SAAW,GAChBpF,KAAK2C,KAAO,KACZ3C,KAAKU,GAAKA,GAAM8oD,GACjB,EAGHO,qBAAuB,SAASC,EAAMpH,EAAMqH,EAAeC,GACzD,MAAMp/C,EAAa83C,EAAKjgD,KAAKmgD,QAAQ3+C,OAErC,GAAI2G,EAAak/C,EAAKzB,mBAAqB3F,EAAKuF,MAAQ6B,EAAK1B,SAAU,CACrE,MAAM6B,EAAa,GACnB,IAAK,IAAIj/C,EAAI,EAAGA,EAAI03C,EAAKjgD,KAAKmgD,QAAQ3+C,OAAQ+G,IACvC8+C,EAAKJ,aAAahH,EAAKjgD,KAAKmgD,QAAQ53C,MACvCi/C,EAAW9lD,KAAKu+C,EAAKjgD,KAAKmgD,QAAQ53C,IAClC8+C,EAAKJ,aAAahH,EAAKjgD,KAAKmgD,QAAQ53C,KAAM,GAS9C,OANA03C,EAAKjgD,KAAKmgD,QAAUqH,EACpBvH,EAAKjgD,KAAKmgD,QAAQjqB,MAAK,CAACzS,EAAG9Z,IACrB8Z,EAAI9Z,EAAU,GACL,SAEf09C,EAAKrB,iBAAiBtkD,KAAKu+C,EAE5B,CAED,MAAMwH,EAAiB,CACrBxH,EAAKl+C,IAAI,GAAKk+C,EAAKn+C,IAAI,GACvBm+C,EAAKl+C,IAAI,GAAKk+C,EAAKn+C,IAAI,GACvBm+C,EAAKl+C,IAAI,GAAKk+C,EAAKn+C,IAAI,IAEnB4lD,EAAiB,CACD,GAApBD,EAAe,GACK,GAApBA,EAAe,GACK,GAApBA,EAAe,IAEXE,EAAa,CACjB1H,EAAKn+C,IAAI,GAAK4lD,EAAe,GAC7BzH,EAAKn+C,IAAI,GAAK4lD,EAAe,GAC7BzH,EAAKn+C,IAAI,GAAK4lD,EAAe,IAGzBE,EAAiB,CAErB,IAAId,EACF,CACEa,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GACXA,EAAW,GAAKD,EAAe,IAEjC,CAACC,EAAW,GAAIA,EAAW,GAAKD,EAAe,GAAIC,EAAW,KAEhE,IAAIb,EACF,CAACa,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAKD,EAAe,IAC9D,CACEC,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,GAC/BC,EAAW,KAGf,IAAIb,EACF,CAACa,EAAW,GAAIA,EAAW,GAAIA,EAAW,IAC1C,CACEA,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,KAGnC,IAAIZ,EACF,CAACa,EAAW,GAAKD,EAAe,GAAIC,EAAW,GAAIA,EAAW,IAC9D,CACEA,EAAW,GACXA,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,KAKnC,IAAIZ,EACF,CACEa,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,IAEjC,CAACC,EAAW,GAAIA,EAAW,GAAIA,EAAW,KAE5C,IAAIb,EACF,CACEa,EAAW,GACXA,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,IAEjC,CAACC,EAAW,GAAKD,EAAe,GAAIC,EAAW,GAAIA,EAAW,KAEhE,IAAIb,EACF,CAACa,EAAW,GAAIA,EAAW,GAAKD,EAAe,GAAIC,EAAW,IAC9D,CACEA,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GACXA,EAAW,GAAKD,EAAe,KAGnC,IAAIZ,EACF,CACEa,EAAW,GAAKD,EAAe,GAC/BC,EAAW,GAAKD,EAAe,GAC/BC,EAAW,IAEb,CAACA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAKD,EAAe,MAI5DG,EAAc,GACdC,EAAc,GACpB,IAAK,IAAIv/C,EAAI,EAAGA,EAAIq/C,EAAepmD,OAAQ+G,IACzCs/C,EAAYt/C,GAAK,EACjBu/C,EAAYv/C,GAAK,GAGnB,MAAMwJ,EAAS,CAAC,EAAG,EAAG,GACtB,IAAK,IAAIxJ,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,MAAM63C,EAAmBH,EAAKjgD,KAAKmgD,QAAQ53C,GACrC8V,EAAaipC,EAAclH,GACjCruC,EAAO,GAAKw1C,EAAalpC,GACzBtM,EAAO,GAAKw1C,EAAalpC,EAAa,GACtCtM,EAAO,GAAKw1C,EAAalpC,EAAa,GACtC,IAAK,IAAIvC,EAAI,EAAGA,EAAI8rC,EAAepmD,OAAQsa,IACrC8rC,EAAe9rC,GAAGirC,cAAch1C,KAClC81C,EAAY/rC,KACZgsC,EAAYhsC,GAAGpa,KAAK0+C,GAGzB,CAED,IAAK,IAAI73C,EAAI,EAAGA,EAAIq/C,EAAepmD,OAAQ+G,IAAK,CAC9C,MAAMw/C,EAAY,IAAIZ,EACpBS,EAAer/C,GAAGzG,IAClB8lD,EAAer/C,GAAGxG,IAClBk+C,EAAKuF,MAAQ,GAEfuC,EAAU/nD,KAAO,CACfmgD,QAAS2H,EAAYv/C,IAEvB03C,EAAKx9C,SAASf,KAAKqmD,EACpB,CAED9H,EAAKjgD,KAAO,GACZ,IAAK,IAAI0C,KAASu9C,EAAKx9C,SACrB2kD,qBAAqBC,EAAM3kD,EAAO4kD,EAAeC,EAGvD,EAEE,MAAMS,EAAe,CAACT,EAAc5B,EAAUC,KAC5C,MAAME,EAAW,CAAC,EAAG,EAAG,GAClBC,EAAW,CAAC,EAAG,EAAG,GAClB5F,EAAU,GACV8H,EAAcjmD,KAAKoJ,MAAMm8C,EAAa/lD,OAAS,GACrD,IAAK,IAAI+G,EAAI,EAAGA,EAAI0/C,EAAa1/C,IAAK,CACpC,MAAMqS,EAAW,EAAJrS,EACPQ,EAAIw+C,EAAa3sC,GACjB5R,EAAIu+C,EAAa3sC,EAAO,GACxB3R,EAAIs+C,EAAa3sC,EAAO,GACxBjS,EAAQ3G,KAAKgc,MAAMupC,EAAa3sC,EAAO,KACnC,IAANrS,GAAWQ,EAAI+8C,EAAS,MAAIA,EAAS,GAAK/8C,IACpC,IAANR,GAAWQ,EAAIg9C,EAAS,MAAIA,EAAS,GAAKh9C,IACpC,IAANR,GAAWS,EAAI88C,EAAS,MAAIA,EAAS,GAAK98C,IACpC,IAANT,GAAWS,EAAI+8C,EAAS,MAAIA,EAAS,GAAK/8C,IACpC,IAANT,GAAWU,EAAI68C,EAAS,MAAIA,EAAS,GAAK78C,IACpC,IAANV,GAAWU,EAAI88C,EAAS,MAAIA,EAAS,GAAK98C,GAC9Ck3C,EAAQz+C,KAAKiH,EACd,CACD,MAAMu2C,EAAU,IAAI8H,EAAmBrB,EAAUC,GAYjD,OAXA1G,EAAQ4G,SAAWA,EACnB5G,EAAQ6G,SAAWA,EACnB7G,EAAQI,SAAW,IAAI6H,EACrBjI,EAAQ4G,SACR5G,EAAQ6G,SACR,GAEF7G,EAAQI,SAASt/C,KAAO,CACtBmgD,QAASA,GAGJjB,CAAO,EA6BhB0H,EAAKsB,UAAa/hC,IACZA,EAAEnmB,KAAKmoD,SA3Bb,SAAyBC,EAAYzC,EAAUC,GAC7C,MAAM0B,EAAgB,GACtB,IAAK,IAAIC,KAAgBa,EAAY,CACnC,MAAMH,EAAcjmD,KAAKoJ,MAAMm8C,EAAa/lD,OAAS,GACrD,IAAK,IAAI+G,EAAI,EAAGA,EAAI0/C,EAAa1/C,IAAK,CACpC,MAAMqS,EAAW,EAAJrS,EAEb++C,EADctlD,KAAKgc,MAAMupC,EAAa3sC,EAAO,KACtBA,CACxB,CACF,CACD,MAAMqkC,EAAW,GACjB,IAAK,IAAIsI,KAAgBa,EAAY,CACnC,MAAMlJ,EAAU8I,EAAaT,EAAc5B,EAAUC,GACrD3G,EAASv9C,KAAKw9C,GACdkI,qBACElI,EACAA,EAAQI,SACRgI,EACAC,EAEH,CACDX,EAAKyB,YAAY,CACfpJ,SAAUA,GAEb,CAIGqJ,CACEniC,EAAEnmB,KAAKmoD,QAAQI,QACfpiC,EAAEnmB,KAAKmoD,QAAQxC,SACfx/B,EAAEnmB,KAAKmoD,QAAQvC,kBAElB,CAEL,CAmCO,MAAM4C,GACX,WAAAxrD,CAAY2oD,EAAUC,GACpBvoD,KAAKsoD,SAAWA,EAChBtoD,KAAKuoD,kBAAoBA,EACzBvoD,KAAK4hD,SAAW,GAChB5hD,KAAKwhD,UAAY,IAClB,CAED,OAAAt8C,GACElF,KAAKorD,wBACLprD,KAAK6pD,UAAW,CACjB,CAED,qBAAAuB,GACMprD,KAAKqrD,iBAAiBrrD,KAAKqrD,gBAAgBC,YAC/CtrD,KAAKqrD,gBAAkB,IACxB,CAaDE,iBAAmB,SACjB/J,EACAgK,EAAa,MAAM,GACnBC,EACAC,GAEK1rD,KAAKqrD,kBAAiBrrD,KAAKqrD,gBAhDV,IAAIM,OAC1B9qB,IAAIC,gBACF,IAAI/8B,KAAK,CAAC,IAAKulD,GAAsBnjD,WAAY,WAAY,CAC3DyhB,KAAM,8BA+CV5nB,KAAKwhD,UAAYA,EACjBxhD,KAAK4hD,SAAW,GAChB,MAAMltC,EAAS,IAAIzH,EAAM+F,QAEnB44C,EAAqB,CAACC,EAAa/gD,KACvC,MAAMo/C,EAAe,IAAIzoD,aAA0B,EAAbqJ,GACtC,IAAIghD,EAAa,EACjB,IAAK,IAAI5gD,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,MAAMsG,EAAmBtG,EAAI2gD,EAC7B,GAAIL,EAAWh6C,GAAmB,CAChCgwC,EAAUjwC,eAAeC,EAAkBkD,GAC3C,MAAMq3C,EAAuB,EAAbD,EAChB5B,EAAa6B,GAAWr3C,EAAOhJ,EAC/Bw+C,EAAa6B,EAAU,GAAKr3C,EAAO/I,EACnCu+C,EAAa6B,EAAU,GAAKr3C,EAAO9I,EACnCs+C,EAAa6B,EAAU,GAAKv6C,EAC5Bs6C,GACD,CACF,CACD,OAAO5B,CAAY,EAGrB,OAAO,IAAIhqD,SAASC,IAClB,MAAM6rD,EAAoB,MACpBhsD,KAAK6pD,WACP7pD,KAAKorD,wBACLjrD,KACO,GAKPsrD,GAAiBA,GAAgB,GAErCnmD,GAAe,KACb,GAAI0mD,IAAqB,OAEzB,MAAMjB,EAAa,GACnB,GAAIvJ,EAAUM,YAAa,CACzB,IAAI+J,EAAc,EAClB,IAAK,IAAItqC,EAAI,EAAGA,EAAIigC,EAAUyK,OAAO9nD,OAAQod,IAAK,CAChD,MACMzW,EADQ02C,EAAU0B,SAAS3hC,GACR6e,YAAY9vB,gBAC/B45C,EAAe0B,EAAmBC,EAAa/gD,GACrDigD,EAAW1mD,KAAK6lD,GAChB2B,GAAe/gD,CAChB,CACX,KAAe,CACL,MAAMo/C,EAAe0B,EAAmB,EAAGpK,EAAUlxC,iBACrDy6C,EAAW1mD,KAAK6lD,EACjB,CAEDlqD,KAAKqrD,gBAAgBR,UAAa/hC,IAC5BkjC,KAEAljC,EAAEnmB,KAAKi/C,WACL8J,GAAyBA,GAAwB,GAErDpmD,GAAe,KACb,IAAI0mD,IAAJ,CAEA,IAAK,IAAI9C,KAAiBpgC,EAAEnmB,KAAKi/C,SAAU,CACzC,MAAMuH,EAAmBd,GAAaY,qBACpCC,EACA1H,GAEFxhD,KAAK4hD,SAASv9C,KAAK8kD,EACpB,CACDnpD,KAAKorD,wBAEDM,GAAyBA,GAAwB,GAErDpmD,GAAe,KACbnF,GAAS,GAdqB,CAe9B,IAEL,EAGHmF,GAAe,KACb,GAAI0mD,IAAqB,OACrBP,GAAiBA,GAAgB,GACrC,MAAMS,EAAkBnB,EAAWxnC,KAAKnK,GAAUA,EAAMxX,UAxJlE,SACEypD,EACAH,EACAgB,EACA5D,EACAC,GAEA8C,EAAgBL,YACd,CACEF,QAAS,CACPI,QAASA,EACT5C,SAAUA,EACVC,kBAAmBA,IAGvB2D,EAEJ,CAwIUC,CACEnsD,KAAKqrD,gBACLN,EACAmB,EACAlsD,KAAKsoD,SACLtoD,KAAKuoD,kBACN,GACD,GACF,GAER,EAEE,WAAA6D,GACE,IAAIC,EAAY,EAKhB,OAJArsD,KAAKssD,aAAY,KACfD,GAAW,IAGNA,CACR,CAED,WAAAC,CAAYjD,GACV,MAAMD,EAAsB,CAACxG,EAAMyG,KACJ,IAAzBzG,EAAKx9C,SAASjB,QAAcklD,EAAUzG,GAC1C,IAAK,IAAIv9C,KAASu9C,EAAKx9C,SACrBgkD,EAAoB/jD,EAAOgkD,EAC5B,EAGH,IAAK,IAAIxH,KAAW7hD,KAAK4hD,SACvBwH,EAAoBvH,EAAQI,SAAUoH,EAEzC,ECviBH,SAASkD,GAAgBC,GACvB,MAAMnY,EAAa,CAAA,EAEnB,SAASoY,EAAalmC,GACpB,QAAyB9iB,IAArB4wC,EAAW9tB,GACb,OAAO8tB,EAAW9tB,GAGpB,IAAImmC,EAEJ,OAAQnmC,GACN,IAAK,sBACHmmC,EACEF,EAAGC,aAAa,wBAChBD,EAAGC,aAAa,4BAChBD,EAAGC,aAAa,8BAClB,MAEF,IAAK,iCACHC,EACEF,EAAGC,aAAa,mCAChBD,EAAGC,aAAa,uCAChBD,EAAGC,aAAa,yCAClB,MAEF,IAAK,gCACHC,EACEF,EAAGC,aAAa,kCAChBD,EAAGC,aAAa,sCAChBD,EAAGC,aAAa,wCAClB,MAEF,IAAK,iCACHC,EACEF,EAAGC,aAAa,mCAChBD,EAAGC,aAAa,yCAClB,MAEF,QACEC,EAAYF,EAAGC,aAAalmC,GAKhC,OAFA8tB,EAAW9tB,GAAQmmC,EAEZA,CACR,CAED,MAAO,CACLllC,IAAK,SAASjB,GACZ,OAA8B,OAAvBkmC,EAAalmC,EACrB,EAEDomC,KAAM,SAASC,GACTA,EAAaC,UACfJ,EAAa,0BACbA,EAAa,8BAEbA,EAAa,uBACbA,EAAa,qBACbA,EAAa,0BACbA,EAAa,iCACbA,EAAa,4BACbA,EAAa,0BACbA,EAAa,2BACbA,EAAa,2BAGfA,EAAa,4BACbA,EAAa,+BACbA,EAAa,uCACd,EAEDzqD,IAAK,SAASukB,GACZ,MAAMmmC,EAAYD,EAAalmC,GAQ/B,OANkB,OAAdmmC,GACFrjB,QAAQC,KACN,wBAA0B/iB,EAAO,6BAI9BmmC,CACR,EAEL,CCpFA,SAASI,GAAkBN,EAAInY,EAAY/b,GACzC,IAAIy0B,EAgBJ,SAASC,EAAgBC,GACvB,GAAkB,UAAdA,EAAuB,CACzB,GACET,EAAGU,yBAAyBV,EAAGW,cAAeX,EAAGY,YAAYH,UAC3D,GACFT,EAAGU,yBAAyBV,EAAGa,gBAAiBb,EAAGY,YAChDH,UAAY,EAEf,MAAO,QAGTA,EAAY,SACb,CAED,MAAkB,YAAdA,GAEAT,EAAGU,yBAAyBV,EAAGW,cAAeX,EAAGc,cAC9CL,UAAY,GACfT,EAAGU,yBAAyBV,EAAGa,gBAAiBb,EAAGc,cAChDL,UAAY,EAER,UAIJ,MACR,CAED,MAAMJ,EAC8B,oBAA3BU,wBACiB,2BAAxBf,EAAG7sD,YAAY4mB,KAEjB,IAAI0mC,OACuBxpD,IAAzB60B,EAAW20B,UAA0B30B,EAAW20B,UAAY,QAC9D,MAAMO,EAAeR,EAAgBC,GAEjCO,IAAiBP,IACnB5jB,QAAQC,KACN,uBACA2jB,EACA,uBACAO,EACA,YAEFP,EAAYO,GAGd,MAAMC,EAAcZ,GAAYxY,EAAW7sB,IAAI,sBAEzCkmC,GAA+D,IAAtCp1B,EAAWo1B,uBAEpCC,EAAcnB,EAAGoB,aAAapB,EAAGqB,yBACjCC,EAAoBtB,EAAGoB,aAAapB,EAAGuB,gCACvCC,EAAiBxB,EAAGoB,aAAapB,EAAGyB,kBACpCC,EAAiB1B,EAAGoB,aAAapB,EAAG2B,2BAEpCC,EAAgB5B,EAAGoB,aAAapB,EAAG6B,oBACnCC,EAAoB9B,EAAGoB,aAAapB,EAAG+B,4BACvCC,EAAchC,EAAGoB,aAAapB,EAAGiC,qBACjCC,EAAsBlC,EAAGoB,aAAapB,EAAGmC,8BAEzCC,EAAiBd,EAAoB,EACrCe,EAAwBhC,GAAYxY,EAAW7sB,IAAI,qBAKzD,MAAO,CACLqlC,SAAUA,EAEVY,YAAaA,EAEbqB,iBAtFF,WACE,QAAsBrrD,IAAlBspD,EAA6B,OAAOA,EAExC,IAAyD,IAArD1Y,EAAW7sB,IAAI,kCAA4C,CAC7D,MAAMklC,EAAYrY,EAAWryC,IAAI,kCAEjC+qD,EAAgBP,EAAGoB,aAAalB,EAAUqC,+BAChD,MACMhC,EAAgB,EAGlB,OAAOA,CACR,EA2ECC,gBAAiBA,EAEjBC,UAAWA,EACXS,uBAAwBA,EAExBC,YAAaA,EACbG,kBAAmBA,EACnBE,eAAgBA,EAChBE,eAAgBA,EAEhBE,cAAeA,EACfE,kBAAmBA,EACnBE,YAAaA,EACbE,oBAAqBA,EAErBE,eAAgBA,EAChBC,sBAAuBA,EACvBG,oBA3B0BJ,GAAkBC,EA6B5CI,WA3BiBpC,EAAWL,EAAGoB,aAAapB,EAAG0C,aAAe,EA6BlE,CC7FA,MAAMC,GAAgB,IAAIliD,EAAM65C,eAC1BsI,GAAgB,IAAIniD,EAAMmkC,kBA8BzB,MAAMie,WAAkBpiD,EAAMkkC,KACnC,WAAAxxC,CACEwjD,EAAkBxK,GAAgBC,OAClCkJ,GAAc,EACd0B,GAAwB,EACxB8L,GAAgC,EAChCC,EAAmB,EACnBC,GAAkC,EAClCC,GAAmC,EACnCxJ,GAAc,EACdC,EAA0B,KAC1BwJ,EAAWnuB,GAASC,KACpB57B,EAA2B,EAC3B+pD,EAA4B,GAE5BpuD,MAAM4tD,GAAeC,IAGrBpvD,KAAK4vD,cAAWnsD,EAGhBzD,KAAKmjD,gBAAkBA,EAMvBnjD,KAAK8hD,YAAcA,EAKnB9hD,KAAKwjD,sBAAwBA,EAG7BxjD,KAAKsvD,8BAAgCA,EAGrCtvD,KAAKuvD,iBAAmBA,EAGxBvvD,KAAKwvD,gCAAkCA,EAGvCxvD,KAAKyvD,iCAAmCA,EAOxCzvD,KAAKimD,YAAcA,EAGnBjmD,KAAKkmD,wBAA0BA,EAG/BlmD,KAAK0vD,SAAWA,EAGhB1vD,KAAK4F,yBAA2BA,EAEhC5F,KAAK2vD,0BAA4BA,EAGjC3vD,KAAKisD,OAAS,GAGdjsD,KAAK0hD,UAAY,KACjB1hD,KAAK6vD,cAAgB,KAGrB7vD,KAAK8vD,kBAAoB,GAEzB9vD,KAAK+vD,2BAA6B,CAChCrvD,GAAI,KACJ2yC,aAAc,KACdC,eAAgB,KAChB0c,QAAS,KACTC,cAAe,KACfC,mBAAoB,KACpBC,mBAAoB,KACpBC,YAAa,EACbC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,IAGlBvwD,KAAK+d,qCAAuC,GAC5C/d,KAAKwwD,gCAAkC,GAEvCxwD,KAAKywD,oBAAsB,EAC3BzwD,KAAK0wD,gBAAkB,GACvB1wD,KAAK2wD,uBAAyB,EAC9B3wD,KAAK4wD,oBAAsB,EAC3B5wD,KAAKskD,iBAAmB,EACxBtkD,KAAK6wD,YAAa,EAElB7wD,KAAK8wD,WAAa,KAElB9wD,KAAK6iD,YAAc,IAAI51C,EAAMm7C,KAC7BpoD,KAAK+wD,sBAAwB,IAAI9jD,EAAM+F,QACvChT,KAAKgxD,gCAAkC,EACvChxD,KAAKixD,0BAA4B,EACjCjxD,KAAKokD,oBAAsB,EAC3BpkD,KAAKmkD,6BAA+B,EACpCnkD,KAAKkxD,uBAAwB,EAE7BlxD,KAAK+jD,WAAa,EAClB/jD,KAAKgkD,uBAAwB,EAE7BhkD,KAAK6pD,UAAW,EAChB7pD,KAAKmxD,aAAe,KACpBnxD,KAAKi1C,SAAU,EAGfj1C,KAAKoxD,eAAkBruD,IACrB/C,KAAKmF,SAASouC,SAAS8d,SAAS1tD,MAAQZ,EACxC/C,KAAKmF,SAASyuC,aAAe7wC,CAAM,CAEtC,CAgBD,kBAAOuuD,CAAYC,EAAcvY,EAAcwY,GAC7C,MAAMvF,EAAS,GACfA,EAAO9nD,OAAS60C,EAAa70C,OAC7B,IAAK,IAAI+G,EAAI,EAAGA,EAAI8tC,EAAa70C,OAAQ+G,IAAK,CAC5C,MAAMk1B,EAAc4Y,EAAa9tC,GAC3B+W,EAAUuvC,EAAatmD,IAAM,CAAA,EACnC,IAAI0f,EAAgB3I,EAAkB,UAAK,CAAC,EAAG,EAAG,GAC9C6I,EAAgB7I,EAAkB,UAAK,CAAC,EAAG,EAAG,EAAG,GACjD4I,EAAa5I,EAAe,OAAK,CAAC,EAAG,EAAG,GAC5C,MAAMsI,GAAW,IAAItd,EAAM+F,SAAU+Q,UAAU6G,GACzC1X,GAAW,IAAIjG,EAAMkG,YAAa4Q,UAAU+G,GAC5C7X,GAAQ,IAAIhG,EAAM+F,SAAU+Q,UAAU8G,GACtC4mC,EAAQpC,GAAUqC,YACtBtxB,EACA7V,EACArX,EACAD,EACAgP,EAAQ0vC,4BAA8B,EACtC1vC,EAAQ1V,QACR0V,EAAQgzB,SAEVsc,EAAappB,IAAIspB,GACjBxF,EAAO/gD,GAAKumD,CACb,CACD,OAAOxF,CACR,CAED,kBAAOyF,CACLtxB,EACA7V,EACArX,EACAD,EACAsE,EACAhL,EAAU,EACV0oC,GAAU,GAEV,OAAO,IAAI0S,GACTvnB,EACA7V,EACArX,EACAD,EACAsE,EACAhL,EACA0oC,EAEH,CAQD,0BAAO2c,CAAoB5Y,GACzB,MAAM6Y,EAAqB,GACrBC,EAAgB,GACtB,IAAItvC,EAAkB,EACtB,IAAK,IAAIjB,EAAI,EAAGA,EAAIy3B,EAAa70C,OAAQod,IAAK,CAC5C,MACM/Q,EADcwoC,EAAaz3B,GACChR,mBAClC,IAAK,IAAIrF,EAAI,EAAGA,EAAIsF,EAAetF,IACjC2mD,EAAmBrvC,GAAmBtX,EACtC4mD,EAActvC,GAAmBjB,EACjCiB,GAEH,CACD,MAAO,CACLqvC,qBACAC,gBAEH,CAWDC,eAAiB,SACfC,EAAY,GACZC,EACAvG,GAEA,OAAO,IAAIxrD,SAASC,IAClBH,KAAKkyD,mBAGLlyD,KAAK6vD,cAAgB,IAAI1E,GAAU,EAAG,KACtC,MAAMgH,EAAiBttD,YAAYC,MAC7BstD,EAAa,IAAInlD,EAAMyd,QAC7B1qB,KAAK6vD,cACFtE,iBACCvrD,MACCi5B,IACCj5B,KAAK+T,cAAcklB,EAAYm5B,GAC/B,MAAMC,EAAaryD,KAAKijD,sBAAsBhqB,GACxCq5B,EAAWN,EAAUK,IAAe,EAC1C,OAAOD,EAAWn9C,GAAKq9C,CAAQ,GAEjCL,EACAvG,GAED9qD,MAAK,KACJ,MAAM2xD,EAAY1tD,YAAYC,MAAQqtD,EAItC,GAHInyD,KAAK0vD,UAAYnuB,GAASG,MAC5B2H,QAAQmpB,IAAI,oBAAsBD,EAAY,OAE5CvyD,KAAK6pD,SACP1pD,QACK,CACLH,KAAK0hD,UAAY1hD,KAAK6vD,cACtB7vD,KAAK6vD,cAAgB,KAErB,IAAI4C,EAAqB,EACrBC,EAAgB,EAChBliD,EAAgB,EAChBmiD,EAAY,EAEhB3yD,KAAK0hD,UAAU4K,aAAa1J,IAC1B,MAAMgQ,EAAiBhQ,EAAKjgD,KAAKmgD,QAAQ3+C,OACrCyuD,EAAiB,IACnBF,GAAiBE,EACjBpiD,EAAgB7L,KAAKD,IAAI8L,EAAeoiD,GACxCD,IACAF,IACD,IAECzyD,KAAK0vD,UAAYnuB,GAASG,OAC5B2H,QAAQmpB,IAAI,qBAAqBxyD,KAAK0hD,UAAU0K,iBAChD/iB,QAAQmpB,IAAI,gCAAgCC,KAC5CC,GAAgCC,EAChCtpB,QAAQmpB,IAAI,6BAA6BE,KACzCrpB,QAAQmpB,IAAI,sBAAsBxyD,KAAKsQ,oBAEzCnQ,GACD,IACD,GAEV,EA0BE,KAAA6lD,CACEhN,EACAwY,EACAqB,GAAsB,EACtBhC,GAAa,EACboB,EACAvG,EACAoH,GAAwB,GAExB9yD,KAAKwxD,aAAeA,EACpBxxD,KAAK6wD,WAAaA,EAElB,MAAMrgD,EACJ6+C,GAAU0D,qCAAqC/Z,GAE3Cga,EAAY3D,GAAUiC,YAAYtxD,KAAMg5C,EAAcwY,GAC5D,GAAIqB,EACF,IAAK,IAAI3nD,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,QAAU+G,EAAI8nD,EAAU7uD,OAAQ+G,IAAK,CACnE,MAAM+nD,EAAWD,EAAU9nD,GACrBgoD,EAAgBlzD,KAAKkjD,SAASh4C,GACpC+nD,EAASrL,kBAAkBsL,EAC5B,CAEHlzD,KAAKisD,OAAS+G,EAEd,IAAItiD,EAA8B,EAClC,IAAK,IAAI0vB,KAAe4Y,EAAc,CACpC,MAAMma,EACJ/yB,EAAY3vB,iCACV0iD,EAAsCziD,IACxCA,EAA8ByiD,EAEjC,CACDnzD,KAAK0Q,4BAA8B/L,KAAKF,IACtCiM,EACA1Q,KAAK4F,0BAGP,IAAIwtD,GAAsB,EAC1B,GAAIpa,EAAa70C,SAAWnE,KAAK0wD,gBAAgBvsD,OAC/CivD,GAAsB,OAEtB,IAAK,IAAIloD,EAAI,EAAGA,EAAI8tC,EAAa70C,OAAQ+G,IAAK,CAE5C,GADoB8tC,EAAa9tC,KACblL,KAAK0wD,gBAAgBxlD,GAAGk1B,YAAa,CACvDgzB,GAAsB,EACtB,KACD,CACF,CAGH,IAAIC,GAAgB,EAUpB,IARyB,IAAvBrzD,KAAKisD,OAAO9nD,QACZnE,KAAK4wD,sBAAwB5wD,KAAKisD,OAAO9nD,QACzCnE,KAAK2wD,yBAA2BngD,GAChC4iD,KAEAC,GAAgB,IAGbA,EAAe,CAClBrzD,KAAK6iD,YAAc,IAAI51C,EAAMm7C,KACxB0K,IACH9yD,KAAKgxD,gCAAkC,EACvChxD,KAAKixD,0BAA4B,EACjCjxD,KAAKokD,oBAAsB,EAC3BpkD,KAAKmkD,6BAA+B,EACpCnkD,KAAKskD,iBAAmB,GAE1BtkD,KAAK0wD,gBAAkB,GACvB1wD,KAAKywD,oBAAsB,EAC3BzwD,KAAK2wD,uBAAyB,EAC9B3wD,KAAKszD,kBACLtzD,KAAKiF,SAAW2hD,GAAcZ,MAAMx1C,GAChCxQ,KAAKmjD,kBAAoBxK,GAAgBC,OAC3C54C,KAAKmF,SAAW4gD,GAAgBC,MAC9BhmD,KAAK8hD,YACL9hD,KAAKwjD,sBACLxjD,KAAKimD,YACLjmD,KAAKkmD,wBACLlmD,KAAK+jD,WACL/jD,KAAKgkD,sBACLhkD,KAAK4F,0BAGP5F,KAAKmF,SAAWuhD,GAAgBV,MAC9BhmD,KAAK8hD,YACL9hD,KAAKwjD,sBACLxjD,KAAK+jD,WACL/jD,KAAKgkD,sBACLhkD,KAAK0Q,6BAIT,MAAM6iD,EAAYlE,GAAUuC,oBAAoB5Y,GAChDh5C,KAAK+d,qCAAuCw1C,EAAU1B,mBACtD7xD,KAAKwwD,gCAAkC+C,EAAUzB,aAClD,CAED,MAAM0B,EAAwBxzD,KAAKsQ,eAAc,GAC7CtQ,KAAKwvD,iCACPxvD,KAAKyzD,6CAEP,MAAMC,EACJ1zD,KAAK2zD,+BAA+BN,GAEtC,IAAK,IAAInoD,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IACtClL,KAAK0wD,gBAAgBxlD,GAAKlL,KAAKisD,OAAO/gD,GAqBxC,OAnBAlL,KAAKywD,oBAAsB+C,EAC3BxzD,KAAK2wD,uBAAyB3wD,KAAKuQ,mBACnCvQ,KAAK4wD,oBAAsB5wD,KAAKisD,OAAO9nD,OAEnC0sD,GAAc7wD,KAAKisD,OAAO9nD,OAAS,GACrCnE,KAAK+xD,eACHP,EAAajuC,KAAKtB,GAAYA,EAAQ0vC,4BAA8B,IACpEM,EACAvG,GACA9qD,MAAK,KACDZ,KAAK4zD,0BACP5zD,KAAK4zD,yBAAyB5zD,KAAK0hD,WAErC1hD,KAAK4zD,yBAA2B,IAAI,IAIxC5zD,KAAKi1C,QAAUj1C,KAAKisD,OAAO9nD,OAAS,EAE7BuvD,CACR,CAED,yBAAAG,GACE,MAAMC,EAAqBC,WAClBA,EAAQliB,OAAOlvC,YACfoxD,EAAQC,MACfD,EAAQE,SAAW,IAAI,SAGlBj0D,KAAK8vD,kBAAkBoE,SAASC,mBAChCn0D,KAAK8vD,kBAAkBoE,SAAShJ,eAChClrD,KAAK8vD,kBAAkBoE,SAASE,cAChCp0D,KAAK8vD,kBAAkBoE,SAASrlC,0BAEhC7uB,KAAK8vD,kBAAkBuE,aAAa1xD,YACpC3C,KAAK8vD,kBAAkBqE,YAAYxxD,KACtC3C,KAAK8vD,kBAAkBjhC,2BAClB7uB,KAAK8vD,kBAAkBjhC,mBAAmBlsB,KAE/C3C,KAAK8vD,kBAAkBwE,qBAClBt0D,KAAK8vD,kBAAkBwE,aAAa3xD,KAG7C3C,KAAK8vD,kBAAkBuE,aAAaN,QAAQ/jB,aAAc,EAC1DhwC,KAAK8vD,kBAAkBuE,aAAaN,QAAQE,SAAW,KACrDH,EAAkB9zD,KAAK8vD,kBAAkBuE,aAAaN,QAAQ,EAGhE/zD,KAAK8vD,kBAAkBqE,YAAYJ,QAAQ/jB,aAAc,EACzDhwC,KAAK8vD,kBAAkBqE,YAAYJ,QAAQE,SAAW,KACpDH,EAAkB9zD,KAAK8vD,kBAAkBqE,YAAYJ,QAAQ,EAG3D/zD,KAAK8vD,kBAAkBjhC,qBACrB7uB,KAAK8vD,kBAAkBjhC,mBAAmBklC,SAC5C/zD,KAAK8vD,kBAAkBjhC,mBAAmBklC,QAAQ/jB,aAAc,EAChEhwC,KAAK8vD,kBAAkBjhC,mBAAmBklC,QAAQE,SAAW,KAC3DH,EAAkB9zD,KAAK8vD,kBAAkBjhC,mBAAmBklC,QAAQ,GAGtE/zD,KAAK8vD,kBAAkBjhC,mBAAmB0lC,SAAS9hC,SAChDshC,IACCA,EAAQ/jB,aAAc,EACtB+jB,EAAQE,SAAW,KACjBH,EAAkBC,EAAQ,CAC3B,KAKL/zD,KAAK8vD,kBAAkBwE,eACzBt0D,KAAK8vD,kBAAkBwE,aAAaP,QAAQ/jB,aAAc,EAC1DhwC,KAAK8vD,kBAAkBwE,aAAaP,QAAQE,SAAW,KACrDH,EAAkB9zD,KAAK8vD,kBAAkBwE,aAAaP,QAAQ,EAGnE,CAID,OAAA7uD,GACElF,KAAKszD,kBACLtzD,KAAKw0D,kBACLx0D,KAAKkyD,mBACDlyD,KAAKwvD,kCACHxvD,KAAKy0D,mCACPC,aAAa10D,KAAKy0D,kCAClBz0D,KAAKy0D,iCAAmC,MAE1Cz0D,KAAK20D,2CAEP30D,KAAKisD,OAAS,GACdjsD,KAAK+vD,2BAA6B,CAChCrvD,GAAI,KACJ2yC,aAAc,KACdC,eAAgB,KAChB0c,QAAS,KACTC,cAAe,KACfC,mBAAoB,KACpBC,mBAAoB,KACpBC,YAAa,EACbC,kBAAmB,EACnBC,iBAAkB,EAClBC,eAAgB,IAElBvwD,KAAK4vD,SAAW,KAEhB5vD,KAAK+d,qCAAuC,GAC5C/d,KAAKwwD,gCAAkC,GAEvCxwD,KAAKywD,oBAAsB,EAC3BzwD,KAAK0wD,gBAAkB,GACvB1wD,KAAK2wD,uBAAyB,EAC9B3wD,KAAK4wD,oBAAsB,EAC3B5wD,KAAKskD,iBAAmB,EACxBtkD,KAAK6wD,YAAa,EAElB7wD,KAAK8wD,WAAa,KAElB9wD,KAAK6iD,YAAc,IAAI51C,EAAMm7C,KAC7BpoD,KAAK+wD,sBAAwB,IAAI9jD,EAAM+F,QACvChT,KAAKgxD,gCAAkC,EACvChxD,KAAKixD,0BAA4B,EACjCjxD,KAAKokD,oBAAsB,EAC3BpkD,KAAKmkD,6BAA+B,EACpCnkD,KAAKkxD,uBAAwB,EAE7BlxD,KAAK+jD,WAAa,EAClB/jD,KAAKgkD,uBAAwB,EAE7BhkD,KAAK6pD,UAAW,EAChB7pD,KAAKmxD,aAAe,KACpBnxD,KAAKi1C,SAAU,CAChB,CAKD,eAAAqe,GACMtzD,KAAKiF,UAAYjF,KAAKiF,WAAakqD,KACrCnvD,KAAKiF,SAASC,UACdlF,KAAKiF,SAAW,MAEdjF,KAAKmF,WACPnF,KAAKmF,SAASD,UACdlF,KAAKmF,SAAW,KAEnB,CAED,eAAAqvD,GACE,IAAK,IAAII,KAAc50D,KAAK8vD,kBAC1B,GAAI9vD,KAAK8vD,kBAAkBzqC,eAAeuvC,GAAa,CACrD,MAAMC,EAAmB70D,KAAK8vD,kBAAkB8E,GAC5CC,EAAiBd,UACnBc,EAAiBd,QAAQ7uD,UACzB2vD,EAAiBd,QAAU,KAE9B,CAEH/zD,KAAK8vD,kBAAoB,IAC1B,CAED,gBAAAoC,GACMlyD,KAAK0hD,YACP1hD,KAAK0hD,UAAUx8C,UACflF,KAAK0hD,UAAY,MAEf1hD,KAAK6vD,gBACP7vD,KAAK6vD,cAAc3qD,UACnBlF,KAAK6vD,cAAgB,KAExB,CAED,YAAAlO,GACE,OAAO3hD,KAAK0hD,SACb,CAED,gBAAAoT,CAAiBC,GACf/0D,KAAK4zD,yBAA2BmB,CACjC,CASD,8BAAAC,CAA+BC,EAAOC,GAKpC,MAAO,CACLhK,QALclrD,KAAKyvD,iCACnBzvD,KAAKm1D,kBAAkBF,EAAOC,GAAK,GACnCl1D,KAAKo1D,gBAAgBH,EAAOC,GAAK,GAIjCZ,aAHmBt0D,KAAKq1D,gBAAgBJ,EAAOC,GAKlD,CAOD,8BAAAvB,CAA+B2B,GAC7B,MAAMxqD,EAAa9K,KAAKsQ,eAAc,GACtCtQ,KAAKu1D,oCAAoCD,GACzC,MAAME,EAAcF,EAAqBt1D,KAAKywD,oBAAsB,GAC9DvF,QAAEA,EAAOoJ,aAAEA,GAAiBt0D,KAAKg1D,+BACrCQ,EACA1qD,EAAa,GASf,OAPI9K,KAAKwvD,iCACPxvD,KAAKy1D,yCACHvK,EACAoJ,EACAgB,GAGG,CACL1iC,KAAM4iC,EACNE,GAAI5qD,EAAa,EACjByc,MAAOzc,EAAa0qD,EACpBtK,QAASA,EACToJ,aAAcA,EAEjB,CAQD,wCAAAmB,CACEvK,EACAoJ,EACAgB,GAAqB,GAErB,MAAMp5C,EAASo5C,EAAqBt1D,KAAKywD,oBAAsB,EAC/DzwD,KAAK21D,8CACHL,EACApK,EACAhvC,GAEFlc,KAAK41D,uDACHN,EACAhB,EACAp4C,EAEH,CAMD,mCAAAq5C,CAAoCD,GAClC,MAAMxqD,EAAa9K,KAAKsQ,eAAc,GAChC6iB,EAAYnzB,KAAKywD,oBACjBr9B,EAAUtoB,EAAa,EAExBwqD,EAIHt1D,KAAK61D,+BAA+B1iC,EAAWC,IAH/CpzB,KAAK81D,oBACL91D,KAAK61D,kCAKP71D,KAAK+1D,+BAA+B5iC,EAAWC,GAC/CpzB,KAAKg2D,oBAAoBV,EAC1B,CAED,iBAAAQ,GACE,MAAMtlD,EAAgBxQ,KAAKuQ,mBACrBzF,EAAa9K,KAAKsQ,eAAc,GAEtCtQ,KAAKw0D,kBAEL,MAAMyB,EAAyB,CAACC,EAAkBC,KAChD,MAAMC,EAAU,IAAInpD,EAAM09B,QAAQ,KAAM,MACxC,KACEyrB,EAAQ1qD,EAAI0qD,EAAQzqD,EAAIuqD,EACxB1lD,EAAgB2lD,GAEhBC,EAAQzqD,GAAK,EAEf,OAAOyqD,CAAO,EASVC,EAAqChpD,IACzC,MAAMipD,EAPqC,CAACjpD,GACrCA,GAAoB,EAttBwB,EAFX,EA+tBtCkpD,CAAqClpD,GAEvC,MAAO,CAAEipD,yBAAwBF,QADjBH,EAAuBK,EAAwB,GACrB,EAG5C,IAAIE,EAA6Bx2D,KAAKy2D,sCACtC,MACMC,EACJ12D,KAAK22D,8CAEP,IAAIxC,EACA/a,EACAI,EACJ,GAAIx5C,KAAKmjD,kBAAoBxK,GAAgBC,OAAQ,CACnD,MAAMge,EAAqBP,EACzBG,GAGAI,EAAmBR,QAAQ1qD,EAAIkrD,EAAmBR,QAAQzqD,EA9tBvC,UAguBY,IAA/B6qD,IAEAA,EAA6B,GAE/BrC,EAAc,IAAI1yD,aA1vBe,EA2vB/B+O,EAER,MACM4oC,EAAS,IAAI33C,aAA6B,EAAhB+O,GAC1BgpC,EAAY,IAAI/3C,aAA6B,EAAhB+O,GAG/B,MAAM06C,EAAU,IAAIzpD,aAA6B,EAAhB+O,GAC3B4jD,EAAS,IAAIjlD,WAA2B,EAAhBqB,GAE9B,IAAIqmD,EAA8Bp1D,aACP,IAAvBi1D,EAA0BG,EAA8Bx7C,YAC5B,IAAvBq7C,IAA0BG,EAA8B1nD,YACjE,MAAM2nD,EAAmBnxD,EACvB3F,KAAK0Q,6BAEDqmD,EAAS/2D,KAAK0Q,4BAClB,IAAImmD,EAA4BrmD,EAAgBsmD,QAChDrzD,EAGIuzD,EAAqBf,EAxwBU,EA0wBnC,GAEIgB,EAAoB,IAAI17C,YAC5By7C,EAAmBtrD,EACjBsrD,EAAmBrrD,EA9wBc,GAixBrC0jD,GAAU6H,6BACR,EACApsD,EAAa,EACbogD,EACAkJ,EACA6C,GAGF,MAAME,EAAiB,IAAIlqD,EAAMmqD,YAC/BH,EACAD,EAAmBtrD,EACnBsrD,EAAmBrrD,EACnBsB,EAAMoqD,kBACNpqD,EAAMgmC,iBA0BR,GAxBAkkB,EAAeG,eAAiB,WAChCH,EAAennB,aAAc,EAC7BhwC,KAAKmF,SAASouC,SAASgR,qBAAqB5gD,MAAQwzD,EACpDn3D,KAAKmF,SAASouC,SAAS8R,yBAAyB1hD,MAAMiQ,KACpDojD,GAEFh3D,KAAKmF,SAASkxC,oBAAqB,EAEnCr2C,KAAK8vD,kBAAoB,CACvBoE,SAAU,CACRC,YAAaA,EACb/a,OAAQA,EACRI,UAAWA,EACX0R,QAASA,EACTkJ,OAAQA,EACRvlC,mBAAoBkoC,GAEtB1C,aAAc,CACZ1xD,KAAMs0D,EACNlD,QAASoD,EACTI,KAAMP,IAINh3D,KAAKmjD,kBAAoBxK,GAAgBC,OAAQ,CAGnD,MAAM4e,EAAcnB,EAClBG,GAEIiB,EACJD,EAAYlB,uBACRoB,EAAaF,EAAYpB,QAI/B,MAAMuB,EACJnB,GAA8B,EAv0BsB,EAFX,EA40BrCoB,EAAyB,IAL7BpB,GAA8B,EAAIj7C,YAAc9Z,cAMhDi2D,EAAWhsD,EAAIgsD,EAAW/rD,EAAIgsD,GAehC,IAAIE,EACJ,GAbmC,IAA/BrB,EACFoB,EAAuBnkD,IAAI0gD,GAE3B9E,GAAUyI,6CACR3D,EACAyD,EACA,EACA,EACAzD,EAAYhwD,QAKZqyD,GAA8B,EAChCqB,EAAS,IAAI5qD,EAAMmqD,YACjBQ,EACAF,EAAWhsD,EACXgsD,EAAW/rD,EACXsB,EAAMoqD,kBACNpqD,EAAMgmC,iBAER4kB,EAAOP,eAAiB,WACxBt3D,KAAKmF,SAASouC,SAASwkB,4BAA4Bp0D,MAAQk0D,MACtD,CACLA,EAAS,IAAI5qD,EAAMmqD,YACjBQ,EACAF,EAAWhsD,EACXgsD,EAAW/rD,EACXsB,EAAM0lC,WACN1lC,EAAM+qD,WAERh4D,KAAKmF,SAASouC,SAAS0kB,mBAAmBt0D,MAAQk0D,EAGlD,MAAMK,EAAW,IAAIjrD,EAAMmqD,YACzB,IAAI77C,YAAY,IAChB,EACA,EACAtO,EAAMoqD,kBACNpqD,EAAMgmC,iBAERilB,EAASZ,eAAiB,WAC1Bt3D,KAAKmF,SAASouC,SAASwkB,4BAA4Bp0D,MAAQu0D,EAC3DA,EAASloB,aAAc,CACxB,CACD6nB,EAAO7nB,aAAc,EAErBhwC,KAAKmF,SAASouC,SAAS4kB,wBAAwBx0D,MAC7C6yD,GAA8B,EAAI,EAAI,EACxCx2D,KAAKmF,SAASouC,SAAS6kB,uBAAuBz0D,MAAMiQ,KAAK8jD,GAEzD13D,KAAK8vD,kBAA+B,YAAI,CACtCntD,KAAMi1D,EACN7D,QAAS8D,EACTN,KAAMG,EACNrqD,iBAAkBmpD,EAClBF,uBAAwBmB,EACxBY,0BAA2BV,EAEnC,KAAW,CAEL,MACMW,EAAwBrC,EA34BQ,EA04Bb,GAKzB,IAAIsC,EACiD92D,aACjD+2D,EAGAvrD,EAAM+qD,UACV,MAAMS,EAAuB,IAAIF,EAC/BD,EAAsB5sD,EACpB4sD,EAAsB3sD,EAv5BY,GA25BtC0jD,GAAUqJ,+BACR,EACA5tD,EAAa,EACbsuC,EACAI,EACAif,GAGF,MAAME,EAAoB,IAAI1rD,EAAMmqD,YAClCqB,EACAH,EAAsB5sD,EACtB4sD,EAAsB3sD,EACtBsB,EAAM0lC,WACN6lB,GAEFG,EAAkB3oB,aAAc,EAChChwC,KAAKmF,SAASouC,SAASqlB,sBAAsBj1D,MAAQg1D,EACrD34D,KAAKmF,SAASouC,SAASslB,0BAA0Bl1D,MAAMiQ,KACrD0kD,GAGFt4D,KAAK8vD,kBAAkC,eAAI,CACzCntD,KAAM81D,EACN1E,QAAS4E,EACTpB,KAAMe,EACNjrD,iBAnNkC,EAqNrC,CAED,GAAI0pD,EAAQ,CACV,IAAI+B,EAAyBhC,EACzBgC,EAAyB,GAAM,GAAGA,IACtC,MAAMC,EAA0D,IAArC/4D,KAAK0Q,4BAAoC,EAAI,EACxE,IAAIsoD,EAAY/C,EACd8C,EACAD,GAGF,MAAMG,EAA6BnC,EAAmB,EACtDgC,EAAyBG,EACrBH,EAAyB,GAAM,GAAGA,IACtCE,EAAY/C,EACV8C,EACAD,GAGF,MAAMI,EAAiB,GACjBC,EAAa,GAEnB,IAAIC,EAAoC,EAAhB5oD,EACpB6oD,EAAoC,EAAhB7oD,EACpB8oD,EAAoC,EAAhB9oD,EAEpB+oD,EAAqB50D,KAAKoe,KAAKpe,KAAKwmB,KAAKiuC,IACzCI,EAAqB70D,KAAKoe,KAAKpe,KAAKwmB,KAAKkuC,IACzCI,EAAqB90D,KAAKoe,KAAKpe,KAAKwmB,KAAKmuC,IAEzCI,EAAiB,IAAIn+C,YACvBg+C,EAAqBA,GAEnBI,EAAiB,IAAIp+C,YACvBi+C,EAAqBA,GAEnBI,EAAiB,IAAIr+C,YACvBk+C,EAAqBA,GAGvBP,EAAe70D,KAAKq1D,GACpBR,EAAe70D,KAAKs1D,GACpBT,EAAe70D,KAAKu1D,GAIpB,IAAIC,EAAsB,EACW,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,GACzB,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,IACzB,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,IAE9D,IAAK,IAAIpvC,EAAI,EAAGA,EAAIja,EAAeia,IAAK,CAEtC,GAAIwuC,GAA8B,EAAG,CAEnC,IAAK,IAAI/tD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,EAAIvf,EACtCkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GACvBouD,EAAe,EAAIjvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CAID,GAAI2sD,GAA8B,EAAG,CAGnC,IAAK,IAAI/tD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,EAAI,EAAIvf,EAC1CkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GACvBquD,EAAe,EAAIlvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CAID,GAAI2sD,GAA8B,GAGhC,IAAK,IAAI/tD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,GAAK,EAAIvf,EAC3CkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GACvBsuD,EAAe,EAAInvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CAEJ,CACF,CAED,MAAMwtD,EAAmB,IAAI7sD,EAAMmqD,YACjCsC,EACAH,EACAA,EACAtsD,EAAM8sD,iBACN9sD,EAAMgmC,iBAER6mB,EAAiBxC,eAAiB,QAElC6B,EAAW90D,KAAKy1D,GAChBA,EAAiB9pB,aAAc,EAC/BhwC,KAAKmF,SAASouC,SAASkR,2BAA2B9gD,MAChDm2D,EAEF,MAAME,EAAmB,IAAI/sD,EAAMmqD,YACjCuC,EACAH,EACAA,EACAvsD,EAAM8sD,iBACN9sD,EAAMgmC,iBAER+mB,EAAiB1C,eAAiB,QAElC6B,EAAW90D,KAAK21D,GAChBA,EAAiBhqB,aAAc,EAC/BhwC,KAAKmF,SAASouC,SAASmR,2BAA2B/gD,MAChDq2D,EAEF,MAAMC,EAAmB,IAAIhtD,EAAMmqD,YACjCwC,EACAH,EACAA,EACAxsD,EAAM8sD,iBACN9sD,EAAMgmC,iBAERgnB,EAAiB3C,eAAiB,QAElC6B,EAAW90D,KAAK41D,GAChBA,EAAiBjqB,aAAc,EAC/BhwC,KAAKmF,SAASouC,SAASoR,2BAA2BhhD,MAChDs2D,EAEFj6D,KAAKmF,SAASouC,SAASiS,mCAAmC7hD,MAAQ,EAClE3D,KAAK8vD,kBAAsC,mBAAI,CAC7CrlD,eAAgBqsD,EAChBoD,yBAA0BjB,EAC1BkB,qBAAsBrB,EACtBn2D,KAAMu2D,EACNkB,aAAc,EACd7F,SAAU4E,EACV5B,KAAMyB,EACN3rD,iBAAkBqpD,EAClBR,iBAAkB6C,EAErB,CACD,IAAIn3D,EAAS5B,KAAKisD,OAAO,GAAG7rB,YAE5BpgC,KAAKmF,SAASouC,SAASuR,kBAAkBnhD,MACvC/B,EAAOwY,2BACTpa,KAAKmF,SAASouC,SAASwR,eAAephD,MAAQgB,KAAKD,IACjDC,KAAKkW,IAAIjZ,EAAOyY,4BAChB1V,KAAKkW,IAAIjZ,EAAOwY,6BAGlBpa,KAAKmF,SAASouC,SAAS+R,8BAA8B3hD,MAAMiQ,KACzDolD,GAEFh5D,KAAKmF,SAASouC,SAASgS,2BAA2B5hD,MACzB,IAAvB+yD,EAA2B,EAAI,EACjC,IAAK,IAAIn1C,EAAI,EAAGA,EAAIvhB,KAAKisD,OAAO9nD,OAAQod,IAAK,CAC3C,MAAM6e,EAAcpgC,KAAKisD,OAAO1qC,GAAG6e,YACnCpgC,KAAKmF,SAASouC,SAASqR,0CAA0CjhD,MAC/D4d,GACE6e,EAAYhmB,2BAChBpa,KAAKmF,SAASouC,SAASsR,0CAA0ClhD,MAC/D4d,GACE6e,EAAY/lB,0BACjB,CACDra,KAAKmF,SAASkxC,oBAAqB,CACpC,CAED,MAAMgkB,EAAsBpE,EAjmCS,EAmmCnC,GAEIqE,EAAyB,IAAI/+C,YACjC8+C,EAAoB3uD,EAClB2uD,EAAoB1uD,EAvmCa,GA0mCrC,IAAK,IAAI8e,EAAI,EAAGA,EAAI3f,EAAY2f,IAC9B6vC,EAAuB7vC,GAAKzqB,KAAKwwD,gCAAgC/lC,GAEnE,MAAMg7B,EAAsB,IAAIx4C,EAAMmqD,YACpCkD,EACAD,EAAoB3uD,EACpB2uD,EAAoB1uD,EACpBsB,EAAM8sD,iBACN9sD,EAAMgmC,iBAERwS,EAAoB6R,eAAiB,QACrC7R,EAAoBzV,aAAc,EAClChwC,KAAKmF,SAASouC,SAASkS,oBAAoB9hD,MAAQ8hD,EACnDzlD,KAAKmF,SAASouC,SAASmS,wBAAwB/hD,MAAMiQ,KACnDymD,GAEFr6D,KAAKmF,SAASkxC,oBAAqB,EACnCr2C,KAAK8vD,kBAAgC,aAAI,CACvCntD,KAAM23D,EACNvG,QAAStO,EACT8R,KAAM8C,GAERr6D,KAAKmF,SAASouC,SAASoS,WAAWhiD,MAAQ3D,KAAKisD,OAAO9nD,MACvD,CAED,8BAAA0xD,CAA+B1iC,EAAWC,GACxC,MAAMmnC,EAAwBv6D,KAAK8vD,kBAA+B,YAC5D0G,EAA6B+D,EACjCA,EAAsBltD,sBACtB5J,EACI+2D,EAA4Bx6D,KAAK8vD,kBAAkC,eACnE2K,EAAgCD,EACpCA,EAA0BntD,sBAC1B5J,EACIi3D,EAAiB16D,KAAK8vD,kBAAsC,mBAC5D4G,EAAqBgE,EACzBA,EAAertD,iBACf,EAEFrN,KAAK26D,oBACH36D,KAAK8vD,kBAAkBoE,SAASC,YAChCn0D,KAAK8vD,kBAAkBoE,SAAS9a,OAChCp5C,KAAK8vD,kBAAkBoE,SAAS1a,UAChCx5C,KAAK8vD,kBAAkBoE,SAAShJ,QAChClrD,KAAK8vD,kBAAkBoE,SAASE,OAChCp0D,KAAK8vD,kBAAkBoE,SAASrlC,wBAChCprB,EACA+yD,EACAiE,EACA/D,EACAvjC,EACAC,EACAD,EAEH,CAED,8BAAA4iC,CAA+B5iC,EAAWC,GACxC,MAAMmnC,EAAwBv6D,KAAK8vD,kBAA+B,YAC5D0G,EAA6B+D,EACjCA,EAAsBltD,sBACtB5J,EACI+2D,EAA4Bx6D,KAAK8vD,kBAAkC,eACnE2K,EAAgCD,EACpCA,EAA0BntD,sBAC1B5J,EACIm3D,EAAgB56D,KAAK8vD,kBAAsC,mBAG3D+K,EACJ76D,KAAK8vD,kBAAgC,aACjCgL,EAAqBD,EAA8Bl4D,KACnDo4D,EAAsBF,EAA8B9G,QAC1D1E,GAAU6H,6BACR/jC,EACAC,EACApzB,KAAK8vD,kBAAkBoE,SAAShJ,QAChClrD,KAAK8vD,kBAAkBoE,SAASE,OAChC0G,GAEF,MAAME,EAA2Bh7D,KAAK4vD,SACpC5vD,KAAK4vD,SAASppC,WAAWxkB,IAAI+4D,GAC7B,KAkBF,GAjBKC,GAA6BA,EAAyBC,eAGzDj7D,KAAKk7D,kBACHJ,EACAD,EAA8B9G,QAC9B8G,EAA8BtD,KAC9ByD,EApsCiC,EAPA,EA8sCjC,EACA7nC,EACAC,GAXF2nC,EAAoB/qB,aAAc,EAgBhCuqB,EAAuB,CACzB,MAAMtC,EAAqBsC,EAAsBxG,QAC3CoH,EAxtC2B,EAwtCFhoC,EACzBioC,EAztC2B,EAytCHhoC,EAE9B,GAAmC,IAA/BojC,EACF,IAAK,IAAItrD,EAAIiwD,EAAwBjwD,GAAKkwD,EAAuBlwD,IAAK,CACpE,MAAMmwD,EAAar7D,KAAK8vD,kBAAkBoE,SAASC,YAAYjpD,GAC/DqvD,EAAsB53D,KAAKuI,GAAKmwD,CACjC,MAEDhM,GAAUyI,6CACR93D,KAAK8vD,kBAAkBoE,SAASC,YAChCoG,EAAsB53D,KACtBwwB,EAAYonC,EAAsBlC,0BAClC8C,EACAC,GAIJ,MAAME,EAA0Bt7D,KAAK4vD,SACnC5vD,KAAK4vD,SAASppC,WAAWxkB,IAAIi2D,GAC7B,KACGqD,GAA4BA,EAAwBL,eAGpB,IAA/BzE,EACFx2D,KAAKk7D,kBACHX,EAAsB53D,KACtB43D,EAAsBxG,QACtBwG,EAAsBhD,KACtB+D,EACAf,EAAsBjE,uBAtvCK,EAwvC3B,EACAnjC,EACAC,GAGFpzB,KAAKk7D,kBACHX,EAAsB53D,KACtB43D,EAAsBxG,QACtBwG,EAAsBhD,KACtB+D,EACAf,EAAsBlC,0BACtBkC,EAAsBlC,0BACtB,EACAllC,EACAC,GAxBJ6kC,EAAmBjoB,aAAc,CA4BpC,CAGD,GAAIwqB,EAA2B,CAC7B,MAAM/B,EAAuB+B,EAA0B73D,KACjDi2D,EAAwB4B,EAA0BzG,QAClDoC,EAAmB,EACnBoF,EAAoD,IAAlCd,EAAsC,EAAI,EAElEpL,GAAUqJ,+BACRvlC,EACAC,EACApzB,KAAK8vD,kBAAkBoE,SAAS9a,OAChCp5C,KAAK8vD,kBAAkBoE,SAAS1a,UAChCif,GAEF,MAAM+C,EAA6Bx7D,KAAK4vD,SACtC5vD,KAAK4vD,SAASppC,WAAWxkB,IAAI42D,GAC7B,KAEC4C,GACAA,EAA2BP,eAI5Bj7D,KAAKk7D,kBACHzC,EACA+B,EAA0BzG,QAC1ByG,EAA0BjD,KAC1BiE,EAhyCkC,EAkyClCrF,EACAoF,EACApoC,EACAC,GAXFwlC,EAAsB5oB,aAAc,CAcvC,CAGD,MAAM+mB,EAAS/2D,KAAK8vD,kBAAkBoE,SAASrlC,mBAC/C,GAAIkoC,EAAQ,CACV,MAAMkC,EAA6B2B,EAAcV,yBAEjD,IAAIL,EAAsB,EACW,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,GACzB,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,IACzB,GAAjC75D,KAAK4F,2BAA+Bi0D,EAAsB,IAE9D,IAAK,IAAIpvC,EAAI0I,EAAW1I,GAAK2I,EAAS3I,IAEpC,GAAIwuC,GAA8B,EAAG,CAEnC,IAAIS,EAAiBkB,EAAcj4D,KAAK,GACxC,IAAK,IAAIuI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,EAAIvf,EACtCkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GAEvBouD,EAAe,EAAIjvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CAID,GAAI2sD,GAA8B,EAAG,CAGnC,IAAIU,EAAiBiB,EAAcj4D,KAAK,GACxC,IAAK,IAAIuI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,EAAI,EAAIvf,EAC1CkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GAEvBquD,EAAe,EAAIlvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CAID,GAAI2sD,GAA8B,GAAI,CAGpC,IAAIW,EAAiBgB,EAAcj4D,KAAK,GACxC,IAAK,IAAIuI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAII,EAAQuuD,EAAsBpvC,EAAI,GAAK,EAAIvf,EAC3CkB,EAAI2qD,EAAOzrD,EAAQ,GACnBe,EAAI0qD,EAAOzrD,EAAQ,GACnBgB,EAAIyqD,EAAOzrD,EAAQ,GAEvBsuD,EAAe,EAAInvC,EAAIvf,GAAMkB,GAAK,GAAOC,GAAK,GAAMC,CACrD,CACF,CACF,CACF,CAEJ,CAGD,MAAMmvD,EAAsBz7D,KAAK8vD,kBAAgC,aAC3D4L,EAAqBD,EAAoB94D,KAC/C,IAAK,IAAI8nB,EAAIzqB,KAAKywD,oBAAqBhmC,GAAK2I,EAAS3I,IACnDixC,EAAmBjxC,GAAKzqB,KAAKwwD,gCAAgC/lC,GAE/D,MAAMg7B,EAAsBgW,EAAoB1H,QAC1C4H,EAA2B37D,KAAK4vD,SACpC5vD,KAAK4vD,SAASppC,WAAWxkB,IAAIyjD,GAC7B,KACGkW,GAA6BA,EAAyBV,eAGzDj7D,KAAKk7D,kBACHQ,EACAD,EAAoB1H,QACpB0H,EAAoBlE,KACpBoE,EACA,EACA,EACA,EACA37D,KAAKywD,oBACLr9B,GAXFqyB,EAAoBzV,aAAc,CAcrC,CAED,mCAAAymB,GACE,OAAOz2D,KAAKsvD,8BAAgC,EAAI,CACjD,CAED,2CAAAqH,GACE,OAAOhyD,KAAKD,IAAI,EAAG1E,KAAK47D,wCACzB,CAED,qCAAAA,GACE,IAAIC,EACJ,IAAK,IAAI3wD,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IAAK,CAC3C,MACMk1B,EADQpgC,KAAKkjD,SAASh4C,GACFk1B,aAChB,IAANl1B,GAAWk1B,EAAY/yB,iBAAmBwuD,KAC5CA,EAAsBz7B,EAAY/yB,iBAErC,CACD,OAAOwuD,CACR,CAED,qCAAAC,GACE,IAAIC,EACJ,IAAK,IAAI7wD,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IAAK,CAC3C,MACMk1B,EADQpgC,KAAKkjD,SAASh4C,GACFk1B,aAChB,IAANl1B,GAAWk1B,EAAY/yB,iBAAmB0uD,KAC5CA,EAAsB37B,EAAY/yB,iBAErC,CACD,OAAO0uD,CACR,CAED,iCAAOC,CACLhjC,EACAijC,EACAC,EACAhG,EACAC,GAEA,MAAMgG,EAAiBhG,EAAmBD,EAEpCkG,EAAmBpjC,EAAamjC,EAChCE,EAAW13D,KAAKoJ,MAAMquD,EAAmBF,GACzCI,EAAkBD,EAAWH,EAAehG,EAE5CqG,EAAiBN,EAAWE,EAC5BK,EAAS73D,KAAKoJ,MAAMwuD,EAAiBL,GAK3C,MAAO,CACLO,UAAWH,EACXI,QALAF,EAASN,EAAehG,EACxBgG,EAAehG,EAKfmG,SAAUA,EACVG,OAAQA,EAEX,CAED,iBAAAtB,CACEyB,EACA5I,EACA6I,EACAC,EACA3G,EACAC,EACAoF,EACA3oC,EACA8iC,GAEA,MAAMlJ,EAAKxsD,KAAK4vD,SAASkN,aACnBC,EAAe1N,GAAU2M,2BAC7BppC,EACA8iC,EACAkH,EAAYlxD,EACZwqD,EACAC,GAEI6G,EAAqBD,EAAaL,QAAUK,EAAaN,UACzDQ,EAAiB,IAAIN,EAAWh9D,YACpCg9D,EAAW/6D,OACXm7D,EAAaN,UAAYlB,EACzByB,GAEIE,EAAeH,EAAaP,OAASO,EAAaV,SAAW,EAC7Dc,EAASn9D,KAAK8wD,WAAWsM,QAAQrJ,EAAQnsC,MACzCy1C,EAAWr9D,KAAK8wD,WAAWsM,QAC/BrJ,EAAQjjC,OACRijC,EAAQuJ,YAEJC,EAAiB/Q,EAAGoB,aAAapB,EAAGgR,oBAC1ChR,EAAGiR,YAAYjR,EAAGkR,WAAYb,EAAa5B,gBAC3CzO,EAAGmR,cACDnR,EAAGkR,WACH,EACA,EACAX,EAAaV,SACbO,EAAYlxD,EACZwxD,EACAG,EACAF,EACAF,GAEFzQ,EAAGiR,YAAYjR,EAAGkR,WAAYH,EAC/B,CAED,mDAAOzF,CACL8F,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAkB,IAAIjsD,SAAS6rD,EAAYj8D,QAC3Cs8D,EAAmBJ,EACnBK,EAAkB,EACtB,IAAK,IAAIjzD,EAAI6yD,EAAa7yD,GAAK8yD,EAAW9yD,GAAK,EAC7C+yD,EAAgBG,UAA6B,EAAnBF,EAAsBN,EAAW1yD,IAAI,GAC/D+yD,EAAgBG,UACK,EAAnBF,EAAuB,EACvBN,EAAW1yD,EAAI,IACf,GAEFgzD,GAAoB,EACpBC,IACIA,GAAmB,IACrBD,GAAoB,EACpBC,EAAkB,EAGvB,CAED,mCAAOjH,CACLtkC,EACA8iC,EACAxK,EACAkJ,EACA0G,GAEA,IAAK,IAAIrwC,EAAImI,EAAMnI,GAAKirC,EAAIjrC,IAAK,CAC/B,MAAM4zC,EAAiB,EAAJ5zC,EACb6zC,EAAkB,EAAJ7zC,EACd8zC,EAAuB,EAAJ9zC,EACzBqwC,EAAmByD,IzC3/CkBC,EyC4/CnCpK,GzC5/CwCl4C,EyC6/CxCmiD,IzC1/CHG,EAAItiD,EAAS,IAAM,IACnBsiD,EAAItiD,EAAS,IAAM,KACnBsiD,EAAItiD,EAAS,IAAM,IyC0/ClB4+C,EAAmByD,EAAmB,GAAK18D,EACzCqpD,EAAQoT,IAEVxD,EAAmByD,EAAmB,GAAK18D,EACzCqpD,EAAQoT,EAAc,IAExBxD,EAAmByD,EAAmB,GAAK18D,EACzCqpD,EAAQoT,EAAc,GAEzB,CzCxgD6B,IAASE,EAAKtiD,CyCygD7C,CAED,qCAAOw8C,CACL9lC,EACA8iC,EACAtc,EACAI,EACAif,GAGA,IAAK,IAAIhuC,EAAImI,EAAMnI,GAAKirC,EAAIjrC,IAAK,CAC/B,MAAMxJ,EAAgB,EAAJwJ,EACZvJ,EAAmB,EAAJuJ,EACfg0C,EAJa,EAIQh0C,EAE3BguC,EAAqBgG,GAAsBrlB,EAAOn4B,GAClDw3C,EAAqBgG,EAAqB,GAAKrlB,EAAOn4B,EAAY,GAClEw3C,EAAqBgG,EAAqB,GAAKrlB,EAAOn4B,EAAY,GAElEw3C,EAAqBgG,EAAqB,GAAKjlB,EAAUt4B,GACzDu3C,EAAqBgG,EAAqB,GACxCjlB,EAAUt4B,EAAe,GAC3Bu3C,EAAqBgG,EAAqB,GACxCjlB,EAAUt4B,EAAe,EAC5B,CACF,CAED,mBAAA80C,CAAoBV,GAClB,MAAMxqD,EAAa9K,KAAKsQ,eAAc,GAChC+xC,EAAa,IAAIp1C,EAAM+F,QAC7B,IAAKsiD,EAAoB,CACvB,MAAMoJ,EAAY,IAAIzxD,EAAM+F,QAC5BhT,KAAKisD,OAAOx5B,SAASg/B,IACnBiN,EAAUv2B,IAAIspB,EAAMrxB,YAAYvkB,YAAY,IAE9C6iD,EAAUj2B,eAAe,EAAMzoC,KAAKisD,OAAO9nD,QAC3CnE,KAAK+wD,sBAAsBn9C,KAAK8qD,GAChC1+D,KAAKmF,SAASouC,SAAS13B,YAAYlY,MAAMiQ,KAAK5T,KAAK+wD,uBACnD/wD,KAAKmF,SAASkxC,oBAAqB,CACpC,CAKD,IAAK,IAAInrC,EAH6BoqD,EACpCt1D,KAAKywD,oBACL,EAC0CvlD,EAAIJ,EAAYI,IAAK,CAC/DlL,KAAKuR,eAAerG,EAAGm3C,GAAY,GACnC,MAAMsc,EAAuBtc,EAC1B7gC,IAAIxhB,KAAK+wD,uBACT5sD,SACCw6D,EAAuB3+D,KAAKgxD,kCAC9BhxD,KAAKgxD,gCAAkC2N,EAE1C,CAGC3+D,KAAKgxD,gCAAkChxD,KAAKixD,0BA7kDX,IAglDjCjxD,KAAKixD,0BAA4BjxD,KAAKgxD,gCACtChxD,KAAKokD,oBAAsBz/C,KAAKD,IAC9B1E,KAAKixD,0BAllD0B,EAmlD/B,IAGAjxD,KAAK6wD,aACP7wD,KAAKokD,oBAAsBpkD,KAAKixD,0BAC9BjxD,KAAKgxD,iCAEThxD,KAAK4+D,iCACN,CAED,+BAAAA,CAAgCC,EAAkBtmB,GAAgBC,SAChE,MAAMsmB,EAjmDqB,KAkmDA9+D,KAAK2vD,0BAC1BoP,EAlmDwB,KAmmDA/+D,KAAK2vD,0BAC7BqP,EAAoBh/D,KAAK6wD,WAAaiO,EAAeC,EACrDE,EACJJ,IAAoBtmB,GAAgBC,QAClCwmB,EACAD,EACJ/+D,KAAKmkD,8BACFnkD,KAAKokD,oBAAsBpkD,KAAKmkD,8BAC/B8a,EACFj/D,KAAKmkD,6BACP,MAIMF,GAHJjkD,KAAKixD,0BAA4B,EAC/BjxD,KAAKmkD,6BAA+BnkD,KAAKixD,0BACzC,GACsC,IACpCiO,EACJjb,GAAkB4a,IAAoBtmB,GAAgBG,QAAU,EAAI,EAEtE14C,KAAKmF,SAASouC,SAAS4Q,6BAA6BxgD,MAClD3D,KAAKmkD,6BACPnkD,KAAKmF,SAASouC,SAAS6Q,oBAAoBzgD,MAAQ3D,KAAKokD,oBACxDpkD,KAAKmF,SAASouC,SAAS+Q,gBAAgB3gD,MAAQ3D,KAAKskD,gBACpDtkD,KAAKmF,SAASouC,SAAS8Q,YAAY1gD,MAAQkB,YAAYC,MACvD9E,KAAKmF,SAASouC,SAAS0Q,eAAetgD,MAAQu7D,EAC9Cl/D,KAAKmF,SAASkxC,oBAAqB,EACnCr2C,KAAKkxD,uBAAyBjN,CAC/B,CAQD,mBAAAkb,CAAoBC,EAAeC,GACjC,MAAMp6D,EAAWjF,KAAKiF,SACtBA,EAAS22C,WAAW3iB,WAAWxlB,IAAI2rD,GACnCn6D,EAAS22C,WAAW3iB,WAAW+W,aAAc,EACzCqvB,EAAmB,IAA+B,IAA1Br/D,KAAKskD,kBAC/BtkD,KAAKskD,gBAAkBz/C,YAAYC,OAErCG,EAASyiD,cAAgB2X,EACzBp6D,EAASq6D,aAAa,EAAGD,EAC1B,CAMD,gBAAAE,GACE,IAAK,IAAIr0D,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IAAK,CAC7BlL,KAAKkjD,SAASh4C,GACtB48C,gBAAgB9nD,KAAK8hD,YAC5B,CACF,CAED0d,eAAiB,WACf,MAAMvpB,EAAW,IAAIhpC,EAAM09B,QAE3B,OAAO,SACL80B,EACAC,EACAC,EACAzb,EACA0b,EACA1a,GAGA,GADmBllD,KAAKsQ,gBACP,EAAG,CAoBlB,GAnBA2lC,EAASxiC,IACPgsD,EAAiB/zD,EAAI1L,KAAKuvD,iBAC1BkQ,EAAiB9zD,EAAI3L,KAAKuvD,kBAE5BvvD,KAAKmF,SAASouC,SAAS0C,SAAStyC,MAAMiQ,KAAKqiC,GAC3Cj2C,KAAKmF,SAASouC,SAAS4R,cAAcxhD,MAAM8P,IACzC,EAAMwiC,EAASvqC,EACf,EAAMuqC,EAAStqC,GAEjB3L,KAAKmF,SAASouC,SAASyR,MAAMrhD,MAAM8P,IACjCisD,EACAC,GAEF3/D,KAAKmF,SAASouC,SAAS2Q,iBAAiBvgD,MAAQugD,EAC9C,EACA,EACFlkD,KAAKmF,SAASouC,SAAS0R,UAAUthD,MAAQi8D,EACzC5/D,KAAKmF,SAASouC,SAAS2R,uBAAuBvhD,MAC5CuhD,EACEllD,KAAK8hD,YACP,IAAK,IAAI52C,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IACtClL,KAAKmF,SAASouC,SAASssB,WAAWl8D,MAAMuH,GAAG0I,KACzC5T,KAAKkjD,SAASh4C,GAAGwG,WAIvB,GAAI1R,KAAKwjD,sBACP,IAAK,IAAIt4C,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IACtClL,KAAKmF,SAASouC,SAASqS,aAAajiD,MAAMuH,GAAK3G,EAC7CvE,KAAKkjD,SAASh4C,GAAGqB,QACjB,EACA,GAEFvM,KAAKmF,SAASouC,SAASsS,gBAAgBliD,MAAMuH,GAAKlL,KAAKkjD,SAASh4C,GAC7D+pC,QACD,EACA,EACFj1C,KAAKmF,SAASkxC,oBAAqB,EAGvCr2C,KAAKmF,SAASkxC,oBAAqB,CACpC,CACP,CACG,CAxDgB,GA0DjB,aAAAypB,CAAc/b,EAAa,GACzB/jD,KAAK+jD,WAAaA,EAClB/jD,KAAKmF,SAASouC,SAASwQ,WAAWpgD,MAAQogD,EAC1C/jD,KAAKmF,SAASkxC,oBAAqB,CACpC,CAED,aAAA0pB,GACE,OAAO//D,KAAK+jD,UACb,CAED,wBAAAic,CAAyBn9B,GACvB7iC,KAAKgkD,sBAAwBnhB,EAC7B7iC,KAAKmF,SAASouC,SAASyQ,sBAAsBrgD,MAAQk/B,EAAU,EAAI,EACnE7iC,KAAKmF,SAASkxC,oBAAqB,CACpC,CAED,wBAAA4pB,GACE,OAAOjgE,KAAKgkD,qBACb,CAED,oBAAAkc,GACE,OAAOlgE,KAAK8vD,iBACb,CAED,aAAAx/C,CAAc6vD,GAAwB,GACpC,OAAKA,EACO9Q,GAAU+Q,4BAA4BpgE,KAAKisD,QADpBjsD,KAAKywD,mBAEzC,CAED,kCAAO2P,CAA4BnU,GACjC,IAAIzpC,EAAkB,EACtB,IAAK,IAAIivC,KAASxF,EACZwF,GAASA,EAAMrxB,cACjB5d,GAAmBivC,EAAMrxB,YAAY9vB,iBAGzC,OAAOkS,CACR,CAED,wCAAO69C,CAAkCrnB,GACvC,IAAIx2B,EAAkB,EACtB,IAAK,IAAI4d,KAAe4Y,EACtBx2B,GAAmB4d,EAAY9vB,gBAEjC,OAAOkS,CACR,CAED,gBAAAjS,GACE,OAAO8+C,GAAUiR,+BAA+BtgE,KAAKisD,OACtD,CAED,qCAAOqU,CAA+BrU,GACpC,IAAIzpC,EAAkB,EACtB,IAAK,IAAIivC,KAASxF,EACZwF,GAASA,EAAMrxB,cACjB5d,GAAmBivC,EAAMrxB,YAAY7vB,oBAGzC,OAAOiS,CACR,CAED,2CAAOuwC,CAAqC/Z,GAC1C,IAAIx2B,EAAkB,EACtB,IAAK,IAAI4d,KAAe4Y,EACtBx2B,GAAmB4d,EAAY7vB,mBAEjC,OAAOiS,CACR,CAED,uCAAAmyC,GACE,IAAK30D,KAAK4vD,SAAU,OAEpB,MAAMpD,EAAKxsD,KAAK4vD,SAASkN,aAErB98D,KAAK+vD,2BAA2BwQ,MAClC/T,EAAGgU,kBAAkBxgE,KAAK+vD,2BAA2BwQ,KACrDvgE,KAAK+vD,2BAA2BwQ,IAAM,MAEpCvgE,KAAK+vD,2BAA2BC,UAClCxD,EAAGiU,cAAczgE,KAAK+vD,2BAA2BC,SACjDxD,EAAGkU,aAAa1gE,KAAK+vD,2BAA2B1c,cAChDmZ,EAAGkU,aAAa1gE,KAAK+vD,2BAA2Bzc,gBAChDtzC,KAAK+vD,2BAA2BC,QAAU,KAC1ChwD,KAAK+vD,2BAA2B1c,aAAe,KAC/CrzC,KAAK+vD,2BAA2Bzc,eAAiB,MAEnDtzC,KAAK2gE,gDACD3gE,KAAK+vD,2BAA2BrvD,KAClC8rD,EAAGoU,wBAAwB5gE,KAAK+vD,2BAA2BrvD,IAC3DV,KAAK+vD,2BAA2BrvD,GAAK,KAExC,CAED,6CAAAigE,GACE,IAAK3gE,KAAK4vD,SAAU,OAEpB,MAAMpD,EAAKxsD,KAAK4vD,SAASkN,aAErB98D,KAAK+vD,2BAA2BE,gBAClCjwD,KAAK+vD,2BAA2BE,cAAgB,KAChDzD,EAAGqU,aAAa7gE,KAAK+vD,2BAA2BE,gBAE9CjwD,KAAK+vD,2BAA2BI,qBAClC3D,EAAGqU,aAAa7gE,KAAK+vD,2BAA2BI,oBAChDnwD,KAAK+vD,2BAA2BI,mBAAqB,KAExD,CAMD,WAAA2Q,CAAYlR,GACV,GAAIA,IAAa5vD,KAAK4vD,SAAU,CAC9B5vD,KAAK4vD,SAAWA,EAChB,MAAMpD,EAAKxsD,KAAK4vD,SAASkN,aACnBzoB,EAAa,IAAIkY,GAAgBC,GACjCI,EAAe,IAAIE,GAAkBN,EAAInY,EAAY,CAAE,GAG7D,GAFAA,EAAWsY,KAAKC,GAChB5sD,KAAK8wD,WAAa,IAAI7jD,EAAM8zD,WAAWvU,EAAInY,EAAYuY,GACnD5sD,KAAKwvD,iCAAmCxvD,KAAKsQ,gBAAkB,EAAG,CACpEtQ,KAAKyzD,6CACL,MAAMvI,QAAEA,EAAOoJ,aAAEA,GAAiBt0D,KAAKg1D,+BACrC,EACAh1D,KAAKsQ,gBAAkB,GAEzBtQ,KAAKy1D,yCAAyCvK,EAASoJ,EACxD,CACF,CACF,CAEDb,2CAA6C,WAC3C,IAAIuN,EAEJ,OAAO,WACL,MAAMxwD,EAAgBxQ,KAAKuQ,mBAE3B,IAAKvQ,KAAK4vD,SAAU,OAEpB,MAAMqR,EAAoBjhE,KAAKmxD,eAAiBnxD,KAAK4vD,SAC/CsR,EAAiBF,IAAyBxwD,EAEhD,IAAKywD,IAAsBC,EAAgB,OAEvCD,EACFjhE,KAAK20D,0CACIuM,GACTlhE,KAAK2gE,gDAGP,MAAMnU,EAAKxsD,KAAK4vD,SAASkN,aAEnBqE,EAAe,CAAC3U,EAAI5kC,EAAMiqB,KAC9B,MAAMuvB,EAAS5U,EAAG2U,aAAav5C,GAC/B,IAAKw5C,EAEH,OADA/3B,QAAQ5oC,MAAM,qDACP,KAGT+rD,EAAG6U,aAAaD,EAAQvvB,GACxB2a,EAAG8U,cAAcF,GAGjB,IADiB5U,EAAG+U,mBAAmBH,EAAQ5U,EAAGgV,gBACnC,CACb,IAAIC,EAAW,UACX75C,IAAS4kC,EAAGW,cAAesU,EAAW,gBACjC75C,IAAS4kC,EAAGa,kBAAiBoU,EAAW,oBACjD,MAAMC,EAASlV,EAAGmV,iBAAiBP,GAKnC,OAJA/3B,QAAQ5oC,MACN,qBAAuBghE,EAAW,sBAAwBC,GAE5DlV,EAAGkU,aAAaU,GACT,IACR,CAED,OAAOA,CAAM,EAGf,IAAIQ,EACA5hE,KAAKyvD,kCACPmS,EAAW,4FAGP5hE,KAAK8hD,YACP8f,GAAY,mGAE6B/0D,EAAU+2C,4TAOnDge,GAAY,qRAQdA,EAAW,6FAGP5hE,KAAK8hD,YACP8f,GAAY,kGAE4B/0D,EAAU+2C,6QAOlDge,GAAY,mRAShB,MAMMC,EAAarV,EAAGoB,aAAapB,EAAGsV,sBAChCC,EAAiBvV,EAAGoB,aAAapB,EAAGwV,iBACpCC,IAAwBF,GAC5BvV,EAAG0V,oBAAoBH,EAAgBvV,EAAG2V,eAS5C,GANIlB,IACFjhE,KAAK+vD,2BAA2BwQ,IAAM/T,EAAG4V,qBAG3C5V,EAAG6V,gBAAgBriE,KAAK+vD,2BAA2BwQ,KAE/CU,EAAmB,CACrB,MAAMjR,EAAUxD,EAAG8V,gBACbjvB,EAAe8tB,EAAa3U,EAAIA,EAAGW,cAAeyU,GAClDtuB,EAAiB6tB,EAAa3U,EAAIA,EAAGa,gBArB5B,4IAsBf,IAAKha,IAAiBC,EACpB,MAAM,IAAIjyC,MACR,+DAGJmrD,EAAG+V,aAAavS,EAAS3c,GACzBmZ,EAAG+V,aAAavS,EAAS1c,GACzBkZ,EAAGgW,0BACDxS,EACA,CAAC,YACDxD,EAAGiW,kBAELjW,EAAGkW,YAAY1S,GAGf,IADexD,EAAG0V,oBAAoBlS,EAASxD,EAAGmW,aACrC,CACX,MAAMliE,EAAQ+rD,EAAGoW,kBAAkB5S,GAKnC,MAJA3mB,QAAQ5oC,MAAM,wCAA0CA,GACxD+rD,EAAGiU,cAAczQ,GACjBxD,EAAGkU,aAAaptB,GAChBkZ,EAAGkU,aAAartB,GACV,IAAIhyC,MACR,2DAEH,CAEDrB,KAAK+vD,2BAA2BC,QAAUA,EAC1ChwD,KAAK+vD,2BAA2B1c,aAAeA,EAC/CrzC,KAAK+vD,2BAA2B1c,aAAeC,CAChD,CAQD,GANAkZ,EAAGqW,WAAW7iE,KAAK+vD,2BAA2BC,SAE9ChwD,KAAK+vD,2BAA2BK,WAAa5D,EAAGsW,kBAC9C9iE,KAAK+vD,2BAA2BC,QAChC,UAEEhwD,KAAK8hD,YAAa,CACpB9hD,KAAK+vD,2BAA2BO,gBAAkB9D,EAAGsW,kBACnD9iE,KAAK+vD,2BAA2BC,QAChC,cAEF,IAAK,IAAI9kD,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IACtClL,KAAK+vD,2BAA2BQ,eAAerlD,GAC7CshD,EAAGuW,mBACD/iE,KAAK+vD,2BAA2BC,QAChC,cAAc9kD,KAG5B,MACQlL,KAAK+vD,2BAA2BM,iBAC9B7D,EAAGuW,mBACD/iE,KAAK+vD,2BAA2BC,QAChC,kBAIFiR,GAAqBC,KACvBlhE,KAAK+vD,2BAA2BE,cAAgBzD,EAAGwW,eACnDxW,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BE,eAElCzD,EAAG2W,wBAAwBnjE,KAAK+vD,2BAA2BK,YACvDpwD,KAAKyvD,iCACPjD,EAAG4W,qBACDpjE,KAAK+vD,2BAA2BK,WAChC,EACA5D,EAAG6W,IACH,EACA,GAGF7W,EAAG8W,oBACDtjE,KAAK+vD,2BAA2BK,WAChC,EACA5D,EAAG+W,OACH,EACA,EACA,GAIAvjE,KAAK8hD,cACP9hD,KAAK+vD,2BAA2BG,mBAC9B1D,EAAGwW,eACLxW,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BG,oBAElC1D,EAAG2W,wBACDnjE,KAAK+vD,2BAA2BO,iBAElC9D,EAAG4W,qBACDpjE,KAAK+vD,2BAA2BO,gBAChC,EACA9D,EAAGgX,aACH,EACA,MAKFvC,GAAqBC,KACvBlhE,KAAK+vD,2BAA2BI,mBAAqB3D,EAAGwW,gBAE1DxW,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BI,oBAElC3D,EAAGr8C,WAAWq8C,EAAG0W,aAA8B,EAAhB1yD,EAAmBg8C,EAAGiX,aAEjDxC,IACFjhE,KAAK+vD,2BAA2BrvD,GAAK8rD,EAAGkX,2BAE1ClX,EAAGmX,sBACDnX,EAAGoX,mBACH5jE,KAAK+vD,2BAA2BrvD,IAElC8rD,EAAGqX,eACDrX,EAAGsX,0BACH,EACA9jE,KAAK+vD,2BAA2BI,oBAG9B4R,IAA4C,IAA1BE,GACpBzV,EAAGqW,WAAWd,GAEZF,GAAYrV,EAAG6V,gBAAgBR,GAEnC7hE,KAAKmxD,aAAenxD,KAAK4vD,SACzBoR,EAAuBxwD,CAC7B,CACG,CAvP4C,GA+P7C,6CAAAmlD,CACEoO,EACA7Y,EACA8Y,GAEA,IAAKhkE,KAAK4vD,SAAU,OAEpB,MAAMpD,EAAKxsD,KAAK4vD,SAASkN,aAEnB+E,EAAarV,EAAGoB,aAAapB,EAAGsV,sBACtCtV,EAAG6V,gBAAgBriE,KAAK+vD,2BAA2BwQ,KAEnD,MAAM0D,EAAYjkE,KAAKyvD,iCACrBl0C,YACA9Z,aAEIyiE,EAD0B,GACRF,EAOxB,GALAxX,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BE,eAG9B8T,EACFvX,EAAG2X,cAAc3X,EAAG0W,aAAcgB,EAAiBhZ,OAC9C,CACL,MAAMkZ,EAAW,IAAIH,EAXS,GAY5BjkE,KAAKuQ,oBAEP6zD,EAAS3wD,IAAIy3C,GACbsB,EAAGr8C,WAAWq8C,EAAG0W,aAAckB,EAAU5X,EAAG6X,YAC7C,CAED7X,EAAGyW,WAAWzW,EAAG0W,aAAc,MAE3BrB,GAAYrV,EAAG6V,gBAAgBR,EACpC,CAQD,sDAAAjM,CACEmO,EACAzP,EACA0P,GAEA,IAAKhkE,KAAK4vD,WAAa5vD,KAAK8hD,YAAa,OAEzC,MAAM0K,EAAKxsD,KAAK4vD,SAASkN,aAEnB+E,EAAarV,EAAGoB,aAAapB,EAAGsV,sBACtCtV,EAAG6V,gBAAgBriE,KAAK+vD,2BAA2BwQ,KAEnD,MAAM2D,EAAiC,EAAfF,EAOxB,GALAxX,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BG,oBAG9B6T,EACFvX,EAAG2X,cAAc3X,EAAG0W,aAAcgB,EAAiB5P,OAC9C,CACL,MAAM8P,EAAW,IAAI7oD,YAAsC,EAA1Bvb,KAAKuQ,oBACtC6zD,EAAS3wD,IAAI6gD,GACb9H,EAAGr8C,WAAWq8C,EAAG0W,aAAckB,EAAU5X,EAAG6X,YAC7C,CACD7X,EAAGyW,WAAWzW,EAAG0W,aAAc,MAE3BrB,GAAYrV,EAAG6V,gBAAgBR,EACpC,CAQD,eAAAxM,CAAgBJ,EAAOC,GACrB,IAAIZ,EAEJA,EAAe,IAAI/4C,YADD25C,EAAMD,EAAQ,GAEhC,IAAK,IAAI/pD,EAAI+pD,EAAO/pD,GAAKgqD,EAAKhqD,IAC5BopD,EAAappD,GAAKlL,KAAKwwD,gCAAgCtlD,GAGzD,OAAOopD,CACR,CAMDgQ,oBAAsB,WACpB,MAAMC,EAAY,GAElB,OAAO,SAASnrD,GACVmrD,EAAUpgE,SAAWiV,EAAMjV,SAAQogE,EAAUpgE,OAASiV,EAAMjV,QAChE,IAAK,IAAI+G,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IAAK,CAC3C,MACMs5D,EADiBxkE,KAAKkjD,SAASh4C,GAAGwG,UACMqF,SAC9C,IAAK,IAAI0H,EAAI,EAAGA,EAAI,GAAIA,IACtB8lD,EAAc,GAAJr5D,EAASuT,GAAK+lD,EAAuB/lD,EAElD,CACDrF,EAAM3F,IAAI8wD,EAChB,CACG,CAdqB,GAgBtBE,sBAAwB,WACtB,MAAM3xD,EAAa,IAAI7F,EAAM2F,QAE7B,OAAO,SAAS8xD,EAAqBC,GACnC,IAAK3kE,KAAK4vD,SAAU,OAGpB,MAAMpD,EAAKxsD,KAAK4vD,SAASkN,aAEnB+E,EAAarV,EAAGoB,aAAapB,EAAGsV,sBAChCC,EAAiBvV,EAAGoB,aAAapB,EAAGwV,iBACpCC,IAAwBF,GAC5BvV,EAAG0V,oBAAoBH,EAAgBvV,EAAG2V,eAQ5C,GALA3V,EAAG6V,gBAAgBriE,KAAK+vD,2BAA2BwQ,KACnD/T,EAAGqW,WAAW7iE,KAAK+vD,2BAA2BC,SAE9CxD,EAAGoY,OAAOpY,EAAGqY,oBAET7kE,KAAK8hD,YACP,IAAK,IAAI52C,EAAI,EAAGA,EAAIlL,KAAKisD,OAAO9nD,OAAQ+G,IAItC,GAHA4H,EAAWc,KAAK5T,KAAKkjD,SAASh4C,GAAGwG,WACjCoB,EAAWsD,YAAYsuD,GAEnB1kE,KAAKyvD,iCAAkC,CACzC,MAAMqV,EAAczV,GAAU0V,sBAAsBjyD,GAC9CkyD,EAAa,CACjBF,EAAY,GACZA,EAAY,GACZA,EAAY,IACZA,EAAY,KAEdtY,EAAGyY,UACDjlE,KAAK+vD,2BAA2BQ,eAAerlD,GAC/C85D,EAAW,GACXA,EAAW,GACXA,EAAW,GACXA,EAAW,GAEzB,MACYxY,EAAG0Y,iBACDllE,KAAK+vD,2BAA2BQ,eAAerlD,IAC/C,EACA4H,EAAWiE,eAKjB,GAAI/W,KAAKyvD,iCAAkC,CACzC,MAAM0V,EACJ9V,GAAU0V,sBAAsBL,GAC5BU,EAAY,CAChBD,EAAgB,GAChBA,EAAgB,GAChBA,EAAgB,KAElB3Y,EAAG6Y,UACDrlE,KAAK+vD,2BAA2BM,iBAChC+U,EAAU,GACVA,EAAU,GACVA,EAAU,GAEtB,KAAe,CACL,MAAME,EAAW,CACfZ,EAAoB3tD,SAAS,GAC7B2tD,EAAoB3tD,SAAS,GAC7B2tD,EAAoB3tD,SAAS,KAE/By1C,EAAG+Y,UACDvlE,KAAK+vD,2BAA2BM,iBAChCiV,EAAS,GACTA,EAAS,GACTA,EAAS,GAEZ,CAGH9Y,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BE,eAElCzD,EAAG2W,wBAAwBnjE,KAAK+vD,2BAA2BK,YACvDpwD,KAAKyvD,iCACPjD,EAAG4W,qBACDpjE,KAAK+vD,2BAA2BK,WAChC,EACA5D,EAAG6W,IACH,EACA,GAGF7W,EAAG8W,oBACDtjE,KAAK+vD,2BAA2BK,WAChC,EACA5D,EAAG+W,OACH,EACA,EACA,GAIAvjE,KAAK8hD,cACP0K,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BG,oBAElC1D,EAAG2W,wBACDnjE,KAAK+vD,2BAA2BO,iBAElC9D,EAAG4W,qBACDpjE,KAAK+vD,2BAA2BO,gBAChC,EACA9D,EAAGgX,aACH,EACA,IAIJhX,EAAGmX,sBACDnX,EAAGoX,mBACH5jE,KAAK+vD,2BAA2BrvD,IAElC8rD,EAAGqX,eACDrX,EAAGsX,0BACH,EACA9jE,KAAK+vD,2BAA2BI,oBAGlC3D,EAAGgZ,uBAAuBhZ,EAAGiZ,QAC7BjZ,EAAGkZ,WAAWlZ,EAAGiZ,OAAQ,EAAGzlE,KAAKsQ,iBACjCk8C,EAAGmZ,uBAEHnZ,EAAGqX,eAAerX,EAAGsX,0BAA2B,EAAG,MACnDtX,EAAGmX,sBAAsBnX,EAAGoX,mBAAoB,MAEhDpX,EAAGoZ,QAAQpZ,EAAGqY,oBAEd,MAAMgB,EAAOrZ,EAAGsZ,UAAUtZ,EAAGuZ,2BAA4B,GACzDvZ,EAAGwZ,QAEH,MAAM/lE,EAAU,IAAIC,SAASC,IAC3B,MAAM8lE,EAAY,KAChB,GAAIjmE,KAAK6pD,SACP1pD,QACK,CACL,MAAM+lE,EAAU,EACVC,EAAW,EAEjB,OADe3Z,EAAG4Z,eAAeP,EAAMM,EAAUD,IAE/C,KAAK1Z,EAAG6Z,gBAEN,OADArmE,KAAKy0D,iCAAmC/uD,WAAWugE,GAC5CjmE,KAAKy0D,iCACd,KAAKjI,EAAG8Z,YACN,MAAM,IAAIjlE,MAAM,yBAClB,QACErB,KAAKy0D,iCAAmC,KACxCjI,EAAG+Z,WAAWV,GACd,MAAMhE,EAAarV,EAAGoB,aAAapB,EAAGsV,sBACtCtV,EAAG6V,gBAAgBriE,KAAK+vD,2BAA2BwQ,KACnD/T,EAAGyW,WACDzW,EAAG0W,aACHljE,KAAK+vD,2BAA2BI,oBAElC3D,EAAGga,iBAAiBha,EAAG0W,aAAc,EAAGyB,GACxCnY,EAAGyW,WAAWzW,EAAG0W,aAAc,MAE3BrB,GAAYrV,EAAG6V,gBAAgBR,GAInC1hE,IAEL,GAEHH,KAAKy0D,iCAAmC/uD,WAAWugE,EAAU,IAQ/D,OALIlE,IAA4C,IAA1BE,GACpBzV,EAAGqW,WAAWd,GAEZF,GAAYrV,EAAG6V,gBAAgBR,GAE5B5hE,CACb,CACG,CAzLuB,GAsMxB,uBAAAwmE,CAAwBC,EAAaC,EAAWC,GAC1CA,UACFA,GAAuB5mE,KAAK8hD,aAE9B6kB,EAAUvmC,YAAcpgC,KAAK6mE,uBAAuBH,GACpDC,EAAUG,WAAa9mE,KAAK+mE,mBAAmBL,GAC/CC,EAAUtlB,eAAiBulB,EACzB5mE,KAAKgnE,0BAA0BN,GAC/B,IACH,CAmBD,mBAAA/L,CACExG,EACA/a,EACAI,EACA0R,EACAkJ,EACAvlC,EACAo4C,EACAzQ,EAA6B,EAC7BiE,EAAgC,EAChCyM,EAAqC,EACrCC,EACAC,EACAC,EAAY,EACZhV,GAEA,MAAM/+C,EAAgB,IAAIrG,EAAM+F,QAChCM,EAAc5H,OAAIjI,EAClB6P,EAAc3H,OAAIlI,EACdzD,KAAKmjD,kBAAoBxK,GAAgBC,OAC3CtlC,EAAc1H,OAAInI,EAElB6P,EAAc1H,EAAI,EAEpB,MAAM07D,EAAgB,IAAIr6D,EAAM2F,QAEhC,IAAI20D,EAAkB,EAClBC,EAAgBxnE,KAAKisD,OAAO9nD,OAAS,EAEvCkuD,SAEAA,GAAc,GACdA,GAAcryD,KAAKisD,OAAO9nD,SAE1BojE,EAAkBlV,EAClBmV,EAAgBnV,GAElB,IAAK,IAAInnD,EAAIq8D,EAAiBr8D,GAAKs8D,EAAet8D,IAAK,CACjD+7D,UACFA,GAAsBjnE,KAAK8hD,aAG7B,MAAM2P,EAAQzxD,KAAKkjD,SAASh4C,GACtBk1B,EAAcqxB,EAAMrxB,YAC1B,IAAIihB,EAeJ,GAdI4lB,IACFjnE,KAAK+hD,kBAAkB72C,EAAGo8D,GAC1BjmB,EAAiBimB,GAEfnT,GACF/zB,EAAYppB,yBACVm9C,EACA9S,EACA8lB,EACAC,EACAC,EACA7Q,GAGApd,GAAUI,EAAW,CACvB,IAAKJ,IAAWI,EACd,MAAM,IAAIn4C,MACR,oFAGJ++B,EAAYvrB,4BACVukC,EACAI,EACA6H,EACA8lB,EACAC,EACAC,EACA5M,EACAnnD,EAEH,CACG43C,GACF9qB,EAAY/rB,qBACV62C,EACA7J,EACA8lB,EACAC,EACAC,GAGAjT,GACFh0B,EAAY/oB,oBACV+8C,EACA3C,EAAMl6C,aACN4vD,EACAC,EACAC,GAGAx4C,GACFuR,EAAYzoB,4BACVkX,EACA7uB,KAAK0Q,4BACL2wC,EACA8lB,EACAC,EACAC,EACAH,GAGJG,GAAajnC,EAAY9vB,eAC1B,CACF,CAUD,iBAAA6kD,CAAkBF,EAAOC,EAAKuS,GAAU,GACtC,MAAM38D,EAAaoqD,EAAMD,EAAQ,EAC3ByS,EAAe,IAAIjmE,aAA0B,EAAbqJ,GActC,IAAI68D,EAbJ3nE,KAAK26D,oBACH,KACA,KACA,KACA+M,EACA,KACA,UACAjkE,OACAA,OACAA,OACAA,EACAwxD,GAGF,IAAIxqD,EAAiBg9D,EAAU,EAAI,EACnCE,EAAa,IAAIhmE,WAAWmJ,EAAaL,GACzC,IAAK,IAAIS,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,IAAK,IAAI8a,EAAI,EAAGA,EAAI,EAAGA,IACrB2hD,EAAWz8D,EAAIT,EAAiBub,GAAKrhB,KAAKgc,MACd,IAA1B+mD,EAAiB,EAAJx8D,EAAQ8a,IAGrByhD,IAASE,EAAWz8D,EAAIT,EAAiB,GAAK,IACnD,CACD,OAAOk9D,CACR,CASD,eAAAvS,CAAgBH,EAAOC,EAAKuS,GAAU,GACpC,MAAM38D,EAAaoqD,EAAMD,EAAQ,EAC3ByS,EAAe,IAAIjmE,aAA0B,EAAbqJ,GActC,GAbA9K,KAAK26D,oBACH,KACA,KACA,KACA+M,EACA,KACA,UACAjkE,OACAA,OACAA,OACAA,EACAwxD,IAEGwS,EAAS,OAAOC,EACrB,IAAIE,EAAqB,IAAInmE,aAA0B,EAAbqJ,GAC1C,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,IAAK,IAAI8a,EAAI,EAAGA,EAAI,EAAGA,IACrB4hD,EAAuB,EAAJ18D,EAAQ8a,GAAK0hD,EAAiB,EAAJx8D,EAAQ8a,GAEvD4hD,EAAuB,EAAJ18D,EAAQ,GAAK,CACjC,CACD,OAAO08D,CACR,CAWDr2D,eAAiB,WACf,MAAMo1D,EAAY,CAAA,EAElB,OAAO,SAASD,EAAaj1D,EAAWw1D,GACtCjnE,KAAKymE,wBAAwBC,EAAaC,EAAWM,GACrDN,EAAUvmC,YAAY7uB,eACpBo1D,EAAUG,WACVr1D,EACAk1D,EAAUtlB,eAElB,CACG,CAXgB,GAYjBltC,kBAAoB,WAClB,MAAMwyD,EAAY,CAAA,EAElB,OAAO,SAASD,EAAaj1D,EAAWw1D,GAEtC,OADAjnE,KAAKymE,wBAAwBC,EAAaC,EAAWM,GAC9CN,EAAUvmC,YAAYjsB,kBAAkBwyD,EAAUG,WAC/D,CACG,CAPmB,GAoBpBp0D,yBAA2B,WACzB,MAAMi0D,EAAY,CAAA,EACZrzD,EAAgB,IAAIrG,EAAM+F,QAEhC,OAAO,SAAS0zD,EAAatzD,EAAUC,EAAa4zD,GAClDjnE,KAAKymE,wBAAwBC,EAAaC,EAAWM,GACrD3zD,EAAc5H,OAAIjI,EAClB6P,EAAc3H,OAAIlI,EAClB6P,EAAc1H,OAAInI,EACdzD,KAAKmjD,kBAAoBxK,GAAgBE,OAAMvlC,EAAc1H,EAAI,GACrE+6D,EAAUvmC,YAAY1tB,yBACpBi0D,EAAUG,WACV1zD,EACAC,EACAszD,EAAUtlB,eACV/tC,EAER,CACG,CAlB0B,GAyB3BS,cAAgB,WACd,MAAM4yD,EAAY,CAAA,EAElB,OAAO,SAASD,EAAa1yD,GAC3BhU,KAAKymE,wBAAwBC,EAAaC,GAC1CA,EAAUvmC,YAAYrsB,cAAc4yD,EAAUG,WAAY9yD,EAChE,CACG,CAPe,GAchB,iBAAA+tC,CAAkBsQ,EAAYwV,GAC5B,MAAMpW,EAAQzxD,KAAKkjD,SAASmP,GAC5BZ,EAAM3J,gBAAgB9nD,KAAK8hD,aAC3B+lB,EAAaj0D,KAAK69C,EAAM//C,UACzB,CAOD,QAAAwxC,CAASmP,GACP,GAAIA,EAAa,GAAKA,GAAcryD,KAAKisD,OAAO9nD,OAC9C,MAAM,IAAI9C,MAAM,iDAElB,OAAOrB,KAAKisD,OAAOoG,EACpB,CAED,aAAAyV,GACE,OAAO9nE,KAAKisD,OAAO9nD,MACpB,CAED,sBAAA0iE,CAAuBH,GACrB,OAAO1mE,KAAKkjD,SAASljD,KAAKwwD,gCAAgCkW,IACvDtmC,WACJ,CAED,qBAAA6iB,CAAsByjB,GACpB,OAAO1mE,KAAKwwD,gCAAgCkW,EAC7C,CAED,yBAAAM,CAA0BN,GACxB,OAAO1mE,KAAKkjD,SAASljD,KAAKwwD,gCAAgCkW,IACvDh1D,SACJ,CAED,kBAAAq1D,CAAmBL,GACjB,OAAO1mE,KAAK+d,qCAAqC2oD,EAClD,CAED,4BAAO3B,CAAsBv7B,GAC3B,MAAMu+B,EAAiBv+B,EAAOzyB,SACxBixD,EAAiB,GACvB,IAAK,IAAI98D,EAAI,EAAGA,EAAI,GAAIA,IACtB88D,EAAe98D,GAAKvG,KAAKgc,MAA0B,IAApBonD,EAAe78D,IAEhD,OAAO88D,CACR,CAED,kBAAAC,CAAmBC,GAAuB,EAAO7V,GAC/C,IAAIvnD,EAAa9K,KAAKsQ,gBACtB,GAAI+hD,QAAiD,CACnD,GAAIA,EAAa,GAAKA,GAAcryD,KAAKisD,OAAO9nD,OAC9C,MAAM,IAAI9C,MACR,2DAGJyJ,EAAa9K,KAAKisD,OAAOoG,GAAYjyB,YAAY9vB,eAClD,CAED,MAAMo3D,EAAe,IAAIjmE,aAA0B,EAAbqJ,GACtC9K,KAAK26D,oBACH,KACA,KACA,KACA+M,EACA,KACA,KACAQ,OACAzkE,OACAA,OACAA,OACAA,EACA4uD,GAGF,MAAM5tD,EAAM,IAAIwI,EAAM+F,QAChBtO,EAAM,IAAIuI,EAAM+F,QACtB,IAAK,IAAI9H,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,MAAMgR,EAAa,EAAJhR,EACTQ,EAAIg8D,EAAaxrD,GACjBvQ,EAAI+7D,EAAaxrD,EAAS,GAC1BtQ,EAAI87D,EAAaxrD,EAAS,IACtB,IAANhR,GAAWQ,EAAIjH,EAAIiH,KAAGjH,EAAIiH,EAAIA,IACxB,IAANR,GAAWS,EAAIlH,EAAIkH,KAAGlH,EAAIkH,EAAIA,IACxB,IAANT,GAAWU,EAAInH,EAAImH,KAAGnH,EAAImH,EAAIA,IACxB,IAANV,GAAWQ,EAAIhH,EAAIgH,KAAGhH,EAAIgH,EAAIA,IACxB,IAANR,GAAWS,EAAIjH,EAAIiH,KAAGjH,EAAIiH,EAAIA,IACxB,IAANT,GAAWU,EAAIlH,EAAIkH,KAAGlH,EAAIkH,EAAIA,EACnC,CAED,OAAO,IAAIqB,EAAMm7C,KAAK3jD,EAAKC,EAC5B,EC3yFI,MAAMyjE,GACX,WAAAxoE,CAAYyoE,GACVpoE,KAAKooE,UAAYA,GAAa5nC,SAASt9B,KAEvClD,KAAKqoE,UAAY,GAEjB,MAAMC,EAAS,CACb,CAAC,kBAAmB,kBACpB,CAAC,iBAAkB,gBACnB,CAAC,YAAa,YACd,CAAC,cAAe,sBAChB,CAAC,kBAAmB,kBACpB,CAAC,MAAO,OACR,CAAC,aAAc,oBACf,CAAC,YAAa,YACd,CAAC,gBAAiB,gBAClB,CAAC,mBAAoB,mBACrB,CAAC,cAAe,cAChB,CAAC,mBAAoB,mBAGvBtoE,KAAKuoE,mBAAqB/nC,SAASC,cAAc,OACjD,MAAMkC,EAAQnC,SAASC,cAAc,SACrCkC,EAAM6lC,UAAY,81BAgClBxoE,KAAKuoE,mBAAmBE,OAAO9lC,GAE/B3iC,KAAK0oE,UAAYloC,SAASC,cAAc,OACxCzgC,KAAK0oE,UAAUC,UAAY,YAE3B,MAAMC,EAAYpoC,SAASC,cAAc,OACzCmoC,EAAUjmC,MAAMkmC,QAAU,QAE1B,IAAK,IAAIC,KAAeR,EAAQ,CAC9B,MAAMtkD,EAAMwc,SAASC,cAAc,OACnCzc,EAAI2e,MAAMkmC,QAAU,YACpB7kD,EAAI2kD,UAAY,iBAEhB,MAAMI,EAAYvoC,SAASC,cAAc,OACzCsoC,EAAUpmC,MAAMkmC,QAAU,aAC1BE,EAAUP,UAAY,GAAGM,EAAY,OACrCC,EAAUC,UAAU7gC,IAAI,kBAAmB,cAE3C,MAAM8gC,EAAazoC,SAASC,cAAc,OAC1CwoC,EAAWtmC,MAAMkmC,QAAU,aAC3BI,EAAWtmC,MAAMyK,MAAQ,OACzB67B,EAAWT,UAAY,IACvBS,EAAWN,UAAY,kBAEvB,MAAMO,EAAW1oC,SAASC,cAAc,OACxCyoC,EAASvmC,MAAMkmC,QAAU,aACzBK,EAASV,UAAY,GACrBU,EAASP,UAAY,kBAErB3oE,KAAKqoE,UAAUS,EAAY,IAAMI,EAEjCllD,EAAI0c,YAAYqoC,GAChB/kD,EAAI0c,YAAYuoC,GAChBjlD,EAAI0c,YAAYwoC,GAEhBN,EAAUloC,YAAY1c,EACvB,CAEDhkB,KAAK0oE,UAAUhoC,YAAYkoC,GAC3B5oE,KAAKuoE,mBAAmBE,OAAOzoE,KAAK0oE,WACpC1oE,KAAKuoE,mBAAmB5lC,MAAMkmC,QAAU,OACxC7oE,KAAKooE,UAAU1nC,YAAY1gC,KAAKuoE,oBAEhCvoE,KAAKi1C,SAAU,CAChB,CAEDlO,OAAS,SACP04B,EACA0J,EACAC,EACAC,EACAC,EACAC,EACAC,EACA1+D,EACA2+D,EACAC,EACAC,EACAC,EACA7lB,EACA8lB,GAEA,MAAMC,EAAkB,GAAGX,EAAez9D,EAAEtH,QAC1C,OACI+kE,EAAex9D,EAAEvH,QAAQ,OAAO+kE,EAAev9D,EAAExH,QAAQ,KAK/D,GAJIpE,KAAKqoE,UAAUc,eAAeX,YAAcsB,IAC9C9pE,KAAKqoE,UAAUc,eAAeX,UAAYsB,GAGxCV,EAAsB,CACxB,MAAMW,EAAMX,EACNY,EAAqB,GAAGD,EAAIr+D,EAAEtH,QAAQ,OAAO2lE,EAAIp+D,EAAEvH,QACvD,OACI2lE,EAAIn+D,EAAExH,QAAQ,KAChBpE,KAAKqoE,UAAU4B,aAAazB,YAAcwB,IAC5ChqE,KAAKqoE,UAAU4B,aAAazB,UAAYwB,EAE3C,CAED,MAAME,EAAiB,GAAGb,EAAS39D,EAAEtH,QAAQ,OAAOilE,EAAS19D,EAAEvH,QAC7D,OACIilE,EAASz9D,EAAExH,QAAQ,KASzB,GARIpE,KAAKqoE,UAAUgB,SAASb,YAAc0B,IACxClqE,KAAKqoE,UAAUgB,SAASb,UAAY0B,GAGtClqE,KAAKqoE,UAAUiB,mBAAmBd,UAAYc,EAC5C,eACA,cAEEC,EAAoB,CACtB,MAAMY,EAAUZ,EACVa,EAAkB,GAAGD,EAAQz+D,EAAEtH,QAAQ,OAAO+lE,EAAQx+D,EAAEvH,QAC5D,OACI+lE,EAAQv+D,EAAExH,QAAQ,KACxBpE,KAAKqoE,UAAUgC,eAAe7B,UAAY4B,CAChD,MACMpqE,KAAKqoE,UAAUgC,eAAe7B,UAAY,MAG5CxoE,KAAKqoE,UAAUiC,IAAI9B,UAAYgB,EAC/BxpE,KAAKqoE,UAAUkC,aAAa/B,UAAY,GAAG/I,EAAiB/zD,OAAO+zD,EAAiB9zD,IAEpF3L,KAAKqoE,UAAUhJ,iBAAiBmJ,UAAY,GAAGiB,mBAAkC3+D,MAAe4+D,EAAoBtlE,QAClH,OAGFpE,KAAKqoE,UAAUmC,SAAShC,UAAY,GAAGmB,EAAavlE,QAAQ,QAC5DpE,KAAKqoE,UAAUuB,gBAAgBpB,UAAY,GAAGoB,EAAgBxlE,QAAQ,KACtEpE,KAAKqoE,UAAUtkB,WAAWykB,UAAY,GAAGzkB,EAAW3/C,QAAQ,KAC5DpE,KAAKqoE,UAAUwB,eAAerB,UAAY,GAAGqB,GACjD,EAEE,YAAAY,CAAarC,GAETpoE,KAAKooE,WACLpoE,KAAKuoE,mBAAmBmC,gBAAkB1qE,KAAKooE,WAE/CpoE,KAAKooE,UAAUuC,YAAY3qE,KAAKuoE,oBAE9BH,IACFpoE,KAAKooE,UAAYA,EACjBpoE,KAAKooE,UAAU1nC,YAAY1gC,KAAKuoE,oBAChCvoE,KAAKuoE,mBAAmB5lC,MAAMioC,OAAS5qE,KAAKooE,UAAUzlC,MAAMioC,OAAS,EAExE,CAED,IAAAC,GACE7qE,KAAKuoE,mBAAmB5lC,MAAMkmC,QAAU,QACxC7oE,KAAKi1C,SAAU,CAChB,CAED,IAAA61B,GACE9qE,KAAKuoE,mBAAmB5lC,MAAMkmC,QAAU,OACxC7oE,KAAKi1C,SAAU,CAChB,EC9LI,MAAM81B,GACX,WAAAprE,CAAYyoE,GACVpoE,KAAKW,MAAQ,EAEbX,KAAKgrE,MAAQ,GAEbhrE,KAAKooE,UAAYA,GAAa5nC,SAASt9B,KAEvClD,KAAKirE,0BAA4BzqC,SAASC,cAAc,OACxDzgC,KAAKirE,0BAA0BtC,UAAY,4BAC3C3oE,KAAKirE,0BAA0BtoC,MAAMkmC,QAAU,OAE/C7oE,KAAKkrE,eAAiB1qC,SAASC,cAAc,OAC7CzgC,KAAKkrE,eAAevC,UAAY,iBAEhC3oE,KAAKmrE,sBAAwB3qC,SAASC,cAAc,OACpDzgC,KAAKmrE,sBAAsBxC,UAAY,wBAEvC3oE,KAAKorE,YAAc5qC,SAASC,cAAc,OAC1CzgC,KAAKorE,YAAYzC,UAAY,cAE7B3oE,KAAKmrE,sBAAsBzqC,YAAY1gC,KAAKorE,aAC5CprE,KAAKkrE,eAAexqC,YAAY1gC,KAAKmrE,uBACrCnrE,KAAKirE,0BAA0BvqC,YAAY1gC,KAAKkrE,gBAEhD,MAAMvoC,EAAQnC,SAASC,cAAc,SACrCkC,EAAM6lC,UAAY,m3CA8ClBxoE,KAAKirE,0BAA0BvqC,YAAYiC,GAC3C3iC,KAAKooE,UAAU1nC,YAAY1gC,KAAKirE,0BACjC,CAED,IAAAJ,GACE7qE,KAAKirE,0BAA0BtoC,MAAMkmC,QAAU,OAChD,CAED,IAAAiC,GACE9qE,KAAKirE,0BAA0BtoC,MAAMkmC,QAAU,MAChD,CAED,WAAAwC,CAAYC,GACVtrE,KAAKorE,YAAYzoC,MAAMyK,MAAQk+B,EAAW,GAC3C,CAED,YAAAb,CAAarC,GAETpoE,KAAKooE,WACLpoE,KAAKirE,0BAA0BP,gBAAkB1qE,KAAKooE,WAEtDpoE,KAAKooE,UAAUuC,YAAY3qE,KAAKirE,2BAE9B7C,IACFpoE,KAAKooE,UAAYA,EACjBpoE,KAAKooE,UAAU1nC,YAAY1gC,KAAKirE,2BAChCjrE,KAAKirE,0BAA0BtoC,MAAMioC,OACnC5qE,KAAKooE,UAAUzlC,MAAMioC,OAAS,EAEnC,ECjGI,MAAMW,GACX7rE,oBAAsB,EAEtB,WAAAC,CAAY6rE,EAASpD,GACnBpoE,KAAKyrE,UAAY,EACjBzrE,KAAK0rE,UAAYH,GAAeI,eAEhC3rE,KAAKgrE,MAAQ,GAEbhrE,KAAKwrE,QAAUA,GAAW,aAC1BxrE,KAAKooE,UAAYA,GAAa5nC,SAASt9B,KAEvClD,KAAK4rE,sBAAwBprC,SAASC,cAAc,OACpDzgC,KAAK4rE,sBAAsBjD,UAAY,wBAAwB3oE,KAAK0rE,YACpE1rE,KAAK4rE,sBAAsBjpC,MAAMkmC,QAAU,OAE3C7oE,KAAK6rE,wBAA0BrrC,SAASC,cAAc,OACtDzgC,KAAK6rE,wBAAwBlD,UAAY,0BAA0B3oE,KAAK0rE,YACxE1rE,KAAK8rE,eAAiBtrC,SAASC,cAAc,OAC7CzgC,KAAK8rE,eAAe9C,UAAU7gC,IAC5B,UAAUnoC,KAAK0rE,YACf,iBAAiB1rE,KAAK0rE,aAExB1rE,KAAK+rE,wBAA0BvrC,SAASC,cAAc,OACtDzgC,KAAK+rE,wBAAwB/C,UAAU7gC,IACrC,mBAAmBnoC,KAAK0rE,YACxB,0BAA0B1rE,KAAK0rE,aAEjC1rE,KAAK+rE,wBAAwBvD,UAAYxoE,KAAKwrE,QAE9CxrE,KAAKgsE,oBAAsBxrC,SAASC,cAAc,OAClDzgC,KAAKgsE,oBAAoBrD,UAAY,sBAAsB3oE,KAAK0rE,YAChE1rE,KAAKisE,WAAazrC,SAASC,cAAc,OACzCzgC,KAAKisE,WAAWjD,UAAU7gC,IACxB,UAAUnoC,KAAK0rE,YACf,aAAa1rE,KAAK0rE,aAEpB1rE,KAAKksE,oBAAsB1rC,SAASC,cAAc,OAClDzgC,KAAKksE,oBAAoBlD,UAAU7gC,IACjC,mBAAmBnoC,KAAK0rE,YACxB,sBAAsB1rE,KAAK0rE,aAE7B1rE,KAAKksE,oBAAoB1D,UAAYxoE,KAAKwrE,QAE1CxrE,KAAK6rE,wBAAwBnrC,YAAY1gC,KAAK8rE,gBAC9C9rE,KAAK6rE,wBAAwBnrC,YAAY1gC,KAAK+rE,yBAC9C/rE,KAAK4rE,sBAAsBlrC,YAAY1gC,KAAK6rE,yBAE5C7rE,KAAKgsE,oBAAoBtrC,YAAY1gC,KAAKisE,YAC1CjsE,KAAKgsE,oBAAoBtrC,YAAY1gC,KAAKksE,qBAC1ClsE,KAAK4rE,sBAAsBlrC,YAAY1gC,KAAKgsE,qBAE5C,MAAMrpC,EAAQnC,SAASC,cAAc,SACrCkC,EAAM6lC,UAAY,yCAEcxoE,KAAK0rE,sRAUV1rE,KAAK0rE,0QASd1rE,KAAK0rE,upBAkBW1rE,KAAK0rE,yiBAgBd1rE,KAAK0rE,wIAKI1rE,KAAK0rE,qGAIT1rE,KAAK0rE,wnBAkBL1rE,KAAK0rE,6FAId1rE,KAAK0rE,uMAOI1rE,KAAK0rE,uLASnC1rE,KAAK4rE,sBAAsBlrC,YAAYiC,GACvC3iC,KAAKooE,UAAU1nC,YAAY1gC,KAAK4rE,uBAEhC5rE,KAAKmsE,cAAa,GAAO,GAEzBnsE,KAAKosE,gBAAkB,EACxB,CAED,OAAAC,CAAQb,GACN,MAAMc,EAAU,CACdd,QAASA,EACT9qE,GAAIV,KAAKyrE,aAIX,OAFAzrE,KAAKgrE,MAAM3mE,KAAKioE,GAChBtsE,KAAK+mC,SACEulC,EAAQ5rE,EAChB,CAED,UAAA6rE,CAAW7rE,GACT,IAAI4K,EAAQ,EACZ,IAAK,IAAIkhE,KAAQxsE,KAAKgrE,MAAO,CAC3B,GAAIwB,EAAK9rE,KAAOA,EAAI,CAClBV,KAAKgrE,MAAMr7B,OAAOrkC,EAAO,GACzB,KACD,CACDA,GACD,CACDtL,KAAK+mC,QACN,CAED,cAAA0lC,GACEzsE,KAAKgrE,MAAQ,GACbhrE,KAAK+mC,QACN,CAED,iBAAA2lC,CAAkBhsE,EAAI8qE,GACpB,IAAK,IAAIgB,KAAQxsE,KAAKgrE,MACpB,GAAIwB,EAAK9rE,KAAOA,EAAI,CAClB8rE,EAAKhB,QAAUA,EACf,KACD,CAEHxrE,KAAK+mC,QACN,CAED,MAAAA,GACM/mC,KAAKgrE,MAAM7mE,OAAS,GACtBnE,KAAK6qE,OACL7qE,KAAK2sE,WAAW3sE,KAAKgrE,MAAMhrE,KAAKgrE,MAAM7mE,OAAS,GAAGqnE,UAElDxrE,KAAK8qE,MAER,CAED,IAAAD,GACE7qE,KAAK4rE,sBAAsBjpC,MAAMkmC,QAAU,QAC3C7oE,KAAKi1C,SAAU,CAChB,CAED,IAAA61B,GACE9qE,KAAK4rE,sBAAsBjpC,MAAMkmC,QAAU,OAC3C7oE,KAAKi1C,SAAU,CAChB,CAED,YAAAw1B,CAAarC,GAETpoE,KAAKooE,WACLpoE,KAAK4rE,sBAAsBlB,gBAAkB1qE,KAAKooE,WAElDpoE,KAAKooE,UAAUuC,YAAY3qE,KAAK4rE,uBAE9BxD,IACFpoE,KAAKooE,UAAYA,EACjBpoE,KAAKooE,UAAU1nC,YAAY1gC,KAAK4rE,uBAChC5rE,KAAK4rE,sBAAsBjpC,MAAMioC,OAAS5qE,KAAKooE,UAAUzlC,MAAMioC,OAAS,EAE3E,CAED,YAAAuB,CAAaS,EAAWC,GACtB,MAAMC,EAAkB,CACtBxmD,EACAukD,EACAgC,EACAE,EACAC,KAEIH,EACFvmD,EAAQqc,MAAMkmC,QAAUgC,EAAOkC,EAAe,OAE9C/sE,KAAKosE,gBAAgBY,GCxPF,EACzB1mD,EACA2mD,EACAF,EACAG,EACAC,KAEA,MAAMC,EAAYvoE,YAAYC,MAE9B,IAAIuoE,EACwB,SAA1B/mD,EAAQqc,MAAMkmC,QAAqB,EAAIyE,WAAWhnD,EAAQqc,MAAMp2B,SAC9DghE,MAAMF,KAAeA,EAAe,GAExC,MAAMG,EAAW/nE,OAAOgoE,aAAY,KAClC,MACMC,EADc7oE,YAAYC,MACFsoE,EAE9B,IAGI7gE,EAHAyZ,EAAIrhB,KAAKF,IAAIipE,EAAUR,EAAU,GACjClnD,EAAI,OAAOA,EAAI,GAGfinD,GACF1gE,GAAW,EAAMyZ,GAAKqnD,EAClB9gE,EAAU,OAAQA,EAAU,IAEhCA,GAAW,EAAM8gE,GAAgBrnD,EAAIqnD,EAGnC9gE,EAAU,GACZ+Z,EAAQqc,MAAMkmC,QAAUkE,EACxBzmD,EAAQqc,MAAMp2B,QAAUA,GAExB+Z,EAAQqc,MAAMkmC,QAAU,OAGtB7iD,GAAK,IACHmnD,GAAYA,IAChB1nE,OAAOkoE,cAAcH,GACtB,GACA,IACH,OAAOA,CAAQ,EDgNoCI,CAC3CtnD,GACCukD,EACDkC,EAzPqB,KA2PrB,KACE/sE,KAAKosE,gBAAgBY,GAAwB,IAAI,GAGtD,EAEHF,EACE9sE,KAAK6rE,yBACJe,EACDC,EACA,QACA,GAEFC,EAAgB9sE,KAAKgsE,oBAAqBY,EAAWC,EAAS,OAAQ,GACtE7sE,KAAK4sE,UAAYA,CAClB,CAED,UAAAD,CAAWrrE,GACTtB,KAAK+rE,wBAAwBvD,UAAYlnE,EACzCtB,KAAKksE,oBAAoB1D,UAAYlnE,CACtC,EEnQI,MAAMusE,GACX,mBAAOC,CAAale,EAAUme,EAAc,IAC1C,MAAMj/B,EAAStO,SAASC,cAAc,UAgHtC,SAASutC,IACPl/B,EAAOnM,MAAMkmC,QAAU,GAEvB/5B,EAAOnM,MAAMsrC,OAAS,OACtBn/B,EAAOnM,MAAM4J,KAAO,mBACpBuC,EAAOnM,MAAMyK,MAAQ,QAErB0B,EAAOo/B,aAAe,KACtBp/B,EAAOq/B,aAAe,KAEtBr/B,EAAOs/B,QAAU,IAClB,CAmBD,SAASC,EAAe/nD,GACtBA,EAAQqc,MAAMpY,SAAW,WACzBjE,EAAQqc,MAAM+J,OAAS,OACvBpmB,EAAQqc,MAAM2rC,QAAU,WACxBhoD,EAAQqc,MAAM4rC,OAAS,iBACvBjoD,EAAQqc,MAAM6rC,aAAe,MAC7BloD,EAAQqc,MAAM8rC,WAAa,kBAC3BnoD,EAAQqc,MAAMnY,MAAQ,OACtBlE,EAAQqc,MAAM+rC,KAAO,yBACrBpoD,EAAQqc,MAAMgsC,UAAY,SAC1BroD,EAAQqc,MAAMp2B,QAAU,MACxB+Z,EAAQqc,MAAMisC,QAAU,OACxBtoD,EAAQqc,MAAMioC,OAAS,KACxB,CAED,GAAI,OAAQtkE,UAaV,OAZAwoC,EAAOpuC,GAAK,WACZouC,EAAOnM,MAAMkmC,QAAU,OAEvBwF,EAAev/B,GAEfxoC,UAAUuoE,GACPC,mBAAmB,gBACnBluE,MAAK,SAASmuE,GACbA,EApKN,WACE,QAA+BtrE,IAA3BsqE,EAAYiB,WAA0B,CACxC,MAAMC,EAAUzuC,SAASC,cAAc,OACvCwuC,EAAQtsC,MAAMkmC,QAAU,OACxBroC,SAASt9B,KAAKw9B,YAAYuuC,GAE1B,MAAMC,EAAM1uC,SAAS2uC,gBACnB,6BACA,OAEFD,EAAIhoB,aAAa,QAAS,IAC1BgoB,EAAIhoB,aAAa,SAAU,IAC3BgoB,EAAIvsC,MAAMpY,SAAW,WACrB2kD,EAAIvsC,MAAM2J,MAAQ,OAClB4iC,EAAIvsC,MAAM8J,IAAM,OAChByiC,EAAI9oC,iBAAiB,SAAS,WAC5BgpC,EAAela,KACzB,IACQ+Z,EAAQvuC,YAAYwuC,GAEpB,MAAM/sE,EAAOq+B,SAAS2uC,gBACpB,6BACA,QAEFhtE,EAAK+kD,aAAa,IAAK,iCACvB/kD,EAAK+kD,aAAa,SAAU,QAC5B/kD,EAAK+kD,aAAa,eAAgB,GAClCgoB,EAAIxuC,YAAYv+B,QAEqBsB,IAAjCsqE,EAAYsB,mBACdtB,EAAYsB,iBAAmB,IAGjCtB,EAAYsB,iBAAiBhrE,KAAK,eAClC0pE,EAAYiB,WAAa,CAAEM,KAAML,EAClC,CAID,IAAIG,EAAiB,KAErB1sE,eAAe6sE,EAAiBC,GAC9BA,EAAQppC,iBAAiB,MAAOqpC,GAEhC7f,EAASif,GAAGa,sBAAsB,eAE5B9f,EAASif,GAAGc,WAAWH,GAE7B1gC,EAAO8gC,YAAc,UACrB7B,EAAYiB,WAAWM,KAAK3sC,MAAMkmC,QAAU,GAE5CuG,EAAiBI,CAClB,CAED,SAASC,IACPL,EAAe7oC,oBAAoB,MAAOkpC,GAE1C3gC,EAAO8gC,YAAc,WACrB7B,EAAYiB,WAAWM,KAAK3sC,MAAMkmC,QAAU,OAE5CuG,EAAiB,IAClB,CAIDtgC,EAAOnM,MAAMkmC,QAAU,GAEvB/5B,EAAOnM,MAAMsrC,OAAS,UACtBn/B,EAAOnM,MAAM4J,KAAO,mBACpBuC,EAAOnM,MAAMyK,MAAQ,QAErB0B,EAAO8gC,YAAc,WAErB9gC,EAAOo/B,aAAe,WACpBp/B,EAAOnM,MAAMp2B,QAAU,KAC/B,EAEMuiC,EAAOq/B,aAAe,WACpBr/B,EAAOnM,MAAMp2B,QAAU,KAC/B,EAEMuiC,EAAOs/B,QAAU,WACQ,OAAnBgB,EACF9oE,UAAUuoE,GACPgB,eAAe,eAAgB9B,GAC/BntE,KAAK2uE,IAERH,EAAela,WAEmBzxD,IAA9B6C,UAAUuoE,GAAGiB,cACfxpE,UAAUuoE,GACPiB,aAAa,eAAgB/B,GAC7BntE,KAAK2uE,GACLvuE,OAAO+uE,IACN1mC,QAAQC,KAAKymC,EAAI,IAIjC,OAEwCtsE,IAA9B6C,UAAUuoE,GAAGiB,cACfxpE,UAAUuoE,GACPiB,aAAa,eAAgB/B,GAC7BntE,KAAK2uE,GACLvuE,OAAO+uE,IACN1mC,QAAQC,KAAKymC,EAAI,GAGxB,CAwDiBC,IAxChBhC,IAEAl/B,EAAO8gC,YAAc,mBAuC3B,IACS5uE,OArCL,SAA0BivE,GACxBjC,IAEA3kC,QAAQC,KACN,sDACA2mC,GAGFnhC,EAAO8gC,YAAc,gBACtB,IA8BQ9gC,EACF,CACL,MAAM08B,EAAUhrC,SAASC,cAAc,KAgBvC,OAd+B,IAA3Bh7B,OAAOyqE,iBACT1E,EAAQ5qC,KAAOJ,SAAS2vC,SAASvvC,KAAKwvC,QAAQ,SAAU,UACxD5E,EAAQhD,UAAY,sBAEpBgD,EAAQ5qC,KAAO,4BACf4qC,EAAQhD,UAAY,uBAGtBgD,EAAQ7oC,MAAM4J,KAAO,mBACrBi/B,EAAQ7oC,MAAMyK,MAAQ,QACtBo+B,EAAQ7oC,MAAM0tC,eAAiB,OAE/BhC,EAAe7C,GAERA,CACR,CACF,EChMI,MAAM8E,GACX,mBAAOxC,CAAale,EAAUme,EAAc,IAC1C,MAAMj/B,EAAStO,SAASC,cAAc,UAsFtC,SAASutC,IACPl/B,EAAOnM,MAAMkmC,QAAU,GAEvB/5B,EAAOnM,MAAMsrC,OAAS,OACtBn/B,EAAOnM,MAAM4J,KAAO,mBACpBuC,EAAOnM,MAAMyK,MAAQ,QAErB0B,EAAOo/B,aAAe,KACtBp/B,EAAOq/B,aAAe,KAEtBr/B,EAAOs/B,QAAU,IAClB,CAmBD,SAASC,EAAe/nD,GACtBA,EAAQqc,MAAMpY,SAAW,WACzBjE,EAAQqc,MAAM+J,OAAS,OACvBpmB,EAAQqc,MAAM2rC,QAAU,WACxBhoD,EAAQqc,MAAM4rC,OAAS,iBACvBjoD,EAAQqc,MAAM6rC,aAAe,MAC7BloD,EAAQqc,MAAM8rC,WAAa,kBAC3BnoD,EAAQqc,MAAMnY,MAAQ,OACtBlE,EAAQqc,MAAM+rC,KAAO,yBACrBpoD,EAAQqc,MAAMgsC,UAAY,SAC1BroD,EAAQqc,MAAMp2B,QAAU,MACxB+Z,EAAQqc,MAAMisC,QAAU,OACxBtoD,EAAQqc,MAAMioC,OAAS,KACxB,CAED,GAAI,OAAQtkE,UAiBV,OAhBAwoC,EAAOpuC,GAAK,WACZouC,EAAOnM,MAAMkmC,QAAU,OAEvBwF,EAAev/B,GAEfxoC,UAAUuoE,GACPC,mBAAmB,gBACnBluE,MAAK,SAASmuE,GACbA,EA1IN,WACE,IAAIK,EAAiB,KAErB1sE,eAAe6sE,EAAiBC,GAC9BA,EAAQppC,iBAAiB,MAAOqpC,SAE1B7f,EAASif,GAAGc,WAAWH,GAC7B1gC,EAAO8gC,YAAc,UAErBR,EAAiBI,CAClB,CAED,SAASC,IACPL,EAAe7oC,oBAAoB,MAAOkpC,GAE1C3gC,EAAO8gC,YAAc,WAErBR,EAAiB,IAClB,CAIDtgC,EAAOnM,MAAMkmC,QAAU,GAEvB/5B,EAAOnM,MAAMsrC,OAAS,UACtBn/B,EAAOnM,MAAM4J,KAAO,mBACpBuC,EAAOnM,MAAMyK,MAAQ,QAErB0B,EAAO8gC,YAAc,WASrB,MAAMW,EAAiB,IAClBxC,EACHsB,iBAAkB,CAChB,cACA,gBACA,YACItB,EAAYsB,kBAAoB,KAIxCvgC,EAAOo/B,aAAe,WACpBp/B,EAAOnM,MAAMp2B,QAAU,KAC/B,EAEMuiC,EAAOq/B,aAAe,WACpBr/B,EAAOnM,MAAMp2B,QAAU,KAC/B,EAEMuiC,EAAOs/B,QAAU,WACQ,OAAnBgB,EACF9oE,UAAUuoE,GACPgB,eAAe,eAAgBU,GAC/B3vE,KAAK2uE,IAERH,EAAela,WAEmBzxD,IAA9B6C,UAAUuoE,GAAGiB,cACfxpE,UAAUuoE,GACPiB,aAAa,eAAgBS,GAC7B3vE,KAAK2uE,GACLvuE,OAAO+uE,IACN1mC,QAAQC,KAAKymC,EAAI,IAIjC,OAEwCtsE,IAA9B6C,UAAUuoE,GAAGiB,cACfxpE,UAAUuoE,GACPiB,aAAa,eAAgBS,GAC7B3vE,KAAK2uE,GACLvuE,OAAO+uE,IACN1mC,QAAQC,KAAKymC,EAAI,GAGxB,CAwDiBS,IAxChBxC,IAEAl/B,EAAO8gC,YAAc,oBAwCbb,GAAauB,GAASG,oBACxB3hC,EAAO/N,OAEnB,IACS//B,OAzCL,SAA0BivE,GACxBjC,IAEA3kC,QAAQC,KACN,sDACA2mC,GAGFnhC,EAAO8gC,YAAc,gBACtB,IAkCQ9gC,EACF,CACL,MAAM08B,EAAUhrC,SAASC,cAAc,KAgBvC,OAd+B,IAA3Bh7B,OAAOyqE,iBACT1E,EAAQ5qC,KAAOJ,SAAS2vC,SAASvvC,KAAKwvC,QAAQ,SAAU,UACxD5E,EAAQhD,UAAY,sBAEpBgD,EAAQ5qC,KAAO,4BACf4qC,EAAQhD,UAAY,uBAGtBgD,EAAQ7oC,MAAM4J,KAAO,mBACrBi/B,EAAQ7oC,MAAMyK,MAAQ,QACtBo+B,EAAQ7oC,MAAM0tC,eAAiB,OAE/BhC,EAAe7C,GAERA,CACR,CACF,CAED,qCAAOkF,GACL,GAAyB,oBAAdpqE,WAA6B,OAAQA,UAAW,CAGzD,GAAI,iBAAiBqqE,KAAKrqE,UAAUC,WAAY,OAEhDD,UAAUuoE,GAAGzoC,iBAAiB,kBAAkB,KAC9CkqC,GAASG,oBAAqB,CAAI,GAErC,CACF,EAGHH,GAASG,oBAAqB,EAC9BH,GAASI,iCCxMG,MAACE,GAAY,CACvBpvC,KAAM,EACNqvC,GAAI,EACJC,GAAI,GCHN,ICAAC,GAAe,+uFCOf,SAASC,GAAWznB,GAClB,IAAI0nB,EACAC,EACAC,EACAC,EACAtvB,EACAh3C,EACAumE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAplE,EA8FJ08C,EAAKsB,UAAa/hC,IAChB,GAAIA,EAAEnmB,KAAKuoD,QACTA,QAAUpiC,EAAEnmB,KAAKuoD,QACjBoJ,aAAexrC,EAAEnmB,KAAK2xD,aAClB8c,EACF,IAAIzvE,WACFuvE,EACAU,EAAgB9oD,EAAEnmB,KAAKmL,MAAM8kB,KAAO/lB,EAAUqlE,YAAc,EACvC,EAArBppD,EAAEnmB,KAAKmL,MAAMyZ,OACb9T,IAAI,IAAI9R,WAAWupD,UAErB,IAAIzpD,aACFyvE,EACAU,EAAgB9oD,EAAEnmB,KAAKmL,MAAM8kB,KAAO/lB,EAAUslE,cAAgB,EACzC,EAArBrpD,EAAEnmB,KAAKmL,MAAMyZ,OACb9T,IAAI,IAAIhS,aAAaypD,UAErBpJ,GACF,IAAIvmC,YACF21D,EACAK,EAAyC,EAApBzoD,EAAEnmB,KAAKmL,MAAM8kB,KAClC9J,EAAEnmB,KAAKmL,MAAMyZ,OACb9T,IAAI,IAAI8H,YAAY+4C,eAExB2d,EAAqBnpD,EAAEnmB,KAAKmL,MAAM8kB,KAAO9J,EAAEnmB,KAAKmL,MAAMyZ,WACjD,GAAIuB,EAAEnmB,KAAKk2B,KAAM,CACtB,MAAMu5C,EAAcztE,KAAKF,IACvBqkB,EAAEnmB,KAAKk2B,KAAK4wC,kBAAoB,EAChCwI,GAEII,EAAY1tE,KAAKF,IACrBqkB,EAAEnmB,KAAKk2B,KAAKy5C,gBAAkB,EAC9BL,GAEIM,EAA0BzpD,EAAEnmB,KAAKk2B,KAAK05C,wBAE5C,IAAIC,EACAC,EACAC,EACCvB,IACHqB,EAAoB1pD,EAAEnmB,KAAKk2B,KAAK85C,cAChCD,EAAiB5pD,EAAEnmB,KAAKk2B,KAAKgnC,WACzB0S,IACFE,EAA2B3pD,EAAEnmB,KAAKk2B,KAAK+5C,uBAvI/C,SACEN,EACA7I,EACAoJ,EACAN,EACAC,EACAC,EACAC,GAEA,MAAMI,EAAgBjuE,YAAYC,MAElC,IAAKqsE,IACmB,IAAI51D,YACxB21D,EACAG,EACAmB,EAAkBluD,WAAazX,EAAUqlE,aAE7Bz+D,IAAI++D,GACC,IAAI/wE,aACrByvE,EACAM,EACAkB,EAAepuD,WAAazX,EAAUslE,eAE7B1+D,IAAIi/D,GACXH,GAAyB,CAC3B,IAAIK,EAEFA,EADExB,EACqB,IAAIzvE,WACzBuvE,EACAO,EACAgB,EAAyBnuD,WAAazX,EAAUqlE,aAG3B,IAAIzwE,aACzByvE,EACAO,EACAgB,EAAyBnuD,WAAazX,EAAUslE,eAGpDS,EAAqBn/D,IAAIg/D,EAC1B,CAGEX,IAAYA,EAAa,IAAIv2D,YAAYy2D,IAC9C,IAAIvwE,aAAayvE,EAAYW,EAAqB,IAAIp+D,IAAIo/D,GAC1D,IAAIt3D,YAAY21D,EAAYS,EAAmBK,GAAkBv+D,IAC/Dq+D,GAEFb,EAAa8B,QAAQC,YACnB3B,EACAO,EACAH,EACAC,EACAC,EACAE,EACAP,EACAC,EACAC,EACAQ,EACAM,EACA7I,EACA3+D,EACAynE,EACAnB,EACAtvB,GAGF,MAAMmxB,EAAc,CAClBC,UAAU,EACVZ,eAAgBA,EAChB7I,iBAAkBA,EAClBe,SAAU,GAEZ,IAAK2G,EAAiB,CACpB,MAAMgC,EAAgB,IAAI53D,YACxB21D,EACAI,EACA7H,KAEGsI,GAAoBA,EAAiB5tE,OAASslE,KACjDsI,EAAmB,IAAIx2D,YAAYkuD,IAErCsI,EAAiBt+D,IAAI0/D,GACrBF,EAAYE,cAAgBpB,CAC7B,CACD,MAAMqB,EAAcvuE,YAAYC,MAEhCmuE,EAAYzI,SAAW4I,EAAcN,EAErCvpB,EAAKyB,YAAYioB,EAClB,CAgDGp6C,CACEw5C,EACAD,EACAtpD,EAAEnmB,KAAKk2B,KAAKg6C,cACZN,EACAC,EACAC,EACAC,EAER,MAAW,GAAI5pD,EAAEnmB,KAAKgqD,KAAM,CAEtB9/C,EAAYic,EAAEnmB,KAAKgqD,KAAK9/C,UAExB/B,EAAage,EAAEnmB,KAAKgqD,KAAK7hD,WACzBqmE,EAAkBroD,EAAEnmB,KAAKgqD,KAAKwkB,gBAC9BC,EAAmBtoD,EAAEnmB,KAAKgqD,KAAKykB,iBAC/BtvB,EAAch5B,EAAEnmB,KAAKgqD,KAAK7K,YAC1BkwB,EAAmBlpD,EAAEnmB,KAAKgqD,KAAKqlB,iBAC/BC,EAAqB,EAErB,MAAMoB,EAA0BjC,EACN,EAAxBvkE,EAAUqlE,YACgB,EAA1BrlE,EAAUslE,cAENmB,EAAkB,IAAInkE,WAAW2Z,EAAEnmB,KAAKgqD,KAAK2mB,iBAE7CC,EAAa,GAAK1mE,EAAUslE,cAC5BqB,EAAiC1oE,EAAa+B,EAAUqlE,YACxDuB,EAA2B3oE,EAAauoE,EACxCK,EAA6CH,EAC7CI,EAAwCvC,EAC5CtmE,EAAa+B,EAAUqlE,YACvBpnE,EAAa+B,EAAUslE,cACnByB,EACJ9oE,EAAa+B,EAAUqlE,YACnB2B,EAAiC/oE,EAAa+B,EAAUqlE,YACxD4B,EAA2C1C,EAC/CY,EAAmBnlE,EAAUqlE,YAAc,EAC3CF,EAAmBnlE,EAAUslE,cAAgB,EACzC4B,EAAoCjyB,EACxCh3C,EAAa+B,EAAUqlE,YACvB,EACI8B,EAA8BlyB,EAClCj1C,EAAU+2C,UAAY2vB,EACtB,EACIU,EAAyC,GAA3BpnE,EAAUqnE,eAExBC,EACJX,EACAC,EACAC,EACAC,EACAC,EACAE,EACAD,EACAE,EACAC,EACAC,EACIG,EACJzvE,KAAKoJ,MAAMomE,EAAsBtnE,EAAUqnE,gBAAkB,EACzDG,EAAmB,CACvBC,OAAQ,CAAE,EACVC,IAAK,CACHC,OAAQ,IAAIC,YAAYC,OAAO,CAC7BC,QAASP,EACTQ,QAASR,EACTS,QAAQ,MAIdJ,YAAYK,QAAQxB,GACjB1yE,MAAMm0E,GACEN,YAAYO,YAAYD,EAAYV,KAE5CzzE,MAAMq0E,IACLhE,EAAegE,EACf5D,EAAsB,EACtBO,EAAgBP,EAAsBmC,EACtC3B,EAAsBD,EAAgB6B,EACtChC,EACEI,EAAsB6B,EACxBhC,EACED,EAA6BkC,EAC/BhC,EACED,EAAwBkC,EAC1BtC,EACEK,EAAoBmC,EACtBvC,EACED,EAAsBuC,EACxBrC,EACED,EAAqBwC,EACvB7C,EAAamD,EAAiBE,IAAIC,OAAO5yE,OACrCuvE,EACF5nB,EAAKyB,YAAY,CACfkqB,yBAAyB,EACzBC,oBAAqBjE,EACrBG,oBAAqBA,EACrB+D,oBAAqBlE,EACrBI,oBAAqBA,EACrB+D,2BAA4BnE,EAC5BO,2BAA4BA,EAC5B6D,iBAAkBpE,EAClBM,iBAAkBA,IAGpBjoB,EAAKyB,YAAY,CACfkqB,yBAAyB,GAE5B,GAEN,EAEL,CCxOO,MAAMK,GACX,WAAA51E,CAAYsiB,EAAU,IAmLpB,GAhLKA,EAAQonD,WAAUpnD,EAAQonD,SAAW,CAAC,EAAG,EAAG,IACjDrpE,KAAKqpE,UAAW,IAAIp8D,EAAM+F,SAAU+Q,UAAU9B,EAAQonD,UAGjDpnD,EAAQuzD,wBACXvzD,EAAQuzD,sBAAwB,CAAC,EAAG,GAAI,KAE1Cx1E,KAAKw1E,uBAAwB,IAAIvoE,EAAM+F,SAAU+Q,UAC/C9B,EAAQuzD,uBAILvzD,EAAQwzD,sBAAqBxzD,EAAQwzD,oBAAsB,CAAC,EAAG,EAAG,IACvEz1E,KAAKy1E,qBAAsB,IAAIxoE,EAAM+F,SAAU+Q,UAC7C9B,EAAQwzD,qBAIVz1E,KAAK01E,WAAazzD,EAAQyzD,aAAc,OAIXjyE,IAA3Bwe,EAAQ0zD,gBACmB,OAA3B1zD,EAAQ0zD,iBAER1zD,EAAQ0zD,gBAAiB,GAE3B31E,KAAK21E,eAAiB1zD,EAAQ0zD,iBAAmB31E,KAAK01E,WACtD11E,KAAK41E,qBAAuB51E,KAAK61E,iBAAiBv1E,KAAKN,WAGpByD,IAA/Bwe,EAAQ6zD,qBACV7zD,EAAQ6zD,oBAAqB,GAE/B91E,KAAK81E,mBAAqB7zD,EAAQ6zD,mBAGlC91E,KAAK+1E,YAAc9zD,EAAQ8zD,YAI3B/1E,KAAKg2E,uBAAyB/zD,EAAQ+zD,yBAA0B,EAChEh2E,KAAKuvD,iBAAmBvvD,KAAKg2E,uBAC3B,EACAvwE,OAAO8pD,iBAGTvvD,KAAKsvD,8BACHrtC,EAAQqtC,gCAAiC,EAG3CtvD,KAAK+xC,WAAa9vB,EAAQ8vB,WAE1B/xC,KAAK4vD,SAAW3tC,EAAQ2tC,SAExB5vD,KAAKw1C,OAASvzB,EAAQuzB,OAItBx1C,KAAKi2E,mBAAqBh0D,EAAQg0D,qBAAsB,OAMzBxyE,IAA7Bwe,EAAQmvD,kBACqB,OAA7BnvD,EAAQmvD,mBAERnvD,EAAQmvD,kBAAmB,GAE7BpxE,KAAKoxE,iBAAmBnvD,EAAQmvD,sBAQK3tE,IAAnCwe,EAAQi0D,wBAC2B,OAAnCj0D,EAAQi0D,yBAERj0D,EAAQi0D,wBAAyB,GAEnCl2E,KAAKk2E,uBAAyBj0D,EAAQi0D,uBAMtCl2E,KAAKm2E,eAAiBl0D,EAAQk0D,aAO9Bn2E,KAAKimD,YAAchkC,EAAQgkC,cAAe,EAE1CjmD,KAAKo2E,UAAYn0D,EAAQm0D,WAAaxF,GAAUpvC,KAC5CxhC,KAAKo2E,YAAcxF,GAAUpvC,OAC/BxhC,KAAKi2E,oBAAqB,GAE5Bj2E,KAAKq2E,aAAc,EAEnBr2E,KAAKs2E,iBAAmBr0D,EAAQq0D,kBAAoB,CAAA,EAIpDt2E,KAAKu2E,WAAat0D,EAAQs0D,YAAclmC,GAAWC,OAMnDtwC,KAAK6+D,gBAAkB58C,EAAQ48C,iBAAmBtmB,GAAgBC,QAIlEx4C,KAAK4pE,gBAAkB3nD,EAAQ2nD,iBAAmB,EAGlD5pE,KAAKkmD,wBAA0BjkC,EAAQikC,yBAA2B,KAGlElmD,KAAK0vD,SAAWztC,EAAQytC,UAAYnuB,GAASC,KAI7CxhC,KAAK4F,yBAA2Bqc,EAAQrc,0BAA4B,EAKpE5F,KAAKwjD,sBAAwBvhC,EAAQuhC,wBAAyB,OAI/B//C,IAA7Bwe,EAAQu0D,kBACqB,OAA7Bv0D,EAAQu0D,mBAERv0D,EAAQu0D,kBAAmB,GAE7Bx2E,KAAKw2E,iBAAmBv0D,EAAQu0D,sBAIO/yE,IAArCwe,EAAQw0D,0BAC6B,OAArCx0D,EAAQw0D,2BAERx0D,EAAQw0D,yBAA2B,GAErCz2E,KAAKy2E,yBAA2Bx0D,EAAQw0D,8BAKRhzE,IAA9Bwe,EAAQ6X,mBACsB,OAA9B7X,EAAQ6X,oBAER7X,EAAQ6X,mBAAoB,GAE9B95B,KAAK85B,kBAAoB7X,EAAQ6X,uBAMOr2B,IAAtCwe,EAAQ4xC,2BAC8B,OAAtC5xC,EAAQ4xC,4BAER5xC,EAAQ4xC,2BAA4B,GAEtC7zD,KAAK6zD,0BAA4B5xC,EAAQ4xC,0BAIrCztD,IAAS,CACX,MAAMswE,EAASjwE,IACXiwE,EAAO1wE,MAAQ,KACjBhG,KAAKw2E,kBAAmB,GAEtBE,EAAO1wE,MAAQ,KACjBhG,KAAKk2E,wBAAyB,EAEjC,MAI6BzyE,IAA5Bwe,EAAQkhC,iBACoB,OAA5BlhC,EAAQkhC,kBAERlhC,EAAQkhC,gBAAkBxK,GAAgBC,QAE5C54C,KAAKmjD,gBAAkBlhC,EAAQkhC,gBAG/BnjD,KAAK2vD,0BAA4B1tC,EAAQ0tC,2BAA6B,EAGtE3vD,KAAK22E,8BACH10D,EAAQ00D,+BACR9pE,EAAU+pE,qCACZ,MAAMppB,EAAextD,KAAKoxE,iBAAmB,GAAK,GAClDpxE,KAAK22E,8BAAgCpyE,EACnCvE,KAAK22E,8BACL,GACAnpB,GAGFxtD,KAAK62E,2BAA6B,KAClC72E,KAAK82E,kBAEL92E,KAAK+2E,SAAW,KAChB/2E,KAAKg3E,oBAAsB,KAC3Bh3E,KAAKi3E,qBAAuB,KAE5Bj3E,KAAKspE,mBAAqB,KAC1BtpE,KAAKk3E,kBAAoB,KAEzBl3E,KAAKm3E,gBAAiB,EACtBn3E,KAAKo3E,kBAAmB,EACxBp3E,KAAKq3E,UAAW,EAEhBr3E,KAAKs3E,YAAc,KAEnBt3E,KAAKgxE,WAAa,KAClBhxE,KAAKu3E,aAAc,EACnBv3E,KAAKypE,iBAAmB,EACxBzpE,KAAKsyE,eAAiB,EACtBtyE,KAAKw3E,mBAAqB,EAC1Bx3E,KAAKy3E,wBAA0B,KAC/Bz3E,KAAK03E,wBAA0B,KAC/B13E,KAAK23E,+BAAiC,KACtC33E,KAAK43E,qBAAuB,KAC5B53E,KAAK63E,gBAAkB,GACvB73E,KAAK83E,iBAAmB,GAExB93E,KAAK+3E,uBAAwB,EAC7B/3E,KAAKg4E,kBAAmB,EAExBh4E,KAAKi4E,UAAY,IAAIz3B,GAErBxgD,KAAK0oE,UAAY,KAEjB1oE,KAAKk4E,yBAA0B,EAE/Bl4E,KAAKwpE,WAAa,EAClBxpE,KAAK2pE,aAAe,EACpB3pE,KAAKm4E,wBAA0B,EAE/Bn4E,KAAKo4E,qBAAuB,IAAInrE,EAAM+F,QACtChT,KAAKq4E,iBAAmB,IAAIprE,EAAM+F,QAElChT,KAAKs4E,cAAgB,IAAIrrE,EAAM09B,QAC/B3qC,KAAKu4E,kBAAoB,IAAItrE,EAAM09B,QACnC3qC,KAAKw4E,cAAgB,KAErBx4E,KAAKy4E,eAAiB,KACtBz4E,KAAK04E,kBAAoB,KACzB14E,KAAK24E,kBAAoB,KACzB34E,KAAK44E,gBAAkB,KACvB54E,KAAK64E,gBAAkB,KAEvB74E,KAAK84E,YAAc,KACnB94E,KAAK+4E,oBAAsB,KAC3B/4E,KAAKg5E,2BAA6B,GAClCh5E,KAAKi5E,kCAAoC,KACzCj5E,KAAKk5E,yBAA2B,KAEhCl5E,KAAKm5E,eAAiB,IAAI5N,GACxB,KACAvrE,KAAK+1E,aAAev1C,SAASt9B,MAE/BlD,KAAKm5E,eAAerO,OACpB9qE,KAAKo5E,mBAAqB,IAAIrO,GAC5B/qE,KAAK+1E,aAAev1C,SAASt9B,MAE/BlD,KAAKo5E,mBAAmBtO,OACxB9qE,KAAK0oE,UAAY,IAAIP,GAAUnoE,KAAK+1E,aAAev1C,SAASt9B,MAC5DlD,KAAK0oE,UAAUoC,OAEf9qE,KAAKq5E,uBAAsBr5E,KAAK01E,aAAc11E,KAAKw1C,QACnDx1C,KAAKs5E,yBACHt5E,KAAK01E,aAAc11E,KAAK4vD,UAE1B5vD,KAAKu5E,aAAc,EACnBv5E,KAAKw5E,WAAY,EACjBx5E,KAAK6pD,UAAW,EAChB7pD,KAAKy5E,eAAiB,KAEtBz5E,KAAKkC,MAAQ+f,EAAQ/f,SAAWk5C,EAAKs+B,IAASx3E,MAAMk5C,EAAKs+B,IACzD15E,KAAKsE,kBAAoBvC,EAA6B/B,KAAKkC,OAEtDlC,KAAK01E,YAAY11E,KAAK2sD,MAC5B,CAED,eAAAmqB,GACE92E,KAAKwhD,UAAY,IAAI6N,GACnBrvD,KAAKmjD,gBACLnjD,KAAKm2E,aACLn2E,KAAKwjD,sBACLxjD,KAAKsvD,8BACLtvD,KAAKuvD,iBACLvvD,KAAKi2E,mBACLj2E,KAAKoxE,iBACLpxE,KAAKimD,YACLjmD,KAAKkmD,wBACLlmD,KAAK0vD,SACL1vD,KAAK4F,yBACL5F,KAAK2vD,2BAEP3vD,KAAKwhD,UAAUm4B,eAAgB,EAC3B35E,KAAK62E,4BAA4B72E,KAAK62E,4BAC3C,CAED,IAAAlqB,GACM3sD,KAAKu5E,cAEJv5E,KAAK+1E,cACH/1E,KAAKs5E,sBAORt5E,KAAK+1E,YACH/1E,KAAK4vD,SAASltB,WAAWgoC,eAAiBlqC,SAASt9B,MAPrDlD,KAAK+1E,YAAcv1C,SAASC,cAAc,OAC1CzgC,KAAK+1E,YAAYpzC,MAAMyK,MAAQ,OAC/BptC,KAAK+1E,YAAYpzC,MAAM2K,OAAS,OAChCttC,KAAK+1E,YAAYpzC,MAAMpY,SAAW,WAClCiW,SAASt9B,KAAKw9B,YAAY1gC,KAAK+1E,eAOnC/1E,KAAK45E,cACL55E,KAAK65E,gBACL75E,KAAK85E,WAAW95E,KAAKs2E,kBACrBt2E,KAAK+5E,gBACL/5E,KAAKg6E,qBAELh6E,KAAK+xC,WAAa/xC,KAAK+xC,YAAc,IAAI9kC,EAAMgtE,MAC/Cj6E,KAAKs3E,YAAc,IAAIxlC,GAAY9xC,KAAK+xC,YACxC/xC,KAAKs3E,YAAY5iC,kBACjB10C,KAAKs3E,YAAY7hC,mBACjBz1C,KAAKs3E,YAAY7gC,oBAEjBz2C,KAAKo5E,mBAAmB3O,aAAazqE,KAAK+1E,aAC1C/1E,KAAKm5E,eAAe1O,aAAazqE,KAAK+1E,aACtC/1E,KAAK0oE,UAAU+B,aAAazqE,KAAK+1E,aAEjC/1E,KAAKu5E,aAAc,EACpB,CAED,WAAAK,GACE,IAAK55E,KAAKq5E,oBAAqB,CAC7B,MAAM5Z,EAAmB,IAAIxyD,EAAM09B,QACnC3qC,KAAKk6E,oBAAoBza,GAEzBz/D,KAAKk3E,kBAAoB,IAAIjqE,EAAMktE,kBAlXhB,GAoXjB1a,EAAiB/zD,EAAI+zD,EAAiB9zD,EACtC,GACA,KAEF3L,KAAKspE,mBAAqB,IAAIr8D,EAAMunC,mBAClCirB,EAAiB/zD,GAAK,EACtB+zD,EAAiB/zD,EAAI,EACrB+zD,EAAiB9zD,EAAI,EACrB8zD,EAAiB9zD,GAAK,EACtB,GACA,KAEF3L,KAAKw1C,OAASx1C,KAAKk4E,wBACjBl4E,KAAKspE,mBACLtpE,KAAKk3E,kBACPl3E,KAAKw1C,OAAOjrB,SAAS3W,KAAK5T,KAAKw1E,uBAC/Bx1E,KAAKw1C,OAAOlO,GAAG1zB,KAAK5T,KAAKqpE,UAAUnzD,YACnClW,KAAKw1C,OAAOhN,OAAOxoC,KAAKy1E,oBACzB,CACF,CAED,aAAAoE,GACE,IAAK75E,KAAKs5E,sBAAuB,CAC/B,MAAM7Z,EAAmB,IAAIxyD,EAAM09B,QACnC3qC,KAAKk6E,oBAAoBza,GAEzBz/D,KAAK4vD,SAAW,IAAI3iD,EAAMmtE,cAAc,CACtCC,WAAW,EACXptB,UAAW,UAEbjtD,KAAK4vD,SAAS0qB,cAAct6E,KAAKuvD,kBACjCvvD,KAAK4vD,SAAS2qB,WAAY,EAC1Bv6E,KAAK4vD,SAAS4qB,cAAc,IAAIvtE,EAAMorC,MAAM,GAAW,GACvDr4C,KAAK4vD,SAAS6qB,QAAQhb,EAAiB/zD,EAAG+zD,EAAiB9zD,GAE3D3L,KAAKy4E,eAAiB,IAAIiC,gBAAe,KACvC16E,KAAKk6E,oBAAoBza,GACzBz/D,KAAK4vD,SAAS6qB,QAAQhb,EAAiB/zD,EAAG+zD,EAAiB9zD,GAC3D3L,KAAK26E,sBAAsB,IAE7B36E,KAAKy4E,eAAemC,QAAQ56E,KAAK+1E,aACjC/1E,KAAK+1E,YAAYr1C,YAAY1gC,KAAK4vD,SAASltB,WAC5C,CACF,CAED,UAAAo3C,CAAWxD,GACLt2E,KAAKo2E,YACHp2E,KAAKo2E,YAAcxF,GAAUC,GAC/B7wE,KAAK+1E,YAAYr1C,YACf4vC,GAASxC,aAAa9tE,KAAK4vD,SAAU0mB,IAE9Bt2E,KAAKo2E,YAAcxF,GAAUE,IACtC9wE,KAAK+1E,YAAYr1C,YACfmtC,GAASC,aAAa9tE,KAAK4vD,SAAU0mB,IAGzCt2E,KAAK4vD,SAASif,GAAGzoC,iBAAiB,gBAAiBtd,IACjD9oB,KAAKq2E,aAAc,CAAI,IAEzBr2E,KAAK4vD,SAASif,GAAGzoC,iBAAiB,cAAetd,IAC/C9oB,KAAKq2E,aAAc,CAAK,IAE1Br2E,KAAK4vD,SAASif,GAAGhsC,SAAU,EAC3B7iC,KAAKw1C,OAAOjrB,SAAS3W,KAAK5T,KAAKw1E,uBAC/Bx1E,KAAKw1C,OAAOlO,GAAG1zB,KAAK5T,KAAKqpE,UAAUnzD,YACnClW,KAAKw1C,OAAOhN,OAAOxoC,KAAKy1E,qBAE3B,CAED,aAAAsE,GACE,GAAI/5E,KAAK81E,oBAAsB91E,KAAKo2E,YAAcxF,GAAUpvC,KAAM,CAC3DxhC,KAAKq5E,oBAUJr5E,KAAKw1C,OAAOnN,qBACdroC,KAAKi3E,qBAAuB,IAAI10C,GAC9BviC,KAAKw1C,OACLx1C,KAAK4vD,SAASltB,YAGhB1iC,KAAKg3E,oBAAsB,IAAIz0C,GAC7BviC,KAAKw1C,OACLx1C,KAAK4vD,SAASltB,aAjBlB1iC,KAAKg3E,oBAAsB,IAAIz0C,GAC7BviC,KAAKk3E,kBACLl3E,KAAK4vD,SAASltB,YAEhB1iC,KAAKi3E,qBAAuB,IAAI10C,GAC9BviC,KAAKspE,mBACLtpE,KAAK4vD,SAASltB,aAelB,IAAK,IAAIq0C,IAAY,CACnB/2E,KAAKi3E,qBACLj3E,KAAKg3E,qBAEDD,IACFA,EAAS5wC,kBAAkB1gC,QAC3BsxE,EAASjzC,YAAc,GACvBizC,EAAS1zC,cAA0B,IAAV1+B,KAAK2+B,GAC9ByzC,EAAS3zC,cAAgB,GACzB2zC,EAAStzC,eAAgB,EACzBszC,EAASrzC,cAAgB,IACzBqzC,EAASj0C,OAAOlvB,KAAK5T,KAAKy1E,qBAC1BsB,EAAShwC,UAGb/mC,KAAK+2E,SAAW/2E,KAAKw1C,OAAOnN,qBAC1BroC,KAAKi3E,qBACLj3E,KAAKg3E,oBACPh3E,KAAK+2E,SAAShwC,QACf,CACF,CAED,kBAAAizC,GACMh6E,KAAK81E,oBAAsB91E,KAAKo2E,YAAcxF,GAAUpvC,OAC1DxhC,KAAK04E,kBAAoB14E,KAAK0vC,YAAYpvC,KAAKN,MAC/CA,KAAK4vD,SAASltB,WAAW0D,iBACvB,cACApmC,KAAK04E,mBACL,GAEF14E,KAAK24E,kBAAoB34E,KAAKmvC,YAAY7uC,KAAKN,MAC/CA,KAAK4vD,SAASltB,WAAW0D,iBACvB,cACApmC,KAAK24E,mBACL,GAEF34E,KAAK44E,gBAAkB54E,KAAK66E,UAAUv6E,KAAKN,MAC3CA,KAAK4vD,SAASltB,WAAW0D,iBACvB,YACApmC,KAAK44E,iBACL,GAEF54E,KAAK64E,gBAAkB74E,KAAKqmC,UAAU/lC,KAAKN,MAC3CyF,OAAO2gC,iBAAiB,UAAWpmC,KAAK64E,iBAAiB,GAE5D,CAED,mBAAAiC,GACM96E,KAAK81E,qBACP91E,KAAK4vD,SAASltB,WAAW6D,oBACvB,cACAvmC,KAAK04E,mBAEP14E,KAAK04E,kBAAoB,KACzB14E,KAAK4vD,SAASltB,WAAW6D,oBACvB,cACAvmC,KAAK24E,mBAEP34E,KAAK24E,kBAAoB,KACzB34E,KAAK4vD,SAASltB,WAAW6D,oBACvB,YACAvmC,KAAK44E,iBAEP54E,KAAK44E,gBAAkB,KACvBnzE,OAAO8gC,oBAAoB,UAAWvmC,KAAK64E,iBAC3C74E,KAAK64E,gBAAkB,KAE1B,CAED,aAAAkC,CAAcxE,GACZv2E,KAAKu2E,WAAaA,CACnB,CAED,kCAAAyE,CAAmCC,GACjCj7E,KAAKwhD,UAAUr8C,SAASouC,SAAS3tC,yBAAyBjC,MACxDs3E,EACFj7E,KAAKwhD,UAAUr8C,SAASkxC,oBAAqB,CAC9C,CAED,kBAAA6kC,CAAmBnmB,GACjB/0D,KAAK62E,2BAA6B9hB,CACnC,CAED1uB,UAAY,WACV,MAAM80C,EAAU,IAAIluE,EAAM+F,QACpBooE,EAAiB,IAAInuE,EAAM2F,QAC3ByoE,EAAkB,IAAIpuE,EAAM2F,QAElC,OAAO,SAASkW,GAKd,OAJAqyD,EAAQ1nE,IAAI,EAAG,GAAI,GACnB0nE,EAAQ5xC,mBAAmBvpC,KAAKw1C,OAAOU,aACvCklC,EAAeE,iBAAiBH,EAASx2E,KAAK2+B,GAAK,KACnD+3C,EAAgBC,iBAAiBH,GAAUx2E,KAAK2+B,GAAK,KAC7Cxa,EAAEmnB,MACR,IAAK,OACHjwC,KAAK4pE,iBAAmB,IACxB5pE,KAAK26E,uBACL,MACF,IAAK,OACH36E,KAAK4pE,iBAAmB,IACxB5pE,KAAK26E,uBACL,MACF,IAAK,YACH36E,KAAKw1C,OAAOlO,GAAGiC,mBAAmB6xC,GAClC,MACF,IAAK,aACHp7E,KAAKw1C,OAAOlO,GAAGiC,mBAAmB8xC,GAClC,MACF,IAAK,OACHr7E,KAAKm3E,gBAAkBn3E,KAAKm3E,eAC5B,MACF,IAAK,OACHn3E,KAAKo3E,kBAAoBp3E,KAAKo3E,iBAC9B,MACF,IAAK,OACHp3E,KAAKq3E,UAAYr3E,KAAKq3E,SAClBr3E,KAAKq3E,SACPr3E,KAAK0oE,UAAUmC,OAEf7qE,KAAK0oE,UAAUoC,OAEjB,MACF,IAAK,OACE9qE,KAAKq5E,qBACRr5E,KAAKu7E,qBAAqBv7E,KAAKw1C,OAAOnN,sBAExC,MACF,IAAK,OACEroC,KAAKq5E,qBACRr5E,KAAKwhD,UAAUwe,0BACZhgE,KAAKwhD,UAAUye,4BAGpB,MACF,IAAK,QACEjgE,KAAKq5E,qBACRr5E,KAAKwhD,UAAUse,cAAc9/D,KAAKwhD,UAAUue,gBAAkB,KAEhE,MACF,IAAK,QACE//D,KAAKq5E,qBACRr5E,KAAKwhD,UAAUse,cACbn7D,KAAKD,IAAI1E,KAAKwhD,UAAUue,gBAAkB,IAAM,IAK9D,CACG,CAjEW,GAmEZ,WAAArwB,CAAYxG,GACVlpC,KAAKs4E,cAAc7kE,IAAIy1B,EAAMsyC,QAAStyC,EAAMuyC,QAC7C,CAED,WAAAtsC,GACEnvC,KAAKu4E,kBAAkB3kE,KAAK5T,KAAKs4E,eACjCt4E,KAAKw4E,cAAgB5zE,GACtB,CAEDi2E,UAAY,WACV,MAAMa,EAAc,IAAIzuE,EAAM09B,QAE9B,OAAO,SAASzB,GACdwyC,EAAY9nE,KAAK5T,KAAKs4E,eAAe92D,IAAIxhB,KAAKu4E,mBAC1B3zE,IAEJ5E,KAAKw4E,cAAgB,IAAOkD,EAAYv3E,SAAW,GAEjEnE,KAAK27E,aAAazyC,EAE1B,CACG,CAZW,GAcZ,YAAAyyC,CAAazyC,GACXlpC,KAAKs4E,cAAc7kE,IAAIy1B,EAAMsyC,QAAStyC,EAAMuyC,SAC5Cz7E,KAAK47E,0BACN,CAEDA,yBAA2B,WACzB,MAAMnc,EAAmB,IAAIxyD,EAAM09B,QAC7BkxC,EAAkB,IAAI5uE,EAAM+F,QAC5ByuC,EAAU,GAEhB,OAAO,WACL,IAAKzhD,KAAK87E,4BACR97E,KAAKk6E,oBAAoBza,GACzBhe,EAAQt9C,OAAS,EACjBnE,KAAKi4E,UAAUt3B,+BACb3gD,KAAKw1C,OACLx1C,KAAKs4E,cACL7Y,GAEFz/D,KAAKi4E,UAAU/2B,mBAAmBlhD,KAAKwhD,UAAWC,GAC9CA,EAAQt9C,OAAS,GAAG,CACtB,MAEM43E,EAFMt6B,EAAQ,GAEUhY,OAE9BoyC,EAAgBjoE,KAAKmoE,GAAmBv6D,IAAIxhB,KAAKw1C,OAAOjrB,UACpDsxD,EAAgB13E,SAvpBc,MAwpBhCnE,KAAKo4E,qBAAqBxkE,KAAK5T,KAAK+2E,SAASj0C,QAC7C9iC,KAAKq4E,iBAAiBzkE,KAAKmoE,GAC3B/7E,KAAK87E,2BAA4B,EACjC97E,KAAKg8E,mCAAqCp3E,IAE7C,CAET,CACG,CA9B0B,GAgC3B,mBAAAs1E,CAAoB+B,GACdj8E,KAAK+1E,aACPkG,EAAcvwE,EAAI1L,KAAK+1E,YAAYmG,YACnCD,EAActwE,EAAI3L,KAAK+1E,YAAYoG,cAEnCn8E,KAAK4vD,SAASwsB,QAAQH,EAEzB,CAED,mBAAAV,CAAoBr3B,GAClB,GAAIA,IAAqBlkD,KAAKw1C,OAAOnN,qBAAsB,OAC3D,MAAMg0C,EAAar8E,KAAKw1C,OAClBQ,EAAWkO,EACflkD,KAAKspE,mBACLtpE,KAAKk3E,kBAQP,GAPAlhC,EAASzrB,SAAS3W,KAAKyoE,EAAW9xD,UAClCyrB,EAAS1O,GAAG1zB,KAAKyoE,EAAW/0C,IAC5B0O,EAAS9iC,SAASU,KAAKyoE,EAAWnpE,UAClC8iC,EAASjhC,WAAWnB,KAAKyoE,EAAWtnE,YACpCihC,EAASxM,OAAO51B,KAAKyoE,EAAW7yC,QAChCxpC,KAAKw1C,OAASQ,EAEVh2C,KAAK+2E,SAAU,CACjB,MAAMuF,EAAiBvF,IACrBA,EAASvwC,YACTuwC,EAASrwC,OAAO,EAGZ61C,EAAev8E,KAAK+2E,SACpByF,EAAat4B,EACjBlkD,KAAKi3E,qBACLj3E,KAAKg3E,oBAEPsF,EAAcE,GACdF,EAAcC,GAEdC,EAAW15C,OAAOlvB,KAAK2oE,EAAaz5C,QAChCohB,EACFqxB,GAAOkH,0BAA0BzmC,EAAUqmC,EAAYE,GAEvDhH,GAAOmH,0BAA0B1mC,EAAUqmC,EAAYG,GAEzDx8E,KAAK+2E,SAAWyF,EAChBx8E,KAAKw1C,OAAOhN,OAAOxoC,KAAK+2E,SAASj0C,OAClC,CACF,CAEDpjC,iCAAmC,WACjC,MAAMi9E,EAAa,IAAI1vE,EAAM+F,QAE7B,OAAO,SAAS4pE,EAAgBC,EAAc9F,GAC5C,MAAM+F,EAAmB,GAAyB,KAApBD,EAAan3C,MAC3Ci3C,EACG/oE,KAAKmjE,EAASj0C,QACdthB,IAAIo7D,EAAeryD,UACnBrU,YACAuyB,eAAeq0C,GACfC,SACHH,EAAeryD,SAAS3W,KAAKmjE,EAASj0C,QAAQqF,IAAIw0C,EACxD,CACG,CAbkC,GAenCj9E,iCAAmC,WACjC,MAAMi9E,EAAa,IAAI1vE,EAAM+F,QAE7B,OAAO,SAASgqE,EAAYC,EAAgBlG,GAC1C,MAAM+F,EAAmBH,EACtB/oE,KAAKmjE,EAASj0C,QACdthB,IAAIy7D,EAAe1yD,UACnBpmB,SACH64E,EAAWt3C,KAAO,GAAwB,KAAnBo3C,EAC7B,CACG,CAVkC,GAYnCI,gBAAkB,WAChB,MAAMzd,EAAmB,IAAIxyD,EAAM09B,QAEnC,OAAO,WACL,IAAK3qC,KAAKwhD,UAAW,OAErB,GADmBxhD,KAAKwhD,UAAUlxC,gBACjB,EAAG,CAClBtQ,KAAKwhD,UAAUod,gCAAgC5+D,KAAK6+D,iBACpD7+D,KAAKwhD,UAAU+d,mBACfv/D,KAAKk6E,oBAAoBza,GACzB,MAAM0d,EAEJ,GADAn9E,KAAKw1C,OAAO4nC,iBAAiBrmE,SAAS,GAEtC/W,KAAKuvD,iBACLkQ,EAAiB/zD,EACb2xE,EAEJ,GADAr9E,KAAKw1C,OAAO4nC,iBAAiBrmE,SAAS,GAEtC/W,KAAKuvD,iBACLkQ,EAAiB9zD,EAEb2xE,EAAkBt9E,KAAKw1C,OAAOnN,qBAClC,EAAMroC,KAAKuvD,iBACX,EACIqa,EAAkB5pE,KAAK4pE,gBAAkB0T,EACzCp4B,EAAyB,EAAM0kB,EAErC5pE,KAAKu9E,qBAAqB9d,GAC1Bz/D,KAAKwhD,UAAUge,eACbC,EACA0d,EAAevT,EACfyT,EAAezT,EACf5pE,KAAKw1C,OAAOnN,qBACZroC,KAAKw1C,OAAO9P,MAAQ,EACpBwf,EAEH,CACP,CACG,CAtCiB,GAwClB,oBAAAq4B,CAAqB9d,GAEnB,GAAIz/D,KAAKw1C,QAAUx1C,KAAKq2E,YAAa,CACnC,MACMmH,EADWx9E,KAAK4vD,SAASif,GAAG4O,YACFL,iBAAiBrmE,SAAS,GACpD2mE,EAAe19E,KAAKw1C,OAAO4nC,iBAAiBrmE,SAAS,GAC3D0oD,EAAiB/zD,GAAKgyE,EAAeF,CACtC,CACF,CAED,oBAAAG,GACE,OACE3gC,OAAO1Y,KAAKtkC,KAAKg5E,4BAA4B70E,OAAS,GACX,OAA3CnE,KAAKi5E,mCAC6B,OAAlCj5E,KAAKk5E,wBAER,CAED,qBAAA0E,GACE,OAAO59E,KAAKw5E,WAAax5E,KAAK6pD,QAC/B,CAED,4BAAAg0B,CAA6B59E,GAC3BD,KAAKg5E,2BAA2B/4E,EAAQS,IAAMT,CAC/C,CAED,+BAAA69E,CAAgC79E,UACvBD,KAAKg5E,2BAA2B/4E,EAAQS,GAChD,CAED,oCAAAq9E,CAAqC99E,GACnCD,KAAKi5E,kCAAoCh5E,CAC1C,CAED,sCAAA+9E,GACEh+E,KAAKi5E,kCAAoC,IAC1C,CAuBD,aAAAgF,CAAc97E,EAAM8f,EAAU,IAC5B,GAAIjiB,KAAK29E,uBACP,MAAM,IAAIt8E,MACR,+EAIJ,GAAIrB,KAAK49E,wBACP,MAAM,IAAIv8E,MAAM,qDAIhB4gB,EAAQi8D,iBACRl+E,KAAKwhD,UAAUyK,QACfjsD,KAAKwhD,UAAUyK,OAAO9nD,OAAS,IAE/BklC,QAAQmpB,IACN,4FAEFvwC,EAAQi8D,iBAAkB,GAG5B,MAAMptD,OACertB,IAAnBwe,EAAQ6O,QAA2C,OAAnB7O,EAAQ6O,OACtC7O,EAAQ6O,OACRuQ,GAAoBl/B,GAClB+7E,EACJ3I,GAAO4I,wBAAwBrtD,IAAW7O,EAAQi8D,gBAC9CE,OACsB36E,IAA1Bwe,EAAQm8D,eAAyD,OAA1Bn8D,EAAQm8D,eAC7Cn8D,EAAQm8D,cAGZ,IAAIC,EAAkB,KAClBD,IACFp+E,KAAKm5E,eAAe1M,iBACpB4R,EAAkBr+E,KAAKm5E,eAAe9M,QAAQ,mBAEhD,MAKMiS,EAAqB,CACzBr+C,EACAs+C,EACAC,KAEA,GAAIJ,EACF,GAAII,IAAiB5mD,GACnB,GAAuB,KAAnBqI,EACFjgC,KAAKm5E,eAAezM,kBAClB2R,EACA,2BAGF,GAAIH,EACFl+E,KAAKm5E,eAAezM,kBAClB2R,EACA,6BAEG,CACL,MAAMI,EAASF,EACb,KAAKA,IACL,MACFv+E,KAAKm5E,eAAezM,kBAClB2R,EACA,cAAcI,IAEjB,MAEMD,IAAiB5mD,IAC1B53B,KAAKm5E,eAAezM,kBAClB2R,EACA,uBAGL,EAGH,IAAIK,GAAe,EACfC,EAAuB,EAC3B,MAAMC,EAA4B,CAACC,EAAYhuB,KACzCutB,KAECS,GAAcX,GACdrtB,IAAeqtB,KAEhBl+E,KAAKm5E,eAAe5M,WAAW8R,GAC1BxtB,GAAe6tB,GAAc1+E,KAAKo5E,mBAAmBvO,QAExDqT,IACErtB,GACF6tB,GAAe,EACf1+E,KAAKo5E,mBAAmBtO,QAExB9qE,KAAKo5E,mBAAmB/N,YAAYsT,IAGzC,EA4CH,OAHiBT,EACfl+E,KAAK8+E,gDAAgDx+E,KAAKN,MAC1DA,KAAK++E,6CAA6Cz+E,KAAKN,OAEvDmC,EACA2uB,EACA7O,EAAQ0vC,4BAhCW,CAACvxB,EAAay+C,EAAYhuB,MACxCqtB,GAAmBj8D,EAAQ7f,YAC9B6f,EAAQ7f,WAAW,EAAG,KAAMw1B,IAE9B,MAAMonD,EAAwB,CAC5B9rE,SAAU+O,EAAQ/O,UAAY+O,EAAQg9D,YACtC10D,SAAUtI,EAAQsI,SAClBtX,MAAOgP,EAAQhP,MACf0+C,2BAA4B1vC,EAAQ0vC,4BAEtC,OAAO3xD,KAAKk/E,gBACV,CAAC9+C,GACD,CAAC4+C,GACDnuB,EACAguB,GAAcT,EACdA,EACAF,EACAA,GACAt9E,MAAK,MACAs9E,GAAmBj8D,EAAQ7f,YAC9B6f,EAAQ7f,WAAW,IAAK,OAAQw1B,IAElCgnD,EAA0BC,EAAYhuB,EAAW,GACjD,GAUWvwD,KAAKN,OA7CD,CACjBigC,EACAs+C,EACAC,KAEAG,EAAuB1+C,EACvBq+C,EAAmBr+C,EAAiBs+C,EAAsBC,GACtDv8D,EAAQ7f,YACV6f,EAAQ7f,WAAW69B,EAAiBs+C,EAAsBC,EAC3D,IAzEmB,KACpBx+E,KAAKo5E,mBAAmBtO,OACxB9qE,KAAKm5E,eAAe1M,gBAAgB,GA6GtBnsE,KAAKN,MAEtB,CAcD,4CAAA++E,CACE58E,EACA2uB,EACA6gC,EACAwtB,EACA/8E,EACAg9E,GAEA,MAAMC,EAAkBr/E,KAAKs/E,gCAC3Bn9E,EACAwvD,EACAvvD,GACA,OACAqB,EACAqtB,GAEIyuD,EAA0Bz5E,EAC9Bu5E,EAAgBx/E,cAyBlB,OAtBAw/E,EACGz+E,MAAMw/B,IACLpgC,KAAK89E,gCAAgCuB,GAC9BF,EAAU/+C,GAAa,GAAM,GAAMx/B,MAAK,KAC7C2+E,EAAwBp/E,UACxBH,KAAKg+E,wCAAwC,OAGhDh9E,OAAO8nB,IACFs2D,GAAaA,IACjBp/E,KAAKg+E,yCACLh+E,KAAK89E,gCAAgCuB,GACrC,MAAM5+E,EACJqoB,aAAa1nB,EACX0nB,EACA,IAAIznB,MAAM,gDAAgDc,KAC9Do9E,EAAwBn/E,OAAOK,EAAM,IAGzCT,KAAK69E,6BAA6BwB,GAClCr/E,KAAK+9E,qCAAqCwB,EAAwBt/E,SAE3Ds/E,EAAwBt/E,OAChC,CAcD,+CAAA6+E,CACE38E,EACA2uB,EACA6gC,EACAwtB,EACAK,EACAC,GAEA,IAAIC,EAAqC,EACrCC,GAAmC,EACvC,MAAMC,EAAqC,GAErCC,EAAuC,KAC3C,GACED,EAAmCz7E,OAAS,IAC3Cw7E,IACA3/E,KAAK49E,wBACN,CACA+B,GAAmC,EACnC,MAAMG,EAAcF,EAAmCG,QACvDZ,EACEW,EAAY1/C,YACZ0/C,EAAYjB,WACZiB,EAAYjvB,YACZjwD,MAAK,KACL++E,GAAmC,EAC/BG,EAAYjB,WACdmB,EAAwC7/E,UAC/B2/E,EAAYjvB,aACrBooB,EAAkC94E,UAClCH,KAAKg+E,0CAEH4B,EAAmCz7E,OAAS,GAC9CmB,GAAe,IAAMu6E,KACtB,GAEJ,GAsBGI,EAA4BjgF,KAAKs/E,gCACrCn9E,EACAwvD,EACA6tB,GACA,GAvBuC,CAACp/C,EAAaywB,KAChD7wD,KAAK49E,0BAEN/sB,GAC8C,IAA9C+uB,EAAmCz7E,QACnCi8B,EAAY9vB,gBACVsvE,EAAmC,GAAGx/C,YAAY9vB,mBAEpDsvE,EAAmCv7E,KAAK,CACtC+7B,cACAy+C,WAAmD,IAAvCa,EACZ7uB,eAEF6uB,IACAG,IAEH,GASD/uD,GAGIkvD,EACJl6E,EACEm6E,EAA0BpgF,cAExBo5E,EACJnzE,IAwBF,OAtBA9F,KAAK69E,6BAA6BoC,GAClCjgF,KAAK+9E,qCACH9E,EAAkCh5E,SAGpCggF,EACGr/E,MAAK,KACJZ,KAAK89E,gCAAgCmC,EAA0B,IAEhEj/E,OAAO8nB,IACN9oB,KAAKg+E,yCACLh+E,KAAK89E,gCAAgCmC,GACrC,MAAMx/E,EACJqoB,aAAa1nB,EACX0nB,EACA,IAAIznB,MACA,8DAER2+E,EAAwC5/E,OAAOK,GAC3Cg/E,GAAqBA,EAAoBh/E,EAAM,IAGhDu/E,EAAwC//E,OAChD,CAqBD,cAAAigF,CAAe1uB,EAAc4sB,GAAgB,EAAMh8E,OAAaqB,GAC9D,GAAIzD,KAAK29E,uBACP,MAAM,IAAIt8E,MACR,+EAIJ,GAAIrB,KAAK49E,wBACP,MAAM,IAAIv8E,MAAM,qDAGlB,MAAM8+E,EAAY3uB,EAAartD,OACzB87B,EAAkB,GAExB,IAAIo+C,EACAD,IACFp+E,KAAKm5E,eAAe1M,iBACpB4R,EAAkBr+E,KAAKm5E,eAAe9M,QAAQ,mBAGhD,MAAM+T,EAAiB,CAACC,EAAWp8E,EAASC,EAAcs6E,KACxDv+C,EAAgBogD,GAAap8E,EAC7B,IAAIq8E,EAAe,EACnB,IAAK,IAAIp1E,EAAI,EAAGA,EAAIi1E,EAAWj1E,IAC7Bo1E,GAAgBrgD,EAAgB/0B,IAAM,EAExCo1E,GAA8BH,EAC9Bj8E,EAAe,GAAGo8E,EAAal8E,QAAQ,MACnCg6E,GACEI,IAAiB5mD,IACnB53B,KAAKm5E,eAAezM,kBAClB2R,EACgB,KAAhBiC,EACE,qBACA,gBAAgBp8E,KAIpB9B,GAAYA,EAAWk+E,EAAcp8E,EAAcs6E,EAAa,EAGhE+B,EAAuB,GACvBC,EAAyB,GAC/B,IAAK,IAAIt1E,EAAI,EAAGA,EAAIsmD,EAAartD,OAAQ+G,IAAK,CAC5C,MAAM+W,EAAUuvC,EAAatmD,GACvB4lB,OACertB,IAAnBwe,EAAQ6O,QAA2C,OAAnB7O,EAAQ6O,OACtC7O,EAAQ6O,OACRuQ,GAAoBpf,EAAQ9f,MAC1Bs+E,EAAsBzgF,KAAKs/E,gCAC/Br9D,EAAQ9f,KACR8f,EAAQ0vC,2BACRyuB,EAAe9/E,KAAKN,KAAMkL,IAC1B,OACAzH,EACAqtB,GAEFyvD,EAAqBl8E,KAAKo8E,GAC1BD,EAAuBn8E,KAAKo8E,EAAoBxgF,QACjD,CAED,MAAMs/E,EAA0B,IAAI9/E,GAClC,CAACU,EAASC,KACRF,QAAQo+C,IAAIkiC,GACT5/E,MAAMo4C,IACDolC,GAAep+E,KAAKm5E,eAAe5M,WAAW8R,GAC9Cj8E,GAAYA,EAAW,EAAG,KAAMw1B,IACpC53B,KAAKk/E,gBACHlmC,EACAwY,GACA,EACA4sB,EACAA,GACA,GACA,GACAx9E,MAAK,KACDwB,GAAYA,EAAW,IAAK,OAAQw1B,IACxC53B,KAAKg+E,yCACL79E,GAAS,GACT,IAEHa,OAAO8nB,IACFs1D,GAAep+E,KAAKm5E,eAAe5M,WAAW8R,GAClDr+E,KAAKg+E,yCACL,MAAMv9E,EACJqoB,aAAa1nB,EACX0nB,EACA,IAAIznB,MACA,sEAERjB,EAAOK,EAAM,IAEdigF,SAAQ,KACP1gF,KAAK89E,gCAAgCyB,EAAwB,GAC7D,IAELp+E,IACC,IAAK,IAAIs/E,KAAuBF,EAC9BE,EAAoBv/E,MAAMC,EAC3B,IAKL,OAFAnB,KAAK69E,6BAA6B0B,GAClCv/E,KAAK+9E,qCAAqCwB,GACnCA,CACR,CAcD,+BAAAD,CACEn9E,EACAwvD,EAA6B,EAC7BvvD,OAAaqB,EACbk9E,GAAmB,EACnBliD,OAAiBh7B,EACjBqtB,GAEA,MAAMgJ,GAAoB6mD,GAA2B3gF,KAAK85B,kBAC1D,IACE,GAAIhJ,IAAWkQ,GAAYC,MACzB,OAAOlD,GAAY/D,YACjB73B,EACAC,EACAu+E,EACAliD,EACAkzB,EACA3xD,KAAKy2E,yBACL38C,OACAr2B,OACAA,OACAA,OACAA,EACAzD,KAAKsE,mBAEF,GAAIwsB,IAAWkQ,GAAYE,OAChC,OAAO9C,GAAapE,YAClB73B,EACAC,EACAu+E,EACAliD,EACAz+B,KAAKsE,mBAEF,GAAIwsB,IAAWkQ,GAAYG,IAChC,OAAOpH,GAAUC,YACf73B,EACAC,EACAu+E,EACAliD,EACAkzB,EACA3xD,KAAKy2E,yBACL38C,EACA95B,KAAK4F,8BACLnC,OACAA,OACAA,OACAA,EACAzD,KAAKsE,mBAEF,GAAIwsB,IAAWkQ,GAAYI,KAChC,OAAO,IAAI8Z,GAAWl7C,MAAMg6B,YAAY73B,EAE3C,CAAC,MAAO2mB,GACP,MAAIA,aAAa4O,GACT,IAAIr2B,MACR,6DAGIynB,CAET,CAED,MAAM,IAAIznB,MACR,yEAAyEc,IAE5E,CAED,8BAAOg8E,CAAwBrtD,GAC7B,OACEA,IAAWkQ,GAAYC,OACvBnQ,IAAWkQ,GAAYE,QACvBpQ,IAAWkQ,GAAYG,GAE1B,CAMD+9C,gBAAkB,WAChB,OAAO,SACLlmC,EACA4nC,EAAqB,GACrB/vB,GAAa,EACbutB,GAAgB,EAChByC,GAAiC,EACjCC,GAAkB,EAClBC,GAA8B,EAC9BjuB,GAAwB,GAExB,GAAI9yD,KAAK49E,wBAAyB,OAAO19E,QAAQC,UAEjD,IAAI6gF,EAAwB,KAC5B,MAAMC,EAA4B,KACF,OAA1BD,IACFhhF,KAAKm5E,eAAe5M,WAAWyU,GAC/BA,EAAwB,KACzB,EAIH,OADAhhF,KAAKg4E,kBAAmB,EACjB,IAAI93E,SAASC,IACdi+E,IACF4C,EAAwBhhF,KAAKm5E,eAAe9M,QAC1C,yBAGJ/mE,GAAe,KACb,GAAItF,KAAK49E,wBACPz9E,QACK,CACL,MAAM+gF,EAAelhF,KAAKmhF,sBACxBnoC,EACA4nC,EACA/vB,EACAgwB,EACAC,EACAhuB,GAGItiD,EAAgBxQ,KAAKwhD,UAAUjxC,mBAEnCvQ,KAAKgxE,YACLhxE,KAAKgxE,WAAWxgE,gBAAkBA,GAElCxQ,KAAKohF,oBAIFphF,KAAKi2E,oBACRj2E,KAAK63E,gBAAgBxzE,KAAK,CACxB6mD,QAASg2B,EAAah2B,QAAQtpD,OAC9B0yD,aAAc4sB,EAAa5sB,aAAa1yD,OACxCkM,MAAO,CACL8kB,KAAMsuD,EAAatuD,KACnB8iC,GAAIwrB,EAAaxrB,GACjBnuC,MAAO25D,EAAa35D,WAKvBvnB,KAAKgxE,YAAcxgE,EAAgB,EAClCxQ,KAAKqhF,gBAAgBrhF,KAAKwhD,WAC1BthD,QAAQC,WACWS,MAAK,KACtBZ,KAAK49E,yBACT59E,KAAKshF,cAAa,GAAM,GAAM1gF,MAAM22E,IAC7Bv3E,KAAKgxE,YAAeuG,GAKnBwJ,EACF/gF,KAAKg4E,kBAAmB,EAExBh4E,KAAK83E,iBAAiBzzE,MAAK,KACzBrE,KAAKg4E,kBAAmB,CAAI,IAGhCh4E,KAAK83E,iBAAiBzzE,MAAK,KACzB48E,IACA9gF,GAAS,MAbXH,KAAKg4E,kBAAmB,EACxBiJ,IACA9gF,IAaD,GACD,GAEL,KACA,EAAK,GAEhB,CACG,CA3FiB,GAiHlBghF,sBAAwB,WACtB,IAAII,EAEJ,OAAO,SACLvoC,EACA4nC,EACA/vB,GAAa,EACbgwB,GAAiC,EACjCC,GAAkB,EAClBhuB,GAAwB,GAExB,GAAI9yD,KAAK49E,wBAAyB,OAClC,IAAI4D,EAAkB,GAClBC,EAAwB,GACvBX,IACHU,EACExhF,KAAKwhD,UAAUyK,OAAO1oC,KAAKkuC,GAAUA,EAAMrxB,eAAgB,GAC7DqhD,EAAwBzhF,KAAKwhD,UAAUgQ,aACrCxxD,KAAKwhD,UAAUgQ,aAAajuC,KAAKiuC,GAAiBA,IAClD,IAEJgwB,EAAgBn9E,QAAQ20C,GACxByoC,EAAsBp9E,QAAQu8E,GAC1B5gF,KAAK4vD,UAAU5vD,KAAKwhD,UAAUsf,YAAY9gE,KAAK4vD,UACnD,MAsBMsxB,EAAelhF,KAAKwhD,UAAUwE,MAClCw7B,EACAC,GACA,EACA5wB,GA1BgC6wB,IAChC,GAAI1hF,KAAK49E,wBAAyB,OAClC,MAAM9yE,EAAa9K,KAAKwhD,UAAUlxC,gBAEhCuwE,GACA/1E,GAt/CiD,OAw/C5C42E,GAAaH,IAChBvhF,KAAKm5E,eAAehN,cAAa,GAAM,GACvCoV,EAAwBvhF,KAAKm5E,eAAe9M,QAC1C,kCAGL,IAEuBqV,IACpB1hF,KAAK49E,yBACL8D,GAAYH,IACdvhF,KAAKm5E,eAAe5M,WAAWgV,GAC/BA,EAAwB,KACzB,GASDzuB,GAKF,OAHIjC,GAAc7wD,KAAK6zD,2BACrB7zD,KAAKwhD,UAAUqS,4BAEVqtB,CACb,CACG,CA5DuB,GAmExB,eAAAG,CAAgB7/B,GACd,IAAIxhD,KAAK49E,wBACT,OAAO,IAAI19E,SAASC,IAClB,MAAMwhF,EAAqB3hF,KAAKoxE,iBAC9BzvE,WACAF,aACIqJ,EAAa02C,EAAUlxC,gBACvBE,EAAgBgxC,EAAUjxC,mBAChCvQ,KAAKgxE,WDjzCJ,SACLlmE,EACAqmE,EACAqF,EACApF,EACAtvB,EACA60B,EAAgC9pE,EAAU+pE,sCAE1C,MAAMgL,EAAS,IAAIj2B,OACjB9qB,IAAIC,gBACF,IAAI/8B,KAAK,CAAC,IAAKitE,GAAW7qE,WAAY,WAAY,CAChDyhB,KAAM,6BAKZ,IAAIi6D,EFzSS,+6FE4Sb,MAAMC,EAAY17E,IAAUK,IAAkB,KACzC+vE,GAAqBrF,EAOdqF,EAEArF,GAEN2Q,GAAaA,EAAU97E,OAAS,IAAM87E,EAAU77E,MAAQ,IAC1D47E,EEzTS,40FFqTXA,EAAa9Q,IAPb8Q,EAAa9Q,GAGT+Q,GAAaA,EAAU97E,OAAS,IAAM87E,EAAU77E,MAAQ,IAC1D47E,EGlTS,6uFH6Tb,MAAME,EAAyBC,KAAKH,GAC9BvO,EAAkB,IAAInkE,WAAW4yE,EAAuB59E,QAC9D,IAAK,IAAI+G,EAAI,EAAGA,EAAI62E,EAAuB59E,OAAQ+G,IACjDooE,EAAgBpoE,GAAK62E,EAAuBE,WAAW/2E,GAoBzD,OAjBA02E,EAAO52B,YAAY,CACjB2B,KAAM,CACJ2mB,gBAAiBA,EAAgB1xE,OACjCkJ,WAAYA,EACZqmE,gBAAiBA,EACjBC,iBAAkBA,EAClBtvB,YAAaA,EACbkwB,iBAAkB,GAAK2E,EAEvB9pE,UAAW,CACTslE,cAAetlE,EAAUslE,cACzBD,YAAarlE,EAAUqlE,YACvBgC,eAAgBrnE,EAAUqnE,eAC1BtwB,UAAW/2C,EAAU+2C,cAIpBg+B,CACT,CCqvCwBM,CAChB1xE,EACAxQ,KAAKk2E,uBACLl2E,KAAKw2E,iBACLx2E,KAAKoxE,iBACLpxE,KAAKwhD,UAAUM,YACf9hD,KAAK22E,+BAEP32E,KAAKgxE,WAAWnmB,UAAa/hC,IAC3B,GAAIA,EAAEnmB,KAAKuwE,SAAU,CAEnB,GADAlzE,KAAKu3E,aAAc,EACfv3E,KAAKk2E,uBACPl2E,KAAKwhD,UAAU2d,oBACbn/D,KAAK03E,wBACL5uD,EAAEnmB,KAAK8mE,sBAEJ,CACL,MAAM0J,EAAgB,IAAI53D,YACxBuN,EAAEnmB,KAAKwwE,cAAcvxE,OACrB,EACAknB,EAAEnmB,KAAK8mE,kBAETzpE,KAAKwhD,UAAU2d,oBACbgU,EACArqD,EAAEnmB,KAAK8mE,iBAEV,CAEDzpE,KAAKw3E,mBAAqBx3E,KAAKsyE,eAE/BtyE,KAAK2pE,aAAe7gD,EAAEnmB,KAAK6nE,SAC3BxqE,KAAK+4E,sBACL/4E,KAAK+4E,oBAAsB,KAC3B/4E,KAAK26E,uBACD36E,KAAK83E,iBAAiB3zE,OAAS,IACjCnE,KAAK83E,iBAAiBrlD,SAASltB,IAC7BA,GAAM,IAERvF,KAAK83E,iBAAiB3zE,OAAS,EAE3C,MAAe,GAAI2kB,EAAEnmB,KAAKw/E,aAChBniF,KAAKu3E,aAAc,OACd,GAAIzuD,EAAEnmB,KAAKuyE,wBAAyB,CACrCl1E,KAAK0vD,UAAYnuB,GAASG,MAC5B2H,QAAQmpB,IAAI,2CAEVxyD,KAAKk2E,wBACPl2E,KAAK03E,wBAA0B,IAAIn8D,YACjCuN,EAAEnmB,KAAKyyE,oBACPtsD,EAAEnmB,KAAK2uE,oBACP9gE,GAEFxQ,KAAKy3E,wBAA0B,IAAIl8D,YACjCuN,EAAEnmB,KAAKwyE,oBACPrsD,EAAEnmB,KAAK0uE,oBACP7gE,GAEFxQ,KAAK23E,+BAAiC,IAAIgK,EACxC74D,EAAEnmB,KAAK0yE,2BACPvsD,EAAEnmB,KAAK8uE,2BACPjhE,GAEFxQ,KAAK43E,qBAAuB,IAAIn2E,aAC9BqnB,EAAEnmB,KAAK2yE,iBACPxsD,EAAEnmB,KAAK6uE,iBACe,GAAtB3kE,EAAU+2C,aAGZ5jD,KAAKy3E,wBAA0B,IAAIl8D,YAAY/K,GAC/CxQ,KAAK23E,+BAAiC,IAAIgK,EACxCnxE,GAEFxQ,KAAK43E,qBAAuB,IAAIn2E,aACR,GAAtBoL,EAAU+2C,YAGd,IAAK,IAAI14C,EAAI,EAAGA,EAAIJ,EAAYI,IAC9BlL,KAAKy3E,wBAAwBvsE,GAAKA,EAIpC,GAFAlL,KAAKgxE,WAAWxgE,cAAgBA,EAE5BxQ,KAAK0vD,UAAYnuB,GAASG,KAAM,CAClC2H,QAAQmpB,IAAI,6BACZ,MAAM1C,EAAoB9vD,KAAKwhD,UAAU0e,uBACnC9H,EAAyBtI,EAAkBqE,YAAYoD,KACvDlS,EACJyK,EAAkBuE,aAAakD,KACjCluB,QAAQmpB,IACN,6BACE4F,EAAuB1sD,EACvB,MACA0sD,EAAuBzsD,GAE3B09B,QAAQmpB,IACN,gCACEnN,EAAyB35C,EACzB,MACA25C,EAAyB15C,EAE9B,CAEDxL,GACD,EACF,GAEJ,CAED,iBAAAihF,GACMphF,KAAKgxE,YAAYhxE,KAAKgxE,WAAW1lB,YACrCtrD,KAAKgxE,WAAa,KAClBhxE,KAAK84E,YAAc,KACf94E,KAAK+4E,sBACP/4E,KAAK+4E,sBACL/4E,KAAK+4E,oBAAsB,MAE7B/4E,KAAK63E,gBAAkB,GACvB73E,KAAKu3E,aAAc,CACpB,CAED,gBAAA6K,CAAiBC,EAAejE,GAAgB,GAC9C,OAAOp+E,KAAKsiF,kBAAkB,CAACD,GAAgBjE,EAChD,CAED,iBAAAkE,CAAkBC,EAAiBnE,GAAgB,GACjD,GAAIp+E,KAAK29E,uBACP,MAAM,IAAIt8E,MACR,kFAIJ,GAAIrB,KAAK49E,wBACP,MAAM,IAAIv8E,MAAM,wDAGlB,IAAIy3E,EAsGJ,OApGA94E,KAAKk5E,yBAA2B,IAAIh5E,SAAQ,CAACC,EAASC,KACpD,IAAIoiF,EAEApE,IACFp+E,KAAKm5E,eAAe1M,iBACpBzsE,KAAKm5E,eAAetO,OACpB2X,EAAiBxiF,KAAKm5E,eAAe9M,QAAQ,4BAG/C,MAAMoW,EAAwB,KACxBrE,IACFp+E,KAAKm5E,eAAerO,OACpB9qE,KAAKm5E,eAAe5M,WAAWiW,GAChC,EAGGE,EAAUjiF,IACdgiF,IACAziF,KAAKk5E,yBAA2B,KAC3Bz4E,EACAL,EAAOK,GADAN,GACM,EAGd6rD,EAAoB,MACpBhsD,KAAK49E,0BACP8E,KACO,GAKX5J,EAAc94E,KAAK84E,aAAe54E,QAAQC,UAC1C24E,EAAYl4E,MAAK,KACf,GAAIorD,IAAqB,OACzB,MAAM22B,EAAoB,GACpBC,EAAoB,GACpBC,EAAgC,GACtC,IAAK,IAAI33E,EAAI,EAAGA,EAAIlL,KAAKwhD,UAAUyK,OAAO9nD,OAAQ+G,IAAK,CACrD,IAAI43E,GAAe,EACnB,IAAK,IAAIT,KAAiBE,EACxB,GAAIF,IAAkBn3E,EAAG,CACvB43E,GAAe,EACf,KACD,CAEH,IAAKA,EAAc,CACjB,MAAMrxB,EAAQzxD,KAAKwhD,UAAUyK,OAAO/gD,GACpCy3E,EAAkBt+E,KAAKotD,EAAMrxB,aAC7BwiD,EAAkBv+E,KAAKrE,KAAKwhD,UAAUgQ,aAAatmD,IACnD23E,EAA8Bx+E,KAAK,CACjCkmB,SAAUknC,EAAMlnC,SAASgb,QACzBxwB,WAAY08C,EAAM18C,WAAWwwB,QAC7BtyB,MAAOw+C,EAAMx+C,MAAMsyB,SAEtB,CACF,CACDvlC,KAAKohF,oBACLphF,KAAKwhD,UAAUt8C,UACflF,KAAK6+D,gBAAkBtmB,GAAgBG,QACvC14C,KAAK82E,kBACL92E,KAAKk/E,gBACHyD,EACAC,GACA,GACA,GACA,GAEChiF,MAAK,KACAorD,MACJy2B,IACAziF,KAAKwhD,UAAUyK,OAAOx5B,SAAQ,CAACg/B,EAAOnmD,KACpCmmD,EAAMlnC,SAAS3W,KACbivE,EAA8Bv3E,GAAOif,UAEvCknC,EAAM18C,WAAWnB,KACfivE,EAA8Bv3E,GAAOyJ,YAEvC08C,EAAMx+C,MAAMW,KAAKivE,EAA8Bv3E,GAAO2H,MAAM,IAE9DjT,KAAKwhD,UAAU+d,mBACfv/D,KAAKg4E,kBAAmB,EAExBh4E,KAAKshF,cAAa,GAAM1gF,MAAK,KACvBorD,IACFhsD,KAAKg4E,kBAAmB,GAG1Bc,EAAc94E,KAAK84E,aAAe54E,QAAQC,UAC1C24E,EAAYl4E,MAAK,KACfZ,KAAKg4E,kBAAmB,EACxB0K,GAAQ,IACR,IACF,IAEH1hF,OAAO8nB,IACN45D,EAAO55D,EAAE,GACT,GACJ,IAGG9oB,KAAKk5E,wBACb,CAKD,KAAAjkB,GACE,IAAIj1D,KAAK21E,eAQP,MAAM,IAAIt0E,MAAM,yDAPZrB,KAAKo2E,UACPp2E,KAAK4vD,SAASmzB,iBAAiB/iF,KAAK41E,sBAEpC51E,KAAKgjF,eAAiBC,sBAAsBjjF,KAAK41E,sBAEnD51E,KAAK+3E,uBAAwB,CAIhC,CAKD,IAAAmL,GACMljF,KAAK21E,gBAAkB31E,KAAK+3E,wBAC1B/3E,KAAKo2E,UACPp2E,KAAK4vD,SAASmzB,iBAAiB,MAE/BI,qBAAqBnjF,KAAKgjF,gBAE5BhjF,KAAK+3E,uBAAwB,EAEhC,CAKD,aAAM7yE,GACJ,GAAIlF,KAAK49E,wBAAyB,OAAO59E,KAAKy5E,eAE9C,IAAI2J,EAAe,GACfC,EAAkB,GACtB,IAAK,IAAIC,KAActjF,KAAKg5E,2BAC1B,GAAIh5E,KAAKg5E,2BAA2B3zD,eAAei+D,GAAa,CAC9D,MAAMC,EACJvjF,KAAKg5E,2BAA2BsK,GAClCD,EAAgBh/E,KAAKk/E,GACrBH,EAAa/+E,KAAKk/E,EAAuBtjF,QAC1C,CAkEH,OAhEID,KAAK84E,aACPsK,EAAa/+E,KAAKrE,KAAK84E,aAGzB94E,KAAKw5E,WAAY,EACjBx5E,KAAKy5E,eAAiBv5E,QAAQo+C,IAAI8kC,GAAc1C,SAAQ,KACtD1gF,KAAKkjF,OACDljF,KAAKi3E,uBACPj3E,KAAKi3E,qBAAqB/xE,UAC1BlF,KAAKi3E,qBAAuB,MAE1Bj3E,KAAKg3E,sBACPh3E,KAAKg3E,oBAAoB9xE,UACzBlF,KAAKg3E,oBAAsB,MAE7Bh3E,KAAK+2E,SAAW,KACZ/2E,KAAKwhD,YACPxhD,KAAKwhD,UAAUt8C,UACflF,KAAKwhD,UAAY,MAEfxhD,KAAKs3E,cACPt3E,KAAKs3E,YAAYpyE,UACjBlF,KAAKs3E,YAAc,MAEjBt3E,KAAKy4E,iBACPz4E,KAAKy4E,eAAe+K,UAAUxjF,KAAK+1E,aACnC/1E,KAAKy4E,eAAiB,MAExBz4E,KAAKohF,oBACLphF,KAAK86E,sBAEL96E,KAAKm5E,eAAe1M,iBACpBzsE,KAAKm5E,eAAe1O,aAAa,MACjCzqE,KAAKo5E,mBAAmBtO,OACxB9qE,KAAKo5E,mBAAmB3O,aAAa,MACrCzqE,KAAK0oE,UAAU+B,aAAa,MAE5BzqE,KAAKw1C,OAAS,KACdx1C,KAAK+xC,WAAa,KAClB/xC,KAAKg4E,kBAAmB,EACxBh4E,KAAKu5E,aAAc,EACfv5E,KAAK4vD,WACF5vD,KAAKs5E,wBACRt5E,KAAK+1E,YAAYpL,YAAY3qE,KAAK4vD,SAASltB,YAC3C1iC,KAAK4vD,SAAS1qD,WAEhBlF,KAAK4vD,SAAW,MAGb5vD,KAAKs5E,uBACR94C,SAASt9B,KAAKynE,YAAY3qE,KAAK+1E,aAGjC/1E,KAAK03E,wBAA0B,KAC/B13E,KAAKy3E,wBAA0B,KAC/Bz3E,KAAK23E,+BAAiC,KACtC33E,KAAK43E,qBAAuB,KAC5B53E,KAAK6pD,UAAW,EAChB7pD,KAAKw5E,WAAY,EACjBx5E,KAAKy5E,eAAiB,IAAI,IAE5B4J,EAAgB5wD,SAASgxD,IACvBA,EAAQviF,MAAM,iBAAiB,IAE1BlB,KAAKy5E,cACb,CAED,gBAAA5D,GACM71E,KAAK21E,iBAAmB31E,KAAKo2E,YAC/Bp2E,KAAKgjF,eAAiBC,sBAAsBjjF,KAAK41E,uBAEnD51E,KAAK+mC,SACD/mC,KAAK0jF,gBACP1jF,KAAK2jF,SACL3jF,KAAKm4E,2BAELn4E,KAAKm4E,wBAA0B,EAEjCn4E,KAAK4jF,iBAAkB,CACxB,CAED,oBAAAjJ,GACE36E,KAAK4jF,iBAAkB,CACxB,CAEDF,aAAe,WACb,IAAItR,EAAc,EAClB,MAAMyR,EAAqB,IAAI52E,EAAM+F,QAC/B8wE,EAAwB,IAAI72E,EAAMkG,WAClC4wE,EAAgB,KAEtB,OAAO,WACL,IACG/jF,KAAKu5E,cACLv5E,KAAKg4E,kBACNh4E,KAAK49E,wBAEL,OAAO,EAGT,IAAI8F,GAAe,EACfM,GAAgB,EACpB,GAAIhkF,KAAKw1C,OAAQ,CACf,MAAMyuC,EAAKjkF,KAAKw1C,OAAOjrB,SACjB25D,EAAKlkF,KAAKw1C,OAAOzgC,WACvBivE,EACEr/E,KAAKkW,IAAIopE,EAAGv4E,EAAIm4E,EAAmBn4E,GAAKq4E,GACxCp/E,KAAKkW,IAAIopE,EAAGt4E,EAAIk4E,EAAmBl4E,GAAKo4E,GACxCp/E,KAAKkW,IAAIopE,EAAGr4E,EAAIi4E,EAAmBj4E,GAAKm4E,GACxCp/E,KAAKkW,IAAIqpE,EAAGx4E,EAAIo4E,EAAsBp4E,GAAKq4E,GAC3Cp/E,KAAKkW,IAAIqpE,EAAGv4E,EAAIm4E,EAAsBn4E,GAAKo4E,GAC3Cp/E,KAAKkW,IAAIqpE,EAAGt4E,EAAIk4E,EAAsBl4E,GAAKm4E,GAC3Cp/E,KAAKkW,IAAIqpE,EAAGjvE,EAAI6uE,EAAsB7uE,GAAK8uE,CAC9C,CAiBD,OAfAL,EACE1jF,KAAKu2E,aAAelmC,GAAWG,QACd,IAAhB4hC,GACCpyE,KAAKwhD,UAAU0P,uBACf8yB,GACAhkF,KAAKu2E,aAAelmC,GAAWC,SACV,IAArBtwC,KAAK8hD,aACL9hD,KAAK4jF,iBAEL5jF,KAAKw1C,SACPquC,EAAmBjwE,KAAK5T,KAAKw1C,OAAOjrB,UACpCu5D,EAAsBlwE,KAAK5T,KAAKw1C,OAAOzgC,aAGzCq9D,IACOsR,CACb,CACG,CA/Cc,GAiDfC,OACS,WACL,IACG3jF,KAAKu5E,cACLv5E,KAAKg4E,kBACNh4E,KAAK49E,wBAEL,OAGF,MAOMuG,EAAgBnkF,KAAK4vD,SAAS2qB,UAPb,CAACxoC,IACtB,IAAK,IAAI1sC,KAAS0sC,EAAW3sC,SAC3B,GAAIC,EAAM4vC,QAAS,OAAO,EAE5B,OAAO,CAAK,EAIVmvC,CAAepkF,KAAK+xC,cACtB/xC,KAAK4vD,SAAS+zB,OAAO3jF,KAAK+xC,WAAY/xC,KAAKw1C,QAC3Cx1C,KAAK4vD,SAAS2qB,WAAY,GAE5Bv6E,KAAK4vD,SAAS+zB,OAAO3jF,KAAKwhD,UAAWxhD,KAAKw1C,QAC1Cx1C,KAAK4vD,SAAS2qB,WAAY,EACtBv6E,KAAKs3E,YAAY9gC,wBAA0B,GAC7Cx2C,KAAK4vD,SAAS+zB,OAAO3jF,KAAKs3E,YAAYllC,YAAapyC,KAAKw1C,QAEtDx1C,KAAKo3E,kBACPp3E,KAAK4vD,SAAS+zB,OAAO3jF,KAAKs3E,YAAYjlC,aAAcryC,KAAKw1C,QAE3Dx1C,KAAK4vD,SAAS2qB,UAAY4J,CAChC,EAGE,MAAAp9C,CAAO6oB,EAAUpa,GACXx1C,KAAK01E,YAAY11E,KAAKqkF,oBAAoBz0B,EAAUpa,GAGrDx1C,KAAKu5E,aACLv5E,KAAKg4E,mBACNh4E,KAAK49E,0BAKH59E,KAAK+2E,WACP/2E,KAAK+2E,SAAShwC,SACV/mC,KAAKw1C,OAAOnN,uBAAyBroC,KAAKq5E,qBAC5C9D,GAAOmH,0BACL18E,KAAKw1C,OACLx1C,KAAKw1C,OACLx1C,KAAK+2E,WAIX/2E,KAAKshF,eACLthF,KAAKskF,+BACLtkF,KAAKk9E,kBACLl9E,KAAKukF,mBACLvkF,KAAKwkF,YACLxkF,KAAKykF,yBACLzkF,KAAK0kF,kBACL1kF,KAAK2kF,qBACN,CAED,mBAAAN,CAAoBz0B,EAAUpa,GAC5Bx1C,KAAK4vD,SAAWA,EACZ5vD,KAAKwhD,WAAWxhD,KAAKwhD,UAAUsf,YAAY9gE,KAAK4vD,UACpD5vD,KAAKw1C,OAASA,EACVx1C,KAAK+2E,WAAU/2E,KAAK+2E,SAASt0C,OAAS+S,GAC1Cx1C,KAAK2sD,MACN,CAED63B,UAAY,WACV,IAAII,EAAehgF,IACfigF,EAAa,EAEjB,OAAO,WACL,GACE7kF,KAAKm4E,wBAnhE2C,GAqhEhD,CACA,MAAM9zB,EAAcz/C,IACFy/C,EAAcugC,GACf,GACf5kF,KAAKwpE,WAAaqb,EAClBA,EAAa,EACbD,EAAevgC,GAEfwgC,GAEV,MACQ7kF,KAAKwpE,WAAa,IAE1B,CACG,CAtBW,GAwBZ8a,6BAA+B,WAC7B,MAAMQ,EAAmB,IAAI73E,EAAM09B,QAC7Bo6C,EAAsB,IAAI93E,EAAM09B,QACtC,IAAIq6C,EAEJ,OAAO,WACAhlF,KAAKq5E,sBACRr5E,KAAK4vD,SAASwsB,QAAQ2I,QAEOthF,IAA3BuhF,GACAA,IAA2BhlF,KAAKw1C,OAAOnN,sBACvC08C,EAAoBr5E,IAAMo5E,EAAiBp5E,GAC3Cq5E,EAAoBp5E,IAAMm5E,EAAiBn5E,IAEvC3L,KAAKw1C,OAAOnN,sBACdroC,KAAKw1C,OAAOjJ,MAAQw4C,EAAoBr5E,EAAI,EAC5C1L,KAAKw1C,OAAOlJ,MAAQy4C,EAAoBr5E,EAAI,EAC5C1L,KAAKw1C,OAAO/I,IAAMs4C,EAAoBp5E,EAAI,EAC1C3L,KAAKw1C,OAAO9I,QAAUq4C,EAAoBp5E,EAAI,GAE9C3L,KAAKw1C,OAAOyvC,OAASF,EAAoBr5E,EAAIq5E,EAAoBp5E,EAEnE3L,KAAKw1C,OAAO3O,yBACZi+C,EAAiBlxE,KAAKmxE,GACtBC,EAAyBhlF,KAAKw1C,OAAOnN,sBAG/C,CACG,CA5B8B,GA8B/Bo8C,uBAAyB,WACvB,IAAIS,EAEJ,OAAO,WACL,MAAM7gC,EAAcz/C,IACfsgF,IAAgBA,EAAiB7gC,GACtC,MAAM8gC,EAAY9gC,EAAc6gC,EAEhCllF,KAAKolF,uBAAuB/gC,GAC5BrkD,KAAK+1C,kBAAkBovC,GAEvBD,EAAiB7gC,CACvB,CACG,CAbwB,GAezB+gC,uBAAyB,WACvB,IAAIC,EAAmB,IAAIp4E,EAAM+F,QAC7BsyE,EAAmB,IAAIr4E,EAAM+F,QAC7BuyE,EAAe,IAAIt4E,EAAM+F,QAE7B,OAAO,SAASqxC,GACd,GAAIrkD,KAAK87E,0BAA2B,CAClCwJ,EACG1xE,KAAK5T,KAAKo4E,sBACV52D,IAAIxhB,KAAKw1C,OAAOjrB,UAChBrU,YACHqvE,EACG3xE,KAAK5T,KAAKq4E,kBACV72D,IAAIxhB,KAAKw1C,OAAOjrB,UAChBrU,YACH,MAAMsvE,EAAgB7gF,KAAK+sC,KAAK4zC,EAAiB37C,IAAI47C,IAE/Cv/D,GADiBw/D,GAAiB7gF,KAAK2+B,GAAK,GAAM,IAAO,IAE5CkiD,GAChBnhC,EAAcrkD,KAAKg8E,oCACtBqJ,EACGzxE,KAAK5T,KAAKo4E,sBACVjyD,KAAKnmB,KAAKq4E,iBAAkBryD,GAC/BhmB,KAAKw1C,OAAOhN,OAAO68C,GACnBrlF,KAAK+2E,SAASj0C,OAAOlvB,KAAKyxE,GACtBr/D,GAAK,IACPhmB,KAAK87E,2BAA4B,EAEpC,CACP,CACG,CA9BwB,GAgCzB/lC,kBAAoB,WAClB,MAAM0pB,EAAmB,IAAIxyD,EAAM09B,QACnC,IAAI86C,GAAmB,EAEvB,OAAO,SAASN,GAEd,GADAnlF,KAAKk6E,oBAAoBza,GACrBz/D,KAAK87E,0BAA2B,CAClC97E,KAAKs3E,YAAYhhC,0BAAyB,GAC1C,MAAMovC,EAA4B/gF,KAAKD,IACrC1E,KAAKs3E,YAAY9gC,wBACjB,GAEF,IAAImvC,EAAwBhhF,KAAKF,IAC/BihF,EAjoEyB,GAioEgCP,EACzD,GAEFnlF,KAAKs3E,YAAY/gC,sBAAsBovC,GACvC3lF,KAAKs3E,YAAYvhC,kBACf/1C,KAAKq4E,iBACLr4E,KAAKw1C,OACLiqB,GAEFgmB,GAAmB,EACnBzlF,KAAK26E,sBACb,KAAa,CACL,IAAI+K,EAQJ,GAPsBA,EAAlBD,EAA8C,EAEpB9gF,KAAKF,IAC/BzE,KAAKs3E,YAAY9gC,wBACjB,GAGAkvC,EAA4B,EAAG,CACjC1lF,KAAKs3E,YAAYvhC,kBACf/1C,KAAKq4E,iBACLr4E,KAAKw1C,OACLiqB,GAEF,IAAIkmB,EAAwBhhF,KAAKD,IAC/BghF,EA3pEwB,IA2pEkCP,EAC1D,GAEFnlF,KAAKs3E,YAAY/gC,sBAAsBovC,GACT,IAA1BA,GACF3lF,KAAKs3E,YAAYhhC,0BAAyB,EAE7C,CACGovC,EAA4B,GAAK1lF,KAAK26E,uBAC1C8K,GAAmB,CACpB,CACP,CACG,CApDmB,GAsDpBlB,iBAAmB,WACjB,MAAM9iC,EAAU,GACVge,EAAmB,IAAIxyD,EAAM09B,QAEnC,OAAO,WACD3qC,KAAKm3E,gBACPn3E,KAAK26E,uBACL36E,KAAKk6E,oBAAoBza,GACzBhe,EAAQt9C,OAAS,EACjBnE,KAAKi4E,UAAUt3B,+BACb3gD,KAAKw1C,OACLx1C,KAAKs4E,cACL7Y,GAEFz/D,KAAKi4E,UAAU/2B,mBAAmBlhD,KAAKwhD,UAAWC,GAC9CA,EAAQt9C,OAAS,GACnBnE,KAAKs3E,YAAYliC,yBAAwB,GACzCp1C,KAAKs3E,YAAY/hC,4BACfkM,EAAQ,GAAGhY,OACXzpC,KAAKw1C,SAGPx1C,KAAKs3E,YAAYliC,yBAAwB,KAGvCp1C,KAAKs3E,YAAYjiC,4BACnBr1C,KAAK26E,uBAEP36E,KAAKs3E,YAAYliC,yBAAwB,GAEjD,CACG,CA/BkB,GAiCnBsvC,gBAAkB,WAChB,MAAMjlB,EAAmB,IAAIxyD,EAAM09B,QAEnC,OAAO,WACL,IAAK3qC,KAAKq3E,SAAU,OACpB,MAAMvsE,EAAa9K,KAAKwhD,UAAUlxC,gBAClCtQ,KAAKk6E,oBAAoBza,GACzB,MAAM2J,EAAuBppE,KAAK+2E,SAAW/2E,KAAK+2E,SAASj0C,OAAS,KAC9DymC,EAAqBvpE,KAAKm3E,eAC9Bn3E,KAAKs3E,YAAYnlC,WAAW5nB,SAC5B,KACIm/C,EACJ5+D,EAAa,EAAK9K,KAAKypE,iBAAmB3+D,EAAc,IAAM,EAChE9K,KAAK0oE,UAAU3hC,OACb04B,EACAz/D,KAAKw1C,OAAOjrB,SACZ6+C,EACAppE,KAAKw1C,OAAOlO,GACZtnC,KAAKw1C,OAAOnN,qBACZkhC,EACAvpE,KAAKwpE,YAAc,MACnB1+D,EACA9K,KAAKypE,iBACLC,EACA1pE,KAAK2pE,aACL3pE,KAAK4pE,gBACL5pE,KAAKwhD,UAAUue,gBACf//D,KAAKwhD,UAAUye,2BAEvB,CACG,CA9BiB,GAgClB,kBAAA0kB,GACM3kF,KAAKo3E,kBACPp3E,KAAKs3E,YAAYlgC,2BAA0B,GAC3Cp3C,KAAKs3E,YAAYjgC,8BACfr3C,KAAK+2E,SAASj0C,OACd9iC,KAAKw1C,OAAOlO,KAGdtnC,KAAKs3E,YAAYlgC,2BAA0B,EAE9C,CAEDkqC,aAAe,WACb,MAAMsE,EAAY,IAAI34E,EAAM2F,QACtBizE,EAAsB,GACtBC,EAAkB,IAAI74E,EAAM+F,QAAQ,EAAG,GAAI,GAC3C+yE,EAAc,IAAI94E,EAAM+F,QAAQ,EAAG,GAAI,GACvCgzE,EAAkB,IAAI/4E,EAAM+F,QAC5BizE,EAAiB,IAAIh5E,EAAM+F,QAC3BkzE,EAAc,GAEdC,EAAe,CACnB,CACEC,eAAgB,IAChBC,cAAe,CAAC,KAAO,OAAS,MAElC,CACED,eAAgB,IAChBC,cAAe,CAAC,OAAS,SAE3B,CACED,eAAgB,GAChBC,cAAe,CAAC,MAIpB,OAAO,SAASC,GAAQ,EAAOC,GAAe,GAC5C,IAAKvmF,KAAKu5E,YAAa,OAAOr5E,QAAQC,SAAQ,GAC9C,GAAIH,KAAKu3E,YAAa,OAAOr3E,QAAQC,SAAQ,GAC7C,GAAIH,KAAKwhD,UAAUlxC,iBAAmB,EAEpC,OADAtQ,KAAKypE,iBAAmB,EACjBvpE,QAAQC,SAAQ,GAGzB,IAAIqmF,EAAY,EACZC,EAAe,EACfC,GAA0B,EAC1BC,GAA0B,EAS9B,GAPAZ,EAAYtyE,IAAI,EAAG,GAAI,GAAGo0B,gBAAgB7nC,KAAKw1C,OAAOzgC,YACtDyxE,EAAYT,EAAYp8C,IAAIm8C,GAC5BW,EAAeR,EACZryE,KAAK5T,KAAKw1C,OAAOjrB,UACjB/I,IAAIwkE,GACJ7hF,WAEEmiF,GACEtmF,KAAKwhD,UAAUM,aAAsC,IAAvBokC,EAAY/hF,SACzCqiF,GAAa,MAAME,GAA0B,GAC7CD,GAAgB,IAAKE,GAA0B,GAC9CD,GAA4BC,IAC/B,OAAOzmF,QAAQC,SAAQ,GAK7BH,KAAKu3E,aAAc,EACnB,IAAI9N,iBAAEA,EAAgBmd,cAAEA,GAAkB5mF,KAAK6mF,0BAC/CD,EAAgBA,GAAiBL,EACjCvmF,KAAKypE,iBAAmBA,EAExBmc,EAAUhyE,KAAK5T,KAAKw1C,OAAOU,aAAa1O,SACxC,MAAMs/C,EAAY9mF,KAAKk3E,mBAAqBl3E,KAAKw1C,OACjDowC,EAAUxvE,YAAY0wE,EAAU1J,kBAChCwI,EAAU/xE,SAAS7T,KAAKwhD,UAAUtL,aAElC,IAAI6wC,EAA4B7mF,QAAQC,SAAQ,GA6EhD,OA3EEH,KAAKi2E,qBACJiQ,EAAY/hF,QAAU,GAAK+hF,EAAY/hF,OAAS,GAAM,KAEvD4iF,EAA4B/mF,KAAKwhD,UAAUijB,sBACzCmhB,EACA5lF,KAAK23E,iCAIToP,EAA0BnmF,MAAK,KAC7B,GAA2B,IAAvBslF,EAAY/hF,OACd,GAAInE,KAAKwhD,UAAUM,aAAe8kC,EAChCV,EAAY7hF,KAAKrE,KAAKypE,sBACjB,CACL,IAAK,IAAIud,KAAeb,EACtB,GAAIK,EAAYQ,EAAYZ,eAAgB,CAC1C,IAAK,IAAIa,KAAgBD,EAAYX,cACnCH,EAAY7hF,KACVM,KAAKoJ,MAAM/N,KAAKypE,iBAAmBwd,IAGvC,KACD,CAEHf,EAAY7hF,KAAKrE,KAAKypE,iBACvB,CAEH,IAAI4I,EAAY1tE,KAAKF,IAAIyhF,EAAYnG,QAAS//E,KAAKypE,kBACnDzpE,KAAKsyE,eAAiBD,EAEtBwT,EAAoB,GAAK7lF,KAAKw1C,OAAOjrB,SAAS7e,EAC9Cm6E,EAAoB,GAAK7lF,KAAKw1C,OAAOjrB,SAAS5e,EAC9Ck6E,EAAoB,GAAK7lF,KAAKw1C,OAAOjrB,SAAS3e,EAE9C,MAAMqnE,EAAc,CAClBJ,cAAe+S,EAAU7uE,SACzBoyD,eAAgB0c,EAChBpc,iBAAkBzpE,KAAKypE,iBACvB6I,eAAgBD,EAChBE,wBAAyBvyE,KAAKi2E,oBAiChC,OA/BIj2E,KAAKwhD,UAAUM,aACjB9hD,KAAKwhD,UAAU8iB,oBAAoBtkE,KAAK43E,sBAErC53E,KAAKk2E,yBACRjD,EAAYN,cAAgB3yE,KAAKy3E,wBACjCxE,EAAYpT,WAAa7/D,KAAK43E,qBAC1B53E,KAAKi2E,qBACPhD,EAAYL,qBACV5yE,KAAK23E,iCAIX33E,KAAK84E,YAAc,IAAI54E,SAASC,IAC9BH,KAAK+4E,oBAAsB54E,CAAO,IAGhCH,KAAK63E,gBAAgB1zE,OAAS,IAChCnE,KAAK63E,gBAAgBplD,SAAS+4C,IAC5BxrE,KAAKgxE,WAAWhmB,YAAYwgB,EAAQ,IAEtCxrE,KAAK63E,gBAAkB,IAEzB73E,KAAKgxE,WAAWhmB,YAAY,CAC1BnyB,KAAMo6C,IAGmB,IAAvBiT,EAAY/hF,SACd6hF,EAAgBpyE,KAAK5T,KAAKw1C,OAAOjrB,UACjCu7D,EAAgBlyE,KAAKmyE,KAGhB,CAAI,IAGNgB,CACb,CACG,CA/Ic,GAoJfF,wBAA0B,WACxB,MAAMK,EAAiB,GACvB,IAAIC,EAAsB,KAC1B,MAAMC,EAAe,IAAIn6E,EAAM+F,QACzBq0E,EAAe,IAAIp6E,EAAM+F,QACzB2pE,EAAa,IAAI1vE,EAAM+F,QACvBs0E,EAAY,IAAIr6E,EAAM2F,QACtB20E,EAAgB,IAAIt6E,EAAM2F,QAC1ByuC,EAAiB,IAAIp0C,EAAM2F,QAC3B6sD,EAAmB,IAAIxyD,EAAM+F,QAC7BmoE,EAAU,IAAIluE,EAAM+F,QAAQ,EAAG,GAAI,GAEnCw0E,EAAU,IAAIv6E,EAAM+F,QACpBy0E,EAAY7kC,GACT4kC,EAAQ5zE,KAAKgvC,EAAKl+C,KAAK8c,IAAIohC,EAAKn+C,KAAKN,SAG9C,OAAO,SAASujF,GAAiB,GAC/B1nF,KAAKk6E,oBAAoBza,GACzB,MAAMkoB,EACJloB,EAAiB9zD,EACjB,EACAhH,KAAKwnC,IAAKnsC,KAAKw1C,OAAOpJ,IAAM,EAAOn/B,EAAMo1B,UAAUC,SAC/CslD,EAAYjjF,KAAKkjF,KAAKpoB,EAAiB/zD,EAAI,EAAMi8E,GACjDG,EAAYnjF,KAAKkjF,KAAKpoB,EAAiB9zD,EAAI,EAAMg8E,GACjDI,EAAepjF,KAAKy9B,IAAIwlD,GACxBI,EAAerjF,KAAKy9B,IAAI0lD,GAExBpmC,EAAY1hD,KAAKwhD,UAAUG,eAEjC,GAAID,EAAW,CACb6lC,EAAc3zE,KAAK5T,KAAKw1C,OAAOU,aAAa1O,SAC5C+/C,EAAc1zE,SAAS7T,KAAKwhD,UAAUtL,aAEtC,IAAI+xC,EAAkB,EAClBxe,EAAmB,EAEvB,IAAK,IAAIloD,EAAI,EAAGA,EAAImgC,EAAUE,SAASz9C,OAAQod,IAAK,CAClD,MAAMsgC,EAAUH,EAAUE,SAASrgC,GACnC+lE,EAAU1zE,KAAK2zE,GACXvnF,KAAKwhD,UAAUM,cACjB9hD,KAAKwhD,UAAUO,kBAAkBxgC,EAAG8/B,GACpCimC,EAAUzzE,SAASwtC,IAErB,MAAMsR,EAAY9Q,EAAQ8G,iBAAiBxkD,OAC3C,IAAK,IAAI+G,EAAI,EAAGA,EAAIynD,EAAWznD,IAAK,CAClC,MAAM03C,EAAOf,EAAQ8G,iBAAiBz9C,GACtC,IACG03C,EAAKjgD,OACLigD,EAAKjgD,KAAKmgD,SACkB,IAA7BF,EAAKjgD,KAAKmgD,QAAQ3+C,OAElB,SAEFw4E,EAAW/oE,KAAKgvC,EAAKluC,QAAQjC,aAAa60E,GAE1C,MAAMY,EAAiBvL,EAAWx4E,SAClCw4E,EAAWzmE,YAEXkxE,EAAaxzE,KAAK+oE,GAAYwL,KAAK,GAAGjyE,YACtCmxE,EAAazzE,KAAK+oE,GAAYyL,KAAK,GAAGlyE,YAEtC,MAAMmyE,EAAmBlN,EAAQxxC,IAAI09C,GAC/BiB,EAAmBnN,EAAQxxC,IAAIy9C,GAE/BmB,EAAKd,EAAS7kC,IAIjB8kC,IAFeW,EAAmBN,EAAe,IADlCO,EAAmBN,EAAe,KAKlDE,EAAiBK,IAInB9e,GAAoB7mB,EAAKjgD,KAAKmgD,QAAQ3+C,OACtC+iF,EAAee,GAAmBrlC,EAClCA,EAAKjgD,KAAKulF,eAAiBA,EAC3BD,IACD,CACF,CAEDf,EAAe/iF,OAAS8jF,EACxBf,EAAeruD,MAAK,CAACzS,EAAG9Z,IAClB8Z,EAAEzjB,KAAKulF,eAAiB57E,EAAE3J,KAAKulF,gBAAwB,EAC/C,IAGd,IAAIM,EAAoB/e,EAAmB58D,EAAUqlE,YACrD,IAAK,IAAIhnE,EAAI,EAAGA,EAAI+8E,EAAiB/8E,IAAK,CACxC,MAAM03C,EAAOskC,EAAeh8E,GACtBu9E,EAAiB7lC,EAAKjgD,KAAKmgD,QAAQ3+C,OACnCukF,EAAkBD,EAAiB57E,EAAUqlE,YACpC,IAAI32D,YACjBvb,KAAKy3E,wBAAwB71E,OAC7B4mF,EAAoBE,EACpBD,GAEOh1E,IAAImvC,EAAKjgD,KAAKmgD,SACvB0lC,GAAqBE,CACtB,CAED,MAAO,CACLjf,iBAAkBA,EAClBmd,eAAe,EAEzB,CAAa,CACL,MAAMpkE,EAAkBxiB,KAAKwhD,UAAUlxC,gBACvC,IACG62E,GACDA,EAAoBhjF,SAAWqe,EAC/B,CACA2kE,EAAsB,IAAI5rE,YAAYiH,GACtC,IAAK,IAAItX,EAAI,EAAGA,EAAIsX,EAAiBtX,IACnCi8E,EAAoBj8E,GAAKA,CAE5B,CAED,OADAlL,KAAKy3E,wBAAwBhkE,IAAI0zE,GAC1B,CACL1d,iBAAkBjnD,EAClBokE,eAAe,EAElB,CACP,CACG,CA5HyB,GA8H1B,YAAA+B,GACE,OAAO3oF,KAAKwhD,SACb,CAOD,aAAAonC,CAAcv2B,GACZ,OAAOryD,KAAKwhD,UAAU0B,SAASmP,EAChC,CAED,aAAAyV,GACE,OAAO9nE,KAAKwhD,UAAUsmB,eACvB,CAED,QAAA+gB,GACE,OAAOviF,UAAUC,UAAUwpB,SAAS,OACrC,EG5jFI,MAAM+4D,WAAqB77E,EAAM87E,MACtC,WAAAppF,CAAYsiB,EAAU,IACpB1gB,QACA0gB,EAAQ0zD,gBAAiB,EACzB1zD,EAAQ6zD,oBAAqB,EAC7B7zD,EAAQ8zD,YAAc,KACtB9zD,EAAQ+zD,wBAAyB,EACjC/zD,EAAQyzD,YAAa,EACrBzzD,EAAQuzB,YAAS/xC,EACjBwe,EAAQ2tC,cAAWnsD,EAEnBzD,KAAKm7C,OAAS,IAAIo6B,GAAOtzD,GACzBjiB,KAAKwhD,UAAY,KACjBxhD,KAAKk9E,kBAELl9E,KAAKgpF,aAAeF,GAAaG,qBACjCjpF,KAAKmoC,IAAInoC,KAAKgpF,cACdhpF,KAAKgpF,aAAaE,eAAiBJ,GAAaI,eAAe5oF,KAC7DN,KACAA,KAAKm7C,QAGPn7C,KAAKm7C,OAAO+/B,oBAAmB,KAC7Bl7E,KAAKk9E,iBAAiB,GAEzB,CAED,eAAAA,GACMl9E,KAAKwhD,YAAcxhD,KAAKm7C,OAAOqG,YAC7BxhD,KAAKwhD,WACPxhD,KAAKm1C,OAAOn1C,KAAKwhD,WAEnBxhD,KAAKwhD,UAAYxhD,KAAKm7C,OAAOqG,UAC7BxhD,KAAKmoC,IAAInoC,KAAKm7C,OAAOqG,WAExB,CAED4P,eAOS,SAASruD,GACS,OAAnB/C,KAAKwhD,WACPxhD,KAAKwhD,UAAU4P,eAAeruD,EAEtC,EAwBE,aAAAk7E,CAAc97E,EAAM8f,EAAU,IAE5B,OAD8B,IAA1BA,EAAQm8D,gBAAyBn8D,EAAQm8D,eAAgB,GACtDp+E,KAAKm7C,OAAO8iC,cAAc97E,EAAM8f,EACxC,CAoBD,cAAAi+D,CAAe1uB,EAAc4sB,GAE3B,OADsB,IAAlBA,IAAyBA,GAAgB,GACtCp+E,KAAKm7C,OAAO+kC,eAAe1uB,EAAc4sB,EACjD,CAOD,aAAAwK,CAAcv2B,GACZ,OAAOryD,KAAKm7C,OAAOytC,cAAcv2B,EAClC,CAED,gBAAA+vB,CAAiB92E,EAAO8yE,GAAgB,GACtC,OAAOp+E,KAAKm7C,OAAOinC,iBAAiB92E,EAAO8yE,EAC5C,CAED,iBAAAkE,CAAkBx/B,EAASs7B,GAAgB,GACzC,OAAOp+E,KAAKm7C,OAAOmnC,kBAAkBx/B,EAASs7B,EAC/C,CAED,aAAAtW,GACE,OAAO9nE,KAAKm7C,OAAO2sB,eACpB,CAED,kCAAAkT,CAAmCC,GACjCj7E,KAAKm7C,OAAO6/B,mCACVC,EAEH,CAED,aAAM/1E,GACJ,aAAalF,KAAKm7C,OAAOj2C,SAC1B,CAED,qBAAOgkF,CAAe/tC,EAAQyU,EAAU7d,EAAYyD,GAClD2F,EAAOpU,OAAO6oB,EAAUpa,EACzB,CAED,yBAAOyzC,GACL,MAAMhkF,EAAW,IAAIgI,EAAM0oC,eAAe,EAAG,EAAG,GAC1CxwC,EAAW,IAAI8H,EAAMmkC,kBAC3BjsC,EAASgkF,YAAa,EACtBhkF,EAASuuC,YAAa,EACtB,MAAM01C,EAAO,IAAIn8E,EAAMkkC,KAAKlsC,EAAUE,GAEtC,OADAikF,EAAKzP,eAAgB,EACdyP,CACR"}