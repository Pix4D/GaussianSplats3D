{"version":3,"file":"gaussian-splats-3d.module.js","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/LoaderStatus.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/LogLevel.js","../src/OrbitControls.js","../src/RenderMode.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/SceneRevealMode.js","../src/SplatRenderMode.js","../src/loaders/splat/gltf/GLTFParser.js","../src/loaders/splat/gltf/GLTFLoader.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/splatmesh/SplatMesh.js","../src/ui/InfoPanel.js","../src/ui/LoadingProgressBar.js","../src/ui/Util.js","../src/ui/LoadingSpinner.js","../src/webxr/ARButton.js","../src/webxr/VRButton.js","../src/webxr/WebXRMode.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/worker/SortWorker.js","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n  static idGen = 0;\n\n  constructor(promiseFunc, abortHandler) {\n    let resolver;\n    let rejecter;\n    this.promise = new Promise((resolve, reject) => {\n      resolver = resolve;\n      rejecter = reject;\n    });\n\n    const promiseResolve = resolver.bind(this);\n    const promiseReject = rejecter.bind(this);\n\n    const resolve = (...args) => {\n      promiseResolve(...args);\n    };\n\n    const reject = (error) => {\n      promiseReject(error);\n    };\n\n    promiseFunc(resolve.bind(this), reject.bind(this));\n    this.abortHandler = abortHandler;\n    this.id = AbortablePromise.idGen++;\n  }\n\n  then(onResolve) {\n    return new AbortablePromise((resolve, reject) => {\n      this.promise = this.promise\n        .then((...args) => {\n          const onResolveResult = onResolve(...args);\n          if (\n            onResolveResult instanceof Promise ||\n            onResolveResult instanceof AbortablePromise\n          ) {\n            onResolveResult.then((...args2) => {\n              resolve(...args2);\n            });\n          } else {\n            resolve(onResolveResult);\n          }\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }, this.abortHandler);\n  }\n\n  catch(onFail) {\n    return new AbortablePromise((resolve) => {\n      this.promise = this.promise\n        .then((...args) => {\n          resolve(...args);\n        })\n        .catch(onFail);\n    }, this.abortHandler);\n  }\n\n  abort(reason) {\n    if (this.abortHandler) this.abortHandler(reason);\n  }\n}\n\nexport class AbortedPromiseError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(val) {\n    floatView[0] = val;\n    const x = int32View[0];\n\n    let bits = (x >> 16) & 0x8000;\n    let m = (x >> 12) & 0x07ff;\n    const e = (x >> 23) & 0xff;\n\n    if (e < 103) return bits;\n\n    if (e > 142) {\n      bits |= 0x7c00;\n      bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n      return bits;\n    }\n\n    if (e < 113) {\n      m |= 0x0800;\n      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n      return bits;\n    }\n\n    bits |= ((e - 112) << 10) | (m >> 1);\n    bits += m & 1;\n    return bits;\n  };\n})();\n\nexport const uintEncodedFloat = (function() {\n  const floatView = new Float32Array(1);\n  const int32View = new Int32Array(floatView.buffer);\n\n  return function(f) {\n    floatView[0] = f;\n    return int32View[0];\n  };\n})();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n  return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n  return (\n    arr[offset] +\n    (arr[offset + 1] << 8) +\n    (arr[offset + 2] << 16) +\n    (arr[offset + 3] << 24)\n  );\n};\n\nexport const makeProgressiveFetchFunction =\n  (get = globalThis.fetch) =>\n  (path, onProgress, saveChunks = true) => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    const abortHandler = (reason) => {\n      abortController.abort(reason);\n      aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n      get(path, { signal })\n        .then(async (data) => {\n          // Handle error conditions where data is still returned\n          if (!data.ok) {\n            const errorText = await data.text();\n            reject(\n              new Error(\n                `Fetch failed: ${data.status} ${data.statusText} ${errorText}`,\n              ),\n            );\n            return;\n          }\n\n          const reader = data.body.getReader();\n          let bytesDownloaded = 0;\n          let _fileSize = data.headers.get('Content-Length');\n          let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n          const chunks = [];\n\n          while (!aborted) {\n            try {\n              const { value: chunk, done } = await reader.read();\n              if (done) {\n                if (onProgress) {\n                  onProgress(100, '100%', chunk, fileSize);\n                }\n                if (saveChunks) {\n                  const buffer = new Blob(chunks).arrayBuffer();\n                  resolve(buffer);\n                } else {\n                  resolve();\n                }\n                break;\n              }\n              bytesDownloaded += chunk.length;\n              let percent;\n              let percentLabel;\n              if (fileSize !== undefined) {\n                percent = (bytesDownloaded / fileSize) * 100;\n                percentLabel = `${percent.toFixed(2)}%`;\n              }\n              if (saveChunks) {\n                chunks.push(chunk);\n              }\n              if (onProgress) {\n                onProgress(percent, percentLabel, chunk, fileSize);\n              }\n            } catch (error) {\n              reject(error);\n              return;\n            }\n          }\n        })\n        .catch((error) => {\n          reject(new AbortedPromiseError(error));\n        });\n    }, abortHandler);\n  };\n\nexport const fetchWithProgress = makeProgressiveFetchFunction();\n\nexport const clamp = function(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n  return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n  if (object3D.geometry) {\n    object3D.geometry.dispose();\n    object3D.geometry = null;\n  }\n  if (object3D.material) {\n    object3D.material.dispose();\n    object3D.material = null;\n  }\n  if (object3D.children) {\n    for (let child of object3D.children) {\n      disposeAllMeshes(child);\n    }\n  }\n};\n\nexport const delayedExecute = (func, fast) => {\n  return new Promise((resolve) => {\n    window.setTimeout(\n      () => {\n        resolve(func());\n      },\n      fast ? 1 : 50,\n    );\n  });\n};\n\nexport const getSphericalHarmonicsComponentCountForDegree = (\n  sphericalHarmonicsDegree = 0,\n) => {\n  switch (sphericalHarmonicsDegree) {\n    case 1:\n      return 9;\n    case 2:\n      return 24;\n  }\n  return 0;\n};\n\nexport const nativePromiseWithExtractedComponents = () => {\n  let resolver;\n  let rejecter;\n  const promise = new Promise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  });\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\n  let resolver;\n  let rejecter;\n  if (!abortHandler) {\n    abortHandler = () => {};\n  }\n  const promise = new AbortablePromise((resolve, reject) => {\n    resolver = resolve;\n    rejecter = reject;\n  }, abortHandler);\n  return {\n    promise: promise,\n    resolve: resolver,\n    reject: rejecter,\n  };\n};\n\nclass Semver {\n  constructor(major, minor, patch) {\n    this.major = major;\n    this.minor = minor;\n    this.patch = patch;\n  }\n\n  toString() {\n    return `${this.major}_${this.minor}_${this.patch}`;\n  }\n}\n\nexport function isIOS() {\n  const ua = navigator.userAgent;\n  return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\n}\n\nexport function getIOSSemever() {\n  if (isIOS()) {\n    const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    return new Semver(\n      parseInt(extract[1] || 0, 10),\n      parseInt(extract[2] || 0, 10),\n      parseInt(extract[3] || 0, 10),\n    );\n  } else {\n    return null; // or [0,0,0]\n  }\n}\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\n\nconst BASE_COMPONENT_COUNT = 14;\n\nexport class UncompressedSplatArray {\n  static OFFSET = {\n    X: 0,\n    Y: 1,\n    Z: 2,\n    SCALE0: 3,\n    SCALE1: 4,\n    SCALE2: 5,\n    ROTATION0: 6,\n    ROTATION1: 7,\n    ROTATION2: 8,\n    ROTATION3: 9,\n    FDC0: 10,\n    FDC1: 11,\n    FDC2: 12,\n    OPACITY: 13,\n    FRC0: 14,\n    FRC1: 15,\n    FRC2: 16,\n    FRC3: 17,\n    FRC4: 18,\n    FRC5: 19,\n    FRC6: 20,\n    FRC7: 21,\n    FRC8: 22,\n    FRC9: 23,\n    FRC10: 24,\n    FRC11: 25,\n    FRC12: 26,\n    FRC13: 27,\n    FRC14: 28,\n    FRC15: 29,\n    FRC16: 30,\n    FRC17: 31,\n    FRC18: 32,\n    FRC19: 33,\n    FRC20: 34,\n    FRC21: 35,\n    FRC22: 36,\n    FRC23: 37,\n  };\n\n  constructor(sphericalHarmonicsDegree = 0) {\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n    this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(\n      this.sphericalHarmonicsDegree,\n    );\n    this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\n    this.defaultSphericalHarmonics = new Array(\n      this.sphericalHarmonicsCount,\n    ).fill(0);\n    this.splats = [];\n    this.splatCount = 0;\n  }\n\n  static createSplat(sphericalHarmonicsDegree = 0) {\n    const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let shEntries = getSphericalHarmonicsComponentCountForDegree(\n      sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < shEntries; i++) baseSplat.push(0);\n    return baseSplat;\n  }\n\n  addSplat(splat) {\n    this.splats.push(splat);\n    this.splatCount++;\n  }\n\n  getSplat(index) {\n    return this.splats[index];\n  }\n\n  addDefaultSplat() {\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromComonents(\n    x,\n    y,\n    z,\n    scale0,\n    scale1,\n    scale2,\n    rot0,\n    rot1,\n    rot2,\n    rot3,\n    r,\n    g,\n    b,\n    opacity,\n    ...rest\n  ) {\n    const newSplat = [\n      x,\n      y,\n      z,\n      scale0,\n      scale1,\n      scale2,\n      rot0,\n      rot1,\n      rot2,\n      rot3,\n      r,\n      g,\n      b,\n      opacity,\n      ...this.defaultSphericalHarmonics,\n    ];\n    for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\n      newSplat[i] = rest[i];\n    }\n    this.addSplat(newSplat);\n    return newSplat;\n  }\n\n  addSplatFromArray(src, srcIndex) {\n    const srcSplat = src.splats[srcIndex];\n    const newSplat = UncompressedSplatArray.createSplat(\n      this.sphericalHarmonicsDegree,\n    );\n    for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\n      newSplat[i] = srcSplat[i];\n    }\n    this.addSplat(newSplat);\n  }\n}\n","export class Constants {\n  static DefaultSplatSortDistanceMapPrecision = 16;\n  static MemoryPageSize = 65536;\n  static BytesPerFloat = 4;\n  static BytesPerInt = 4;\n  static MaxScenes = 32;\n  static ProgressiveLoadSectionSize = 262144;\n  static ProgressiveLoadSectionDelayDuration = 15;\n  static SphericalHarmonics8BitCompressionRange = 3;\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nconst DefaultSphericalHarmonics8BitCompressionRange =\n  Constants.SphericalHarmonics8BitCompressionRange;\nconst DefaultSphericalHarmonics8BitCompressionHalfRange =\n  DefaultSphericalHarmonics8BitCompressionRange / 2.0;\n\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\n\nconst toUncompressedFloat = (\n  f,\n  compressionLevel,\n  isSH = false,\n  range8BitMin,\n  range8BitMax,\n) => {\n  if (compressionLevel === 0) {\n    return f;\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return THREE.DataUtils.fromHalfFloat(f);\n  } else if (compressionLevel === 2) {\n    return fromUint8(f, range8BitMin, range8BitMax);\n  }\n};\n\nconst toUint8 = (v, rangeMin, rangeMax) => {\n  v = clamp(v, rangeMin, rangeMax);\n  const range = rangeMax - rangeMin;\n  return clamp(Math.floor(((v - rangeMin) / range) * 255), 0, 255);\n};\n\nconst fromUint8 = (v, rangeMin, rangeMax) => {\n  const range = rangeMax - rangeMin;\n  return (v / 255) * range + rangeMin;\n};\n\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\n  return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\n};\n\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\n  return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\n};\n\nconst dataViewFloatForCompressionLevel = (\n  dataView,\n  floatIndex,\n  compressionLevel,\n  isSH = false,\n) => {\n  if (compressionLevel === 0) {\n    return dataView.getFloat32(floatIndex * 4, true);\n  } else if (compressionLevel === 1 || (compressionLevel === 2 && !isSH)) {\n    return dataView.getUint16(floatIndex * 2, true);\n  } else {\n    return dataView.getUint8(floatIndex, true);\n  }\n};\n\nconst convertBetweenCompressionLevels = (function() {\n  const noop = (v) => v;\n\n  return function(val, fromLevel, toLevel, isSH = false) {\n    if (fromLevel === toLevel) return val;\n    let outputConversionFunc = noop;\n\n    if (fromLevel === 2 && isSH) {\n      if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\n      else if (toLevel == 0) {\n        outputConversionFunc = fromUint8;\n      }\n    } else if (fromLevel === 2 || fromLevel === 1) {\n      if (toLevel === 0) outputConversionFunc = fromHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = noop;\n        else outputConversionFunc = fromHalfFloatToUint8;\n      }\n    } else if (fromLevel === 0) {\n      if (toLevel === 1) outputConversionFunc = toHalfFloat;\n      else if (toLevel == 2) {\n        if (!isSH) outputConversionFunc = toHalfFloat;\n        else outputConversionFunc = toUint8;\n      }\n    }\n\n    return outputConversionFunc(val);\n  };\n})();\n\nconst copyBetweenBuffers = (\n  srcBuffer,\n  srcOffset,\n  destBuffer,\n  destOffset,\n  byteCount = 0,\n) => {\n  const src = new Uint8Array(srcBuffer, srcOffset);\n  const dest = new Uint8Array(destBuffer, destOffset);\n  for (let i = 0; i < byteCount; i++) {\n    dest[i] = src[i];\n  }\n};\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n  static CurrentMajorVersion = 0;\n  static CurrentMinorVersion = 1;\n\n  static CenterComponentCount = 3;\n  static ScaleComponentCount = 3;\n  static RotationComponentCount = 4;\n  static ColorComponentCount = 4;\n  static CovarianceComponentCount = 6;\n\n  static SplatScaleOffsetFloat = 3;\n  static SplatRotationOffsetFloat = 6;\n\n  static CompressionLevels = {\n    0: {\n      BytesPerCenter: 12,\n      BytesPerScale: 12,\n      BytesPerRotation: 16,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 12,\n      RotationffsetBytes: 24,\n      ColorOffsetBytes: 40,\n      SphericalHarmonicsOffsetBytes: 44,\n      ScaleRange: 1,\n      BytesPerSphericalHarmonicsComponent: 4,\n      SphericalHarmonicsOffsetFloat: 11,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 44 },\n        1: { BytesPerSplat: 80 },\n        2: { BytesPerSplat: 140 },\n      },\n    },\n    1: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 2,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 42 },\n        2: { BytesPerSplat: 72 },\n      },\n    },\n    2: {\n      BytesPerCenter: 6,\n      BytesPerScale: 6,\n      BytesPerRotation: 8,\n      BytesPerColor: 4,\n      ScaleOffsetBytes: 6,\n      RotationffsetBytes: 12,\n      ColorOffsetBytes: 20,\n      SphericalHarmonicsOffsetBytes: 24,\n      ScaleRange: 32767,\n      BytesPerSphericalHarmonicsComponent: 1,\n      SphericalHarmonicsOffsetFloat: 12,\n      SphericalHarmonicsDegrees: {\n        0: { BytesPerSplat: 24 },\n        1: { BytesPerSplat: 33 },\n        2: { BytesPerSplat: 48 },\n      },\n    },\n  };\n\n  static CovarianceSizeFloats = 6;\n\n  static HeaderSizeBytes = 4096;\n  static SectionHeaderSizeBytes = 1024;\n\n  static BucketStorageSizeBytes = 12;\n  static BucketStorageSizeFloats = 3;\n\n  static BucketBlockSize = 5.0;\n  static BucketSize = 256;\n\n  constructor(bufferData, secLoadedCountsToMax = true) {\n    this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n  }\n\n  getSplatCount() {\n    return this.splatCount;\n  }\n\n  getMaxSplatCount() {\n    return this.maxSplatCount;\n  }\n\n  getMinSphericalHarmonicsDegree() {\n    let minSphericalHarmonicsDegree = 0;\n    for (let i = 0; i < this.sections.length; i++) {\n      const section = this.sections[i];\n      if (\n        i === 0 ||\n        section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree\n      ) {\n        minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\n      }\n    }\n    return minSphericalHarmonicsDegree;\n  }\n\n  getBucketIndex(section, localSplatIndex) {\n    let bucketIndex;\n    const maxSplatIndexInFullBuckets =\n      section.fullBucketCount * section.bucketSize;\n    if (localSplatIndex < maxSplatIndexInFullBuckets) {\n      bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n    } else {\n      let bucketSplatIndex = maxSplatIndexInFullBuckets;\n      bucketIndex = section.fullBucketCount;\n      let partiallyFullBucketIndex = 0;\n      while (bucketSplatIndex < section.splatCount) {\n        let currentPartiallyFilledBucketSize =\n          section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n        if (\n          localSplatIndex >= bucketSplatIndex &&\n          localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize\n        ) {\n          break;\n        }\n        bucketSplatIndex += currentPartiallyFilledBucketSize;\n        bucketIndex++;\n        partiallyFullBucketIndex++;\n      }\n    }\n    return bucketIndex;\n  }\n\n  getSplatCenter(globalSplatIndex, outCenter, transform) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n    const dataView = new DataView(\n      this.bufferData,\n      section.dataBase + srcSplatCentersBase,\n    );\n\n    const x = dataViewFloatForCompressionLevel(\n      dataView,\n      0,\n      this.compressionLevel,\n    );\n    const y = dataViewFloatForCompressionLevel(\n      dataView,\n      1,\n      this.compressionLevel,\n    );\n    const z = dataViewFloatForCompressionLevel(\n      dataView,\n      2,\n      this.compressionLevel,\n    );\n    if (this.compressionLevel >= 1) {\n      const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n      const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n      const sf = section.compressionScaleFactor;\n      const sr = section.compressionScaleRange;\n      outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\n      outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n      outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n    } else {\n      outCenter.x = x;\n      outCenter.y = y;\n      outCenter.z = z;\n    }\n    if (transform) outCenter.applyMatrix4(transform);\n  }\n\n  getSplatScaleAndRotation = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const tempPosition = new THREE.Vector3();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    return function(index, outScale, outRotation, transform, scaleOverride) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[index];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = index - section.splatCountOffset;\n\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n      if (scaleOverride) {\n        if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\n        if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\n        if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\n      }\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      if (transform) {\n        scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n        rotationMatrix.makeRotationFromQuaternion(rotation);\n        tempMatrix\n          .copy(scaleMatrix)\n          .multiply(rotationMatrix)\n          .multiply(transform);\n        tempMatrix.decompose(tempPosition, outRotation, outScale);\n      } else {\n        outScale.copy(scale);\n        outRotation.copy(rotation);\n      }\n    };\n  })();\n\n  getSplatColor(globalSplatIndex, outColor) {\n    const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n    const section = this.sections[sectionIndex];\n    const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n\n    const srcSplatColorsBase =\n      section.bytesPerSplat * localSplatIndex +\n      SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n    const splatColorsArray = new Uint8Array(\n      this.bufferData,\n      section.dataBase + srcSplatColorsBase,\n      4,\n    );\n\n    outColor.set(\n      splatColorsArray[0],\n      splatColorsArray[1],\n      splatColorsArray[2],\n      splatColorsArray[3],\n    );\n  }\n\n  fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    const center = new THREE.Vector3();\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n      const centerDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n\n      const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatCentersBase,\n      );\n\n      const x = dataViewFloatForCompressionLevel(\n        dataView,\n        0,\n        this.compressionLevel,\n      );\n      const y = dataViewFloatForCompressionLevel(\n        dataView,\n        1,\n        this.compressionLevel,\n      );\n      const z = dataViewFloatForCompressionLevel(\n        dataView,\n        2,\n        this.compressionLevel,\n      );\n      if (this.compressionLevel >= 1) {\n        const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n        const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n        const sf = section.compressionScaleFactor;\n        const sr = section.compressionScaleRange;\n        center.x = (x - sr) * sf + section.bucketArray[bucketBase];\n        center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\n        center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\n      } else {\n        center.x = x;\n        center.y = y;\n        center.z = z;\n      }\n      if (transform) {\n        center.applyMatrix4(transform);\n      }\n      outCenterArray[centerDestBase] = center.x;\n      outCenterArray[centerDestBase + 1] = center.y;\n      outCenterArray[centerDestBase + 2] = center.z;\n    }\n  }\n\n  fillSplatScaleRotationArray = (function() {\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const tempMatrix = new THREE.Matrix4();\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n    const tempPosition = new THREE.Vector3();\n\n    const ensurePositiveW = (quaternion) => {\n      const flip = quaternion.w < 0 ? -1 : 1;\n      quaternion.x *= flip;\n      quaternion.y *= flip;\n      quaternion.z *= flip;\n      quaternion.w *= flip;\n    };\n\n    return function(\n      outScaleArray,\n      outRotationArray,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n      scaleOverride,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      const outputConversion = (value, srcCompressionLevel) => {\n        if (srcCompressionLevel === undefined) {\n          srcCompressionLevel = this.compressionLevel;\n        }\n        return convertBetweenCompressionLevels(\n          value,\n          srcCompressionLevel,\n          desiredOutputCompressionLevel,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatScalesBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n        const scaleDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\n        const rotationDestBase =\n          (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatScalesBase,\n        );\n\n        const srcScaleX =\n          scaleOverride && scaleOverride.x !== undefined ?\n            scaleOverride.x :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                0,\n                this.compressionLevel,\n              );\n        const srcScaleY =\n          scaleOverride && scaleOverride.y !== undefined ?\n            scaleOverride.y :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                1,\n                this.compressionLevel,\n              );\n        const srcScaleZ =\n          scaleOverride && scaleOverride.z !== undefined ?\n            scaleOverride.z :\n            dataViewFloatForCompressionLevel(\n                dataView,\n                2,\n                this.compressionLevel,\n              );\n\n        const srcRotationW = dataViewFloatForCompressionLevel(\n          dataView,\n          3,\n          this.compressionLevel,\n        );\n        const srcRotationX = dataViewFloatForCompressionLevel(\n          dataView,\n          4,\n          this.compressionLevel,\n        );\n        const srcRotationY = dataViewFloatForCompressionLevel(\n          dataView,\n          5,\n          this.compressionLevel,\n        );\n        const srcRotationZ = dataViewFloatForCompressionLevel(\n          dataView,\n          6,\n          this.compressionLevel,\n        );\n\n        scale.set(\n          toUncompressedFloat(srcScaleX, this.compressionLevel),\n          toUncompressedFloat(srcScaleY, this.compressionLevel),\n          toUncompressedFloat(srcScaleZ, this.compressionLevel),\n        );\n\n        rotation\n          .set(\n            toUncompressedFloat(srcRotationX, this.compressionLevel),\n            toUncompressedFloat(srcRotationY, this.compressionLevel),\n            toUncompressedFloat(srcRotationZ, this.compressionLevel),\n            toUncompressedFloat(srcRotationW, this.compressionLevel),\n          )\n          .normalize();\n\n        if (transform) {\n          tempPosition.set(0, 0, 0);\n          scaleMatrix.makeScale(scale.x, scale.y, scale.z);\n          rotationMatrix.makeRotationFromQuaternion(rotation);\n          tempMatrix\n            .identity()\n            .premultiply(scaleMatrix)\n            .premultiply(rotationMatrix);\n          tempMatrix.premultiply(transform);\n          tempMatrix.decompose(tempPosition, rotation, scale);\n          rotation.normalize();\n        }\n\n        ensurePositiveW(rotation);\n\n        if (outScaleArray) {\n          outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\n          outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\n          outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\n        }\n\n        if (outRotationArray) {\n          outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\n          outRotationArray[rotationDestBase + 1] = outputConversion(\n            rotation.y,\n            0,\n          );\n          outRotationArray[rotationDestBase + 2] = outputConversion(\n            rotation.z,\n            0,\n          );\n          outRotationArray[rotationDestBase + 3] = outputConversion(\n            rotation.w,\n            0,\n          );\n        }\n      }\n    };\n  })();\n\n  static computeCovariance = (function() {\n    const tempMatrix4 = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix3();\n    const rotationMatrix = new THREE.Matrix3();\n    const covarianceMatrix = new THREE.Matrix3();\n    const transformedCovariance = new THREE.Matrix3();\n    const transform3x3 = new THREE.Matrix3();\n    const transform3x3Transpose = new THREE.Matrix3();\n\n    return function(\n      scale,\n      rotation,\n      transform,\n      outCovariance,\n      outOffset = 0,\n      desiredOutputCompressionLevel,\n    ) {\n      tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n      scaleMatrix.setFromMatrix4(tempMatrix4);\n\n      tempMatrix4.makeRotationFromQuaternion(rotation);\n      rotationMatrix.setFromMatrix4(tempMatrix4);\n\n      covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n      transformedCovariance\n        .copy(covarianceMatrix)\n        .transpose()\n        .premultiply(covarianceMatrix);\n\n      if (transform) {\n        transform3x3.setFromMatrix4(transform);\n        transform3x3Transpose.copy(transform3x3).transpose();\n        transformedCovariance.multiply(transform3x3Transpose);\n        transformedCovariance.premultiply(transform3x3);\n      }\n\n      if (desiredOutputCompressionLevel >= 1) {\n        outCovariance[outOffset] = toHalfFloat(\n          transformedCovariance.elements[0],\n        );\n        outCovariance[outOffset + 1] = toHalfFloat(\n          transformedCovariance.elements[3],\n        );\n        outCovariance[outOffset + 2] = toHalfFloat(\n          transformedCovariance.elements[6],\n        );\n        outCovariance[outOffset + 3] = toHalfFloat(\n          transformedCovariance.elements[4],\n        );\n        outCovariance[outOffset + 4] = toHalfFloat(\n          transformedCovariance.elements[7],\n        );\n        outCovariance[outOffset + 5] = toHalfFloat(\n          transformedCovariance.elements[8],\n        );\n      } else {\n        outCovariance[outOffset] = transformedCovariance.elements[0];\n        outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n        outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n        outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n        outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n        outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n      }\n    };\n  })();\n\n  fillSplatCovarianceArray(\n    covarianceArray,\n    transform,\n    srcFrom,\n    srcTo,\n    destFrom,\n    desiredOutputCompressionLevel,\n  ) {\n    const splatCount = this.splatCount;\n\n    const scale = new THREE.Vector3();\n    const rotation = new THREE.Quaternion();\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const covarianceDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n      const srcSplatScalesBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\n\n      const dataView = new DataView(\n        this.bufferData,\n        section.dataBase + srcSplatScalesBase,\n      );\n\n      scale.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      rotation.set(\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel),\n          this.compressionLevel,\n        ),\n        toUncompressedFloat(\n          dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel),\n          this.compressionLevel,\n        ),\n      );\n\n      SplatBuffer.computeCovariance(\n        scale,\n        rotation,\n        transform,\n        covarianceArray,\n        covarianceDestBase,\n        desiredOutputCompressionLevel,\n      );\n    }\n  }\n\n  fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\n    const splatCount = this.splatCount;\n\n    srcFrom = srcFrom || 0;\n    srcTo = srcTo || splatCount - 1;\n    if (destFrom === undefined) destFrom = srcFrom;\n\n    for (let i = srcFrom; i <= srcTo; i++) {\n      const sectionIndex = this.globalSplatIndexToSectionMap[i];\n      const section = this.sections[sectionIndex];\n      const localSplatIndex = i - section.splatCountOffset;\n\n      const colorDestBase =\n        (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n      const srcSplatColorsBase =\n        section.bytesPerSplat * localSplatIndex +\n        SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\n\n      const dataView = new Uint8Array(\n        this.bufferData,\n        section.dataBase + srcSplatColorsBase,\n      );\n\n      let alpha = dataView[3];\n      alpha = alpha >= minimumAlpha ? alpha : 0;\n\n      outColorArray[colorDestBase] = dataView[0];\n      outColorArray[colorDestBase + 1] = dataView[1];\n      outColorArray[colorDestBase + 2] = dataView[2];\n      outColorArray[colorDestBase + 3] = alpha;\n    }\n  }\n\n  fillSphericalHarmonicsArray = (function() {\n    const sphericalHarmonicVectors = [];\n    for (let i = 0; i < 15; i++) {\n      sphericalHarmonicVectors[i] = new THREE.Vector3();\n    }\n\n    const tempMatrix3 = new THREE.Matrix3();\n    const tempMatrix4 = new THREE.Matrix4();\n\n    const tempTranslation = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n\n    const sh11 = [];\n    const sh12 = [];\n    const sh13 = [];\n\n    const sh21 = [];\n    const sh22 = [];\n    const sh23 = [];\n    const sh24 = [];\n    const sh25 = [];\n\n    const shIn1 = [];\n    const shIn2 = [];\n    const shIn3 = [];\n    const shIn4 = [];\n    const shIn5 = [];\n\n    const shOut1 = [];\n    const shOut2 = [];\n    const shOut3 = [];\n    const shOut4 = [];\n    const shOut5 = [];\n\n    const noop = (v) => v;\n\n    const set3 = (array, val1, val2, val3) => {\n      array[0] = val1;\n      array[1] = val2;\n      array[2] = val3;\n    };\n\n    const set3FromArray = (\n      array,\n      srcDestView,\n      stride,\n      srcBase,\n      compressionLevel,\n    ) => {\n      array[0] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase,\n        compressionLevel,\n        true,\n      );\n      array[1] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride,\n        compressionLevel,\n        true,\n      );\n      array[2] = dataViewFloatForCompressionLevel(\n        srcDestView,\n        srcBase + stride + stride,\n        compressionLevel,\n        true,\n      );\n    };\n\n    const copy3 = (srcArray, destArray) => {\n      destArray[0] = srcArray[0];\n      destArray[1] = srcArray[1];\n      destArray[2] = srcArray[2];\n    };\n\n    const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\n      destArray[destBase] = conversionFunc(srcArray[0]);\n      destArray[destBase + 1] = conversionFunc(srcArray[1]);\n      destArray[destBase + 2] = conversionFunc(srcArray[2]);\n    };\n\n    const toUncompressedFloatArray3 = (\n      src,\n      dest,\n      compressionLevel,\n      range8BitMin,\n      range8BitMax,\n    ) => {\n      dest[0] = toUncompressedFloat(\n        src[0],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      dest[1] = toUncompressedFloat(\n        src[1],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      dest[2] = toUncompressedFloat(\n        src[2],\n        compressionLevel,\n        true,\n        range8BitMin,\n        range8BitMax,\n      );\n      return dest;\n    };\n\n    return function(\n      outSphericalHarmonicsArray,\n      outSphericalHarmonicsDegree,\n      transform,\n      srcFrom,\n      srcTo,\n      destFrom,\n      desiredOutputCompressionLevel,\n    ) {\n      const splatCount = this.splatCount;\n\n      srcFrom = srcFrom || 0;\n      srcTo = srcTo || splatCount - 1;\n      if (destFrom === undefined) destFrom = srcFrom;\n\n      if (transform && outSphericalHarmonicsDegree >= 1) {\n        tempMatrix4.copy(transform);\n        tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\n        tempRotation.normalize();\n        tempMatrix4.makeRotationFromQuaternion(tempRotation);\n        tempMatrix3.setFromMatrix4(tempMatrix4);\n        set3(\n          sh11,\n          tempMatrix3.elements[4],\n          -tempMatrix3.elements[7],\n          tempMatrix3.elements[1],\n        );\n        set3(\n          sh12,\n          -tempMatrix3.elements[5],\n          tempMatrix3.elements[8],\n          -tempMatrix3.elements[2],\n        );\n        set3(\n          sh13,\n          tempMatrix3.elements[3],\n          -tempMatrix3.elements[6],\n          tempMatrix3.elements[0],\n        );\n      }\n\n      const localFromHalfFloatToUint8 = (v) => {\n        return fromHalfFloatToUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      const localToUint8 = (v) => {\n        return toUint8(\n          v,\n          this.minSphericalHarmonicsCoeff,\n          this.maxSphericalHarmonicsCoeff,\n        );\n      };\n\n      for (let i = srcFrom; i <= srcTo; i++) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[i];\n        const section = this.sections[sectionIndex];\n        outSphericalHarmonicsDegree = Math.min(\n          outSphericalHarmonicsDegree,\n          section.sphericalHarmonicsDegree,\n        );\n        const outSphericalHarmonicsComponentsCount =\n          getSphericalHarmonicsComponentCountForDegree(\n            outSphericalHarmonicsDegree,\n          );\n\n        const localSplatIndex = i - section.splatCountOffset;\n\n        const srcSplatSHBase =\n          section.bytesPerSplat * localSplatIndex +\n          SplatBuffer.CompressionLevels[this.compressionLevel]\n            .SphericalHarmonicsOffsetBytes;\n\n        const dataView = new DataView(\n          this.bufferData,\n          section.dataBase + srcSplatSHBase,\n        );\n\n        const shDestBase =\n          (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\n\n        let compressionLevelForOutputConversion = transform ?\n          0 :\n          this.compressionLevel;\n        let outputConversionFunc = noop;\n        if (\n          compressionLevelForOutputConversion !== desiredOutputCompressionLevel\n        ) {\n          if (compressionLevelForOutputConversion === 1) {\n            if (desiredOutputCompressionLevel === 0) {\n              outputConversionFunc = fromHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localFromHalfFloatToUint8;\n            }\n          } else if (compressionLevelForOutputConversion === 0) {\n            if (desiredOutputCompressionLevel === 1) {\n              outputConversionFunc = toHalfFloat;\n            } else if (desiredOutputCompressionLevel == 2) {\n              outputConversionFunc = localToUint8;\n            }\n          }\n        }\n\n        const minShCoeff = this.minSphericalHarmonicsCoeff;\n        const maxShCoeff = this.maxSphericalHarmonicsCoeff;\n\n        if (outSphericalHarmonicsDegree >= 1) {\n          set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\n          set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\n          set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\n\n          if (transform) {\n            toUncompressedFloatArray3(\n              shIn1,\n              shIn1,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            toUncompressedFloatArray3(\n              shIn2,\n              shIn2,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            toUncompressedFloatArray3(\n              shIn3,\n              shIn3,\n              this.compressionLevel,\n              minShCoeff,\n              maxShCoeff,\n            );\n            SplatBuffer.rotateSphericalHarmonics3(\n              shIn1,\n              shIn2,\n              shIn3,\n              sh11,\n              sh12,\n              sh13,\n              shOut1,\n              shOut2,\n              shOut3,\n            );\n          } else {\n            copy3(shIn1, shOut1);\n            copy3(shIn2, shOut2);\n            copy3(shIn3, shOut3);\n          }\n\n          setOutput3(\n            shOut1,\n            outSphericalHarmonicsArray,\n            shDestBase,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut2,\n            outSphericalHarmonicsArray,\n            shDestBase + 3,\n            outputConversionFunc,\n          );\n          setOutput3(\n            shOut3,\n            outSphericalHarmonicsArray,\n            shDestBase + 6,\n            outputConversionFunc,\n          );\n\n          if (outSphericalHarmonicsDegree >= 2) {\n            set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\n            set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\n            set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\n            set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\n            set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\n\n            if (transform) {\n              toUncompressedFloatArray3(\n                shIn1,\n                shIn1,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn2,\n                shIn2,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn3,\n                shIn3,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn4,\n                shIn4,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              toUncompressedFloatArray3(\n                shIn5,\n                shIn5,\n                this.compressionLevel,\n                minShCoeff,\n                maxShCoeff,\n              );\n              SplatBuffer.rotateSphericalHarmonics5(\n                shIn1,\n                shIn2,\n                shIn3,\n                shIn4,\n                shIn5,\n                sh11,\n                sh12,\n                sh13,\n                sh21,\n                sh22,\n                sh23,\n                sh24,\n                sh25,\n                shOut1,\n                shOut2,\n                shOut3,\n                shOut4,\n                shOut5,\n              );\n            } else {\n              copy3(shIn1, shOut1);\n              copy3(shIn2, shOut2);\n              copy3(shIn3, shOut3);\n              copy3(shIn4, shOut4);\n              copy3(shIn5, shOut5);\n            }\n\n            setOutput3(\n              shOut1,\n              outSphericalHarmonicsArray,\n              shDestBase + 9,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut2,\n              outSphericalHarmonicsArray,\n              shDestBase + 12,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut3,\n              outSphericalHarmonicsArray,\n              shDestBase + 15,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut4,\n              outSphericalHarmonicsArray,\n              shDestBase + 18,\n              outputConversionFunc,\n            );\n            setOutput3(\n              shOut5,\n              outSphericalHarmonicsArray,\n              shDestBase + 21,\n              outputConversionFunc,\n            );\n          }\n        }\n      }\n    };\n  })();\n\n  static dot3 = (v1, v2, v3, transformRow, outArray) => {\n    outArray[0] = outArray[1] = outArray[2] = 0;\n    const t0 = transformRow[0];\n    const t1 = transformRow[1];\n    const t2 = transformRow[2];\n    SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n    SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n    SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n  };\n\n  static addInto3 = (val1, val2, val3, destArray) => {\n    destArray[0] = destArray[0] + val1;\n    destArray[1] = destArray[1] + val2;\n    destArray[2] = destArray[2] + val3;\n  };\n\n  static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\n    outArray[0] = outArray[1] = outArray[2] = 0;\n    const t0 = transformRow[0];\n    const t1 = transformRow[1];\n    const t2 = transformRow[2];\n    const t3 = transformRow[3];\n    const t4 = transformRow[4];\n    SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\n    SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\n    SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\n    SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\n    SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\n  };\n\n  static rotateSphericalHarmonics3 = (\n    in1,\n    in2,\n    in3,\n    tsh11,\n    tsh12,\n    tsh13,\n    out1,\n    out2,\n    out3,\n  ) => {\n    SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\n    SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\n    SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\n  };\n\n  static rotateSphericalHarmonics5 = (\n    in1,\n    in2,\n    in3,\n    in4,\n    in5,\n    tsh11,\n    tsh12,\n    tsh13,\n    tsh21,\n    tsh22,\n    tsh23,\n    tsh24,\n    tsh25,\n    out1,\n    out2,\n    out3,\n    out4,\n    out5,\n  ) => {\n    const kSqrt0104 = Math.sqrt(1.0 / 4.0);\n    const kSqrt0304 = Math.sqrt(3.0 / 4.0);\n    const kSqrt0103 = Math.sqrt(1.0 / 3.0);\n    const kSqrt0403 = Math.sqrt(4.0 / 3.0);\n    const kSqrt0112 = Math.sqrt(1.0 / 12.0);\n\n    tsh21[0] =\n      kSqrt0104 *\n      (tsh13[2] * tsh11[0] +\n        tsh13[0] * tsh11[2] +\n        (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\n    tsh21[1] = tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0];\n    tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\n    tsh21[3] = tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2];\n    tsh21[4] =\n      kSqrt0104 *\n      (tsh13[2] * tsh11[2] -\n        tsh13[0] * tsh11[0] +\n        (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\n\n    tsh22[0] =\n      kSqrt0104 *\n      (tsh12[2] * tsh11[0] +\n        tsh12[0] * tsh11[2] +\n        (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\n    tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\n    tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\n    tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\n    tsh22[4] =\n      kSqrt0104 *\n      (tsh12[2] * tsh11[2] -\n        tsh12[0] * tsh11[0] +\n        (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\n\n    tsh23[0] =\n      kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) +\n      -kSqrt0112 *\n        (tsh13[2] * tsh13[0] +\n          tsh13[0] * tsh13[2] +\n          (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n    tsh23[1] =\n      kSqrt0403 * tsh12[1] * tsh12[0] +\n      -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\n    tsh23[2] =\n      tsh12[1] * tsh12[1] +\n      -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\n    tsh23[3] =\n      kSqrt0403 * tsh12[1] * tsh12[2] +\n      -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\n    tsh23[4] =\n      kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) +\n      -kSqrt0112 *\n        (tsh13[2] * tsh13[2] -\n          tsh13[0] * tsh13[0] +\n          (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\n\n    tsh24[0] =\n      kSqrt0104 *\n      (tsh12[2] * tsh13[0] +\n        tsh12[0] * tsh13[2] +\n        (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\n    tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\n    tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\n    tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\n    tsh24[4] =\n      kSqrt0104 *\n      (tsh12[2] * tsh13[2] -\n        tsh12[0] * tsh13[0] +\n        (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\n\n    tsh25[0] =\n      kSqrt0104 *\n      (tsh13[2] * tsh13[0] +\n        tsh13[0] * tsh13[2] -\n        (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\n    tsh25[1] = tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0];\n    tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\n    tsh25[3] = tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2];\n    tsh25[4] =\n      kSqrt0104 *\n      (tsh13[2] * tsh13[2] -\n        tsh13[0] * tsh13[0] -\n        (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\n    SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\n  };\n\n  static parseHeader(buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const versionMajor = headerArrayUint8[0];\n    const versionMinor = headerArrayUint8[1];\n    const maxSectionCount = headerArrayUint32[1];\n    const sectionCount = headerArrayUint32[2];\n    const maxSplatCount = headerArrayUint32[3];\n    const splatCount = headerArrayUint32[4];\n    const compressionLevel = headerArrayUint16[10];\n    const sceneCenter = new THREE.Vector3(\n      headerArrayFloat32[6],\n      headerArrayFloat32[7],\n      headerArrayFloat32[8],\n    );\n\n    const minSphericalHarmonicsCoeff =\n      headerArrayFloat32[9] ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    const maxSphericalHarmonicsCoeff =\n      headerArrayFloat32[10] ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    return {\n      versionMajor,\n      versionMinor,\n      maxSectionCount,\n      sectionCount,\n      maxSplatCount,\n      splatCount,\n      compressionLevel,\n      sceneCenter,\n      minSphericalHarmonicsCoeff,\n      maxSphericalHarmonicsCoeff,\n    };\n  }\n\n  static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint32[2] = sectionCount;\n    headerArrayUint32[4] = splatCount;\n  }\n\n  static writeHeaderToBuffer(header, buffer) {\n    const headerArrayUint8 = new Uint8Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes,\n    );\n    const headerArrayUint16 = new Uint16Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 2,\n    );\n    const headerArrayUint32 = new Uint32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    const headerArrayFloat32 = new Float32Array(\n      buffer,\n      0,\n      SplatBuffer.HeaderSizeBytes / 4,\n    );\n    headerArrayUint8[0] = header.versionMajor;\n    headerArrayUint8[1] = header.versionMinor;\n    headerArrayUint8[2] = 0; // unused for now\n    headerArrayUint8[3] = 0; // unused for now\n    headerArrayUint32[1] = header.maxSectionCount;\n    headerArrayUint32[2] = header.sectionCount;\n    headerArrayUint32[3] = header.maxSplatCount;\n    headerArrayUint32[4] = header.splatCount;\n    headerArrayUint16[10] = header.compressionLevel;\n    headerArrayFloat32[6] = header.sceneCenter.x;\n    headerArrayFloat32[7] = header.sceneCenter.y;\n    headerArrayFloat32[8] = header.sceneCenter.z;\n    headerArrayFloat32[9] =\n      header.minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    headerArrayFloat32[10] =\n      header.maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n  }\n\n  static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n    const compressionLevel = header.compressionLevel;\n\n    const maxSectionCount = header.maxSectionCount;\n    const sectionHeaderArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 2,\n    );\n    const sectionHeaderArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n    const sectionHeaderArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      (maxSectionCount * SplatBuffer.SectionHeaderSizeBytes) / 4,\n    );\n\n    const sectionHeaders = [];\n    let sectionHeaderBase = 0;\n    let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n    let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n    let sectionBase =\n      SplatBuffer.HeaderSizeBytes +\n      header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n    let splatCountOffset = 0;\n    for (let i = 0; i < maxSectionCount; i++) {\n      const maxSplatCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n      const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n      const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n      const bucketBlockSize =\n        sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n      const halfBucketBlockSize = bucketBlockSize / 2.0;\n      const bucketStorageSizeBytes =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n      const compressionScaleRange =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n        SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n      const fullBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n      const partiallyFilledBucketCount =\n        sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n      const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketsStorageSizeBytes =\n        bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n      const sphericalHarmonicsDegree =\n        sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\n      const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n        compressionLevel,\n        sphericalHarmonicsDegree,\n      );\n\n      const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\n      const storageSizeBytes =\n        splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n      const sectionHeader = {\n        bytesPerSplat: bytesPerSplat,\n        splatCountOffset: splatCountOffset,\n        splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n        maxSplatCount: maxSplatCount,\n        bucketSize: bucketSize,\n        bucketCount: bucketCount,\n        bucketBlockSize: bucketBlockSize,\n        halfBucketBlockSize: halfBucketBlockSize,\n        bucketStorageSizeBytes: bucketStorageSizeBytes,\n        bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n        splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n        storageSizeBytes: storageSizeBytes,\n        compressionScaleRange: compressionScaleRange,\n        compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n        base: sectionBase,\n        bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n        dataBase: sectionBase + bucketsStorageSizeBytes,\n        fullBucketCount: fullBucketCount,\n        partiallyFilledBucketCount: partiallyFilledBucketCount,\n        sphericalHarmonicsDegree: sphericalHarmonicsDegree,\n      };\n      sectionHeaders[i] = sectionHeader;\n      sectionBase += storageSizeBytes;\n      sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n      sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n      sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n      splatCountOffset += maxSplatCount;\n    }\n\n    return sectionHeaders;\n  }\n\n  static writeSectionHeaderToBuffer(\n    sectionHeader,\n    compressionLevel,\n    buffer,\n    offset = 0,\n  ) {\n    const sectionHeadeArrayUint16 = new Uint16Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 2,\n    );\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    const sectionHeadeArrayFloat32 = new Float32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n\n    sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n    sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n    sectionHeadeArrayUint32[2] =\n      compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\n    sectionHeadeArrayUint32[3] =\n      compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\n    sectionHeadeArrayFloat32[4] =\n      compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\n    sectionHeadeArrayUint16[10] =\n      compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n    sectionHeadeArrayUint32[6] =\n      compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\n    sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n    sectionHeadeArrayUint32[8] =\n      compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\n    sectionHeadeArrayUint32[9] =\n      compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\n  }\n\n  static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n    const sectionHeadeArrayUint32 = new Uint32Array(\n      buffer,\n      offset,\n      SplatBuffer.SectionHeaderSizeBytes / 4,\n    );\n    sectionHeadeArrayUint32[0] = splatCount;\n  }\n\n  constructFromBuffer(bufferData, secLoadedCountsToMax) {\n    this.bufferData = bufferData;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSectionMap = [];\n\n    const header = SplatBuffer.parseHeader(this.bufferData);\n    this.versionMajor = header.versionMajor;\n    this.versionMinor = header.versionMinor;\n    this.maxSectionCount = header.maxSectionCount;\n    this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n    this.maxSplatCount = header.maxSplatCount;\n    this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n    this.compressionLevel = header.compressionLevel;\n    this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n    this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\n    this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\n\n    this.sections = SplatBuffer.parseSectionHeaders(\n      header,\n      this.bufferData,\n      SplatBuffer.HeaderSizeBytes,\n      secLoadedCountsToMax,\n    );\n\n    this.linkBufferArrays();\n    this.buildMaps();\n  }\n\n  static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\n    const bytesPerCenter =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n    const bytesPerScale =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n    const bytesPerRotation =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n    const bytesPerColor =\n      SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n    const sphericalHarmonicsComponentsPerSplat =\n      getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n    const sphericalHarmonicsBytesPerSplat =\n      SplatBuffer.CompressionLevels[compressionLevel]\n        .BytesPerSphericalHarmonicsComponent *\n      sphericalHarmonicsComponentsPerSplat;\n    const bytesPerSplat =\n      bytesPerCenter +\n      bytesPerScale +\n      bytesPerRotation +\n      bytesPerColor +\n      sphericalHarmonicsBytesPerSplat;\n    return {\n      bytesPerCenter,\n      bytesPerScale,\n      bytesPerRotation,\n      bytesPerColor,\n      sphericalHarmonicsComponentsPerSplat,\n      sphericalHarmonicsBytesPerSplat,\n      bytesPerSplat,\n    };\n  }\n\n  linkBufferArrays() {\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      section.bucketArray = new Float32Array(\n        this.bufferData,\n        section.bucketsBase,\n        section.bucketCount * SplatBuffer.BucketStorageSizeFloats,\n      );\n      if (section.partiallyFilledBucketCount > 0) {\n        section.partiallyFilledBucketLengths = new Uint32Array(\n          this.bufferData,\n          section.base,\n          section.partiallyFilledBucketCount,\n        );\n      }\n    }\n  }\n\n  buildMaps() {\n    let cumulativeSplatCount = 0;\n    for (let i = 0; i < this.maxSectionCount; i++) {\n      const section = this.sections[i];\n      for (let j = 0; j < section.maxSplatCount; j++) {\n        const globalSplatIndex = cumulativeSplatCount + j;\n        this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n        this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n      }\n      cumulativeSplatCount += section.maxSplatCount;\n    }\n  }\n\n  updateLoadedCounts(newSectionCount, newSplatCount) {\n    SplatBuffer.writeHeaderCountsToBuffer(\n      newSectionCount,\n      newSplatCount,\n      this.bufferData,\n    );\n    this.sectionCount = newSectionCount;\n    this.splatCount = newSplatCount;\n  }\n\n  updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n    const sectionHeaderOffset =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n    SplatBuffer.writeSectionHeaderSplatCountToBuffer(\n      newSplatCount,\n      this.bufferData,\n      sectionHeaderOffset,\n    );\n    this.sections[sectionIndex].splatCount = newSplatCount;\n  }\n\n  static writeSplatDataToSectionBuffer = (function() {\n    const tempCenterBuffer = new ArrayBuffer(12);\n    const tempScaleBuffer = new ArrayBuffer(12);\n    const tempRotationBuffer = new ArrayBuffer(16);\n    const tempColorBuffer = new ArrayBuffer(4);\n    const tempSHBuffer = new ArrayBuffer(256);\n    const tempRot = new THREE.Quaternion();\n    const tempScale = new THREE.Vector3();\n    const bucketCenterDelta = new THREE.Vector3();\n\n    const {\n      X: OFFSET_X,\n      Y: OFFSET_Y,\n      Z: OFFSET_Z,\n      SCALE0: OFFSET_SCALE0,\n      SCALE1: OFFSET_SCALE1,\n      SCALE2: OFFSET_SCALE2,\n      ROTATION0: OFFSET_ROT0,\n      ROTATION1: OFFSET_ROT1,\n      ROTATION2: OFFSET_ROT2,\n      ROTATION3: OFFSET_ROT3,\n      FDC0: OFFSET_FDC0,\n      FDC1: OFFSET_FDC1,\n      FDC2: OFFSET_FDC2,\n      OPACITY: OFFSET_OPACITY,\n      FRC0: OFFSET_FRC0,\n      FRC9: OFFSET_FRC9,\n    } = UncompressedSplatArray.OFFSET;\n\n    const compressPositionOffset = (\n      v,\n      compressionScaleFactor,\n      compressionScaleRange,\n    ) => {\n      const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n      v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\n      return clamp(v, 0, doubleCompressionScaleRange);\n    };\n\n    return function(\n      targetSplat,\n      sectionBuffer,\n      bufferOffset,\n      compressionLevel,\n      sphericalHarmonicsDegree,\n      bucketCenter,\n      compressionScaleFactor,\n      compressionScaleRange,\n      minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\n      maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange,\n    ) {\n      const sphericalHarmonicsComponentsPerSplat =\n        getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\n      const bytesPerCenter =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n      const bytesPerScale =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n      const bytesPerRotation =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n      const bytesPerColor =\n        SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n\n      const centerBase = bufferOffset;\n      const scaleBase = centerBase + bytesPerCenter;\n      const rotationBase = scaleBase + bytesPerScale;\n      const colorBase = rotationBase + bytesPerRotation;\n      const sphericalHarmonicsBase = colorBase + bytesPerColor;\n\n      if (targetSplat[OFFSET_ROT0] !== undefined) {\n        tempRot.set(\n          targetSplat[OFFSET_ROT0],\n          targetSplat[OFFSET_ROT1],\n          targetSplat[OFFSET_ROT2],\n          targetSplat[OFFSET_ROT3],\n        );\n        tempRot.normalize();\n      } else {\n        tempRot.set(1.0, 0.0, 0.0, 0.0);\n      }\n\n      if (targetSplat[OFFSET_SCALE0] !== undefined) {\n        tempScale.set(\n          targetSplat[OFFSET_SCALE0] || 0,\n          targetSplat[OFFSET_SCALE1] || 0,\n          targetSplat[OFFSET_SCALE2] || 0,\n        );\n      } else {\n        tempScale.set(0, 0, 0);\n      }\n\n      if (compressionLevel === 0) {\n        const center = new Float32Array(\n          sectionBuffer,\n          centerBase,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Float32Array(\n          sectionBuffer,\n          rotationBase,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Float32Array(\n          sectionBuffer,\n          scaleBase,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\n        scale.set([tempScale.x, tempScale.y, tempScale.z]);\n        center.set([\n          targetSplat[OFFSET_X],\n          targetSplat[OFFSET_Y],\n          targetSplat[OFFSET_Z],\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const shOut = new Float32Array(\n            sectionBuffer,\n            sphericalHarmonicsBase,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\n            }\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\n              }\n            }\n          }\n        }\n      } else {\n        const center = new Uint16Array(\n          tempCenterBuffer,\n          0,\n          SplatBuffer.CenterComponentCount,\n        );\n        const rot = new Uint16Array(\n          tempRotationBuffer,\n          0,\n          SplatBuffer.RotationComponentCount,\n        );\n        const scale = new Uint16Array(\n          tempScaleBuffer,\n          0,\n          SplatBuffer.ScaleComponentCount,\n        );\n\n        rot.set([\n          toHalfFloat(tempRot.x),\n          toHalfFloat(tempRot.y),\n          toHalfFloat(tempRot.z),\n          toHalfFloat(tempRot.w),\n        ]);\n        scale.set([\n          toHalfFloat(tempScale.x),\n          toHalfFloat(tempScale.y),\n          toHalfFloat(tempScale.z),\n        ]);\n\n        bucketCenterDelta\n          .set(\n            targetSplat[OFFSET_X],\n            targetSplat[OFFSET_Y],\n            targetSplat[OFFSET_Z],\n          )\n          .sub(bucketCenter);\n        bucketCenterDelta.x = compressPositionOffset(\n          bucketCenterDelta.x,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.y = compressPositionOffset(\n          bucketCenterDelta.y,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        bucketCenterDelta.z = compressPositionOffset(\n          bucketCenterDelta.z,\n          compressionScaleFactor,\n          compressionScaleRange,\n        );\n        center.set([\n          bucketCenterDelta.x,\n          bucketCenterDelta.y,\n          bucketCenterDelta.z,\n        ]);\n\n        if (sphericalHarmonicsDegree > 0) {\n          const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\n          const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\n          const shOut = new SHArrayType(\n            tempSHBuffer,\n            0,\n            sphericalHarmonicsComponentsPerSplat,\n          );\n          if (sphericalHarmonicsDegree >= 1) {\n            for (let s = 0; s < 9; s++) {\n              const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\n              shOut[s] =\n                compressionLevel === 1 ?\n                  toHalfFloat(srcVal) :\n                  toUint8(\n                      srcVal,\n                      minSphericalHarmonicsCoeff,\n                      maxSphericalHarmonicsCoeff,\n                    );\n            }\n            const degree1ByteCount = 9 * bytesPerSHComponent;\n            copyBetweenBuffers(\n              shOut.buffer,\n              0,\n              sectionBuffer,\n              sphericalHarmonicsBase,\n              degree1ByteCount,\n            );\n            if (sphericalHarmonicsDegree >= 2) {\n              for (let s = 0; s < 15; s++) {\n                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\n                shOut[s + 9] =\n                  compressionLevel === 1 ?\n                    toHalfFloat(srcVal) :\n                    toUint8(\n                        srcVal,\n                        minSphericalHarmonicsCoeff,\n                        maxSphericalHarmonicsCoeff,\n                      );\n              }\n              copyBetweenBuffers(\n                shOut.buffer,\n                degree1ByteCount,\n                sectionBuffer,\n                sphericalHarmonicsBase + degree1ByteCount,\n                15 * bytesPerSHComponent,\n              );\n            }\n          }\n        }\n\n        copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\n        copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\n        copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\n      }\n\n      const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\n      rgba.set([\n        targetSplat[OFFSET_FDC0] || 0,\n        targetSplat[OFFSET_FDC1] || 0,\n        targetSplat[OFFSET_FDC2] || 0,\n      ]);\n      rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\n\n      copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\n    };\n  })();\n\n  static generateFromUncompressedSplatArrays(\n    splatArrays,\n    minimumAlpha,\n    compressionLevel,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    options = [],\n  ) {\n    let shDegree = 0;\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\n    }\n\n    let minSphericalHarmonicsCoeff;\n    let maxSphericalHarmonicsCoeff;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      for (let i = 0; i < splatArray.splats.length; i++) {\n        const splat = splatArray.splats[i];\n        for (\n          let sc = UncompressedSplatArray.OFFSET.FRC0;\n          sc < UncompressedSplatArray.OFFSET.FRC23 && sc < splat.length;\n          sc++\n        ) {\n          if (\n            !minSphericalHarmonicsCoeff ||\n            splat[sc] < minSphericalHarmonicsCoeff\n          ) {\n            minSphericalHarmonicsCoeff = splat[sc];\n          }\n          if (\n            !maxSphericalHarmonicsCoeff ||\n            splat[sc] > maxSphericalHarmonicsCoeff\n          ) {\n            maxSphericalHarmonicsCoeff = splat[sc];\n          }\n        }\n      }\n    }\n\n    minSphericalHarmonicsCoeff =\n      minSphericalHarmonicsCoeff ||\n      -DefaultSphericalHarmonics8BitCompressionHalfRange;\n    maxSphericalHarmonicsCoeff =\n      maxSphericalHarmonicsCoeff ||\n      DefaultSphericalHarmonics8BitCompressionHalfRange;\n\n    const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(\n      compressionLevel,\n      shDegree,\n    );\n    const compressionScaleRange =\n      SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n    const sectionBuffers = [];\n    const sectionHeaderBuffers = [];\n    let totalSplatCount = 0;\n\n    for (let sa = 0; sa < splatArrays.length; sa++) {\n      const splatArray = splatArrays[sa];\n      const validSplats = new UncompressedSplatArray(shDegree);\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        const targetSplat = splatArray.splats[i];\n        if (\n          (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >=\n          minimumAlpha\n        ) {\n          validSplats.addSplat(targetSplat);\n        }\n      }\n\n      const sectionOptions = options[sa] || {};\n      const sectionBlockSize =\n        (sectionOptions.blockSizeFactor || 1) *\n        (blockSize || SplatBuffer.BucketBlockSize);\n      const sectionBucketSize = Math.ceil(\n        (sectionOptions.bucketSizeFactor || 1) *\n          (bucketSize || SplatBuffer.BucketSize),\n      );\n\n      const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(\n        validSplats,\n        sectionBlockSize,\n        sectionBucketSize,\n      );\n      const fullBucketCount = bucketInfo.fullBuckets.length;\n      const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map(\n        (bucket) => bucket.splats.length,\n      );\n      const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n      const buckets = [\n        ...bucketInfo.fullBuckets,\n        ...bucketInfo.partiallyFullBuckets,\n      ];\n\n      const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n      const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n      const bucketDataBytes =\n        compressionLevel >= 1 ?\n          buckets.length * SplatBuffer.BucketStorageSizeBytes +\n            bucketMetaDataSizeBytes :\n          0;\n      const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n      const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n      const compressionScaleFactor =\n        compressionScaleRange / (sectionBlockSize * 0.5);\n      const bucketCenter = new THREE.Vector3();\n\n      let outSplatCount = 0;\n      for (let b = 0; b < buckets.length; b++) {\n        const bucket = buckets[b];\n        bucketCenter.fromArray(bucket.center);\n        for (let i = 0; i < bucket.splats.length; i++) {\n          let row = bucket.splats[i];\n          const targetSplat = validSplats.splats[row];\n          const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\n          SplatBuffer.writeSplatDataToSectionBuffer(\n            targetSplat,\n            sectionBuffer,\n            bufferOffset,\n            compressionLevel,\n            shDegree,\n            bucketCenter,\n            compressionScaleFactor,\n            compressionScaleRange,\n            minSphericalHarmonicsCoeff,\n            maxSphericalHarmonicsCoeff,\n          );\n          outSplatCount++;\n        }\n      }\n      totalSplatCount += outSplatCount;\n\n      if (compressionLevel >= 1) {\n        const bucketMetaDataArray = new Uint32Array(\n          sectionBuffer,\n          0,\n          partiallyFullBucketLengths.length * 4,\n        );\n        for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb++) {\n          bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n        }\n        const bucketArray = new Float32Array(\n          sectionBuffer,\n          bucketMetaDataSizeBytes,\n          buckets.length * SplatBuffer.BucketStorageSizeFloats,\n        );\n        for (let b = 0; b < buckets.length; b++) {\n          const bucket = buckets[b];\n          const base = b * 3;\n          bucketArray[base] = bucket.center[0];\n          bucketArray[base + 1] = bucket.center[1];\n          bucketArray[base + 2] = bucket.center[2];\n        }\n      }\n      sectionBuffers.push(sectionBuffer);\n\n      const sectionHeaderBuffer = new ArrayBuffer(\n        SplatBuffer.SectionHeaderSizeBytes,\n      );\n      SplatBuffer.writeSectionHeaderToBuffer(\n        {\n          maxSplatCount: outSplatCount,\n          splatCount: outSplatCount,\n          bucketSize: sectionBucketSize,\n          bucketCount: buckets.length,\n          bucketBlockSize: sectionBlockSize,\n          compressionScaleRange: compressionScaleRange,\n          storageSizeBytes: sectionSizeBytes,\n          fullBucketCount: fullBucketCount,\n          partiallyFilledBucketCount: partiallyFilledBucketCount,\n          sphericalHarmonicsDegree: shDegree,\n        },\n        compressionLevel,\n        sectionHeaderBuffer,\n        0,\n      );\n      sectionHeaderBuffers.push(sectionHeaderBuffer);\n    }\n\n    let sectionsCumulativeSizeBytes = 0;\n    for (let sectionBuffer of sectionBuffers) {\n      sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n    }\n    const unifiedBufferSize =\n      SplatBuffer.HeaderSizeBytes +\n      SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length +\n      sectionsCumulativeSizeBytes;\n    const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n    SplatBuffer.writeHeaderToBuffer(\n      {\n        versionMajor: 0,\n        versionMinor: 1,\n        maxSectionCount: sectionBuffers.length,\n        sectionCount: sectionBuffers.length,\n        maxSplatCount: totalSplatCount,\n        splatCount: totalSplatCount,\n        compressionLevel: compressionLevel,\n        sceneCenter: sceneCenter,\n        minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\n        maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff,\n      },\n      unifiedBuffer,\n    );\n\n    let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n    for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        SplatBuffer.SectionHeaderSizeBytes,\n      ).set(new Uint8Array(sectionHeaderBuffer));\n      currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n    }\n\n    for (let sectionBuffer of sectionBuffers) {\n      new Uint8Array(\n        unifiedBuffer,\n        currentUnifiedBase,\n        sectionBuffer.byteLength,\n      ).set(new Uint8Array(sectionBuffer));\n      currentUnifiedBase += sectionBuffer.byteLength;\n    }\n\n    const splatBuffer = new SplatBuffer(unifiedBuffer);\n    return splatBuffer;\n  }\n\n  static computeBucketsForUncompressedSplatArray(\n    splatArray,\n    blockSize,\n    bucketSize,\n  ) {\n    let splatCount = splatArray.splatCount;\n    const halfBlockSize = blockSize / 2.0;\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      if (i === 0 || center[0] < min.x) min.x = center[0];\n      if (i === 0 || center[0] > max.x) max.x = center[0];\n      if (i === 0 || center[1] < min.y) min.y = center[1];\n      if (i === 0 || center[1] > max.y) max.y = center[1];\n      if (i === 0 || center[2] < min.z) min.z = center[2];\n      if (i === 0 || center[2] > max.z) max.z = center[2];\n    }\n\n    const dimensions = new THREE.Vector3().copy(max).sub(min);\n    const yBlocks = Math.ceil(dimensions.y / blockSize);\n    const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n    const blockCenter = new THREE.Vector3();\n    const fullBuckets = [];\n    const partiallyFullBuckets = {};\n\n    for (let i = 0; i < splatCount; i++) {\n      const targetSplat = splatArray.splats[i];\n      const center = [\n        targetSplat[UncompressedSplatArray.OFFSET.X],\n        targetSplat[UncompressedSplatArray.OFFSET.Y],\n        targetSplat[UncompressedSplatArray.OFFSET.Z],\n      ];\n      const xBlock = Math.floor((center[0] - min.x) / blockSize);\n      const yBlock = Math.floor((center[1] - min.y) / blockSize);\n      const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n      blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n      blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n      blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n      const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n      let bucket = partiallyFullBuckets[bucketId];\n      if (!bucket) {\n        partiallyFullBuckets[bucketId] = bucket = {\n          splats: [],\n          center: blockCenter.toArray(),\n        };\n      }\n\n      bucket.splats.push(i);\n      if (bucket.splats.length >= bucketSize) {\n        fullBuckets.push(bucket);\n        partiallyFullBuckets[bucketId] = null;\n      }\n    }\n\n    const partiallyFullBucketArray = [];\n    for (let bucketId in partiallyFullBuckets) {\n      if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n        const bucket = partiallyFullBuckets[bucketId];\n        if (bucket) {\n          partiallyFullBucketArray.push(bucket);\n        }\n      }\n    }\n\n    return {\n      fullBuckets: fullBuckets,\n      partiallyFullBuckets: partiallyFullBucketArray,\n    };\n  }\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([\n  10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10,\n]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)?.storage;\n};\n\nexport class PlayCanvasCompressedPlyParser {\n  static decodeHeaderText(headerText) {\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText\n      .split('\\n')\n      .filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0,\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`,\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') {\n            bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          }\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes,\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n          break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`,\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n      bytesPerSplat: bytesPerSplat,\n      headerSizeBytes:\n        headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n      sphericalHarmonicsDegree: 0,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (\n      buf.length >= HeaderMagicBytes.length &&\n      !startsWith(buf, HeaderMagicBytes)\n    ) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset),\n    );\n\n    const { chunkElement, vertexElement, bytesPerSplat } =\n      PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      headerSizeBytes: endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      bytesPerSplat: bytesPerSplat,\n      chunkElement: chunkElement,\n      vertexElement: vertexElement,\n    };\n  }\n\n  static readElementData(\n    element,\n    readBuffer,\n    readOffset,\n    fromIndex,\n    toIndex,\n    propertyFilter = null,\n  ) {\n    let dataView =\n      readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes =\n          StorageType.BYTES_PER_ELEMENT * element.count;\n        if (\n          (!property.storage ||\n            property.storage.byteLength < requiredStorageSizeBytes) &&\n          (!propertyFilter || propertyFilter(property.name))\n        ) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(\n      header.chunkElement,\n      plyBuffer,\n      header.headerSizeBytes,\n      null,\n      null,\n      propertyFilter,\n    );\n    PlayCanvasCompressedPlyParser.readElementData(\n      header.vertexElement,\n      plyBuffer,\n      readIndex,\n      null,\n      null,\n      propertyFilter,\n    );\n\n    return {\n      chunkElement: header.chunkElement,\n      vertexElement: header.vertexElement,\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX,\n        maxX,\n        minY,\n        maxY,\n        minZ,\n        maxZ,\n      },\n      scaleExtremes: {\n        minScaleX,\n        maxScaleX,\n        minScaleY,\n        maxScaleY,\n        minScaleZ,\n        maxScaleZ,\n      },\n      position,\n      rotation,\n      scale,\n      color,\n    };\n  }\n\n  static decompressSplat = (function() {\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(\n      index,\n      chunkSplatIndexOffset,\n      positionArray,\n      positionExtremes,\n      scaleArray,\n      scaleExtremes,\n      rotationArray,\n      colorArray,\n      outSplat,\n    ) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(\n        positionExtremes.minX[chunkIndex],\n        positionExtremes.maxX[chunkIndex],\n        p.x,\n      );\n      outSplat[OFFSET.Y] = lerp(\n        positionExtremes.minY[chunkIndex],\n        positionExtremes.maxY[chunkIndex],\n        p.y,\n      );\n      outSplat[OFFSET.Z] = lerp(\n        positionExtremes.minZ[chunkIndex],\n        positionExtremes.maxZ[chunkIndex],\n        p.z,\n      );\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleX[chunkIndex],\n          scaleExtremes.maxScaleX[chunkIndex],\n          s.x,\n        ),\n      );\n      outSplat[OFFSET.SCALE1] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleY[chunkIndex],\n          scaleExtremes.maxScaleY[chunkIndex],\n          s.y,\n        ),\n      );\n      outSplat[OFFSET.SCALE2] = Math.exp(\n        lerp(\n          scaleExtremes.minScaleZ[chunkIndex],\n          scaleExtremes.maxScaleZ[chunkIndex],\n          s.z,\n        ),\n      );\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n  })();\n\n  static parseToUncompressedSplatBufferSection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    outBuffer,\n    outOffset,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      const outBase = i * outBytesPerSplat + outOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        tempSplat,\n        outBuffer,\n        outBase,\n        0,\n        0,\n      );\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    chunkElement,\n    vertexElement,\n    fromIndex,\n    toIndex,\n    chunkSplatIndexOffset,\n    vertexDataBuffer,\n    veretxReadOffset,\n    splatArray,\n    propertyFilter = null,\n  ) {\n    PlayCanvasCompressedPlyParser.readElementData(\n      vertexElement,\n      vertexDataBuffer,\n      veretxReadOffset,\n      fromIndex,\n      toIndex,\n      propertyFilter,\n    );\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n      const tempSplat = UncompressedSplatArray.createSplat();\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        chunkSplatIndexOffset,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        tempSplat,\n      );\n      splatArray.addSplat(tempSplat);\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } =\n      PlayCanvasCompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const {\n      positionExtremes,\n      scaleExtremes,\n      position,\n      rotation,\n      scale,\n      color,\n    } = PlayCanvasCompressedPlyParser.getElementStorageArrays(\n      chunkElement,\n      vertexElement,\n    );\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      PlayCanvasCompressedPlyParser.decompressSplat(\n        i,\n        0,\n        position,\n        positionExtremes,\n        scale,\n        scaleExtremes,\n        rotation,\n        color,\n        newSplat,\n      );\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n}\n","export const PlyFormat = {\n  INRIAV1: 0,\n  INRIAV2: 1,\n  PlayCanvasCompressed: 2,\n};\n","import { PlyFormat } from './PlyFormat.js';\n\nconst [\n  FieldSizeIdDouble,\n  FieldSizeIdInt,\n  FieldSizeIdUInt,\n  FieldSizeIdFloat,\n  FieldSizeIdShort,\n  FieldSizeIdUShort,\n  FieldSizeIdUChar,\n] = [0, 1, 2, 3, 4, 5, 6];\n\nconst FieldSizeStringMap = {\n  double: FieldSizeIdDouble,\n  int: FieldSizeIdInt,\n  uint: FieldSizeIdUInt,\n  float: FieldSizeIdFloat,\n  short: FieldSizeIdShort,\n  ushort: FieldSizeIdUShort,\n  uchar: FieldSizeIdUChar,\n};\n\nconst FieldSize = {\n  [FieldSizeIdDouble]: 8,\n  [FieldSizeIdInt]: 4,\n  [FieldSizeIdUInt]: 4,\n  [FieldSizeIdFloat]: 4,\n  [FieldSizeIdShort]: 2,\n  [FieldSizeIdUShort]: 2,\n  [FieldSizeIdUChar]: 1,\n};\n\nexport class PlyParserUtils {\n  static HeaderEndToken = 'end_header';\n\n  constructor() {}\n\n  decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\n    const extractedLines = [];\n\n    let processingSection = false;\n    let headerEndLine = -1;\n    let vertexCount = 0;\n    let endOfHeader = false;\n    let sectionName = null;\n\n    const fieldIds = [];\n    const fieldTypes = [];\n    const allFieldNames = [];\n    const usedFieldNames = [];\n    const fieldTypesByName = {};\n\n    for (let i = headerStartLine; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (line.startsWith('element')) {\n        if (processingSection) {\n          headerEndLine--;\n          break;\n        } else {\n          processingSection = true;\n          headerStartLine = i;\n          headerEndLine = i;\n          const lineComponents = line.split(' ');\n          let validComponents = 0;\n          for (let lineComponent of lineComponents) {\n            const trimmedComponent = lineComponent.trim();\n            if (trimmedComponent.length > 0) {\n              validComponents++;\n              if (validComponents === 2) {\n                sectionName = trimmedComponent;\n              } else if (validComponents === 3) {\n                vertexCount = parseInt(trimmedComponent);\n              }\n            }\n          }\n        }\n      } else if (line.startsWith('property')) {\n        const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n        if (fieldMatch) {\n          const fieldTypeStr = fieldMatch[2];\n          const fieldName = fieldMatch[3];\n          allFieldNames.push(fieldName);\n          const fieldId = fieldNameIdMap[fieldName];\n          fieldTypesByName[fieldName] = fieldTypeStr;\n          const fieldType = FieldSizeStringMap[fieldTypeStr];\n          if (fieldId !== undefined) {\n            usedFieldNames.push(fieldName);\n            fieldIds.push(fieldId);\n            fieldTypes[fieldId] = fieldType;\n          }\n        }\n      }\n      if (line === PlyParserUtils.HeaderEndToken) {\n        endOfHeader = true;\n        break;\n      }\n      if (processingSection) {\n        extractedLines.push(line);\n        headerEndLine++;\n      }\n    }\n\n    const fieldOffsets = [];\n    let bytesPerVertex = 0;\n    for (let fieldName of allFieldNames) {\n      const fieldType = fieldTypesByName[fieldName];\n      if (fieldTypesByName.hasOwnProperty(fieldName)) {\n        const fieldId = fieldNameIdMap[fieldName];\n        if (fieldId !== undefined) {\n          fieldOffsets[fieldId] = bytesPerVertex;\n        }\n      }\n      bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\n    }\n\n    const sphericalHarmonics = this.decodeSphericalHarmonicsFromSectionHeader(\n      allFieldNames,\n      fieldNameIdMap,\n    );\n\n    return {\n      headerLines: extractedLines,\n      headerStartLine: headerStartLine,\n      headerEndLine: headerEndLine,\n      fieldTypes: fieldTypes,\n      fieldIds: fieldIds,\n      fieldOffsets: fieldOffsets,\n      bytesPerVertex: bytesPerVertex,\n      vertexCount: vertexCount,\n      dataSizeBytes: bytesPerVertex * vertexCount,\n      endOfHeader: endOfHeader,\n      sectionName: sectionName,\n      sphericalHarmonicsDegree: sphericalHarmonics.degree,\n      sphericalHarmonicsCoefficientsPerChannel:\n        sphericalHarmonics.coefficientsPerChannel,\n      sphericalHarmonicsDegree1Fields: sphericalHarmonics.degree1Fields,\n      sphericalHarmonicsDegree2Fields: sphericalHarmonics.degree2Fields,\n    };\n  }\n\n  decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\n    let sphericalHarmonicsFieldCount = 0;\n    let coefficientsPerChannel = 0;\n    for (let fieldName of fieldNames) {\n      if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\n    }\n    coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\n    let degree = 0;\n    if (coefficientsPerChannel >= 3) degree = 1;\n    if (coefficientsPerChannel >= 8) degree = 2;\n\n    let degree1Fields = [];\n    let degree2Fields = [];\n\n    for (let rgb = 0; rgb < 3; rgb++) {\n      if (degree >= 1) {\n        for (let i = 0; i < 3; i++) {\n          degree1Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)],\n          );\n        }\n      }\n      if (degree >= 2) {\n        for (let i = 0; i < 5; i++) {\n          degree2Fields.push(\n            fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)],\n          );\n        }\n      }\n    }\n\n    return {\n      degree: degree,\n      coefficientsPerChannel: coefficientsPerChannel,\n      degree1Fields: degree1Fields,\n      degree2Fields: degree2Fields,\n    };\n  }\n\n  static getHeaderSectionNames(headerLines) {\n    const sectionNames = [];\n    for (let headerLine of headerLines) {\n      if (headerLine.startsWith('element')) {\n        const lineComponents = headerLine.split(' ');\n        let validComponents = 0;\n        for (let lineComponent of lineComponents) {\n          const trimmedComponent = lineComponent.trim();\n          if (trimmedComponent.length > 0) {\n            validComponents++;\n            if (validComponents === 2) {\n              sectionNames.push(trimmedComponent);\n            }\n          }\n        }\n      }\n    }\n    return sectionNames;\n  }\n\n  static checkTextForEndHeader(endHeaderTestText) {\n    if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\n      return true;\n    }\n    return false;\n  }\n\n  static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n    const endHeaderTestChunk = new Uint8Array(\n      buffer,\n      Math.max(0, searchOfset - chunkSize),\n      chunkSize,\n    );\n    const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n    return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\n  }\n\n  static extractHeaderFromBufferToText(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  readHeaderFromBuffer(plyBuffer) {\n    const decoder = new TextDecoder();\n    let headerOffset = 0;\n    let headerText = '';\n    const readChunkSize = 100;\n\n    while (true) {\n      if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n        throw new Error(\n          'End of file reached while searching for end of header',\n        );\n      }\n      const headerChunk = new Uint8Array(\n        plyBuffer,\n        headerOffset,\n        readChunkSize,\n      );\n      headerText += decoder.decode(headerChunk);\n      headerOffset += readChunkSize;\n\n      if (\n        PlyParserUtils.checkBufferForEndHeader(\n          plyBuffer,\n          headerOffset,\n          readChunkSize * 2,\n          decoder,\n        )\n      ) {\n        break;\n      }\n    }\n\n    return headerText;\n  }\n\n  static convertHeaderTextToLines(headerText) {\n    const headerLines = headerText.split('\\n');\n    const prunedLines = [];\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      prunedLines.push(line);\n      if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return prunedLines;\n  }\n\n  static determineHeaderFormatFromHeaderText(headertText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\n    let format = PlyFormat.INRIAV1;\n    for (let i = 0; i < headerLines.length; i++) {\n      const line = headerLines[i].trim();\n      if (\n        line.startsWith('element chunk') ||\n        line.match(/[A-Za-z]*packed_[A-Za-z]*/)\n      ) {\n        format = PlyFormat.PlayCanvasCompressed;\n      } else if (line.startsWith('element codebook_centers')) {\n        format = PlyFormat.INRIAV2;\n      } else if (line === PlyParserUtils.HeaderEndToken) {\n        break;\n      }\n    }\n    return format;\n  }\n\n  static determineHeaderFormatFromPlyBuffer(plyBuffer) {\n    const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\n    return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\n  }\n\n  static readVertex(\n    vertexData,\n    header,\n    row,\n    dataOffset,\n    fieldsToRead,\n    rawVertex,\n    normalize = true,\n  ) {\n    const offset = row * header.bytesPerVertex + dataOffset;\n    const fieldOffsets = header.fieldOffsets;\n    const fieldTypes = header.fieldTypes;\n    for (let fieldId of fieldsToRead) {\n      const fieldType = fieldTypes[fieldId];\n      if (fieldType === FieldSizeIdFloat) {\n        rawVertex[fieldId] = vertexData.getFloat32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdShort) {\n        rawVertex[fieldId] = vertexData.getInt16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUShort) {\n        rawVertex[fieldId] = vertexData.getUint16(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdInt) {\n        rawVertex[fieldId] = vertexData.getInt32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUInt) {\n        rawVertex[fieldId] = vertexData.getUint32(\n          offset + fieldOffsets[fieldId],\n          true,\n        );\n      } else if (fieldType === FieldSizeIdUChar) {\n        if (normalize) {\n          rawVertex[fieldId] =\n            vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\n        } else {\n          rawVertex[fieldId] = vertexData.getUint8(\n            offset + fieldOffsets[fieldId],\n          );\n        }\n      }\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { clamp } from '../../Util.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nconst BaseFieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n];\n\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\n\nconst [\n  SCALE_0,\n  SCALE_1,\n  SCALE_2,\n  ROT_0,\n  ROT_1,\n  ROT_2,\n  ROT_3,\n  X,\n  Y,\n  Z,\n  F_DC_0,\n  F_DC_1,\n  F_DC_2,\n  OPACITY,\n  RED,\n  GREEN,\n  BLUE,\n  F_REST_0,\n] = BaseFieldsToReadIndexes;\n\nexport class INRIAV1PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeHeaderLines(headerLines) {\n    let shLineCount = 0;\n    headerLines.forEach((line) => {\n      if (line.includes('f_rest_')) shLineCount++;\n    });\n\n    let shFieldsToReadCount = 0;\n    if (shLineCount >= 45) {\n      shFieldsToReadCount = 45;\n    } else if (shLineCount >= 24) {\n      shFieldsToReadCount = 24;\n    } else if (shLineCount >= 9) {\n      shFieldsToReadCount = 9;\n    }\n\n    const shFieldIndexesToMap = Array.from(\n      Array(Math.max(shFieldsToReadCount - 1, 0)),\n    );\n    let shRemainingFieldNamesToRead = shFieldIndexesToMap.map(\n      (element, index) => `f_rest_${index + 1}`,\n    );\n\n    const fieldNamesToRead = [\n      ...BaseFieldNamesToRead,\n      ...shRemainingFieldNamesToRead,\n    ];\n    const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\n\n    const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\n      acc[fieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n    const header = this.plyParserutils.decodeSectionHeader(\n      headerLines,\n      fieldNameIdMap,\n      0,\n    );\n    header.splatCount = header.vertexCount;\n    header.bytesPerSplat = header.bytesPerVertex;\n    header.fieldsToReadIndexes = fieldsToReadIndexes;\n    return header;\n  }\n\n  decodeHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    const header = this.decodeHeaderLines(headerLines);\n    header.headerText = headerText;\n    header.headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    return header;\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderText(headerText);\n  }\n\n  findSplatData(plyBuffer, header) {\n    return new DataView(plyBuffer, header.headerSizeBytes);\n  }\n\n  parseToUncompressedSplatBufferSection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    toBuffer,\n    toOffset,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n        outSphericalHarmonicsDegree\n      ].BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      const outBase = i * outBytesPerSplat + toOffset;\n      SplatBuffer.writeSplatDataToSectionBuffer(\n        parsedSplat,\n        toBuffer,\n        outBase,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n\n  parseToUncompressedSplatArraySection(\n    header,\n    fromSplat,\n    toSplat,\n    splatData,\n    splatDataOffset,\n    splatArray,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      header.sphericalHarmonicsDegree,\n    );\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        splatData,\n        i,\n        header,\n        splatDataOffset,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(parsedSplat);\n    }\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV1PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\n        newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\n        newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[F_DC_0] !== undefined) {\n        const SH_C0 = 0.28209479177387814;\n        newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\n        newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\n        newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\n      } else if (rawSplat[RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] =\n          (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (outSphericalHarmonicsDegree >= 1) {\n        if (rawSplat[F_REST_0] !== undefined) {\n          for (let i = 0; i < 9; i++) {\n            newSplat[OFFSET_FRC[i]] =\n              rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\n          }\n          if (outSphericalHarmonicsDegree >= 2) {\n            for (let i = 0; i < 15; i++) {\n              newSplat[OFFSET_FRC[9 + i]] =\n                rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\n            }\n          }\n        }\n      }\n\n      tempRotation.set(\n        rawSplat[ROT_0],\n        rawSplat[ROT_1],\n        rawSplat[ROT_2],\n        rawSplat[ROT_3],\n      );\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = rawSplat[X];\n      newSplat[OFFSET_Y] = rawSplat[Y];\n      newSplat[OFFSET_Z] = rawSplat[Z];\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      header.fieldsToReadIndexes,\n      rawSplat,\n      true,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const header = this.decodeHeaderFromBuffer(plyBuffer);\n    const splatCount = header.splatCount;\n    const splatData = this.findSplatData(plyBuffer, header);\n    const splatArray = this.decodeSectionSplatData(\n      splatData,\n      splatCount,\n      header,\n      outSphericalHarmonicsDegree,\n    );\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { clamp } from '../../Util.js';\n\nconst CodeBookEntryNamesToRead = [\n  'features_dc',\n  'features_rest_0',\n  'features_rest_1',\n  'features_rest_2',\n  'features_rest_3',\n  'features_rest_4',\n  'features_rest_5',\n  'features_rest_6',\n  'features_rest_7',\n  'features_rest_8',\n  'features_rest_9',\n  'features_rest_10',\n  'features_rest_11',\n  'features_rest_12',\n  'features_rest_13',\n  'features_rest_14',\n  'opacity',\n  'scaling',\n  'rotation_re',\n  'rotation_im',\n];\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\n\nconst [\n  CB_FEATURES_DC,\n  CB_FEATURES_REST_0,\n  CB_FEATURES_REST_3,\n  CB_OPACITY,\n  CB_SCALING,\n  CB_ROTATION_RE,\n  CB_ROTATION_IM,\n] = [0, 1, 4, 16, 17, 18, 19];\n\nconst FieldNamesToRead = [\n  'scale_0',\n  'scale_1',\n  'scale_2',\n  'rot_0',\n  'rot_1',\n  'rot_2',\n  'rot_3',\n  'x',\n  'y',\n  'z',\n  'f_dc_0',\n  'f_dc_1',\n  'f_dc_2',\n  'opacity',\n  'red',\n  'green',\n  'blue',\n  'f_rest_0',\n  'f_rest_1',\n  'f_rest_2',\n  'f_rest_3',\n  'f_rest_4',\n  'f_rest_5',\n  'f_rest_6',\n  'f_rest_7',\n  'f_rest_8',\n  'f_rest_9',\n  'f_rest_10',\n  'f_rest_11',\n  'f_rest_12',\n  'f_rest_13',\n  'f_rest_14',\n  'f_rest_15',\n  'f_rest_16',\n  'f_rest_17',\n  'f_rest_18',\n  'f_rest_19',\n  'f_rest_20',\n  'f_rest_21',\n  'f_rest_22',\n  'f_rest_23',\n  'f_rest_24',\n  'f_rest_25',\n  'f_rest_26',\n  'f_rest_27',\n  'f_rest_28',\n  'f_rest_29',\n  'f_rest_30',\n  'f_rest_31',\n  'f_rest_32',\n  'f_rest_33',\n  'f_rest_34',\n  'f_rest_35',\n  'f_rest_36',\n  'f_rest_37',\n  'f_rest_38',\n  'f_rest_39',\n  'f_rest_40',\n  'f_rest_41',\n  'f_rest_42',\n  'f_rest_43',\n  'f_rest_44',\n  'f_rest_45',\n];\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\n\nconst [\n  PLY_SCALE_0,\n  PLY_SCALE_1,\n  PLY_SCALE_2,\n  PLY_ROT_0,\n  PLY_ROT_1,\n  PLY_ROT_2,\n  PLY_ROT_3,\n  PLY_X,\n  PLY_Y,\n  PLY_Z,\n  PLY_F_DC_0,\n  PLY_F_DC_1,\n  PLY_F_DC_2,\n  PLY_OPACITY,\n] = FieldsToReadIndexes;\n\nconst PLY_RED = PLY_F_DC_0;\nconst PLY_GREEN = PLY_F_DC_1;\nconst PLY_BLUE = PLY_F_DC_2;\n\nconst fromHalfFloat = (hf) => {\n  const t = (31744 & hf) >> 10;\n  const a = 1023 & hf;\n  return (\n    (hf >> 15 ? -1 : 1) *\n    (t ?\n      t === 31 ?\n        a ?\n          NaN :\n          1 / 0 :\n        Math.pow(2, t - 15) * (1 + a / 1024) :\n      (a / 1024) * 6103515625e-14)\n  );\n};\n\nexport class INRIAV2PlyParser {\n  constructor() {\n    this.plyParserutils = new PlyParserUtils();\n  }\n\n  decodeSectionHeadersFromHeaderLines(headerLines) {\n    const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\n      acc[FieldNamesToRead[element]] = element;\n      return acc;\n    }, {});\n\n    const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce(\n      (acc, element) => {\n        acc[CodeBookEntryNamesToRead[element]] = element;\n        return acc;\n      },\n      {},\n    );\n\n    const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\n    let codeBookSectionIndex;\n    for (let s = 0; s < sectionNames.length; s++) {\n      const sectionName = sectionNames[s];\n      if (sectionName === 'codebook_centers') {\n        codeBookSectionIndex = s;\n      }\n    }\n\n    let currentStartLine = 0;\n    let lastSectionFound = false;\n    const sectionHeaders = [];\n    let sectionIndex = 0;\n    while (!lastSectionFound) {\n      let sectionHeader;\n      if (sectionIndex === codeBookSectionIndex) {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          codeBookEntriesToReadIdMap,\n          currentStartLine,\n        );\n      } else {\n        sectionHeader = this.plyParserutils.decodeSectionHeader(\n          headerLines,\n          fieldNameIdMap,\n          currentStartLine,\n        );\n      }\n      lastSectionFound = sectionHeader.endOfHeader;\n      currentStartLine = sectionHeader.headerEndLine + 1;\n      if (!lastSectionFound) {\n        sectionHeader.splatCount = sectionHeader.vertexCount;\n        sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\n      }\n      sectionHeaders.push(sectionHeader);\n      sectionIndex++;\n    }\n    return sectionHeaders;\n  }\n\n  decodeSectionHeadersFromHeaderText(headerText) {\n    const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\n    return this.decodeSectionHeadersFromHeaderLines(headerLines);\n  }\n\n  getSplatCountFromSectionHeaders(sectionHeaders) {\n    let splatCount = 0;\n    for (let sectionHeader of sectionHeaders) {\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        splatCount += sectionHeader.vertexCount;\n      }\n    }\n    return splatCount;\n  }\n\n  decodeHeaderFromHeaderText(headerText) {\n    const headerSizeBytes =\n      headerText.indexOf(PlyParserUtils.HeaderEndToken) +\n      PlyParserUtils.HeaderEndToken.length +\n      1;\n    const sectionHeaders = this.decodeSectionHeadersFromHeaderText(headerText);\n    const splatCount = this.getSplatCountFromSectionHeaders(sectionHeaders);\n    return {\n      headerSizeBytes: headerSizeBytes,\n      sectionHeaders: sectionHeaders,\n      splatCount: splatCount,\n    };\n  }\n\n  decodeHeaderFromBuffer(plyBuffer) {\n    const headerText = this.plyParserutils.readHeaderFromBuffer(plyBuffer);\n    return this.decodeHeaderFromHeaderText(headerText);\n  }\n\n  findVertexData(plyBuffer, header, targetSection) {\n    let byteOffset = header.headerSizeBytes;\n    for (\n      let s = 0;\n      s < targetSection && s < header.sectionHeaders.length;\n      s++\n    ) {\n      const sectionHeader = header.sectionHeaders[s];\n      byteOffset += sectionHeader.dataSizeBytes;\n    }\n    return new DataView(\n      plyBuffer,\n      byteOffset,\n      header.sectionHeaders[targetSection].dataSizeBytes,\n    );\n  }\n\n  decodeCodeBook(codeBookData, sectionHeader) {\n    const rawVertex = [];\n    const codeBook = [];\n    for (let row = 0; row < sectionHeader.vertexCount; row++) {\n      PlyParserUtils.readVertex(\n        codeBookData,\n        sectionHeader,\n        row,\n        0,\n        CodeBookEntriesToReadIndexes,\n        rawVertex,\n      );\n      for (let index of CodeBookEntriesToReadIndexes) {\n        const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\n        let codeBookPage = codeBook[codeBookElementOffset];\n        if (!codeBookPage) {\n          codeBook[codeBookElementOffset] = codeBookPage = [];\n        }\n        codeBookPage.push(rawVertex[index]);\n      }\n    }\n    for (let page = 0; page < codeBook.length; page++) {\n      const codeBookPage = codeBook[page];\n      const SH_C0 = 0.28209479177387814;\n      for (let i = 0; i < codeBookPage.length; i++) {\n        const baseValue = fromHalfFloat(codeBookPage[i]);\n        if (page === CB_OPACITY) {\n          codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\n        } else if (page === CB_FEATURES_DC) {\n          codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\n        } else if (page === CB_SCALING) {\n          codeBookPage[i] = Math.exp(baseValue);\n        } else {\n          codeBookPage[i] = baseValue;\n        }\n      }\n    }\n    return codeBook;\n  }\n\n  decodeSectionSplatData(\n    sectionSplatData,\n    splatCount,\n    sectionHeader,\n    codeBook,\n    outSphericalHarmonicsDegree,\n  ) {\n    outSphericalHarmonicsDegree = Math.min(\n      outSphericalHarmonicsDegree,\n      sectionHeader.sphericalHarmonicsDegree,\n    );\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(\n        sectionSplatData,\n        row,\n        sectionHeader,\n        codeBook,\n        0,\n        outSphericalHarmonicsDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    let rawSplat = [];\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\n\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\n\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\n\n    const OFFSET_FRC = [];\n\n    for (let i = 0; i < 45; i++) {\n      OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\n    }\n\n    return function(\n      splatData,\n      row,\n      header,\n      codeBook,\n      splatDataOffset = 0,\n      outSphericalHarmonicsDegree = 0,\n    ) {\n      outSphericalHarmonicsDegree = Math.min(\n        outSphericalHarmonicsDegree,\n        header.sphericalHarmonicsDegree,\n      );\n      INRIAV2PlyParser.readSplat(\n        splatData,\n        header,\n        row,\n        splatDataOffset,\n        rawSplat,\n      );\n      const newSplat = UncompressedSplatArray.createSplat(\n        outSphericalHarmonicsDegree,\n      );\n      if (rawSplat[PLY_SCALE_0] !== undefined) {\n        newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\n        newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\n        newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\n      } else {\n        newSplat[OFFSET_SCALE0] = 0.01;\n        newSplat[OFFSET_SCALE1] = 0.01;\n        newSplat[OFFSET_SCALE2] = 0.01;\n      }\n\n      if (rawSplat[PLY_F_DC_0] !== undefined) {\n        newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\n        newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\n        newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\n      } else if (rawSplat[PLY_RED] !== undefined) {\n        newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\n        newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\n        newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\n      } else {\n        newSplat[OFFSET_FDC0] = 0;\n        newSplat[OFFSET_FDC1] = 0;\n        newSplat[OFFSET_FDC2] = 0;\n      }\n\n      if (rawSplat[PLY_OPACITY] !== undefined) {\n        newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\n      }\n\n      newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\n      newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\n      newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\n      newSplat[OFFSET_OPACITY] = clamp(\n        Math.floor(newSplat[OFFSET_OPACITY]),\n        0,\n        255,\n      );\n\n      if (\n        outSphericalHarmonicsDegree >= 1 &&\n        header.sphericalHarmonicsDegree >= 1\n      ) {\n        for (let i = 0; i < 9; i++) {\n          const codeBookPage = codeBook[CB_FEATURES_REST_0 + (i % 3)];\n          newSplat[OFFSET_FRC[i]] =\n            codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\n        }\n        if (\n          outSphericalHarmonicsDegree >= 2 &&\n          header.sphericalHarmonicsDegree >= 2\n        ) {\n          for (let i = 0; i < 15; i++) {\n            const codeBookPage = codeBook[CB_FEATURES_REST_3 + (i % 5)];\n            newSplat[OFFSET_FRC[9 + i]] =\n              codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\n          }\n        }\n      }\n\n      const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\n      const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\n      const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\n      const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\n      tempRotation.set(rot0, rot1, rot2, rot3);\n      tempRotation.normalize();\n\n      newSplat[OFFSET_ROTATION0] = tempRotation.x;\n      newSplat[OFFSET_ROTATION1] = tempRotation.y;\n      newSplat[OFFSET_ROTATION2] = tempRotation.z;\n      newSplat[OFFSET_ROTATION3] = tempRotation.w;\n\n      newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\n      newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\n      newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\n\n      return newSplat;\n    };\n  })();\n\n  static readSplat(splatData, header, row, dataOffset, rawSplat) {\n    return PlyParserUtils.readVertex(\n      splatData,\n      header,\n      row,\n      dataOffset,\n      FieldsToReadIndexes,\n      rawSplat,\n      false,\n    );\n  }\n\n  parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\n    const splatArrays = [];\n    const header = this.decodeHeaderFromBuffer(\n      plyBuffer,\n      outSphericalHarmonicsDegree,\n    );\n    let codeBook;\n\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName === 'codebook_centers') {\n        const codeBookData = this.findVertexData(plyBuffer, header, s);\n        codeBook = this.decodeCodeBook(codeBookData, sectionHeader);\n      }\n    }\n    for (let s = 0; s < header.sectionHeaders.length; s++) {\n      const sectionHeader = header.sectionHeaders[s];\n      if (sectionHeader.sectionName !== 'codebook_centers') {\n        const splatCount = sectionHeader.vertexCount;\n        const vertexData = this.findVertexData(plyBuffer, header, s);\n        const splatArray = this.decodeSectionSplatData(\n          vertexData,\n          splatCount,\n          sectionHeader,\n          codeBook,\n          outSphericalHarmonicsDegree,\n        );\n        splatArrays.push(splatArray);\n      }\n    }\n\n    const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\n    for (let splatArray of splatArrays) {\n      for (let splat of splatArray.splats) {\n        unified.addSplat(splat);\n      }\n    }\n\n    return unified;\n  }\n}\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\nimport { PlyFormat } from './PlyFormat.js';\n\nexport class PlyParser {\n  static parseToUncompressedSplatArray(\n    plyBuffer,\n    outSphericalHarmonicsDegree = 0,\n  ) {\n    const plyFormat =\n      PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\n\n    if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n      return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(\n        plyBuffer,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV1) {\n      return new INRIAV1PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    } else if (plyFormat === PlyFormat.INRIAV2) {\n      return new INRIAV2PlyParser().parseToUncompressedSplatArray(\n        plyBuffer,\n        outSphericalHarmonicsDegree,\n      );\n    }\n  }\n}\n","export class DirectLoadError extends Error {\n  constructor(msg) {\n    super(msg);\n  }\n}\n","export const InternalLoadType = {\n  DirectToSplatBuffer: 0,\n  DirectToSplatArray: 1,\n  DownloadBeforeProcessing: 2,\n};\n","export const LoaderStatus = {\n  Downloading: 0,\n  Processing: 1,\n  Done: 2,\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n  constructor(\n    sectionCount,\n    sectionFilters,\n    groupingParameters,\n    partitionGenerator,\n  ) {\n    this.sectionCount = sectionCount;\n    this.sectionFilters = sectionFilters;\n    this.groupingParameters = groupingParameters;\n    this.partitionGenerator = partitionGenerator;\n  }\n\n  partitionUncompressedSplatArray(splatArray) {\n    let groupingParameters;\n    let sectionCount;\n    let sectionFilters;\n    if (this.partitionGenerator) {\n      const results = this.partitionGenerator(splatArray);\n      groupingParameters = results.groupingParameters;\n      sectionCount = results.sectionCount;\n      sectionFilters = results.sectionFilters;\n    } else {\n      groupingParameters = this.groupingParameters;\n      sectionCount = this.sectionCount;\n      sectionFilters = this.sectionFilters;\n    }\n\n    const newArrays = [];\n    for (let s = 0; s < sectionCount; s++) {\n      const sectionSplats = new UncompressedSplatArray(\n        splatArray.sphericalHarmonicsDegree,\n      );\n      const sectionFilter = sectionFilters[s];\n      for (let i = 0; i < splatArray.splatCount; i++) {\n        if (sectionFilter(i)) {\n          sectionSplats.addSplat(splatArray.splats[i]);\n        }\n      }\n      newArrays.push(sectionSplats);\n    }\n    return {\n      splatArrays: newArrays,\n      parameters: groupingParameters,\n    };\n  }\n\n  static getStandardPartitioner(\n    partitionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const partitionGenerator = (splatArray) => {\n      const OFFSET_X = UncompressedSplatArray.OFFSET.X;\n      const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\n      const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\n\n      if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n      const center = new THREE.Vector3();\n      const clampDistance = 0.5;\n      const clampPoint = (point) => {\n        point.x = Math.floor(point.x / clampDistance) * clampDistance;\n        point.y = Math.floor(point.y / clampDistance) * clampDistance;\n        point.z = Math.floor(point.z / clampDistance) * clampDistance;\n      };\n      splatArray.splats.forEach((splat) => {\n        center\n          .set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z])\n          .sub(sceneCenter);\n        clampPoint(center);\n        splat.centerDist = center.lengthSq();\n      });\n      splatArray.splats.sort((a, b) => {\n        let centerADist = a.centerDist;\n        let centerBDist = b.centerDist;\n        if (centerADist > centerBDist) return 1;\n        else return -1;\n      });\n\n      const sectionFilters = [];\n      const groupingParameters = [];\n      partitionSize = Math.min(splatArray.splatCount, partitionSize);\n      const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n      let currentStartSplat = 0;\n      for (let i = 0; i < patitionCount; i++) {\n        let startSplat = currentStartSplat;\n        sectionFilters.push((splatIndex) => {\n          return (\n            splatIndex >= startSplat && splatIndex < startSplat + partitionSize\n          );\n        });\n        groupingParameters.push({\n          blocksSize: blockSize,\n          bucketSize: bucketSize,\n        });\n        currentStartSplat += partitionSize;\n      }\n      return {\n        sectionCount: sectionFilters.length,\n        sectionFilters,\n        groupingParameters,\n      };\n    };\n    return new SplatPartitioner(\n      undefined,\n      undefined,\n      undefined,\n      partitionGenerator,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n  constructor(\n    splatPartitioner,\n    alphaRemovalThreshold,\n    compressionLevel,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    this.splatPartitioner = splatPartitioner;\n    this.alphaRemovalThreshold = alphaRemovalThreshold;\n    this.compressionLevel = compressionLevel;\n    this.sectionSize = sectionSize;\n    this.sceneCenter = sceneCenter ?\n      new THREE.Vector3().copy(sceneCenter) :\n      undefined;\n    this.blockSize = blockSize;\n    this.bucketSize = bucketSize;\n  }\n\n  generateFromUncompressedSplatArray(splatArray) {\n    const partitionResults =\n      this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      partitionResults.splatArrays,\n      this.alphaRemovalThreshold,\n      this.compressionLevel,\n      this.sceneCenter,\n      this.blockSize,\n      this.bucketSize,\n      partitionResults.parameters,\n    );\n  }\n\n  static getStandardGenerator(\n    alphaRemovalThreshold = 1,\n    compressionLevel = 1,\n    sectionSize = 0,\n    sceneCenter = new THREE.Vector3(),\n    blockSize = SplatBuffer.BucketBlockSize,\n    bucketSize = SplatBuffer.BucketSize,\n  ) {\n    const splatPartitioner = SplatPartitioner.getStandardPartitioner(\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return new SplatBufferGenerator(\n      splatPartitioner,\n      alphaRemovalThreshold,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\nimport { PlyFormat } from './PlyFormat.js';\nimport { PlyParser } from './PlyParser.js';\nimport { PlyParserUtils } from './PlyParserUtils.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n  let inBytes = 0;\n  for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n  if (!buffer || buffer.byteLength < inBytes) {\n    buffer = new ArrayBuffer(inBytes);\n  }\n\n  let offset = 0;\n  for (let chunk of chunks) {\n    new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n    offset += chunk.sizeBytes;\n  }\n\n  return buffer;\n}\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class PlyLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let compressedPlyHeaderChunksBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let headerLoaded = false;\n    let readyToLoadSplatData = false;\n    let compressed = false;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesParsed = 0;\n    let numBytesDownloaded = 0;\n    let headerText = '';\n    let header = null;\n    let chunks = [];\n\n    let standardLoadUncompressedSplatArray;\n\n    const textDecoder = new TextDecoder();\n    const inriaV1PlyParser = new INRIAV1PlyParser();\n\n    const localOnProgress = (percent, percentLabel, chunkData) => {\n      const loadComplete = percent >= 100;\n\n      if (chunkData) {\n        chunks.push({\n          data: chunkData,\n          sizeBytes: chunkData.byteLength,\n          startBytes: numBytesDownloaded,\n          endBytes: numBytesDownloaded + chunkData.byteLength,\n        });\n        numBytesDownloaded += chunkData.byteLength;\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n      } else {\n        if (!headerLoaded) {\n          headerText += textDecoder.decode(chunkData);\n          if (PlyParserUtils.checkTextForEndHeader(headerText)) {\n            const plyFormat =\n              PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\n            if (plyFormat === PlyFormat.INRIAV1) {\n              header = inriaV1PlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.splatCount;\n              readyToLoadSplatData = true;\n              compressed = false;\n            } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\n              header =\n                PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\n              maxSplatCount = header.vertexElement.count;\n              compressed = true;\n            } else {\n              if (loadDirectoToSplatBuffer) {\n                throw new DirectLoadError(\n                  'PlyLoader.loadFromURL() -> Selected Ply format cannot be directly loaded.',\n                );\n              } else {\n                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n                return;\n              }\n            }\n            outSphericalHarmonicsDegree = Math.min(\n              outSphericalHarmonicsDegree,\n              header.sphericalHarmonicsDegree,\n            );\n\n            const shDescriptor =\n              SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                outSphericalHarmonicsDegree\n              ];\n            const splatBufferSizeBytes =\n              splatDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\n\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n              SplatBuffer.writeHeaderToBuffer(\n                {\n                  versionMajor: SplatBuffer.CurrentMajorVersion,\n                  versionMinor: SplatBuffer.CurrentMinorVersion,\n                  maxSectionCount: sectionCount,\n                  sectionCount: sectionCount,\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  compressionLevel: 0,\n                  sceneCenter: new THREE.Vector3(),\n                },\n                directLoadBufferOut,\n              );\n            } else {\n              standardLoadUncompressedSplatArray = new UncompressedSplatArray(\n                outSphericalHarmonicsDegree,\n              );\n            }\n\n            numBytesStreamed = header.headerSizeBytes;\n            numBytesParsed = header.headerSizeBytes;\n            headerLoaded = true;\n          }\n        } else if (compressed && !readyToLoadSplatData) {\n          const sizeRequiredForHeaderAndChunks =\n            header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n          compressedPlyHeaderChunksBuffer = storeChunksInBuffer(\n            chunks,\n            compressedPlyHeaderChunksBuffer,\n          );\n          if (\n            compressedPlyHeaderChunksBuffer.byteLength >=\n            sizeRequiredForHeaderAndChunks\n          ) {\n            PlayCanvasCompressedPlyParser.readElementData(\n              header.chunkElement,\n              compressedPlyHeaderChunksBuffer,\n              header.headerSizeBytes,\n            );\n            numBytesStreamed = sizeRequiredForHeaderAndChunks;\n            numBytesParsed = sizeRequiredForHeaderAndChunks;\n            readyToLoadSplatData = true;\n          }\n        }\n\n        if (headerLoaded && readyToLoadSplatData) {\n          if (chunks.length > 0) {\n            directLoadBufferIn = storeChunksInBuffer(\n              chunks,\n              directLoadBufferIn,\n            );\n\n            const bytesLoadedSinceLastStreamedSection =\n              numBytesDownloaded - numBytesStreamed;\n            if (\n              bytesLoadedSinceLastStreamedSection >\n                directLoadSectionSizeBytes ||\n              loadComplete\n            ) {\n              const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n              const addedSplatCount = Math.floor(\n                numBytesToProcess / header.bytesPerSplat,\n              );\n              const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n              const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n              const newSplatCount = splatCount + addedSplatCount;\n              const parsedDataViewOffset =\n                numBytesParsed - chunks[0].startBytes;\n              const dataToParse = new DataView(\n                directLoadBufferIn,\n                parsedDataViewOffset,\n                numBytesToParse,\n              );\n\n              const shDescriptor =\n                SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[\n                  outSphericalHarmonicsDegree\n                ];\n              const outOffset =\n                splatCount * shDescriptor.BytesPerSplat + splatDataOffsetBytes;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatBufferSection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    directLoadBufferOut,\n                    outOffset,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              } else {\n                if (compressed) {\n                  PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(\n                    header.chunkElement,\n                    header.vertexElement,\n                    0,\n                    addedSplatCount - 1,\n                    splatCount,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                  );\n                } else {\n                  inriaV1PlyParser.parseToUncompressedSplatArraySection(\n                    header,\n                    0,\n                    addedSplatCount - 1,\n                    dataToParse,\n                    0,\n                    standardLoadUncompressedSplatArray,\n                    outSphericalHarmonicsDegree,\n                  );\n                }\n              }\n\n              splatCount = newSplatCount;\n\n              if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n                if (!directLoadSplatBuffer) {\n                  SplatBuffer.writeSectionHeaderToBuffer(\n                    {\n                      maxSplatCount: maxSplatCount,\n                      splatCount: splatCount,\n                      bucketSize: 0,\n                      bucketCount: 0,\n                      bucketBlockSize: 0,\n                      compressionScaleRange: 0,\n                      storageSizeBytes: 0,\n                      fullBucketCount: 0,\n                      partiallyFilledBucketCount: 0,\n                      sphericalHarmonicsDegree: outSphericalHarmonicsDegree,\n                    },\n                    0,\n                    directLoadBufferOut,\n                    SplatBuffer.HeaderSizeBytes,\n                  );\n                  directLoadSplatBuffer = new SplatBuffer(\n                    directLoadBufferOut,\n                    false,\n                  );\n                }\n                directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n                if (onProgressiveLoadSectionProgress) {\n                  onProgressiveLoadSectionProgress(\n                    directLoadSplatBuffer,\n                    loadComplete,\n                  );\n                }\n              }\n\n              numBytesStreamed += directLoadSectionSizeBytes;\n              numBytesParsed += numBytesToParse;\n\n              if (numBytesLeftOver === 0) {\n                chunks = [];\n              } else {\n                let keepChunks = [];\n                let keepSize = 0;\n                for (let i = chunks.length - 1; i >= 0; i--) {\n                  const chunk = chunks[i];\n                  keepSize += chunk.sizeBytes;\n                  keepChunks.unshift(chunk);\n                  if (keepSize >= numBytesLeftOver) break;\n                }\n                chunks = keepChunks;\n              }\n            }\n          }\n\n          if (loadComplete) {\n            if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n              loadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              loadPromise.resolve(standardLoadUncompressedSplatArray);\n            }\n          }\n        }\n      }\n\n      if (onProgress) {\n        onProgress(percent, percentLabel, LoaderStatus.Downloading);\n      }\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          const chunkDatas = chunks.map((chunk) => chunk.data);\n          return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\n            return PlyLoader.loadFromFileData(\n              plyFileData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              outSphericalHarmonicsDegree,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    plyFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    outSphericalHarmonicsDegree = 0,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      return PlyParser.parseToUncompressedSplatArray(\n        plyFileData,\n        outSphericalHarmonicsDegree,\n      );\n    }).then((splatArray) => {\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n  static RowSizeBytes = 32;\n  static CenterSizeBytes = 12;\n  static ScaleSizeBytes = 12;\n  static RotationSizeBytes = 4;\n  static ColorSizeBytes = 4;\n\n  static parseToUncompressedSplatBufferSection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    toBuffer,\n    toOffset,\n  ) {\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation =\n      SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat =\n      SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n        .BytesPerSplat;\n\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      const outBase = i * outBytesPerSplat + toOffset;\n      const outCenter = new Float32Array(toBuffer, outBase, 3);\n      const outScale = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter,\n        3,\n      );\n      const outRotation = new Float32Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale,\n        4,\n      );\n      const outColor = new Uint8Array(\n        toBuffer,\n        outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation,\n        4,\n      );\n\n      outCenter[0] = inCenter[0];\n      outCenter[1] = inCenter[1];\n      outCenter[2] = inCenter[2];\n\n      outScale[0] = inScale[0];\n      outScale[1] = inScale[1];\n      outScale[2] = inScale[2];\n\n      outRotation[0] = quat.w;\n      outRotation[1] = quat.x;\n      outRotation[2] = quat.y;\n      outRotation[3] = quat.z;\n\n      outColor[0] = inColor[0];\n      outColor[1] = inColor[1];\n      outColor[2] = inColor[2];\n      outColor[3] = inColor[3];\n    }\n  }\n\n  static parseToUncompressedSplatArraySection(\n    fromSplat,\n    toSplat,\n    fromBuffer,\n    fromOffset,\n    splatArray,\n  ) {\n    for (let i = fromSplat; i <= toSplat; i++) {\n      const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n      const inCenter = new Float32Array(fromBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        fromBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        fromBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.RotationSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n  }\n\n  static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n    // Standard .splat row layout:\n    // XYZ - Position (Float32)\n    // XYZ - Scale (Float32)\n    // RGBA - colors (uint8)\n    // IJKL - quaternion/rot (uint8)\n\n    const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n    const splatArray = new UncompressedSplatArray();\n\n    for (let i = 0; i < splatCount; i++) {\n      const inBase = i * SplatParser.RowSizeBytes;\n      const inCenter = new Float32Array(inBuffer, inBase, 3);\n      const inScale = new Float32Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes,\n        3,\n      );\n      const inColor = new Uint8Array(\n        inBuffer,\n        inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes,\n        4,\n      );\n      const inRotation = new Uint8Array(\n        inBuffer,\n        inBase +\n          SplatParser.CenterSizeBytes +\n          SplatParser.ScaleSizeBytes +\n          SplatParser.ColorSizeBytes,\n        4,\n      );\n\n      const quat = new THREE.Quaternion(\n        (inRotation[1] - 128) / 128,\n        (inRotation[2] - 128) / 128,\n        (inRotation[3] - 128) / 128,\n        (inRotation[0] - 128) / 128,\n      );\n      quat.normalize();\n\n      splatArray.addSplatFromComonents(\n        inCenter[0],\n        inCenter[1],\n        inCenter[2],\n        inScale[0],\n        inScale[1],\n        inScale[2],\n        quat.w,\n        quat.x,\n        quat.y,\n        quat.z,\n        inColor[0],\n        inColor[1],\n        inColor[2],\n        inColor[3],\n      );\n    }\n\n    return splatArray;\n  }\n}\n","import * as THREE from 'three';\nimport { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { DirectLoadError } from '../DirectLoadError.js';\nimport { InternalLoadType } from '../InternalLoadType.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatParser } from './SplatParser.js';\n\nfunction finalize(\n  splatData,\n  optimizeSplatData,\n  minimumAlpha,\n  compressionLevel,\n  sectionSize,\n  sceneCenter,\n  blockSize,\n  bucketSize,\n) {\n  if (optimizeSplatData) {\n    const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(\n      minimumAlpha,\n      compressionLevel,\n      sectionSize,\n      sceneCenter,\n      blockSize,\n      bucketSize,\n    );\n    return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\n  } else {\n    return SplatBuffer.generateFromUncompressedSplatArrays(\n      [splatData],\n      minimumAlpha,\n      0,\n      new THREE.Vector3(),\n    );\n  }\n}\n\nexport class SplatLoader {\n  static loadFromURL(\n    fileName,\n    onProgress,\n    loadDirectoToSplatBuffer,\n    onProgressiveLoadSectionProgress,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData = true,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let internalLoadType = loadDirectoToSplatBuffer ?\n      InternalLoadType.DirectToSplatBuffer :\n      InternalLoadType.DirectToSplatArray;\n    if (optimizeSplatData) {\n      internalLoadType = InternalLoadType.DirectToSplatArray;\n    }\n\n    const splatDataOffsetBytes =\n      SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n    const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\n    const sectionCount = 1;\n\n    let directLoadBufferIn;\n    let directLoadBufferOut;\n    let directLoadSplatBuffer;\n    let maxSplatCount = 0;\n    let splatCount = 0;\n\n    let standardLoadUncompressedSplatArray;\n\n    const loadPromise = nativePromiseWithExtractedComponents();\n\n    let numBytesStreamed = 0;\n    let numBytesLoaded = 0;\n    let chunks = [];\n\n    const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n      const loadComplete = percent >= 100;\n\n      if (chunk) {\n        chunks.push(chunk);\n      }\n\n      if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n        if (loadComplete) {\n          loadPromise.resolve(chunks);\n        }\n        return;\n      }\n\n      if (!fileSize) {\n        if (loadDirectoToSplatBuffer) {\n          throw new DirectLoadError(\n            'Cannon directly load .splat because no file size info is available.',\n          );\n        } else {\n          internalLoadType = InternalLoadType.DownloadBeforeProcessing;\n          return;\n        }\n      }\n\n      if (!directLoadBufferIn) {\n        maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n        directLoadBufferIn = new ArrayBuffer(fileSize);\n        const bytesPerSplat =\n          SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0]\n            .BytesPerSplat;\n        const splatBufferSizeBytes =\n          splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\n\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n          SplatBuffer.writeHeaderToBuffer(\n            {\n              versionMajor: SplatBuffer.CurrentMajorVersion,\n              versionMinor: SplatBuffer.CurrentMinorVersion,\n              maxSectionCount: sectionCount,\n              sectionCount: sectionCount,\n              maxSplatCount: maxSplatCount,\n              splatCount: splatCount,\n              compressionLevel: 0,\n              sceneCenter: new THREE.Vector3(),\n            },\n            directLoadBufferOut,\n          );\n        } else {\n          standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\n        }\n      }\n\n      if (chunk) {\n        new Uint8Array(\n          directLoadBufferIn,\n          numBytesLoaded,\n          chunk.byteLength,\n        ).set(new Uint8Array(chunk));\n        numBytesLoaded += chunk.byteLength;\n\n        const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n        if (\n          bytesLoadedSinceLastSection > directLoadSectionSizeBytes ||\n          loadComplete\n        ) {\n          const bytesToUpdate = loadComplete ?\n            bytesLoadedSinceLastSection :\n            directLoadSectionSizeBytes;\n          const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n          const newSplatCount = splatCount + addedSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            SplatParser.parseToUncompressedSplatBufferSection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              directLoadBufferOut,\n              splatDataOffsetBytes,\n            );\n          } else {\n            SplatParser.parseToUncompressedSplatArraySection(\n              splatCount,\n              newSplatCount - 1,\n              directLoadBufferIn,\n              0,\n              standardLoadUncompressedSplatArray,\n            );\n          }\n\n          splatCount = newSplatCount;\n\n          if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n            if (!directLoadSplatBuffer) {\n              SplatBuffer.writeSectionHeaderToBuffer(\n                {\n                  maxSplatCount: maxSplatCount,\n                  splatCount: splatCount,\n                  bucketSize: 0,\n                  bucketCount: 0,\n                  bucketBlockSize: 0,\n                  compressionScaleRange: 0,\n                  storageSizeBytes: 0,\n                  fullBucketCount: 0,\n                  partiallyFilledBucketCount: 0,\n                },\n                0,\n                directLoadBufferOut,\n                SplatBuffer.HeaderSizeBytes,\n              );\n              directLoadSplatBuffer = new SplatBuffer(\n                directLoadBufferOut,\n                false,\n              );\n            }\n            directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\n            if (onProgressiveLoadSectionProgress) {\n              onProgressiveLoadSectionProgress(\n                directLoadSplatBuffer,\n                loadComplete,\n              );\n            }\n          }\n\n          numBytesStreamed += directLoadSectionSizeBytes;\n        }\n      }\n\n      if (loadComplete) {\n        if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          loadPromise.resolve(directLoadSplatBuffer);\n        } else {\n          loadPromise.resolve(standardLoadUncompressedSplatArray);\n        }\n      }\n\n      if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n    };\n\n    if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\n    return fetchWithProgress(fileName, localOnProgress, false).then(() => {\n      if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n      return loadPromise.promise.then((splatData) => {\n        if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n        if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\n          return new Blob(chunks).arrayBuffer().then((splatData) => {\n            return SplatLoader.loadFromFileData(\n              splatData,\n              minimumAlpha,\n              compressionLevel,\n              optimizeSplatData,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        } else if (internalLoadType === InternalLoadType.DirectToSplatBuffer) {\n          return splatData;\n        } else {\n          return delayedExecute(() => {\n            return finalize(\n              splatData,\n              optimizeSplatData,\n              minimumAlpha,\n              compressionLevel,\n              sectionSize,\n              sceneCenter,\n              blockSize,\n              bucketSize,\n            );\n          });\n        }\n      });\n    });\n  }\n\n  static loadFromFileData(\n    splatFileData,\n    minimumAlpha,\n    compressionLevel,\n    optimizeSplatData,\n    sectionSize,\n    sceneCenter,\n    blockSize,\n    bucketSize,\n  ) {\n    return delayedExecute(() => {\n      const splatArray =\n        SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n      return finalize(\n        splatArray,\n        optimizeSplatData,\n        minimumAlpha,\n        compressionLevel,\n        sectionSize,\n        sceneCenter,\n        blockSize,\n        bucketSize,\n      );\n    });\n  }\n}\n","import { Constants } from '../../Constants.js';\nimport {\n  fetchWithProgress as defaultFetchWithProgress,\n  delayedExecute,\n  nativePromiseWithExtractedComponents,\n} from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\n\nexport class KSplatLoader {\n  static checkVersion(buffer) {\n    const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n    const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n    const header = SplatBuffer.parseHeader(buffer);\n    if (\n      (header.versionMajor === minVersionMajor &&\n        header.versionMinor >= minVersionMinor) ||\n      header.versionMajor > minVersionMajor\n    ) {\n      return true;\n    } else {\n      throw new Error(\n        `KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n          `Minimum required: v${minVersionMajor}.${minVersionMinor}`,\n      );\n    }\n  }\n\n  static loadFromURL(\n    fileName,\n    externalOnProgress,\n    loadDirectoToSplatBuffer,\n    onSectionBuilt,\n    fetchWithProgress = defaultFetchWithProgress,\n  ) {\n    let directLoadBuffer;\n    let directLoadSplatBuffer;\n\n    let headerBuffer;\n    let header;\n    let headerLoaded = false;\n    let headerLoading = false;\n\n    let sectionHeadersBuffer;\n    let sectionHeaders = [];\n    let sectionHeadersLoaded = false;\n    let sectionHeadersLoading = false;\n\n    let numBytesLoaded = 0;\n    let numBytesProgressivelyLoaded = 0;\n    let totalBytesToDownload = 0;\n\n    let downloadComplete = false;\n    let loadComplete = false;\n    let loadSectionQueued = false;\n\n    let chunks = [];\n\n    const directLoadPromise = nativePromiseWithExtractedComponents();\n\n    const checkAndLoadHeader = () => {\n      if (\n        !headerLoaded &&\n        !headerLoading &&\n        numBytesLoaded >= SplatBuffer.HeaderSizeBytes\n      ) {\n        headerLoading = true;\n        const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n        headerAssemblyPromise.then((bufferData) => {\n          headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n          new Uint8Array(headerBuffer).set(\n            new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes),\n          );\n          KSplatLoader.checkVersion(headerBuffer);\n          headerLoading = false;\n          headerLoaded = true;\n          header = SplatBuffer.parseHeader(headerBuffer);\n          window.setTimeout(() => {\n            checkAndLoadSectionHeaders();\n          }, 1);\n        });\n      }\n    };\n\n    let queuedCheckAndLoadSectionsCount = 0;\n    const queueCheckAndLoadSections = () => {\n      if (queuedCheckAndLoadSectionsCount === 0) {\n        queuedCheckAndLoadSectionsCount++;\n        window.setTimeout(() => {\n          queuedCheckAndLoadSectionsCount--;\n          checkAndLoadSections();\n        }, 1);\n      }\n    };\n\n    const checkAndLoadSectionHeaders = () => {\n      const performLoad = () => {\n        sectionHeadersLoading = true;\n        const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n        sectionHeadersAssemblyPromise.then((bufferData) => {\n          sectionHeadersLoading = false;\n          sectionHeadersLoaded = true;\n          sectionHeadersBuffer = new ArrayBuffer(\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n          );\n          new Uint8Array(sectionHeadersBuffer).set(\n            new Uint8Array(\n              bufferData,\n              SplatBuffer.HeaderSizeBytes,\n              header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes,\n            ),\n          );\n          sectionHeaders = SplatBuffer.parseSectionHeaders(\n            header,\n            sectionHeadersBuffer,\n            0,\n            false,\n          );\n          let totalSectionStorageStorageByes = 0;\n          for (let i = 0; i < header.maxSectionCount; i++) {\n            totalSectionStorageStorageByes +=\n              sectionHeaders[i].storageSizeBytes;\n          }\n          const totalStorageSizeBytes =\n            SplatBuffer.HeaderSizeBytes +\n            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes +\n            totalSectionStorageStorageByes;\n          if (!directLoadBuffer) {\n            directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\n            let offset = 0;\n            for (let i = 0; i < chunks.length; i++) {\n              const chunk = chunks[i];\n              new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(\n                new Uint8Array(chunk),\n              );\n              offset += chunk.byteLength;\n            }\n          }\n\n          totalBytesToDownload =\n            SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n          for (\n            let i = 0;\n            i <= sectionHeaders.length && i < header.maxSectionCount;\n            i++\n          ) {\n            totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n          }\n\n          queueCheckAndLoadSections();\n        });\n      };\n\n      if (\n        !sectionHeadersLoading &&\n        !sectionHeadersLoaded &&\n        headerLoaded &&\n        numBytesLoaded >=\n          SplatBuffer.HeaderSizeBytes +\n            SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount\n      ) {\n        performLoad();\n      }\n    };\n\n    const checkAndLoadSections = () => {\n      if (loadSectionQueued) return;\n      loadSectionQueued = true;\n      const checkAndLoadFunc = () => {\n        loadSectionQueued = false;\n        if (sectionHeadersLoaded) {\n          if (loadComplete) return;\n\n          downloadComplete = numBytesLoaded >= totalBytesToDownload;\n\n          let bytesLoadedSinceLastSection =\n            numBytesLoaded - numBytesProgressivelyLoaded;\n          if (\n            bytesLoadedSinceLastSection >\n              Constants.ProgressiveLoadSectionSize ||\n            downloadComplete\n          ) {\n            numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\n            loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\n\n            if (!directLoadSplatBuffer) {\n              directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\n            }\n\n            const baseDataOffset =\n              SplatBuffer.HeaderSizeBytes +\n              SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n            let sectionBase = 0;\n            let reachedSections = 0;\n            let loadedSplatCount = 0;\n            for (let i = 0; i < header.maxSectionCount; i++) {\n              const sectionHeader = sectionHeaders[i];\n              const bucketsDataOffset =\n                sectionBase +\n                sectionHeader.partiallyFilledBucketCount * 4 +\n                sectionHeader.bucketStorageSizeBytes *\n                  sectionHeader.bucketCount;\n              const bytesRequiredToReachSectionSplatData =\n                baseDataOffset + bucketsDataOffset;\n              if (\n                numBytesProgressivelyLoaded >=\n                bytesRequiredToReachSectionSplatData\n              ) {\n                reachedSections++;\n                const bytesPastSSectionSplatDataStart =\n                  numBytesProgressivelyLoaded -\n                  bytesRequiredToReachSectionSplatData;\n                const baseDescriptor =\n                  SplatBuffer.CompressionLevels[header.compressionLevel];\n                const shDesc =\n                  baseDescriptor.SphericalHarmonicsDegrees[\n                    sectionHeader.sphericalHarmonicsDegree\n                  ];\n                const bytesPerSplat = shDesc.BytesPerSplat;\n                let loadedSplatsForSection = Math.floor(\n                  bytesPastSSectionSplatDataStart / bytesPerSplat,\n                );\n                loadedSplatsForSection = Math.min(\n                  loadedSplatsForSection,\n                  sectionHeader.maxSplatCount,\n                );\n                loadedSplatCount += loadedSplatsForSection;\n                directLoadSplatBuffer.updateLoadedCounts(\n                  reachedSections,\n                  loadedSplatCount,\n                );\n                directLoadSplatBuffer.updateSectionLoadedCounts(\n                  i,\n                  loadedSplatsForSection,\n                );\n              } else {\n                break;\n              }\n              sectionBase += sectionHeader.storageSizeBytes;\n            }\n\n            onSectionBuilt(directLoadSplatBuffer, loadComplete);\n\n            const percentComplete =\n              (numBytesProgressivelyLoaded / totalBytesToDownload) * 100;\n            const percentLabel = percentComplete.toFixed(2) + '%';\n\n            if (externalOnProgress) {\n              externalOnProgress(\n                percentComplete,\n                percentLabel,\n                LoaderStatus.Downloading,\n              );\n            }\n\n            if (loadComplete) {\n              directLoadPromise.resolve(directLoadSplatBuffer);\n            } else {\n              checkAndLoadSections();\n            }\n          }\n        }\n      };\n      window.setTimeout(\n        checkAndLoadFunc,\n        Constants.ProgressiveLoadSectionDelayDuration,\n      );\n    };\n\n    const localOnProgress = (percent, percentStr, chunk) => {\n      if (chunk) {\n        chunks.push(chunk);\n        if (directLoadBuffer) {\n          new Uint8Array(\n            directLoadBuffer,\n            numBytesLoaded,\n            chunk.byteLength,\n          ).set(new Uint8Array(chunk));\n        }\n        numBytesLoaded += chunk.byteLength;\n      }\n      if (loadDirectoToSplatBuffer) {\n        checkAndLoadHeader();\n        checkAndLoadSectionHeaders();\n        checkAndLoadSections();\n      } else {\n        if (externalOnProgress) {\n          externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\n        }\n      }\n    };\n\n    return fetchWithProgress(\n      fileName,\n      localOnProgress,\n      !loadDirectoToSplatBuffer,\n    ).then((fullBuffer) => {\n      if (externalOnProgress) {\n        externalOnProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const loadPromise = loadDirectoToSplatBuffer ?\n        directLoadPromise.promise :\n        KSplatLoader.loadFromFileData(fullBuffer);\n      return loadPromise.then((splatBuffer) => {\n        if (externalOnProgress) {\n          externalOnProgress(100, '100%', LoaderStatus.Done);\n        }\n        return splatBuffer;\n      });\n    });\n  }\n\n  static loadFromFileData(fileData) {\n    return delayedExecute(() => {\n      KSplatLoader.checkVersion(fileData);\n      return new SplatBuffer(fileData);\n    });\n  }\n\n  static downloadFile = (function() {\n    let downLoadLink;\n\n    return function(splatBuffer, fileName) {\n      const blob = new Blob([splatBuffer.bufferData], {\n        type: 'application/octet-stream',\n      });\n\n      if (!downLoadLink) {\n        downLoadLink = document.createElement('a');\n        document.body.appendChild(downLoadLink);\n      }\n      downLoadLink.download = fileName;\n      downLoadLink.href = URL.createObjectURL(blob);\n      downLoadLink.click();\n    };\n  })();\n}\n","export const SceneFormat = {\n  Splat: 0,\n  KSplat: 1,\n  Ply: 2,\n  GLTF: 3,\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n  if (path.endsWith('.ply')) return SceneFormat.Ply;\n  else if (path.endsWith('.splat')) return SceneFormat.Splat;\n  else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n  else if (path.endsWith('.gltf')) return SceneFormat.GLTF;\n  return null;\n};\n","export const LogLevel = {\n  None: 0,\n  Error: 1,\n  Warning: 2,\n  Info: 3,\n  Debug: 4,\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n  EventDispatcher,\n  MOUSE,\n  Quaternion,\n  Spherical,\n  TOUCH,\n  Vector2,\n  Vector3,\n  Plane,\n  Ray,\n  MathUtils,\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);\n\nclass OrbitControls extends EventDispatcher {\n  constructor(object, domElement) {\n    super();\n\n    this.object = object;\n    this.domElement = domElement;\n    this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n    // Set to false to disable this control\n    this.enabled = true;\n\n    // \"target\" sets the location of focus, where the object orbits around\n    this.target = new Vector3();\n\n    // How far you can dolly in and out ( PerspectiveCamera only )\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n\n    // How far you can zoom in and out ( OrthographicCamera only )\n    this.minZoom = 0;\n    this.maxZoom = Infinity;\n\n    // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n    this.minPolarAngle = 0; // radians\n    this.maxPolarAngle = Math.PI; // radians\n\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n    this.minAzimuthAngle = -Infinity; // radians\n    this.maxAzimuthAngle = Infinity; // radians\n\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n    this.enableDamping = false;\n    this.dampingFactor = 0.05;\n\n    // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n    this.enableZoom = true;\n    this.zoomSpeed = 1.0;\n\n    // Set to false to disable rotating\n    this.enableRotate = true;\n    this.rotateSpeed = 1.0;\n\n    // Set to false to disable panning\n    this.enablePan = true;\n    this.panSpeed = 1.0;\n    this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    this.zoomToCursor = false;\n\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n    // The four arrow keys\n    this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n    // Mouse buttons\n    this.mouseButtons = {\n      LEFT: MOUSE.ROTATE,\n      MIDDLE: MOUSE.DOLLY,\n      RIGHT: MOUSE.PAN,\n    };\n\n    // Touch fingers\n    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n    // for reset\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom;\n\n    // the target DOM element for key events\n    this._domElementKeyEvents = null;\n\n    //\n    // public methods\n    //\n\n    this.getPolarAngle = function() {\n      return spherical.phi;\n    };\n\n    this.getAzimuthalAngle = function() {\n      return spherical.theta;\n    };\n\n    this.getDistance = function() {\n      return this.object.position.distanceTo(this.target);\n    };\n\n    this.listenToKeyEvents = function(domElement) {\n      domElement.addEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = domElement;\n    };\n\n    this.stopListenToKeyEvents = function() {\n      this._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n      this._domElementKeyEvents = null;\n    };\n\n    this.saveState = function() {\n      scope.target0.copy(scope.target);\n      scope.position0.copy(scope.object.position);\n      scope.zoom0 = scope.object.zoom;\n    };\n\n    this.reset = function() {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      this.clearDampedRotation();\n      this.clearDampedPan();\n\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(_changeEvent);\n\n      scope.update();\n\n      state = STATE.NONE;\n    };\n\n    this.clearDampedRotation = function() {\n      sphericalDelta.theta = 0.0;\n      sphericalDelta.phi = 0.0;\n    };\n\n    this.clearDampedPan = function() {\n      panOffset.set(0, 0, 0);\n    };\n\n    // this method is exposed, but perhaps it would be better if we can make it private...\n    this.update = (function() {\n      const offset = new Vector3();\n\n      // so camera.up is the orbit axis\n      const quat = new Quaternion().setFromUnitVectors(\n        object.up,\n        new Vector3(0, 1, 0),\n      );\n      const quatInverse = quat.clone().invert();\n\n      const lastPosition = new Vector3();\n      const lastQuaternion = new Quaternion();\n      const lastTargetPosition = new Vector3();\n\n      const twoPI = 2 * Math.PI;\n\n      return function update() {\n        quat.setFromUnitVectors(object.up, new Vector3(0, 1, 0));\n        quatInverse.copy(quat).invert();\n\n        const position = scope.object.position;\n\n        offset.copy(position).sub(scope.target);\n\n        // rotate offset to \"y-axis-is-up\" space\n        offset.applyQuaternion(quat);\n\n        // angle from z-axis around y-axis\n        spherical.setFromVector3(offset);\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n\n        if (scope.enableDamping) {\n          spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n          spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n        } else {\n          spherical.theta += sphericalDelta.theta;\n          spherical.phi += sphericalDelta.phi;\n        }\n\n        // restrict theta to be between desired limits\n\n        let min = scope.minAzimuthAngle;\n        let max = scope.maxAzimuthAngle;\n\n        if (isFinite(min) && isFinite(max)) {\n          if (min < -Math.PI) min += twoPI;\n          else if (min > Math.PI) min -= twoPI;\n\n          if (max < -Math.PI) max += twoPI;\n          else if (max > Math.PI) max -= twoPI;\n\n          if (min <= max) {\n            spherical.theta = Math.max(min, Math.min(max, spherical.theta));\n          } else {\n            spherical.theta =\n              spherical.theta > (min + max) / 2 ?\n                Math.max(min, spherical.theta) :\n                Math.min(max, spherical.theta);\n          }\n        }\n\n        // restrict phi to be between desired limits\n        spherical.phi = Math.max(\n          scope.minPolarAngle,\n          Math.min(scope.maxPolarAngle, spherical.phi),\n        );\n\n        spherical.makeSafe();\n\n        // move target to panned location\n\n        if (scope.enableDamping === true) {\n          scope.target.addScaledVector(panOffset, scope.dampingFactor);\n        } else {\n          scope.target.add(panOffset);\n        }\n\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (\n          (scope.zoomToCursor && performCursorZoom) ||\n          scope.object.isOrthographicCamera\n        ) {\n          spherical.radius = clampDistance(spherical.radius);\n        } else {\n          spherical.radius = clampDistance(spherical.radius * scale);\n        }\n\n        offset.setFromSpherical(spherical);\n\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        offset.applyQuaternion(quatInverse);\n\n        position.copy(scope.target).add(offset);\n\n        scope.object.lookAt(scope.target);\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n\n          panOffset.multiplyScalar(1 - scope.dampingFactor);\n        } else {\n          sphericalDelta.set(0, 0, 0);\n\n          panOffset.set(0, 0, 0);\n        }\n\n        // adjust camera position\n        let zoomChanged = false;\n        if (scope.zoomToCursor && performCursorZoom) {\n          let newRadius = null;\n          if (scope.object.isPerspectiveCamera) {\n            // move the camera down the pointer ray\n            // this method avoids floating point error\n            const prevRadius = offset.length();\n            newRadius = clampDistance(prevRadius * scale);\n\n            const radiusDelta = prevRadius - newRadius;\n            scope.object.position.addScaledVector(dollyDirection, radiusDelta);\n            scope.object.updateMatrixWorld();\n          } else if (scope.object.isOrthographicCamera) {\n            // adjust the ortho camera position based on zoom changes\n            const mouseBefore = new Vector3(mouse.x, mouse.y, 0);\n            mouseBefore.unproject(scope.object);\n\n            scope.object.zoom = Math.max(\n              scope.minZoom,\n              Math.min(scope.maxZoom, scope.object.zoom / scale),\n            );\n            scope.object.updateProjectionMatrix();\n            zoomChanged = true;\n\n            const mouseAfter = new Vector3(mouse.x, mouse.y, 0);\n            mouseAfter.unproject(scope.object);\n\n            scope.object.position.sub(mouseAfter).add(mouseBefore);\n            scope.object.updateMatrixWorld();\n\n            newRadius = offset.length();\n          } else {\n            console.warn(\n              'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.',\n            );\n            scope.zoomToCursor = false;\n          }\n\n          // handle the placement of the target\n          if (newRadius !== null) {\n            if (this.screenSpacePanning) {\n              // position the orbit target in front of the new camera position\n              scope.target\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix)\n                .multiplyScalar(newRadius)\n                .add(scope.object.position);\n            } else {\n              // get the ray and translation plane to compute target\n              _ray.origin.copy(scope.object.position);\n              _ray.direction\n                .set(0, 0, -1)\n                .transformDirection(scope.object.matrix);\n\n              // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n              // extremely large values\n              if (Math.abs(scope.object.up.dot(_ray.direction)) < TILT_LIMIT) {\n                object.lookAt(scope.target);\n              } else {\n                _plane.setFromNormalAndCoplanarPoint(\n                  scope.object.up,\n                  scope.target,\n                );\n                _ray.intersectPlane(_plane, scope.target);\n              }\n            }\n          }\n        } else if (scope.object.isOrthographicCamera) {\n          scope.object.zoom = Math.max(\n            scope.minZoom,\n            Math.min(scope.maxZoom, scope.object.zoom / scale),\n          );\n          scope.object.updateProjectionMatrix();\n          zoomChanged = true;\n        }\n\n        scale = 1;\n        performCursorZoom = false;\n\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (\n          zoomChanged ||\n          lastPosition.distanceToSquared(scope.object.position) > EPS ||\n          8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS ||\n          lastTargetPosition.distanceToSquared(scope.target) > 0\n        ) {\n          scope.dispatchEvent(_changeEvent);\n\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          lastTargetPosition.copy(scope.target);\n\n          zoomChanged = false;\n\n          return true;\n        }\n\n        return false;\n      };\n    })();\n\n    this.dispose = function() {\n      scope.domElement.removeEventListener('contextmenu', onContextMenu);\n\n      scope.domElement.removeEventListener('pointerdown', onPointerDown);\n      scope.domElement.removeEventListener('pointercancel', onPointerUp);\n      scope.domElement.removeEventListener('wheel', onMouseWheel);\n\n      scope.domElement.removeEventListener('pointermove', onPointerMove);\n      scope.domElement.removeEventListener('pointerup', onPointerUp);\n\n      if (scope._domElementKeyEvents !== null) {\n        scope._domElementKeyEvents.removeEventListener('keydown', onKeyDown);\n        scope._domElementKeyEvents = null;\n      }\n    };\n\n    //\n    // internals\n    //\n\n    const scope = this;\n\n    const STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_PAN: 4,\n      TOUCH_DOLLY_PAN: 5,\n      TOUCH_DOLLY_ROTATE: 6,\n    };\n\n    let state = STATE.NONE;\n\n    const EPS = 0.000001;\n\n    // current position in spherical coordinates\n    const spherical = new Spherical();\n    const sphericalDelta = new Spherical();\n\n    let scale = 1;\n    const panOffset = new Vector3();\n\n    const rotateStart = new Vector2();\n    const rotateEnd = new Vector2();\n    const rotateDelta = new Vector2();\n\n    const panStart = new Vector2();\n    const panEnd = new Vector2();\n    const panDelta = new Vector2();\n\n    const dollyStart = new Vector2();\n    const dollyEnd = new Vector2();\n    const dollyDelta = new Vector2();\n\n    const dollyDirection = new Vector3();\n    const mouse = new Vector2();\n    let performCursorZoom = false;\n\n    const pointers = [];\n    const pointerPositions = {};\n\n    function getAutoRotationAngle() {\n      return ((2 * Math.PI) / 60 / 60) * scope.autoRotateSpeed;\n    }\n\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n\n    function rotateLeft(angle) {\n      sphericalDelta.theta -= angle;\n    }\n\n    function rotateUp(angle) {\n      sphericalDelta.phi -= angle;\n    }\n\n    const panLeft = (function() {\n      const v = new Vector3();\n\n      return function panLeft(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        v.multiplyScalar(-distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    const panUp = (function() {\n      const v = new Vector3();\n\n      return function panUp(distance, objectMatrix) {\n        if (scope.screenSpacePanning === true) {\n          v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n          v.setFromMatrixColumn(objectMatrix, 0);\n          v.crossVectors(scope.object.up, v);\n        }\n\n        v.multiplyScalar(distance);\n\n        panOffset.add(v);\n      };\n    })();\n\n    // deltaX and deltaY are in pixels; right and down are positive\n    const pan = (function() {\n      const offset = new Vector3();\n\n      return function pan(deltaX, deltaY) {\n        const element = scope.domElement;\n\n        if (scope.object.isPerspectiveCamera) {\n          // perspective\n          const position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          let targetDistance = offset.length();\n\n          // half of the fov is center to top of screen\n          targetDistance *= Math.tan(\n            ((scope.object.fov / 2) * Math.PI) / 180.0,\n          );\n\n          // we use only clientHeight here so aspect ratio does not distort speed\n          panLeft(\n            (2 * deltaX * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n          panUp(\n            (2 * deltaY * targetDistance) / element.clientHeight,\n            scope.object.matrix,\n          );\n        } else if (scope.object.isOrthographicCamera) {\n          // orthographic\n          panLeft(\n            (deltaX * (scope.object.right - scope.object.left)) /\n              scope.object.zoom /\n              element.clientWidth,\n            scope.object.matrix,\n          );\n          panUp(\n            (deltaY * (scope.object.top - scope.object.bottom)) /\n              scope.object.zoom /\n              element.clientHeight,\n            scope.object.matrix,\n          );\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn(\n            'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.',\n          );\n          scope.enablePan = false;\n        }\n      };\n    })();\n\n    function dollyOut(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale /= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function dollyIn(dollyScale) {\n      if (\n        scope.object.isPerspectiveCamera ||\n        scope.object.isOrthographicCamera\n      ) {\n        scale *= dollyScale;\n      } else {\n        console.warn(\n          'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.',\n        );\n        scope.enableZoom = false;\n      }\n    }\n\n    function updateMouseParameters(event) {\n      if (!scope.zoomToCursor) {\n        return;\n      }\n\n      performCursorZoom = true;\n\n      const rect = scope.domElement.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const w = rect.width;\n      const h = rect.height;\n\n      mouse.x = (x / w) * 2 - 1;\n      mouse.y = -(y / h) * 2 + 1;\n\n      dollyDirection\n        .set(mouse.x, mouse.y, 1)\n        .unproject(object)\n        .sub(object.position)\n        .normalize();\n    }\n\n    function clampDistance(dist) {\n      return Math.max(scope.minDistance, Math.min(scope.maxDistance, dist));\n    }\n\n    //\n    // event callbacks - update the object state\n    //\n\n    function handleMouseDownRotate(event) {\n      rotateStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownDolly(event) {\n      updateMouseParameters(event);\n      dollyStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownPan(event) {\n      panStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseMoveRotate(event) {\n      rotateEnd.set(event.clientX, event.clientY);\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMoveDolly(event) {\n      dollyEnd.set(event.clientX, event.clientY);\n\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n\n      scope.update();\n    }\n\n    function handleMouseMovePan(event) {\n      panEnd.set(event.clientX, event.clientY);\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n\n      scope.update();\n    }\n\n    function handleMouseWheel(event) {\n      updateMouseParameters(event);\n\n      if (event.deltaY < 0) {\n        dollyIn(getZoomScale());\n      } else if (event.deltaY > 0) {\n        dollyOut(getZoomScale());\n      }\n\n      scope.update();\n    }\n\n    function handleKeyDown(event) {\n      let needsUpdate = false;\n\n      switch (event.code) {\n        case scope.keys.UP:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.BOTTOM:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateUp(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(0, -scope.keyPanSpeed);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.LEFT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (2 * Math.PI * scope.rotateSpeed) / scope.domElement.clientHeight,\n            );\n          } else {\n            pan(scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n\n        case scope.keys.RIGHT:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            rotateLeft(\n              (-2 * Math.PI * scope.rotateSpeed) /\n                scope.domElement.clientHeight,\n            );\n          } else {\n            pan(-scope.keyPanSpeed, 0);\n          }\n\n          needsUpdate = true;\n          break;\n      }\n\n      if (needsUpdate) {\n        // prevent the browser from scrolling on cursor keys\n        event.preventDefault();\n\n        scope.update();\n      }\n    }\n\n    function handleTouchStartRotate() {\n      if (pointers.length === 1) {\n        rotateStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        rotateStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartPan() {\n      if (pointers.length === 1) {\n        panStart.set(pointers[0].pageX, pointers[0].pageY);\n      } else {\n        const x = 0.5 * (pointers[0].pageX + pointers[1].pageX);\n        const y = 0.5 * (pointers[0].pageY + pointers[1].pageY);\n\n        panStart.set(x, y);\n      }\n    }\n\n    function handleTouchStartDolly() {\n      const dx = pointers[0].pageX - pointers[1].pageX;\n      const dy = pointers[0].pageY - pointers[1].pageY;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyStart.set(0, distance);\n    }\n\n    function handleTouchStartDollyPan() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enablePan) handleTouchStartPan();\n    }\n\n    function handleTouchStartDollyRotate() {\n      if (scope.enableZoom) handleTouchStartDolly();\n\n      if (scope.enableRotate) handleTouchStartRotate();\n    }\n\n    function handleTouchMoveRotate(event) {\n      if (pointers.length == 1) {\n        rotateEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        rotateEnd.set(x, y);\n      }\n\n      rotateDelta\n        .subVectors(rotateEnd, rotateStart)\n        .multiplyScalar(scope.rotateSpeed);\n\n      const element = scope.domElement;\n\n      rotateLeft((2 * Math.PI * rotateDelta.x) / element.clientHeight); // yes, height\n\n      rotateUp((2 * Math.PI * rotateDelta.y) / element.clientHeight);\n\n      rotateStart.copy(rotateEnd);\n    }\n\n    function handleTouchMovePan(event) {\n      if (pointers.length === 1) {\n        panEnd.set(event.pageX, event.pageY);\n      } else {\n        const position = getSecondPointerPosition(event);\n\n        const x = 0.5 * (event.pageX + position.x);\n        const y = 0.5 * (event.pageY + position.y);\n\n        panEnd.set(x, y);\n      }\n\n      panDelta.subVectors(panEnd, panStart).multiplyScalar(scope.panSpeed);\n\n      pan(panDelta.x, panDelta.y);\n\n      panStart.copy(panEnd);\n    }\n\n    function handleTouchMoveDolly(event) {\n      const position = getSecondPointerPosition(event);\n\n      const dx = event.pageX - position.x;\n      const dy = event.pageY - position.y;\n\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      dollyEnd.set(0, distance);\n\n      dollyDelta.set(0, Math.pow(dollyEnd.y / dollyStart.y, scope.zoomSpeed));\n\n      dollyOut(dollyDelta.y);\n\n      dollyStart.copy(dollyEnd);\n    }\n\n    function handleTouchMoveDollyPan(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enablePan) handleTouchMovePan(event);\n    }\n\n    function handleTouchMoveDollyRotate(event) {\n      if (scope.enableZoom) handleTouchMoveDolly(event);\n\n      if (scope.enableRotate) handleTouchMoveRotate(event);\n    }\n\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n    function onPointerDown(event) {\n      if (scope.enabled === false) return;\n\n      if (pointers.length === 0) {\n        scope.domElement.setPointerCapture(event.pointerId);\n\n        scope.domElement.addEventListener('pointermove', onPointerMove);\n        scope.domElement.addEventListener('pointerup', onPointerUp);\n      }\n\n      //\n\n      addPointer(event);\n\n      if (event.pointerType === 'touch') {\n        onTouchStart(event);\n      } else {\n        onMouseDown(event);\n      }\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n\n      if (event.pointerType === 'touch') {\n        onTouchMove(event);\n      } else {\n        onMouseMove(event);\n      }\n    }\n\n    function onPointerUp(event) {\n      removePointer(event);\n\n      if (pointers.length === 0) {\n        scope.domElement.releasePointerCapture(event.pointerId);\n\n        scope.domElement.removeEventListener('pointermove', onPointerMove);\n        scope.domElement.removeEventListener('pointerup', onPointerUp);\n      }\n\n      scope.dispatchEvent(_endEvent);\n\n      state = STATE.NONE;\n    }\n\n    function onMouseDown(event) {\n      let mouseAction;\n\n      switch (event.button) {\n        case 0:\n          mouseAction = scope.mouseButtons.LEFT;\n          break;\n\n        case 1:\n          mouseAction = scope.mouseButtons.MIDDLE;\n          break;\n\n        case 2:\n          mouseAction = scope.mouseButtons.RIGHT;\n          break;\n\n        default:\n          mouseAction = -1;\n      }\n\n      switch (mouseAction) {\n        case MOUSE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseDownDolly(event);\n\n          state = STATE.DOLLY;\n\n          break;\n\n        case MOUSE.ROTATE:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          } else {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          }\n\n          break;\n\n        case MOUSE.PAN:\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            if (scope.enableRotate === false) return;\n\n            handleMouseDownRotate(event);\n\n            state = STATE.ROTATE;\n          } else {\n            if (scope.enablePan === false) return;\n\n            handleMouseDownPan(event);\n\n            state = STATE.PAN;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onMouseMove(event) {\n      switch (state) {\n        case STATE.ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleMouseMoveRotate(event);\n\n          break;\n\n        case STATE.DOLLY:\n          if (scope.enableZoom === false) return;\n\n          handleMouseMoveDolly(event);\n\n          break;\n\n        case STATE.PAN:\n          if (scope.enablePan === false) return;\n\n          handleMouseMovePan(event);\n\n          break;\n      }\n    }\n\n    function onMouseWheel(event) {\n      if (\n        scope.enabled === false ||\n        scope.enableZoom === false ||\n        state !== STATE.NONE\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n\n      scope.dispatchEvent(_startEvent);\n\n      handleMouseWheel(event);\n\n      scope.dispatchEvent(_endEvent);\n    }\n\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enablePan === false) return;\n\n      handleKeyDown(event);\n    }\n\n    function onTouchStart(event) {\n      trackPointer(event);\n\n      switch (pointers.length) {\n        case 1:\n          switch (scope.touches.ONE) {\n            case TOUCH.ROTATE:\n              if (scope.enableRotate === false) return;\n\n              handleTouchStartRotate();\n\n              state = STATE.TOUCH_ROTATE;\n\n              break;\n\n            case TOUCH.PAN:\n              if (scope.enablePan === false) return;\n\n              handleTouchStartPan();\n\n              state = STATE.TOUCH_PAN;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        case 2:\n          switch (scope.touches.TWO) {\n            case TOUCH.DOLLY_PAN:\n              if (scope.enableZoom === false && scope.enablePan === false) {\n                return;\n              }\n\n              handleTouchStartDollyPan();\n\n              state = STATE.TOUCH_DOLLY_PAN;\n\n              break;\n\n            case TOUCH.DOLLY_ROTATE:\n              if (scope.enableZoom === false && scope.enableRotate === false) {\n                return;\n              }\n\n              handleTouchStartDollyRotate();\n\n              state = STATE.TOUCH_DOLLY_ROTATE;\n\n              break;\n\n            default:\n              state = STATE.NONE;\n          }\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(_startEvent);\n      }\n    }\n\n    function onTouchMove(event) {\n      trackPointer(event);\n\n      switch (state) {\n        case STATE.TOUCH_ROTATE:\n          if (scope.enableRotate === false) return;\n\n          handleTouchMoveRotate(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_PAN:\n          if (scope.enablePan === false) return;\n\n          handleTouchMovePan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_PAN:\n          if (scope.enableZoom === false && scope.enablePan === false) return;\n\n          handleTouchMoveDollyPan(event);\n\n          scope.update();\n\n          break;\n\n        case STATE.TOUCH_DOLLY_ROTATE:\n          if (scope.enableZoom === false && scope.enableRotate === false) {\n            return;\n          }\n\n          handleTouchMoveDollyRotate(event);\n\n          scope.update();\n\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n    }\n\n    function onContextMenu(event) {\n      if (scope.enabled === false) return;\n\n      event.preventDefault();\n    }\n\n    function addPointer(event) {\n      pointers.push(event);\n    }\n\n    function removePointer(event) {\n      delete pointerPositions[event.pointerId];\n\n      for (let i = 0; i < pointers.length; i++) {\n        if (pointers[i].pointerId == event.pointerId) {\n          pointers.splice(i, 1);\n          return;\n        }\n      }\n    }\n\n    function trackPointer(event) {\n      let position = pointerPositions[event.pointerId];\n\n      if (position === undefined) {\n        position = new Vector2();\n        pointerPositions[event.pointerId] = position;\n      }\n\n      position.set(event.pageX, event.pageY);\n    }\n\n    function getSecondPointerPosition(event) {\n      const pointer =\n        event.pointerId === pointers[0].pointerId ? pointers[1] : pointers[0];\n\n      return pointerPositions[pointer.pointerId];\n    }\n\n    //\n\n    scope.domElement.addEventListener('contextmenu', onContextMenu);\n\n    scope.domElement.addEventListener('pointerdown', onPointerDown);\n    scope.domElement.addEventListener('pointercancel', onPointerUp);\n    scope.domElement.addEventListener('wheel', onMouseWheel, {\n      passive: false,\n    });\n\n    // force an update at start\n\n    this.update();\n  }\n}\n\nexport { OrbitControls };\n","export const RenderMode = {\n  Always: 0,\n  OnChange: 1,\n  Never: 2,\n};\n","import * as THREE from 'three';\n\nconst _axis = new THREE.Vector3();\n\nexport class ArrowHelper extends THREE.Object3D {\n  constructor(\n    dir = new THREE.Vector3(0, 0, 1),\n    origin = new THREE.Vector3(0, 0, 0),\n    length = 1,\n    radius = 0.1,\n    color = 0xffff00,\n    headLength = length * 0.2,\n    headRadius = headLength * 0.2,\n  ) {\n    super();\n\n    this.type = 'ArrowHelper';\n\n    const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n    lineGeometry.translate(0, length / 2.0, 0);\n    const coneGeometry = new THREE.CylinderGeometry(\n      0,\n      headRadius,\n      headLength,\n      32,\n    );\n    coneGeometry.translate(0, length, 0);\n\n    this.position.copy(origin);\n\n    this.line = new THREE.Mesh(\n      lineGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    this.cone = new THREE.Mesh(\n      coneGeometry,\n      new THREE.MeshBasicMaterial({ color: color, toneMapped: false }),\n    );\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n\n    this.setDirection(dir);\n  }\n\n  setDirection(dir) {\n    if (dir.y > 0.99999) {\n      this.quaternion.set(0, 0, 0, 1);\n    } else if (dir.y < -0.99999) {\n      this.quaternion.set(1, 0, 0, 0);\n    } else {\n      _axis.set(dir.z, 0, -dir.x).normalize();\n      const radians = Math.acos(dir.y);\n      this.quaternion.setFromAxisAngle(_axis, radians);\n    }\n  }\n\n  setColor(color) {\n    this.line.material.color.set(color);\n    this.cone.material.color.set(color);\n  }\n\n  copy(source) {\n    super.copy(source, false);\n    this.line.copy(source.line);\n    this.cone.copy(source.cone);\n    return this;\n  }\n\n  dispose() {\n    this.line.geometry.dispose();\n    this.line.material.dispose();\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  }\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n  constructor(threeScene) {\n    this.threeScene = threeScene;\n    this.splatRenderTarget = null;\n    this.renderTargetCopyQuad = null;\n    this.renderTargetCopyCamera = null;\n    this.meshCursor = null;\n    this.focusMarker = null;\n    this.controlPlane = null;\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  updateSplatRenderTargetForRenderDimensions(width, height) {\n    this.destroySplatRendertarget();\n    this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n      format: THREE.RGBAFormat,\n      stencilBuffer: false,\n      depthBuffer: true,\n    });\n    this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n    this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n    this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n  }\n\n  destroySplatRendertarget() {\n    if (this.splatRenderTarget) {\n      this.splatRenderTarget = null;\n    }\n  }\n\n  setupRenderTargetCopyObjects() {\n    const uniforms = {\n      sourceColorTexture: {\n        type: 't',\n        value: null,\n      },\n      sourceDepthTexture: {\n        type: 't',\n        value: null,\n      },\n    };\n    const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n      vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n      fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n      uniforms: uniforms,\n      depthWrite: false,\n      depthTest: false,\n      transparent: true,\n      blending: THREE.CustomBlending,\n      blendSrc: THREE.SrcAlphaFactor,\n      blendSrcAlpha: THREE.SrcAlphaFactor,\n      blendDst: THREE.OneMinusSrcAlphaFactor,\n      blendDstAlpha: THREE.OneMinusSrcAlphaFactor,\n    });\n    renderTargetCopyMaterial.extensions.fragDepth = true;\n    this.renderTargetCopyQuad = new THREE.Mesh(\n      new THREE.PlaneGeometry(2, 2),\n      renderTargetCopyMaterial,\n    );\n    this.renderTargetCopyCamera = new THREE.OrthographicCamera(\n      -1,\n      1,\n      1,\n      -1,\n      0,\n      1,\n    );\n  }\n\n  destroyRenderTargetCopyObjects() {\n    if (this.renderTargetCopyQuad) {\n      disposeAllMeshes(this.renderTargetCopyQuad);\n      this.renderTargetCopyQuad = null;\n    }\n  }\n\n  setupMeshCursor() {\n    if (!this.meshCursor) {\n      const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n      const coneMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n      const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      downArrow.rotation.set(0, 0, Math.PI);\n      downArrow.position.set(0, 1, 0);\n      const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      upArrow.position.set(0, -1, 0);\n      const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n      leftArrow.position.set(1, 0, 0);\n      const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n      rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n      rightArrow.position.set(-1, 0, 0);\n\n      this.meshCursor = new THREE.Object3D();\n      this.meshCursor.add(downArrow);\n      this.meshCursor.add(upArrow);\n      this.meshCursor.add(leftArrow);\n      this.meshCursor.add(rightArrow);\n      this.meshCursor.scale.set(0.1, 0.1, 0.1);\n      this.threeScene.add(this.meshCursor);\n      this.meshCursor.visible = false;\n    }\n  }\n\n  destroyMeshCursor() {\n    if (this.meshCursor) {\n      disposeAllMeshes(this.meshCursor);\n      this.threeScene.remove(this.meshCursor);\n      this.meshCursor = null;\n    }\n  }\n\n  setMeshCursorVisibility(visible) {\n    this.meshCursor.visible = visible;\n  }\n\n  getMeschCursorVisibility() {\n    return this.meshCursor.visible;\n  }\n\n  setMeshCursorPosition(position) {\n    this.meshCursor.position.copy(position);\n  }\n\n  positionAndOrientMeshCursor(position, camera) {\n    this.meshCursor.position.copy(position);\n    this.meshCursor.up.copy(camera.up);\n    this.meshCursor.lookAt(camera.position);\n  }\n\n  setupFocusMarker() {\n    if (!this.focusMarker) {\n      const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n      const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n      focusMarkerMaterial.depthTest = false;\n      focusMarkerMaterial.depthWrite = false;\n      focusMarkerMaterial.transparent = true;\n      this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n    }\n  }\n\n  destroyFocusMarker() {\n    if (this.focusMarker) {\n      disposeAllMeshes(this.focusMarker);\n      this.focusMarker = null;\n    }\n  }\n\n  updateFocusMarker = (function() {\n    const tempPosition = new THREE.Vector3();\n    const tempMatrix = new THREE.Matrix4();\n    const toCamera = new THREE.Vector3();\n\n    return function(position, camera, viewport) {\n      tempMatrix.copy(camera.matrixWorld).invert();\n      tempPosition.copy(position).applyMatrix4(tempMatrix);\n      tempPosition.normalize().multiplyScalar(10);\n      tempPosition.applyMatrix4(camera.matrixWorld);\n      toCamera.copy(camera.position).sub(position);\n      const toCameraDistance = toCamera.length();\n      this.focusMarker.position.copy(position);\n      this.focusMarker.scale.set(\n        toCameraDistance,\n        toCameraDistance,\n        toCameraDistance,\n      );\n      this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n      this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n      this.focusMarker.material.uniformsNeedUpdate = true;\n    };\n  })();\n\n  setFocusMarkerVisibility(visible) {\n    this.focusMarker.visible = visible;\n  }\n\n  setFocusMarkerOpacity(opacity) {\n    this.focusMarker.material.uniforms.opacity.value = opacity;\n    this.focusMarker.material.uniformsNeedUpdate = true;\n  }\n\n  getFocusMarkerOpacity() {\n    return this.focusMarker.material.uniforms.opacity.value;\n  }\n\n  setupControlPlane() {\n    if (!this.controlPlane) {\n      const planeGeometry = new THREE.PlaneGeometry(1, 1);\n      planeGeometry.rotateX(-Math.PI / 2);\n      const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n      planeMaterial.transparent = true;\n      planeMaterial.opacity = 0.6;\n      planeMaterial.depthTest = false;\n      planeMaterial.depthWrite = false;\n      planeMaterial.side = THREE.DoubleSide;\n      const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n      const arrowDir = new THREE.Vector3(0, 1, 0);\n      arrowDir.normalize();\n      const arrowOrigin = new THREE.Vector3(0, 0, 0);\n      const arrowLength = 0.5;\n      const arrowRadius = 0.01;\n      const arrowColor = 0x00dd00;\n      const arrowHelper = new ArrowHelper(\n        arrowDir,\n        arrowOrigin,\n        arrowLength,\n        arrowRadius,\n        arrowColor,\n        0.1,\n        0.03,\n      );\n\n      this.controlPlane = new THREE.Object3D();\n      this.controlPlane.add(planeMesh);\n      this.controlPlane.add(arrowHelper);\n    }\n  }\n\n  destroyControlPlane() {\n    if (this.controlPlane) {\n      disposeAllMeshes(this.controlPlane);\n      this.controlPlane = null;\n    }\n  }\n\n  setControlPlaneVisibility(visible) {\n    this.controlPlane.visible = visible;\n  }\n\n  positionAndOrientControlPlane = (function() {\n    const tempQuaternion = new THREE.Quaternion();\n    const defaultUp = new THREE.Vector3(0, 1, 0);\n\n    return function(position, up) {\n      tempQuaternion.setFromUnitVectors(defaultUp, up);\n      this.controlPlane.position.copy(position);\n      this.controlPlane.quaternion.copy(tempQuaternion);\n    };\n  })();\n\n  addDebugMeshes() {\n    this.debugRoot = this.createDebugMeshes();\n    this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n    this.threeScene.add(this.debugRoot);\n    this.threeScene.add(this.secondaryDebugRoot);\n  }\n\n  destroyDebugMeshes() {\n    for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n      if (debugRoot) {\n        disposeAllMeshes(debugRoot);\n        this.threeScene.remove(debugRoot);\n      }\n    }\n    this.debugRoot = null;\n    this.secondaryDebugRoot = null;\n  }\n\n  createDebugMeshes(renderOrder) {\n    const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n    const debugMeshRoot = new THREE.Object3D();\n\n    const createMesh = (color, position) => {\n      let sphereMesh = new THREE.Mesh(\n        sphereGeometry,\n        SceneHelper.buildDebugMaterial(color),\n      );\n      sphereMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(sphereMesh);\n      sphereMesh.position.fromArray(position);\n    };\n\n    createMesh(0xff0000, [-50, 0, 0]);\n    createMesh(0xff0000, [50, 0, 0]);\n    createMesh(0x00ff00, [0, 0, -50]);\n    createMesh(0x00ff00, [0, 0, 50]);\n    createMesh(0xffaa00, [5, 0, 5]);\n\n    return debugMeshRoot;\n  }\n\n  createSecondaryDebugMeshes(renderOrder) {\n    const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n    const debugMeshRoot = new THREE.Object3D();\n\n    let boxColor = 0xbbbbbb;\n    const createMesh = (position) => {\n      let boxMesh = new THREE.Mesh(\n        boxGeometry,\n        SceneHelper.buildDebugMaterial(boxColor),\n      );\n      boxMesh.renderOrder = renderOrder;\n      debugMeshRoot.add(boxMesh);\n      boxMesh.position.fromArray(position);\n    };\n\n    let separation = 10;\n    createMesh([-separation, 0, -separation]);\n    createMesh([-separation, 0, separation]);\n    createMesh([separation, 0, -separation]);\n    createMesh([separation, 0, separation]);\n\n    return debugMeshRoot;\n  }\n\n  static buildDebugMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: false,\n      depthTest: true,\n      depthWrite: true,\n      side: THREE.FrontSide,\n    });\n    material.extensions.fragDepth = true;\n\n    return material;\n  }\n\n  static buildFocusMarkerMaterial(color) {\n    const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n    const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n    const uniforms = {\n      color: {\n        type: 'v3',\n        value: new THREE.Color(color),\n      },\n      realFocusPosition: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      opacity: {\n        value: 0.0,\n      },\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      side: THREE.FrontSide,\n    });\n\n    return material;\n  }\n\n  dispose() {\n    this.destroyMeshCursor();\n    this.destroyFocusMarker();\n    this.destroyDebugMeshes();\n    this.destroyControlPlane();\n    this.destroyRenderTargetCopyObjects();\n    this.destroySplatRendertarget();\n  }\n}\n","export const SceneRevealMode = {\n  Default: 0,\n  Gradual: 1,\n  Instant: 2,\n};\n","export const SplatRenderMode = {\n  ThreeD: 0,\n  TwoD: 1,\n};\n","import { clamp } from '../../../Util';\nimport { UncompressedSplatArray } from '../../UncompressedSplatArray';\nimport * as THREE from 'three';\n\nexport class GLTFParser {\n  constructor() {}\n\n  decodeSplatData(splatCount, splatBuffers, shBuffers) {\n    // cool to determine the spherical harmonics degree based on the length of shBuffers?\n    const shDegree =\n      shBuffers.length === 3 ? 1 : shBuffers.length === 8 ? 2 : 0;\n\n    const splatArray = new UncompressedSplatArray(shDegree);\n\n    for (let row = 0; row < splatCount; row++) {\n      const newSplat = GLTFParser.parseToUncompressedSplat(\n        splatBuffers,\n        row,\n        shBuffers,\n        shDegree,\n      );\n      splatArray.addSplat(newSplat);\n    }\n    return splatArray;\n  }\n\n  static parseToUncompressedSplat = (function() {\n    const tempRotation = new THREE.Quaternion();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    const SH_C0 = 0.28209479177387814;\n\n    return function(splatBuffers, row, shBuffers, shDegree) {\n      const newSplat = UncompressedSplatArray.createSplat(0);\n\n      // center\n      const positions = splatBuffers.POSITION;\n\n      const x = positions[row * 3];\n      const y = positions[row * 3 + 1];\n      const z = positions[row * 3 + 2];\n\n      newSplat[OFFSET.X] = x;\n      newSplat[OFFSET.Y] = y;\n      newSplat[OFFSET.Z] = z;\n\n      // scale\n      const scales = splatBuffers.scale;\n\n      const sx = Math.exp(scales[row * 3]);\n      const sy = Math.exp(scales[row * 3 + 1]);\n      const sz = Math.exp(scales[row * 3 + 2]);\n\n      newSplat[OFFSET.SCALE0] = sx;\n      newSplat[OFFSET.SCALE1] = sy;\n      newSplat[OFFSET.SCALE2] = sz;\n\n      // rotation\n      const rotations = splatBuffers.rotation;\n      const rx = rotations[row * 4];\n      const ry = rotations[row * 4 + 1];\n      const rz = rotations[row * 4 + 2];\n      const rw = rotations[row * 4 + 3];\n\n      tempRotation.set(rx, ry, rz, rw);\n      tempRotation.normalize();\n\n      newSplat[OFFSET.ROTATION0] = tempRotation.x;\n      newSplat[OFFSET.ROTATION1] = tempRotation.y;\n      newSplat[OFFSET.ROTATION2] = tempRotation.z;\n      newSplat[OFFSET.ROTATION3] = tempRotation.w;\n\n      // opacity\n      const opacities = splatBuffers.opacity;\n      const sh0 = splatBuffers.sh_band_0;\n\n      const opacity = (1 / (1 + Math.exp(-opacities[row]))) * 255;\n      newSplat[OFFSET.OPACITY] = clamp(Math.floor(opacity), 0, 255);\n\n      // base color aka. sh degree 0\n      const dcx = sh0[row * 3];\n      const dcy = sh0[row * 3 + 1];\n      const dcz = sh0[row * 3 + 2];\n\n      newSplat[OFFSET.FDC0] = (0.5 + SH_C0 * dcx) * 255;\n      newSplat[OFFSET.FDC1] = (0.5 + SH_C0 * dcy) * 255;\n      newSplat[OFFSET.FDC2] = (0.5 + SH_C0 * dcz) * 255;\n\n      newSplat[OFFSET.FDC0] = clamp(Math.floor(newSplat[OFFSET.FDC0]), 0, 255);\n      newSplat[OFFSET.FDC1] = clamp(Math.floor(newSplat[OFFSET.FDC1]), 0, 255);\n      newSplat[OFFSET.FDC2] = clamp(Math.floor(newSplat[OFFSET.FDC2]), 0, 255);\n\n      // first order sh bands\n      if (shDegree >= 1) {\n        for (let i = 0; i < 9; i++) {\n          newSplat[OFFSET[`FRC${i}`]] = shBuffers[row * 3 + i];\n        }\n        // second order sh bands\n        if (shDegree >= 2) {\n          for (let i = 9; i < 24; i++) {\n            newSplat[OFFSET[`FRC${i}`]] = shBuffers[row * 3 + i];\n          }\n        }\n      }\n\n      return newSplat;\n    };\n  })();\n\n  parseToUncompressedSplatArray(splatCount, splatBuffers, shBuffers) {\n    return this.decodeSplatData(splatCount, splatBuffers, shBuffers);\n  }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../../SplatBuffer';\nimport { GLTFParser } from './GLTFParser.js';\nimport { delayedExecute } from '../../../Util.js';\n\nfunction finalize(splatData, minimumAlpha = 1) {\n  return SplatBuffer.generateFromUncompressedSplatArrays(\n    [splatData],\n    minimumAlpha,\n    0,\n    new THREE.Vector3(),\n  );\n}\n\nfunction getBaseUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nfunction getFilePaths(gltf, gltfUrl) {\n  const baseUrl = getBaseUrl(gltfUrl);\n\n  try {\n    const attributes = gltf.meshes[0].primitives[0].attributes;\n    const extensions =\n      gltf.meshes[0].primitives[0].extensions\n        .OPF_mesh_primitive_custom_attributes.attributes;\n\n    const attributeMapping = {\n      POSITION: attributes.POSITION,\n      opacity: extensions.opacity,\n      scale: extensions.scale,\n      rotation: extensions.rotation,\n      // 0th order\n      sh_band_0: extensions.sh_band_0,\n      // 1st order\n      sh_band_1_0: extensions.sh_band_1_triplet_0,\n      sh_band_1_1: extensions.sh_band_1_triplet_1,\n      sh_band_1_2: extensions.sh_band_1_triplet_2,\n      // 2nd order\n      sh_band_2_0: extensions.sh_band_2_triplet_0,\n      sh_band_2_1: extensions.sh_band_2_triplet_1,\n      sh_band_2_2: extensions.sh_band_2_triplet_2,\n      sh_band_2_3: extensions.sh_band_2_triplet_3,\n      sh_band_2_4: extensions.sh_band_2_triplet_4,\n    };\n\n    return Object.fromEntries(\n      Object.entries(attributeMapping).map(([key, index]) => {\n        const bufferIndex =\n          gltf.bufferViews[gltf.accessors[index].bufferView].buffer;\n        return [key, baseUrl + gltf.buffers[bufferIndex].uri];\n      }),\n    );\n  } catch (error) {\n    console.error('Error processing GLTF structure:', error);\n    return {};\n  }\n}\n\nexport class GLTFLoader {\n  /**\n   *\n   * @param {import('../../../Viewer.js').Viewer} viewer\n   */\n  constructor(viewer) {\n    this.viewer = viewer;\n  }\n  async loadFromURL(url = 'http://localhost:8081/gaussian/gltf/pcl.gltf') {\n    try {\n      const gltf = await this.fetchGLTF(url);\n      const filePaths = getFilePaths(gltf, url);\n      const splatBuffers = await this.fetchBuffers(filePaths, [\n        'POSITION',\n        'opacity',\n        'scale',\n        'rotation',\n        'sh_band_0',\n      ]);\n      const shBuffers = await this.fetchBuffers(filePaths, [\n        'sh_band_1_0',\n        'sh_band_1_1',\n        'sh_band_1_2',\n        'sh_band_2_0',\n        'sh_band_2_1',\n        'sh_band_2_2',\n        'sh_band_2_3',\n        'sh_band_2_4',\n        // TODO: higher order bands\n      ]);\n      const splatCount = this.getSplatCountFromGLTF(gltf);\n\n      return this.loadFromBufferData(splatCount, splatBuffers, shBuffers);\n    } catch (error) {\n      console.error('Error loading GLTF from URL:', error);\n      return null;\n    }\n  }\n\n  fetch(url) {\n    return this.viewer.fetch(url);\n  }\n\n  async fetchGLTF(url) {\n    try {\n      const response = await this.fetch(url);\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching GLTF:', error);\n      return null;\n    }\n  }\n\n  async fetchBuffers(filePaths, bufferNames) {\n    // const componentTypeMap = {\n    //     5120: Int8Array,\n    //     5121: Uint8Array,\n    //     5122: Int16Array,\n    //     5123: Uint16Array,\n    //     5125: Uint32Array,\n    //     5126: Float32Array\n    // };\n\n    try {\n      const bufferPromises = bufferNames.map(async (name) => {\n        const response = await this.fetch(filePaths[name]);\n        const buffer = await response.arrayBuffer();\n\n        // TODO: check component type rather than assuming float32\n        return { [name]: new Float32Array(buffer) };\n      });\n\n      const bufferData = await Promise.all(bufferPromises);\n      return Object.assign({}, ...bufferData);\n    } catch (error) {\n      console.error('Error fetching buffers:', error);\n      return {};\n    }\n  }\n\n  getSplatCountFromGLTF(gltf) {\n    try {\n      return gltf.accessors[gltf.meshes[0].primitives[0].attributes.POSITION]\n        .count;\n    } catch (error) {\n      console.error('Error determining splat count:', error);\n      return 0;\n    }\n  }\n\n  async loadFromBufferData(splatCount, splatBuffers, shBuffers = []) {\n    return delayedExecute(() =>\n      new GLTFParser().parseToUncompressedSplatArray(\n        splatCount,\n        splatBuffers,\n        shBuffers,\n      ),\n    ).then(finalize);\n  }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n  constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n    this.origin = new THREE.Vector3();\n    this.direction = new THREE.Vector3();\n    this.setParameters(origin, direction);\n  }\n\n  setParameters(origin, direction) {\n    this.origin.copy(origin);\n    this.direction.copy(direction).normalize();\n  }\n\n  boxContainsPoint(box, point, epsilon) {\n    return point.x < box.min.x - epsilon ||\n      point.x > box.max.x + epsilon ||\n      point.y < box.min.y - epsilon ||\n      point.y > box.max.y + epsilon ||\n      point.z < box.min.z - epsilon ||\n      point.z > box.max.z + epsilon ?\n      false :\n      true;\n  }\n\n  intersectBox = (function() {\n    const planeIntersectionPoint = new THREE.Vector3();\n    const planeIntersectionPointArray = [];\n    const originArray = [];\n    const directionArray = [];\n\n    return function(box, outHit) {\n      originArray[0] = this.origin.x;\n      originArray[1] = this.origin.y;\n      originArray[2] = this.origin.z;\n      directionArray[0] = this.direction.x;\n      directionArray[1] = this.direction.y;\n      directionArray[2] = this.direction.z;\n\n      if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n        if (outHit) {\n          outHit.origin.copy(this.origin);\n          outHit.normal.set(0, 0, 0);\n          outHit.distance = -1;\n        }\n        return true;\n      }\n\n      for (let i = 0; i < 3; i++) {\n        if (directionArray[i] == 0.0) continue;\n\n        const hitNormal =\n          i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n        const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n        let multiplier = -Math.sign(directionArray[i]);\n        planeIntersectionPointArray[0] =\n          i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n        let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n        if (toSide * multiplier < 0) {\n          const idx1 = (i + 1) % 3;\n          const idx2 = (i + 2) % 3;\n          planeIntersectionPointArray[2] =\n            (directionArray[idx1] / directionArray[i]) * toSide +\n            originArray[idx1];\n          planeIntersectionPointArray[1] =\n            (directionArray[idx2] / directionArray[i]) * toSide +\n            originArray[idx2];\n          planeIntersectionPoint.set(\n            planeIntersectionPointArray[i],\n            planeIntersectionPointArray[idx2],\n            planeIntersectionPointArray[idx1],\n          );\n          if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n            if (outHit) {\n              outHit.origin.copy(planeIntersectionPoint);\n              outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n              outHit.distance = planeIntersectionPoint\n                .sub(this.origin)\n                .length();\n            }\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n  })();\n\n  intersectSphere = (function() {\n    const toSphereCenterVec = new THREE.Vector3();\n\n    return function(center, radius, outHit) {\n      toSphereCenterVec.copy(center).sub(this.origin);\n      const toClosestApproach = toSphereCenterVec.dot(this.direction);\n      const toClosestApproachSq = toClosestApproach * toClosestApproach;\n      const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n      const diffSq = toSphereCenterSq - toClosestApproachSq;\n      const radiusSq = radius * radius;\n\n      if (diffSq > radiusSq) return false;\n\n      const thc = Math.sqrt(radiusSq - diffSq);\n      const t0 = toClosestApproach - thc;\n      const t1 = toClosestApproach + thc;\n\n      if (t1 < 0) return false;\n      let t = t0 < 0 ? t1 : t0;\n\n      if (outHit) {\n        outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n        outHit.normal.copy(outHit.origin).sub(center).normalize();\n        outHit.distance = t;\n      }\n      return true;\n    };\n  })();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n  constructor() {\n    this.origin = new THREE.Vector3();\n    this.normal = new THREE.Vector3();\n    this.distance = 0;\n    this.splatIndex = 0;\n  }\n\n  set(origin, normal, distance, splatIndex) {\n    this.origin.copy(origin);\n    this.normal.copy(normal);\n    this.distance = distance;\n    this.splatIndex = splatIndex;\n  }\n\n  clone() {\n    const hitClone = new Hit();\n    hitClone.origin.copy(this.origin);\n    hitClone.normal.copy(this.normal);\n    hitClone.distance = this.distance;\n    hitClone.splatIndex = this.splatIndex;\n    return hitClone;\n  }\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\n\nexport class Raycaster {\n  constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n    this.ray = new Ray(origin, direction);\n    this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n  }\n\n  setFromCameraAndScreenPosition = (function() {\n    const ndcCoords = new THREE.Vector2();\n\n    return function(camera, screenPosition, screenDimensions) {\n      ndcCoords.x = (screenPosition.x / screenDimensions.x) * 2.0 - 1.0;\n      ndcCoords.y =\n        ((screenDimensions.y - screenPosition.y) / screenDimensions.y) * 2.0 -\n        1.0;\n      if (camera.isPerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction\n          .set(ndcCoords.x, ndcCoords.y, 0.5)\n          .unproject(camera)\n          .sub(this.ray.origin)\n          .normalize();\n        this.camera = camera;\n      } else if (camera.isOrthographicCamera) {\n        this.ray.origin\n          .set(\n            ndcCoords.x,\n            ndcCoords.y,\n            (camera.near + camera.far) / (camera.near - camera.far),\n          )\n          .unproject(camera);\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        this.camera = camera;\n      } else {\n        throw new Error(\n          'Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type',\n        );\n      }\n    };\n  })();\n\n  intersectSplatMesh = (function() {\n    const toLocal = new THREE.Matrix4();\n    const fromLocal = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const localRay = new Ray();\n    const tempPoint = new THREE.Vector3();\n\n    return function(splatMesh, outHits = []) {\n      const splatTree = splatMesh.getSplatTree();\n\n      if (!splatTree) return;\n\n      for (let s = 0; s < splatTree.subTrees.length; s++) {\n        const subTree = splatTree.subTrees[s];\n\n        fromLocal.copy(splatMesh.matrixWorld);\n        if (splatMesh.dynamicMode) {\n          splatMesh.getSceneTransform(s, sceneTransform);\n          fromLocal.multiply(sceneTransform);\n        }\n        toLocal.copy(fromLocal).invert();\n\n        localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n        localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n        localRay.direction\n          .applyMatrix4(toLocal)\n          .sub(localRay.origin)\n          .normalize();\n\n        const outHitsForSubTree = [];\n        if (subTree.rootNode) {\n          this.castRayAtSplatTreeNode(\n            localRay,\n            splatTree,\n            subTree.rootNode,\n            outHitsForSubTree,\n          );\n        }\n\n        outHitsForSubTree.forEach((hit) => {\n          hit.origin.applyMatrix4(fromLocal);\n          hit.normal.applyMatrix4(fromLocal).normalize();\n          hit.distance = tempPoint\n            .copy(hit.origin)\n            .sub(this.ray.origin)\n            .length();\n        });\n\n        outHits.push(...outHitsForSubTree);\n      }\n\n      outHits.sort((a, b) => {\n        if (a.distance > b.distance) return 1;\n        else return -1;\n      });\n\n      return outHits;\n    };\n  })();\n\n  castRayAtSplatTreeNode = (function() {\n    const tempColor = new THREE.Vector4();\n    const tempCenter = new THREE.Vector3();\n    const tempScale = new THREE.Vector3();\n    const tempRotation = new THREE.Quaternion();\n    const tempHit = new Hit();\n    const scaleEpsilon = 0.0000001;\n\n    const origin = new THREE.Vector3(0, 0, 0);\n    const uniformScaleMatrix = new THREE.Matrix4();\n    const scaleMatrix = new THREE.Matrix4();\n    const rotationMatrix = new THREE.Matrix4();\n    const toSphereSpace = new THREE.Matrix4();\n    const fromSphereSpace = new THREE.Matrix4();\n    const tempRay = new Ray();\n\n    return function(ray, splatTree, node, outHits = []) {\n      if (!ray.intersectBox(node.boundingBox)) {\n        return;\n      }\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        for (let i = 0; i < node.data.indexes.length; i++) {\n          const splatGlobalIndex = node.data.indexes[i];\n          const splatSceneIndex =\n            splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\n          const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\n          if (!splatScene.visible) continue;\n\n          splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n          splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n          splatTree.splatMesh.getSplatScaleAndRotation(\n            splatGlobalIndex,\n            tempScale,\n            tempRotation,\n          );\n\n          if (\n            tempScale.x <= scaleEpsilon ||\n            tempScale.y <= scaleEpsilon ||\n            (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD &&\n              tempScale.z <= scaleEpsilon)\n          ) {\n            continue;\n          }\n\n          if (!this.raycastAgainstTrueSplatEllipsoid) {\n            let radius = tempScale.x + tempScale.y;\n            let componentCount = 2;\n            if (\n              splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD\n            ) {\n              radius += tempScale.z;\n              componentCount = 3;\n            }\n            radius = radius / componentCount;\n            if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              outHits.push(hitClone);\n            }\n          } else {\n            scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n            rotationMatrix.makeRotationFromQuaternion(tempRotation);\n            const uniformScale = Math.log10(tempColor.w) * 2.0;\n            uniformScaleMatrix.makeScale(\n              uniformScale,\n              uniformScale,\n              uniformScale,\n            );\n            fromSphereSpace\n              .copy(uniformScaleMatrix)\n              .multiply(rotationMatrix)\n              .multiply(scaleMatrix);\n            toSphereSpace.copy(fromSphereSpace).invert();\n            tempRay.origin\n              .copy(ray.origin)\n              .sub(tempCenter)\n              .applyMatrix4(toSphereSpace);\n            tempRay.direction\n              .copy(ray.origin)\n              .add(ray.direction)\n              .sub(tempCenter);\n            tempRay.direction\n              .applyMatrix4(toSphereSpace)\n              .sub(tempRay.origin)\n              .normalize();\n            if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n              const hitClone = tempHit.clone();\n              hitClone.splatIndex = splatGlobalIndex;\n              hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n              outHits.push(hitClone);\n            }\n          }\n        }\n      }\n      if (node.children && node.children.length > 0) {\n        for (let child of node.children) {\n          this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n        }\n      }\n      return outHits;\n    };\n  })();\n}\n","import * as THREE from 'three';\nimport { Constants } from '../Constants.js';\n\nexport class SplatMaterial {\n  static buildVertexShaderBase(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    customVars = '',\n  ) {\n    let vertexShaderSource = `\n        precision highp float;\n        #include <common>\n\n        attribute uint splatIndex;\n        uniform highp usampler2D centersColorsTexture;\n        uniform highp sampler2D sphericalHarmonicsTexture;\n        uniform highp sampler2D sphericalHarmonicsTextureR;\n        uniform highp sampler2D sphericalHarmonicsTextureG;\n        uniform highp sampler2D sphericalHarmonicsTextureB;\n\n        uniform highp usampler2D sceneIndexesTexture;\n        uniform vec2 sceneIndexesTextureSize;\n        uniform int sceneCount;\n    `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n            uniform float sceneOpacity[${Constants.MaxScenes}];\n            uniform int sceneVisibility[${Constants.MaxScenes}];\n        `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\n        `;\n    }\n\n    vertexShaderSource += `\n        ${customVars}\n        uniform vec2 focal;\n        uniform float orthoZoom;\n        uniform int orthographicMode;\n        uniform int pointCloudModeEnabled;\n        uniform float inverseFocalAdjustment;\n        uniform vec2 viewport;\n        uniform vec2 basisViewport;\n        uniform vec2 centersColorsTextureSize;\n        uniform int sphericalHarmonicsDegree;\n        uniform vec2 sphericalHarmonicsTextureSize;\n        uniform int sphericalHarmonics8BitMode;\n        uniform int sphericalHarmonicsMultiTextureMode;\n        uniform float visibleRegionRadius;\n        uniform float visibleRegionFadeStartRadius;\n        uniform float firstRenderTime;\n        uniform float currentTime;\n        uniform int fadeInComplete;\n        uniform vec3 sceneCenter;\n        uniform float splatScale;\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];\n\n        varying vec4 vColor;\n        varying vec2 vUv;\n        varying vec2 vPosition;\n        varying float vZ;\n        varying float vSplatIndex;\n        varying vec4 vVertex;\n\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\n        \n            return mat3(\n                1. - 2. * (y * y + z * z),\n                2. * (x * y + w * z),\n                2. * (x * z - w * y),\n                2. * (x * y - w * z),\n                1. - 2. * (x * x + z * z),\n                2. * (y * z + w * x),\n                2. * (x * z + w * y),\n                2. * (y * z - w * x),\n                1. - 2. * (x * x + y * y)\n            );\n        }\n\n        const float sqrt8 = sqrt(8.0);\n        const float minAlpha = 1.0 / 255.0;\n\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\n        vec4 uintToRGBAVec (uint u) {\n           uvec4 urgba = mask4 & u;\n           urgba = urgba >> shift4;\n           vec4 rgba = vec4(urgba) * encodeNorm4;\n           return rgba;\n        }\n\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\n            vec2 samplerUV = vec2(0.0, 0.0);\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\n            samplerUV.y = float(floor(d)) / dimensions.y;\n            samplerUV.x = fract(d);\n            return samplerUV;\n        }\n\n        const float SH_C1 = 0.4886025119029199f;\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\n\n        void main () {\n\n            vSplatIndex = float(splatIndex);\n\n            uint oddOffset = splatIndex & uint(0x00000001);\n            uint doubleOddOffset = oddOffset * uint(2);\n            bool isEven = oddOffset == uint(0);\n            uint nearestEvenIndex = splatIndex - oddOffset;\n            float fOddOffset = float(oddOffset);\n\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n\n            uint sceneIndex = uint(0);\n            if (sceneCount > 1) {\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\n            }\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\n                int sceneVisible = sceneVisibility[sceneIndex];\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n            `;\n    }\n\n    if (dynamicMode) {\n      vertexShaderSource += `\n                mat4 transform = transforms[sceneIndex];\n                mat4 transformModelViewMatrix = modelViewMatrix * transform;\n            `;\n    } else {\n      vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n    }\n\n    vertexShaderSource += `\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\n\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n            vec4 clipCenter = projectionMatrix * viewCenter;\n\n            float clip = 1.2 * clipCenter.w;\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                return;\n            }\n\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n            vPosition = position.xy;\n            vColor = uintToRGBAVec(sampledCenterColor.r);\n        `;\n\n    // Proceed to sampling and rendering 1st degree spherical harmonics\n    if (maxSphericalHarmonicsDegree >= 1) {\n      vertexShaderSource += `   \n            if (sphericalHarmonicsDegree >= 1) {\n            `;\n\n      if (dynamicMode) {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\n                `;\n      } else {\n        vertexShaderSource += `\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\n                `;\n      }\n\n      vertexShaderSource += `\n                vec3 sh1;\n                vec3 sh2;\n                vec3 sh3;\n            `;\n\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n                    vec3 sh4;\n                    vec3 sh5;\n                    vec3 sh6;\n                    vec3 sh7;\n                    vec3 sh8;\n                `;\n      }\n\n      // Determining how to sample spherical harmonics textures to get the coefficients for calculations for a given degree\n      // depends on how many total degrees (maxSphericalHarmonicsDegree) are present in the textures. This is because that\n      // number affects how they are packed in the textures, and therefore the offset & stride required to access them.\n\n      // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n      if (maxSphericalHarmonicsDegree === 1) {\n        vertexShaderSource += `\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\n                    } else {\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\n                    }\n                `;\n        // Sample spherical harmonics textures with 2 degrees worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\n      } else if (maxSphericalHarmonicsDegree === 2) {\n        vertexShaderSource += `\n                    vec4 sampledSH0123;\n                    vec4 sampledSH4567;\n                    vec4 sampledSH891011;\n\n                    vec4 sampledSH0123R;\n                    vec4 sampledSH0123G;\n                    vec4 sampledSH0123B;\n\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\n                        sh1 = sampledSH0123.rgb;\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\n                    } else {\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\n                        sh1 = vec3(sampledSH0123R.rgb);\n                        sh2 = vec3(sampledSH0123G.rgb);\n                        sh3 = vec3(sampledSH0123B.rgb);\n                    }\n                `;\n      }\n\n      // Perform 1st degree spherical harmonics calculations\n      vertexShaderSource += `\n                    if (sphericalHarmonics8BitMode == 1) {\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                    }\n                    float x = worldViewDir.x;\n                    float y = worldViewDir.y;\n                    float z = worldViewDir.z;\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\n            `;\n\n      // Proceed to sampling and rendering 2nd degree spherical harmonics\n      if (maxSphericalHarmonicsDegree >= 2) {\n        vertexShaderSource += `\n                    if (sphericalHarmonicsDegree >= 2) {\n                        float xx = x * x;\n                        float yy = y * y;\n                        float zz = z * z;\n                        float xy = x * y;\n                        float yz = y * z;\n                        float xz = x * z;\n                `;\n\n        // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\n        // and store in sh4, sh5, sh6, sh7, and sh8\n        if (maxSphericalHarmonicsDegree === 2) {\n          vertexShaderSource += `\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\n                            sh4 = sampledSH891011.gba;\n                            sh5 = sampledSH12131415.rgb;\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\n                            sh8 = sampledSH20212223.gba;\n                        } else {\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\n                            sh6 = vec3(sampledSH4567G.rgb);\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\n                            sh8 = vec3(sampledSH4567B.gba);\n                        }\n                    `;\n        }\n\n        // Perform 2nd degree spherical harmonics calculations\n        vertexShaderSource += `\n                        if (sphericalHarmonics8BitMode == 1) {\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\n                        }\n\n                        vColor.rgb +=\n                            (SH_C2[0] * xy) * sh4 +\n                            (SH_C2[1] * yz) * sh5 +\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\n                            (SH_C2[3] * xz) * sh7 +\n                            (SH_C2[4] * (xx - yy)) * sh8;\n                    }\n                `;\n      }\n\n      vertexShaderSource += `\n\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\n            }\n\n            `;\n    }\n\n    return vertexShaderSource;\n  }\n\n  static getVertexShaderFadeIn() {\n    return `\n            if (fadeInComplete == 0) {\n                float opacityAdjust = 1.0;\n                float centerDist = length(splatCenter - sceneCenter);\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                float fadeDistance = 0.75;\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                        distanceLoadFadeInFactor;\n                opacityAdjust *= distanceLoadFadeInFactor;\n                vColor.a *= opacityAdjust;\n            }\n        `;\n  }\n\n  static getUniforms(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    maxSphericalHarmonicsDegree = 0,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n  ) {\n    const uniforms = {\n      sceneCenter: {\n        type: 'v3',\n        value: new THREE.Vector3(),\n      },\n      fadeInComplete: {\n        type: 'i',\n        value: 0,\n      },\n      orthographicMode: {\n        type: 'i',\n        value: 0,\n      },\n      visibleRegionFadeStartRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      visibleRegionRadius: {\n        type: 'f',\n        value: 0.0,\n      },\n      currentTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      firstRenderTime: {\n        type: 'f',\n        value: 0.0,\n      },\n      centersColorsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTexture: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureR: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureG: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonicsTextureB: {\n        type: 't',\n        value: null,\n      },\n      sphericalHarmonics8BitCompressionRangeMin: {\n        type: 'f',\n        value: [],\n      },\n      sphericalHarmonics8BitCompressionRangeMax: {\n        type: 'f',\n        value: [],\n      },\n      focal: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      orthoZoom: {\n        type: 'f',\n        value: 1.0,\n      },\n      inverseFocalAdjustment: {\n        type: 'f',\n        value: 1.0,\n      },\n      viewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      basisViewport: {\n        type: 'v2',\n        value: new THREE.Vector2(),\n      },\n      debugColor: {\n        type: 'v3',\n        value: new THREE.Color(),\n      },\n      centersColorsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonicsDegree: {\n        type: 'i',\n        value: maxSphericalHarmonicsDegree,\n      },\n      sphericalHarmonicsTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sphericalHarmonics8BitMode: {\n        type: 'i',\n        value: 0,\n      },\n      sphericalHarmonicsMultiTextureMode: {\n        type: 'i',\n        value: 0,\n      },\n      splatScale: {\n        type: 'f',\n        value: splatScale,\n      },\n      pointCloudModeEnabled: {\n        type: 'i',\n        value: pointCloudModeEnabled ? 1 : 0,\n      },\n      sceneIndexesTexture: {\n        type: 't',\n        value: null,\n      },\n      sceneIndexesTextureSize: {\n        type: 'v2',\n        value: new THREE.Vector2(1024, 1024),\n      },\n      sceneCount: {\n        type: 'i',\n        value: 1,\n      },\n    };\n    for (let i = 0; i < Constants.MaxScenes; i++) {\n      uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(\n        -Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n      uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(\n        Constants.SphericalHarmonics8BitCompressionRange / 2.0,\n      );\n    }\n\n    if (enableOptionalEffects) {\n      const sceneOpacity = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneOpacity.push(1.0);\n      }\n      uniforms['sceneOpacity'] = {\n        type: 'f',\n        value: sceneOpacity,\n      };\n\n      const sceneVisibility = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        sceneVisibility.push(1);\n      }\n      uniforms['sceneVisibility'] = {\n        type: 'i',\n        value: sceneVisibility,\n      };\n    }\n\n    if (dynamicMode) {\n      const transformMatrices = [];\n      for (let i = 0; i < Constants.MaxScenes; i++) {\n        transformMatrices.push(new THREE.Matrix4());\n      }\n      uniforms['transforms'] = {\n        type: 'mat4',\n        value: transformMatrices,\n      };\n    }\n\n    return uniforms;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial3D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n   *                              different resolution than that of their training\n   * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 2048,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 covariancesTextureSize;\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D covariancesTextureHalfFloat;\n            uniform int covariancesAreHalfFloat;\n\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\n                vec2 r = unpackHalf2x16(val.r);\n                vec2 g = unpackHalf2x16(val.g);\n                vec2 b = unpackHalf2x16(val.b);\n\n                first = vec4(r.x, r.y, g.x, g.y);\n                second = vec4(b.x, b.y, 0.0, 0.0);\n            }\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(\n      antialiased,\n      enableOptionalEffects,\n      maxScreenSpaceSplatSize,\n    );\n    const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['covariancesTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n    uniforms['covariancesTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesTextureHalfFloat'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['covariancesAreHalfFloat'] = {\n      type: 'i',\n      value: 0,\n    };\n\n    uniforms['uSetID'] = {\n      type: 'f',\n      value: 0,\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection(\n    antialiased,\n    enableOptionalEffects,\n    maxScreenSpaceSplatSize,\n  ) {\n    let vertexShaderSource = `\n\n            vec4 sampledCovarianceA;\n            vec4 sampledCovarianceB;\n            vec3 cov3D_M11_M12_M13;\n            vec3 cov3D_M22_M23_M33;\n            if (covariancesAreHalfFloat == 0) {\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\n                                                                            covariancesTextureSize));\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\n                                                                            covariancesTextureSize));\n\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\n            } else {\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\n            }\n        \n            // Construct the 3D covariance matrix\n            mat3 Vrk = mat3(\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n            );\n\n            mat3 J;\n            if (orthographicMode == 1) {\n                // Since the projection is linear, we don't need an approximation\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                0.0, orthoZoom, 0.0,\n                                0.0, 0.0, 0.0));\n            } else {\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n            }\n\n            // Concatenate the projection approximation with the model-view transformation\n            mat3 W = transpose(mat3(transformModelViewMatrix));\n            mat3 T = W * J;\n\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n            mat3 cov2Dm = transpose(T) * Vrk * T;\n            `;\n\n    if (antialiased) {\n      vertexShaderSource += `\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\n                if (vColor.a < minAlpha) return;\n            `;\n    } else {\n      vertexShaderSource += `\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n            `;\n    }\n\n    vertexShaderSource += `\n\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n            // need cov2Dm[1][0] because it is a symetric matrix.\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n            // so that we can determine the 2D basis for the splat. This is done using the method described\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\n            // equal to scaling them by sqrt(8) standard deviations.\n            //\n            // This is a different approach than in the original work at INRIA. In that work they compute the\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n            float a = cov2Dv.x;\n            float d = cov2Dv.z;\n            float b = cov2Dv.y;\n            float D = a * d - b * b;\n            float trace = a + d;\n            float traceOver2 = 0.5 * trace;\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n            float eigenValue1 = traceOver2 + term2;\n            float eigenValue2 = traceOver2 - term2;\n\n            if (pointCloudModeEnabled == 1) {\n                eigenValue1 = eigenValue2 = 0.2;\n            }\n\n            if (eigenValue2 <= 0.0) return;\n\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n            // since the eigen vectors are orthogonal, we derive the second one from the first\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(\n              maxScreenSpaceSplatSize,\n            )}.0);\n            `;\n\n    if (enableOptionalEffects) {\n      vertexShaderSource += `\n                vColor.a *= splatOpacityFromScene;\n            `;\n    }\n\n    vertexShaderSource += `\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                             basisViewport * 2.0 * inverseFocalAdjustment;\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            vZ = ndcCenter.z;\n            gl_Position = quadPos;\n            vVertex = gl_Position;\n\n            // Scale the position data we send to the fragment shader\n            vPosition *= sqrt8;\n        `;\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n            uniform float uSetID;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying float vZ;\n            varying float vSplatIndex;\n            varying vec4 vVertex;\n        `;\n\n    fragmentShaderSource += `\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                vec3 color = vColor.rgb;\n\n                if(uSetID > 0.5) {\n                  \n                  if(opacity < 0.1) discard;\n\n                  vec2 screenData = vVertex.xy / vVertex.w;\n                  screenData = 0.5 * screenData + 0.5;\n\n                  float index = float(vSplatIndex);\n\n                  gl_FragColor = vec4(index, 0., 0., 1.);\n                  return;\n\n                }\n\n                gl_FragColor = vec4(color, opacity);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\nimport { SplatMaterial } from './SplatMaterial.js';\n\nexport class SplatMaterial2D {\n  /**\n   * Build the Three.js material that is used to render the splats.\n   * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n   *                             that the splat count might change\n   * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\n   *                                        such as opacity adjustment. Default is false for performance reasons.\n   * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n   * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n   * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\n   * @return {THREE.ShaderMaterial}\n   */\n  static build(\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    splatScale = 1.0,\n    pointCloudModeEnabled = false,\n    maxSphericalHarmonicsDegree = 0,\n  ) {\n    const customVertexVars = `\n            uniform vec2 scaleRotationsTextureSize;\n            uniform highp sampler2D scaleRotationsTexture;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n        `;\n\n    let vertexShaderSource = SplatMaterial.buildVertexShaderBase(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      customVertexVars,\n    );\n    vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\n    const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\n\n    const uniforms = SplatMaterial.getUniforms(\n      dynamicMode,\n      enableOptionalEffects,\n      maxSphericalHarmonicsDegree,\n      splatScale,\n      pointCloudModeEnabled,\n    );\n\n    uniforms['scaleRotationsTexture'] = {\n      type: 't',\n      value: null,\n    };\n    uniforms['scaleRotationsTextureSize'] = {\n      type: 'v2',\n      value: new THREE.Vector2(1024, 1024),\n    };\n\n    const material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertexShaderSource,\n      fragmentShader: fragmentShaderSource,\n      transparent: true,\n      alphaTest: 1.0,\n      blending: THREE.NormalBlending,\n      depthTest: true,\n      depthWrite: false,\n      side: THREE.DoubleSide,\n    });\n\n    return material;\n  }\n\n  static buildVertexShaderProjection() {\n    // Original CUDA code for calculating splat-to-screen transformation, for reference\n    /*\n            glm::mat3 R = quat_to_rotmat(rot);\n            glm::mat3 S = scale_to_mat(scale, mod);\n            glm::mat3 L = R * S;\n\n            // center of Gaussians in the camera coordinate\n            glm::mat3x4 splat2world = glm::mat3x4(\n                glm::vec4(L[0], 0.0),\n                glm::vec4(L[1], 0.0),\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\n            );\n\n            glm::mat4 world2ndc = glm::mat4(\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\n            );\n\n            glm::mat3x4 ndc2pix = glm::mat3x4(\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\n            );\n\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\n        */\n\n    // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\n    // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\n    let vertexShaderSource = `\n\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset, scaleRotationsTextureSize));\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\n\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\n                                    vec3(scaleRotationB.gba) * fOddOffset;\n\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\n                            0.0, scaleRotation123.g, 0.0,\n                            0.0, 0.0, scaleRotation123.b);\n            \n            mat3 L = R * S;\n\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\n\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\n                                    vec4(0.0, 0.0, 0.0, 1.0));\n\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\n        `;\n\n    // Original CUDA code for projection to 2D, for reference\n    /*\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\n\n            // Compute AABB\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\n            float distance = sumf3(T3 * T3 * temp_point);\n            float3 f = (1 / distance) * temp_point;\n            if (distance == 0.0) return false;\n\n            point_image = {\n                sumf3(f * T0 * T3),\n                sumf3(f * T1 * T3)\n            };\n\n            float2 temp = {\n                sumf3(f * T0 * T0),\n                sumf3(f * T1 * T1)\n            };\n            float2 half_extend = point_image * point_image - temp;\n            extent = sqrtf2(maxf2(1e-4, half_extend));\n            return true;\n        */\n\n    // Computing the bounding box of the 2D Gaussian and its center\n    // The center of the bounding box is used to create a low pass filter.\n    // This code is based off the reference implementation and creates an AABB aligned\n    // with the screen for the quad to be rendered.\n    const referenceQuadGeneration = `\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\n\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\n            vec3 f = (1.0 / distance) * tempPoint;\n            if (abs(distance) < 0.00001) return;\n\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\n            vec2 pointImage = vec2(pointImageX, pointImageY);\n\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\n            vec2 temp = vec2(tempX, tempY);\n\n            vec2 halfExtend = pointImage * pointImage - temp;\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\n            float radius = max(extent.x, extent.y);\n\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\n\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            gl_Position = quadPos;\n\n            vT = T;\n            vQuadCenter = pointImage;\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n        `;\n\n    const useRefImplementation = false;\n    if (useRefImplementation) {\n      vertexShaderSource += referenceQuadGeneration;\n    } else {\n      // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\n      // This is a different approach than the reference implementation, similar to how the rendering of\n      // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\n      // (smaller than a pixel), then revert to the reference implementation.\n      vertexShaderSource += `\n\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\n                                        vec4(L[1], 0.0),\n                                        vec4(L[2], 0.0),\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\n\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\n\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\n                tempPoint1 /= tempPoint1.w;\n\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\n                tempPoint2 /= tempPoint2.w;\n\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\n                center /= center.w;\n\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\n\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\n\n                const float minPix = 1.;\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\n                    ${referenceQuadGeneration}\n                } else {\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                    gl_Position = quadPos;\n\n                    vT = T;\n                    vQuadCenter = center.xy;\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\n                }\n            `;\n    }\n\n    vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\n    vertexShaderSource += `}`;\n\n    return vertexShaderSource;\n  }\n\n  static buildFragmentShader() {\n    // Original CUDA code for splat intersection, for reference\n    /*\n            const float2 xy = collected_xy[j];\n            const float3 Tu = collected_Tu[j];\n            const float3 Tv = collected_Tv[j];\n            const float3 Tw = collected_Tw[j];\n            float3 k = pix.x * Tw - Tu;\n            float3 l = pix.y * Tw - Tv;\n            float3 p = cross(k, l);\n            if (p.z == 0.0) continue;\n            float2 s = {p.x / p.z, p.y / p.z};\n            float rho3d = (s.x * s.x + s.y * s.y);\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\n\n            // compute intersection and depth\n            float rho = min(rho3d, rho2d);\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\n            if (depth < near_n) continue;\n            float4 nor_o = collected_normal_opacity[j];\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n            float opa = nor_o.w;\n\n            float power = -0.5f * rho;\n            if (power > 0.0f)\n                continue;\n\n            // Eq. (2) from 3D Gaussian splatting paper.\n            // Obtain alpha by multiplying with Gaussian opacity\n            // and its exponential falloff from mean.\n            // Avoid numerical instabilities (see paper appendix).\n            float alpha = min(0.99f, opa * exp(power));\n            if (alpha < 1.0f / 255.0f)\n                continue;\n            float test_T = T * (1 - alpha);\n            if (test_T < 0.0001f)\n            {\n                done = true;\n                continue;\n            }\n\n            float w = alpha * T;\n        */\n    let fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n            varying vec2 vPosition;\n            varying mat3 vT;\n            varying vec2 vQuadCenter;\n            varying vec2 vFragCoord;\n\n            void main () {\n\n                const float FilterInvSquare = 2.0;\n                const float near_n = 0.2;\n                const float T = 1.0;\n\n                vec2 xy = vQuadCenter;\n                vec3 Tu = vT[0];\n                vec3 Tv = vT[1];\n                vec3 Tw = vT[2];\n                vec3 k = vFragCoord.x * Tw - Tu;\n                vec3 l = vFragCoord.y * Tw - Tv;\n                vec3 p = cross(k, l);\n                if (p.z == 0.0) discard;\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\n                float rho3d = (s.x * s.x + s.y * s.y); \n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \n\n                // compute intersection and depth\n                float rho = min(rho3d, rho2d);\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \n                if (depth < near_n) discard;\n                //  vec4 nor_o = collected_normal_opacity[j];\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\n                float opa = vColor.a;\n\n                float power = -0.5f * rho;\n                if (power > 0.0f) discard;\n\n                // Eq. (2) from 3D Gaussian splatting paper.\n                // Obtain alpha by multiplying with Gaussian opacity\n                // and its exponential falloff from mean.\n                // Avoid numerical instabilities (see paper appendix). \n                float alpha = min(0.99f, opa * exp(power));\n                if (alpha < 1.0f / 255.0f) discard;\n                float test_T = T * (1.0 - alpha);\n                if (test_T < 0.0001)discard;\n\n                float w = alpha * T;\n                gl_FragColor = vec4(vColor.rgb, w);\n            }\n        `;\n\n    return fragmentShaderSource;\n  }\n}\n","import * as THREE from 'three';\n\nexport class SplatGeometry {\n  /**\n   * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n   * vertices for a single quad as well as an attribute buffer for the splat indexes.\n   * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n   * @return {THREE.InstancedBufferGeometry}\n   */\n  static build(maxSplatCount) {\n    const baseGeometry = new THREE.BufferGeometry();\n    baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n    // Vertices for the instanced quad\n    const positionsArray = new Float32Array(4 * 3);\n    const positions = new THREE.BufferAttribute(positionsArray, 3);\n    baseGeometry.setAttribute('position', positions);\n    positions.setXYZ(0, -1.0, -1.0, 0.0);\n    positions.setXYZ(1, -1.0, 1.0, 0.0);\n    positions.setXYZ(2, 1.0, 1.0, 0.0);\n    positions.setXYZ(3, 1.0, -1.0, 0.0);\n    positions.needsUpdate = true;\n\n    const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n    // Splat index buffer\n    const splatIndexArray = new Uint32Array(maxSplatCount);\n    const splatIndexes = new THREE.InstancedBufferAttribute(\n      splatIndexArray,\n      1,\n      false,\n    );\n    splatIndexes.setUsage(THREE.DynamicDrawUsage);\n    geometry.setAttribute('splatIndex', splatIndexes);\n\n    geometry.instanceCount = 0;\n\n    return geometry;\n  }\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene extends THREE.Object3D {\n  constructor(\n    splatBuffer,\n    position = new THREE.Vector3(),\n    quaternion = new THREE.Quaternion(),\n    scale = new THREE.Vector3(1, 1, 1),\n    minimumAlpha = 1,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    super();\n    this.splatBuffer = splatBuffer;\n    this.position.copy(position);\n    this.quaternion.copy(quaternion);\n    this.scale.copy(scale);\n    this.transform = new THREE.Matrix4();\n    this.minimumAlpha = minimumAlpha;\n    this.opacity = opacity;\n    this.visible = visible;\n  }\n\n  copyTransformData(otherScene) {\n    this.position.copy(otherScene.position);\n    this.quaternion.copy(otherScene.quaternion);\n    this.scale.copy(otherScene.scale);\n    this.transform.copy(otherScene.transform);\n  }\n\n  updateTransform(dynamicMode) {\n    if (dynamicMode) {\n      if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\n      this.transform.copy(this.matrixWorld);\n    } else {\n      if (this.matrixAutoUpdate) this.updateMatrix();\n      this.transform.copy(this.matrix);\n    }\n  }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n  static idGen = 0;\n\n  constructor(min, max, depth, id) {\n    this.min = new THREE.Vector3().copy(min);\n    this.max = new THREE.Vector3().copy(max);\n    this.boundingBox = new THREE.Box3(this.min, this.max);\n    this.center = new THREE.Vector3()\n      .copy(this.max)\n      .sub(this.min)\n      .multiplyScalar(0.5)\n      .add(this.min);\n    this.depth = depth;\n    this.children = [];\n    this.data = null;\n    this.id = id || SplatTreeNode.idGen++;\n  }\n}\n\nclass SplatSubTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.sceneDimensions = new THREE.Vector3();\n    this.sceneMin = new THREE.Vector3();\n    this.sceneMax = new THREE.Vector3();\n    this.rootNode = null;\n    this.nodesWithIndexes = [];\n    this.splatMesh = null;\n  }\n\n  static convertWorkerSubTreeNode(workerSubTreeNode) {\n    const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n    const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n    const convertedNode = new SplatTreeNode(\n      minVector,\n      maxVector,\n      workerSubTreeNode.depth,\n      workerSubTreeNode.id,\n    );\n    if (workerSubTreeNode.data.indexes) {\n      convertedNode.data = {\n        indexes: [],\n      };\n      for (let index of workerSubTreeNode.data.indexes) {\n        convertedNode.data.indexes.push(index);\n      }\n    }\n    if (workerSubTreeNode.children) {\n      for (let child of workerSubTreeNode.children) {\n        convertedNode.children.push(\n          SplatSubTree.convertWorkerSubTreeNode(child),\n        );\n      }\n    }\n    return convertedNode;\n  }\n\n  static convertWorkerSubTree(workerSubTree, splatMesh) {\n    const convertedSubTree = new SplatSubTree(\n      workerSubTree.maxDepth,\n      workerSubTree.maxCentersPerNode,\n    );\n    convertedSubTree.sceneMin = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMin,\n    );\n    convertedSubTree.sceneMax = new THREE.Vector3().fromArray(\n      workerSubTree.sceneMax,\n    );\n\n    convertedSubTree.splatMesh = splatMesh;\n    convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(\n      workerSubTree.rootNode,\n    );\n\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    convertedSubTree.nodesWithIndexes = [];\n    visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n      if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n        convertedSubTree.nodesWithIndexes.push(node);\n      }\n    });\n\n    return convertedSubTree;\n  }\n}\n\nfunction createSplatTreeWorker(self) {\n  let WorkerSplatTreeNodeIDGen = 0;\n\n  class WorkerBox3 {\n    constructor(min, max) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n    }\n\n    containsPoint(point) {\n      return (\n        point[0] >= this.min[0] &&\n        point[0] <= this.max[0] &&\n        point[1] >= this.min[1] &&\n        point[1] <= this.max[1] &&\n        point[2] >= this.min[2] &&\n        point[2] <= this.max[2]\n      );\n    }\n  }\n\n  class WorkerSplatSubTree {\n    constructor(maxDepth, maxCentersPerNode) {\n      this.maxDepth = maxDepth;\n      this.maxCentersPerNode = maxCentersPerNode;\n      this.sceneDimensions = [];\n      this.sceneMin = [];\n      this.sceneMax = [];\n      this.rootNode = null;\n      this.addedIndexes = {};\n      this.nodesWithIndexes = [];\n      this.splatMesh = null;\n      this.disposed = false;\n    }\n  }\n\n  class WorkerSplatTreeNode {\n    constructor(min, max, depth, id) {\n      this.min = [min[0], min[1], min[2]];\n      this.max = [max[0], max[1], max[2]];\n      this.center = [\n        (max[0] - min[0]) * 0.5 + min[0],\n        (max[1] - min[1]) * 0.5 + min[1],\n        (max[2] - min[2]) * 0.5 + min[2],\n      ];\n      this.depth = depth;\n      this.children = [];\n      this.data = null;\n      this.id = id || WorkerSplatTreeNodeIDGen++;\n    }\n  }\n\n  processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n    const splatCount = node.data.indexes.length;\n\n    if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n      const newIndexes = [];\n      for (let i = 0; i < node.data.indexes.length; i++) {\n        if (!tree.addedIndexes[node.data.indexes[i]]) {\n          newIndexes.push(node.data.indexes[i]);\n          tree.addedIndexes[node.data.indexes[i]] = true;\n        }\n      }\n      node.data.indexes = newIndexes;\n      node.data.indexes.sort((a, b) => {\n        if (a > b) return 1;\n        else return -1;\n      });\n      tree.nodesWithIndexes.push(node);\n      return;\n    }\n\n    const nodeDimensions = [\n      node.max[0] - node.min[0],\n      node.max[1] - node.min[1],\n      node.max[2] - node.min[2],\n    ];\n    const halfDimensions = [\n      nodeDimensions[0] * 0.5,\n      nodeDimensions[1] * 0.5,\n      nodeDimensions[2] * 0.5,\n    ];\n    const nodeCenter = [\n      node.min[0] + halfDimensions[0],\n      node.min[1] + halfDimensions[1],\n      node.min[2] + halfDimensions[2],\n    ];\n\n    const childrenBounds = [\n      // top section, clockwise from upper-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n        [\n          nodeCenter[0],\n          nodeCenter[1] + halfDimensions[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n\n      // bottom section, clockwise from lower-left (looking from above, +Y)\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2] - halfDimensions[2],\n        ],\n        [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n      ),\n      new WorkerBox3(\n        [nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n        [\n          nodeCenter[0] + halfDimensions[0],\n          nodeCenter[1],\n          nodeCenter[2] + halfDimensions[2],\n        ],\n      ),\n      new WorkerBox3(\n        [\n          nodeCenter[0] - halfDimensions[0],\n          nodeCenter[1] - halfDimensions[1],\n          nodeCenter[2],\n        ],\n        [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]],\n      ),\n    ];\n\n    const splatCounts = [];\n    const baseIndexes = [];\n    for (let i = 0; i < childrenBounds.length; i++) {\n      splatCounts[i] = 0;\n      baseIndexes[i] = [];\n    }\n\n    const center = [0, 0, 0];\n    for (let i = 0; i < splatCount; i++) {\n      const splatGlobalIndex = node.data.indexes[i];\n      const centerBase = indexToCenter[splatGlobalIndex];\n      center[0] = sceneCenters[centerBase];\n      center[1] = sceneCenters[centerBase + 1];\n      center[2] = sceneCenters[centerBase + 2];\n      for (let j = 0; j < childrenBounds.length; j++) {\n        if (childrenBounds[j].containsPoint(center)) {\n          splatCounts[j]++;\n          baseIndexes[j].push(splatGlobalIndex);\n        }\n      }\n    }\n\n    for (let i = 0; i < childrenBounds.length; i++) {\n      const childNode = new WorkerSplatTreeNode(\n        childrenBounds[i].min,\n        childrenBounds[i].max,\n        node.depth + 1,\n      );\n      childNode.data = {\n        indexes: baseIndexes[i],\n      };\n      node.children.push(childNode);\n    }\n\n    node.data = {};\n    for (let child of node.children) {\n      processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n    }\n    return;\n  };\n\n  const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n    const sceneMin = [0, 0, 0];\n    const sceneMax = [0, 0, 0];\n    const indexes = [];\n    const centerCount = Math.floor(sceneCenters.length / 4);\n    for (let i = 0; i < centerCount; i++) {\n      const base = i * 4;\n      const x = sceneCenters[base];\n      const y = sceneCenters[base + 1];\n      const z = sceneCenters[base + 2];\n      const index = Math.round(sceneCenters[base + 3]);\n      if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n      if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n      if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n      if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n      if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n      if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n      indexes.push(index);\n    }\n    const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n    subTree.sceneMin = sceneMin;\n    subTree.sceneMax = sceneMax;\n    subTree.rootNode = new WorkerSplatTreeNode(\n      subTree.sceneMin,\n      subTree.sceneMax,\n      0,\n    );\n    subTree.rootNode.data = {\n      indexes: indexes,\n    };\n\n    return subTree;\n  };\n\n  function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n    const indexToCenter = [];\n    for (let sceneCenters of allCenters) {\n      const centerCount = Math.floor(sceneCenters.length / 4);\n      for (let i = 0; i < centerCount; i++) {\n        const base = i * 4;\n        const index = Math.round(sceneCenters[base + 3]);\n        indexToCenter[index] = base;\n      }\n    }\n    const subTrees = [];\n    for (let sceneCenters of allCenters) {\n      const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n      subTrees.push(subTree);\n      processSplatTreeNode(\n        subTree,\n        subTree.rootNode,\n        indexToCenter,\n        sceneCenters,\n      );\n    }\n    self.postMessage({\n      subTrees: subTrees,\n    });\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.process) {\n      createSplatTree(\n        e.data.process.centers,\n        e.data.process.maxDepth,\n        e.data.process.maxCentersPerNode,\n      );\n    }\n  };\n}\n\nfunction workerProcessCenters(\n  splatTreeWorker,\n  centers,\n  transferBuffers,\n  maxDepth,\n  maxCentersPerNode,\n) {\n  splatTreeWorker.postMessage(\n    {\n      process: {\n        centers: centers,\n        maxDepth: maxDepth,\n        maxCentersPerNode: maxCentersPerNode,\n      },\n    },\n    transferBuffers,\n  );\n}\n\nfunction checkAndCreateWorker() {\n  const splatTreeWorker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n  return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n  constructor(maxDepth, maxCentersPerNode) {\n    this.maxDepth = maxDepth;\n    this.maxCentersPerNode = maxCentersPerNode;\n    this.subTrees = [];\n    this.splatMesh = null;\n  }\n\n  dispose() {\n    this.diposeSplatTreeWorker();\n    this.disposed = true;\n  }\n\n  diposeSplatTreeWorker() {\n    if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n    this.splatTreeWorker = null;\n  }\n\n  /**\n   * Construct this instance of SplatTree from an instance of SplatMesh.\n   *\n   * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n   * @param {function} filterFunc Optional function to filter out unwanted splats.\n   * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                   builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {undefined}\n   */\n  processSplatMesh = function(\n    splatMesh,\n    filterFunc = () => true,\n    onIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n    this.splatMesh = splatMesh;\n    this.subTrees = [];\n    const center = new THREE.Vector3();\n\n    const addCentersForScene = (splatOffset, splatCount) => {\n      const sceneCenters = new Float32Array(splatCount * 4);\n      let addedCount = 0;\n      for (let i = 0; i < splatCount; i++) {\n        const globalSplatIndex = i + splatOffset;\n        if (filterFunc(globalSplatIndex)) {\n          splatMesh.getSplatCenter(globalSplatIndex, center);\n          const addBase = addedCount * 4;\n          sceneCenters[addBase] = center.x;\n          sceneCenters[addBase + 1] = center.y;\n          sceneCenters[addBase + 2] = center.z;\n          sceneCenters[addBase + 3] = globalSplatIndex;\n          addedCount++;\n        }\n      }\n      return sceneCenters;\n    };\n\n    return new Promise((resolve) => {\n      const checkForEarlyExit = () => {\n        if (this.disposed) {\n          this.diposeSplatTreeWorker();\n          resolve();\n          return true;\n        }\n        return false;\n      };\n\n      if (onIndexesUpload) onIndexesUpload(false);\n\n      delayedExecute(() => {\n        if (checkForEarlyExit()) return;\n\n        const allCenters = [];\n        if (splatMesh.dynamicMode) {\n          let splatOffset = 0;\n          for (let s = 0; s < splatMesh.scenes.length; s++) {\n            const scene = splatMesh.getScene(s);\n            const splatCount = scene.splatBuffer.getSplatCount();\n            const sceneCenters = addCentersForScene(splatOffset, splatCount);\n            allCenters.push(sceneCenters);\n            splatOffset += splatCount;\n          }\n        } else {\n          const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n          allCenters.push(sceneCenters);\n        }\n\n        this.splatTreeWorker.onmessage = (e) => {\n          if (checkForEarlyExit()) return;\n\n          if (e.data.subTrees) {\n            if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n            delayedExecute(() => {\n              if (checkForEarlyExit()) return;\n\n              for (let workerSubTree of e.data.subTrees) {\n                const convertedSubTree = SplatSubTree.convertWorkerSubTree(\n                  workerSubTree,\n                  splatMesh,\n                );\n                this.subTrees.push(convertedSubTree);\n              }\n              this.diposeSplatTreeWorker();\n\n              if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n              delayedExecute(() => {\n                resolve();\n              });\n            });\n          }\n        };\n\n        delayedExecute(() => {\n          if (checkForEarlyExit()) return;\n          if (onIndexesUpload) onIndexesUpload(true);\n          const transferBuffers = allCenters.map((array) => array.buffer);\n          workerProcessCenters(\n            this.splatTreeWorker,\n            allCenters,\n            transferBuffers,\n            this.maxDepth,\n            this.maxCentersPerNode,\n          );\n        });\n      });\n    });\n  };\n\n  countLeaves() {\n    let leafCount = 0;\n    this.visitLeaves(() => {\n      leafCount++;\n    });\n\n    return leafCount;\n  }\n\n  visitLeaves(visitFunc) {\n    const visitLeavesFromNode = (node, visitFunc) => {\n      if (node.children.length === 0) visitFunc(node);\n      for (let child of node.children) {\n        visitLeavesFromNode(child, visitFunc);\n      }\n    };\n\n    for (let subTree of this.subTrees) {\n      visitLeavesFromNode(subTree.rootNode, visitFunc);\n    }\n  }\n}\n","function WebGLExtensions(gl) {\n  const extensions = {};\n\n  function getExtension(name) {\n    if (extensions[name] !== undefined) {\n      return extensions[name];\n    }\n\n    let extension;\n\n    switch (name) {\n      case 'WEBGL_depth_texture':\n        extension =\n          gl.getExtension('WEBGL_depth_texture') ||\n          gl.getExtension('MOZ_WEBGL_depth_texture') ||\n          gl.getExtension('WEBKIT_WEBGL_depth_texture');\n        break;\n\n      case 'EXT_texture_filter_anisotropic':\n        extension =\n          gl.getExtension('EXT_texture_filter_anisotropic') ||\n          gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n          gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n        break;\n\n      case 'WEBGL_compressed_texture_s3tc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n        break;\n\n      case 'WEBGL_compressed_texture_pvrtc':\n        extension =\n          gl.getExtension('WEBGL_compressed_texture_pvrtc') ||\n          gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n        break;\n\n      default:\n        extension = gl.getExtension(name);\n    }\n\n    extensions[name] = extension;\n\n    return extension;\n  }\n\n  return {\n    has: function(name) {\n      return getExtension(name) !== null;\n    },\n\n    init: function(capabilities) {\n      if (capabilities.isWebGL2) {\n        getExtension('EXT_color_buffer_float');\n        getExtension('WEBGL_clip_cull_distance');\n      } else {\n        getExtension('WEBGL_depth_texture');\n        getExtension('OES_texture_float');\n        getExtension('OES_texture_half_float');\n        getExtension('OES_texture_half_float_linear');\n        getExtension('OES_standard_derivatives');\n        getExtension('OES_element_index_uint');\n        getExtension('OES_vertex_array_object');\n        getExtension('ANGLE_instanced_arrays');\n      }\n\n      getExtension('OES_texture_float_linear');\n      getExtension('EXT_color_buffer_half_float');\n      getExtension('WEBGL_multisampled_render_to_texture');\n    },\n\n    get: function(name) {\n      const extension = getExtension(name);\n\n      if (extension === null) {\n        console.warn(\n          'THREE.WebGLRenderer: ' + name + ' extension not supported.',\n        );\n      }\n\n      return extension;\n    },\n  };\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities(gl, extensions, parameters) {\n  let maxAnisotropy;\n\n  function getMaxAnisotropy() {\n    if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n    if (extensions.has('EXT_texture_filter_anisotropic') === true) {\n      const extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n    } else {\n      maxAnisotropy = 0;\n    }\n\n    return maxAnisotropy;\n  }\n\n  function getMaxPrecision(precision) {\n    if (precision === 'highp') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision >\n          0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n          .precision > 0\n      ) {\n        return 'highp';\n      }\n\n      precision = 'mediump';\n    }\n\n    if (precision === 'mediump') {\n      if (\n        gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0 &&\n        gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n          .precision > 0\n      ) {\n        return 'mediump';\n      }\n    }\n\n    return 'lowp';\n  }\n\n  const isWebGL2 =\n    typeof WebGL2RenderingContext !== 'undefined' &&\n    gl.constructor.name === 'WebGL2RenderingContext';\n\n  let precision =\n    parameters.precision !== undefined ? parameters.precision : 'highp';\n  const maxPrecision = getMaxPrecision(precision);\n\n  if (maxPrecision !== precision) {\n    console.warn(\n      'THREE.WebGLRenderer:',\n      precision,\n      'not supported, using',\n      maxPrecision,\n      'instead.',\n    );\n    precision = maxPrecision;\n  }\n\n  const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\n\n  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n  const vertexTextures = maxVertexTextures > 0;\n  const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n  const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n  const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\n\n  return {\n    isWebGL2: isWebGL2,\n\n    drawBuffers: drawBuffers,\n\n    getMaxAnisotropy: getMaxAnisotropy,\n    getMaxPrecision: getMaxPrecision,\n\n    precision: precision,\n    logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n    maxTextures: maxTextures,\n    maxVertexTextures: maxVertexTextures,\n    maxTextureSize: maxTextureSize,\n    maxCubemapSize: maxCubemapSize,\n\n    maxAttributes: maxAttributes,\n    maxVertexUniforms: maxVertexUniforms,\n    maxVaryings: maxVaryings,\n    maxFragmentUniforms: maxFragmentUniforms,\n\n    vertexTextures: vertexTextures,\n    floatFragmentTextures: floatFragmentTextures,\n    floatVertexTextures: floatVertexTextures,\n\n    maxSamples: maxSamples,\n  };\n}\n\nexport { WebGLCapabilities };\n","import * as THREE from 'three';\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\nimport { SplatGeometry } from './SplatGeometry.js';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from '../splattree/SplatTree.js';\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\nimport { Constants } from '../Constants.js';\nimport { SceneRevealMode } from '../SceneRevealMode.js';\nimport { SplatRenderMode } from '../SplatRenderMode.js';\nimport { LogLevel } from '../LogLevel.js';\nimport {\n  clamp,\n  getSphericalHarmonicsComponentCountForDegree,\n} from '../Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\nconst MAX_TEXTURE_TEXELS = 16777216;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n  constructor(\n    splatRenderMode = SplatRenderMode.ThreeD,\n    dynamicMode = false,\n    enableOptionalEffects = false,\n    halfPrecisionCovariancesOnGPU = false,\n    devicePixelRatio = 1,\n    enableDistancesComputationOnGPU = true,\n    integerBasedDistancesComputation = false,\n    antialiased = false,\n    maxScreenSpaceSplatSize = 1024,\n    logLevel = LogLevel.None,\n    sphericalHarmonicsDegree = 0,\n    sceneFadeInRateMultiplier = 1.0,\n  ) {\n    super(dummyGeometry, dummyMaterial);\n\n    // Reference to a Three.js renderer\n    this.renderer = undefined;\n\n    // Determine how the splats are rendered\n    this.splatRenderMode = splatRenderMode;\n\n    // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n    // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n    // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n    // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n    this.dynamicMode = dynamicMode;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = enableOptionalEffects;\n\n    // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n\n    // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n    this.devicePixelRatio = devicePixelRatio;\n\n    // Use a transform feedback to calculate splat distances from the camera\n    this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n\n    // Use a faster integer-based approach for calculating splat distances from the camera\n    this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = antialiased;\n\n    // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n\n    // The verbosity of console logging\n    this.logLevel = logLevel;\n\n    // Degree 0 means no spherical harmonics\n    this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\n    this.minSphericalHarmonicsDegree = 0;\n\n    this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\n\n    // The individual splat scenes stored in this splat mesh, each containing their own transform\n    this.scenes = [];\n\n    // Special octree tailored to SplatMesh instances\n    this.splatTree = null;\n    this.baseSplatTree = null;\n\n    // Cache textures and the intermediate data used to populate them\n    this.splatDataTextures = {};\n\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = false;\n    this.lastRenderer = null;\n    this.visible = false;\n\n    // This is used to define how to modify the material\n    this.setupIDMode = this.setupIDMaterialMode.bind(this);\n  }\n\n  setupIDMaterialMode = (status) => {\n    this.material.uniforms.uSetID.value = Number(status);\n    this.material.transparent = !status;\n  };\n\n  /**\n   * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n   * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n   * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n   * @param {Array<object>} sceneOptions Array of options objects: {\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @return {Array<THREE.Matrix4>}\n   */\n  static buildScenes(parentObject, splatBuffers, sceneOptions) {\n    const scenes = [];\n    scenes.length = splatBuffers.length;\n    for (let i = 0; i < splatBuffers.length; i++) {\n      const splatBuffer = splatBuffers[i];\n      const options = sceneOptions[i] || {};\n      let positionArray = options['position'] || [0, 0, 0];\n      let rotationArray = options['rotation'] || [0, 0, 0, 1];\n      let scaleArray = options['scale'] || [1, 1, 1];\n      const position = new THREE.Vector3().fromArray(positionArray);\n      const rotation = new THREE.Quaternion().fromArray(rotationArray);\n      const scale = new THREE.Vector3().fromArray(scaleArray);\n      const scene = SplatMesh.createScene(\n        splatBuffer,\n        position,\n        rotation,\n        scale,\n        options.splatAlphaRemovalThreshold || 1,\n        options.opacity,\n        options.visible,\n      );\n      parentObject.add(scene);\n      scenes[i] = scene;\n    }\n    return scenes;\n  }\n\n  static createScene(\n    splatBuffer,\n    position,\n    rotation,\n    scale,\n    minimumAlpha,\n    opacity = 1.0,\n    visible = true,\n  ) {\n    return new SplatScene(\n      splatBuffer,\n      position,\n      rotation,\n      scale,\n      minimumAlpha,\n      opacity,\n      visible,\n    );\n  }\n\n  /**\n   * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n   * local data within a single scene.\n   * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n   * @return {object}\n   */\n  static buildSplatIndexMaps(splatBuffers) {\n    const localSplatIndexMap = [];\n    const sceneIndexMap = [];\n    let totalSplatCount = 0;\n    for (let s = 0; s < splatBuffers.length; s++) {\n      const splatBuffer = splatBuffers[s];\n      const maxSplatCount = splatBuffer.getMaxSplatCount();\n      for (let i = 0; i < maxSplatCount; i++) {\n        localSplatIndexMap[totalSplatCount] = i;\n        sceneIndexMap[totalSplatCount] = s;\n        totalSplatCount++;\n      }\n    }\n    return {\n      localSplatIndexMap,\n      sceneIndexMap,\n    };\n  }\n\n  /**\n   * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n   * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {SplatTree}\n   */\n  buildSplatTree = function(\n    minAlphas = [],\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n  ) {\n    return new Promise((resolve) => {\n      this.disposeSplatTree();\n      // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n      // be configured on a per-scene basis\n      this.baseSplatTree = new SplatTree(8, 1000);\n      const buildStartTime = performance.now();\n      const splatColor = new THREE.Vector4();\n      this.baseSplatTree\n        .processSplatMesh(\n          this,\n          (splatIndex) => {\n            this.getSplatColor(splatIndex, splatColor);\n            const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n            const minAlpha = minAlphas[sceneIndex] || 1;\n            return splatColor.w >= minAlpha;\n          },\n          onSplatTreeIndexesUpload,\n          onSplatTreeConstruction,\n        )\n        .then(() => {\n          const buildTime = performance.now() - buildStartTime;\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('SplatTree build: ' + buildTime + ' ms');\n          }\n          if (this.disposed) {\n            resolve();\n          } else {\n            this.splatTree = this.baseSplatTree;\n            this.baseSplatTree = null;\n\n            let leavesWithVertices = 0;\n            let avgSplatCount = 0;\n            let maxSplatCount = 0;\n            let nodeCount = 0;\n\n            this.splatTree.visitLeaves((node) => {\n              const nodeSplatCount = node.data.indexes.length;\n              if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n              }\n            });\n            if (this.logLevel >= LogLevel.Info) {\n              console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n              console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n              avgSplatCount = avgSplatCount / nodeCount;\n              console.log(`Avg splat count per node: ${avgSplatCount}`);\n              console.log(`Total splat count: ${this.getSplatCount()}`);\n            }\n            resolve();\n          }\n        });\n    });\n  };\n\n  /**\n   * Construct this instance of SplatMesh.\n   * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n   * @param {Array<object>} sceneOptions Dynamic options for each scene {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   * }\n   * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n   *                                      says to keep the transform from the existing scene.\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n   *                                            builder worker starts and finishes.\n   * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n   *                                           the format produced by the splat tree builder worker starts and ends.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  build(\n    splatBuffers,\n    sceneOptions,\n    keepSceneTransforms = true,\n    finalBuild = false,\n    onSplatTreeIndexesUpload,\n    onSplatTreeConstruction,\n    preserveVisibleRegion = true,\n  ) {\n    this.sceneOptions = sceneOptions;\n    this.finalBuild = finalBuild;\n\n    const maxSplatCount =\n      SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n    const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\n    if (keepSceneTransforms) {\n      for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n        const newScene = newScenes[i];\n        const existingScene = this.getScene(i);\n        newScene.copyTransformData(existingScene);\n      }\n    }\n    this.scenes = newScenes;\n\n    let minSphericalHarmonicsDegree = 3;\n    for (let splatBuffer of splatBuffers) {\n      const splatBufferSphericalHarmonicsDegree =\n        splatBuffer.getMinSphericalHarmonicsDegree();\n      if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\n        minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\n      }\n    }\n    this.minSphericalHarmonicsDegree = Math.min(\n      minSphericalHarmonicsDegree,\n      this.sphericalHarmonicsDegree,\n    );\n\n    let splatBuffersChanged = false;\n    if (splatBuffers.length !== this.lastBuildScenes.length) {\n      splatBuffersChanged = true;\n    } else {\n      for (let i = 0; i < splatBuffers.length; i++) {\n        const splatBuffer = splatBuffers[i];\n        if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n          splatBuffersChanged = true;\n          break;\n        }\n      }\n    }\n\n    let isUpdateBuild = true;\n    if (\n      this.scenes.length !== 1 ||\n      this.lastBuildSceneCount !== this.scenes.length ||\n      this.lastBuildMaxSplatCount !== maxSplatCount ||\n      splatBuffersChanged\n    ) {\n      isUpdateBuild = false;\n    }\n\n    if (!isUpdateBuild) {\n      this.boundingBox = new THREE.Box3();\n      if (!preserveVisibleRegion) {\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.firstRenderTime = -1;\n      }\n      this.lastBuildScenes = [];\n      this.lastBuildSplatCount = 0;\n      this.lastBuildMaxSplatCount = 0;\n      this.disposeMeshData();\n      this.geometry = SplatGeometry.build(maxSplatCount);\n      if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n        this.material = SplatMaterial3D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.antialiased,\n          this.maxScreenSpaceSplatSize,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.minSphericalHarmonicsDegree,\n        );\n      } else {\n        this.material = SplatMaterial2D.build(\n          this.dynamicMode,\n          this.enableOptionalEffects,\n          this.splatScale,\n          this.pointCloudModeEnabled,\n          this.minSphericalHarmonicsDegree,\n        );\n      }\n\n      const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n      this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n      this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n    }\n\n    const splatBufferSplatCount = this.getSplatCount(true);\n    if (this.enableDistancesComputationOnGPU) {\n      this.setupDistancesComputationTransformFeedback();\n    }\n    const dataUpdateResults =\n      this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\n\n    for (let i = 0; i < this.scenes.length; i++) {\n      this.lastBuildScenes[i] = this.scenes[i];\n    }\n    this.lastBuildSplatCount = splatBufferSplatCount;\n    this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n    this.lastBuildSceneCount = this.scenes.length;\n\n    if (finalBuild && this.scenes.length > 0) {\n      this.buildSplatTree(\n        sceneOptions.map((options) => options.splatAlphaRemovalThreshold || 1),\n        onSplatTreeIndexesUpload,\n        onSplatTreeConstruction,\n      ).then(() => {\n        if (this.onSplatTreeReadyCallback) {\n          this.onSplatTreeReadyCallback(this.splatTree);\n        }\n        this.onSplatTreeReadyCallback = null;\n      });\n    }\n\n    this.visible = this.scenes.length > 0;\n\n    return dataUpdateResults;\n  }\n\n  freeIntermediateSplatData() {\n    const deleteTextureData = (texture) => {\n      delete texture.source.data;\n      delete texture.image;\n      texture.onUpdate = null;\n    };\n\n    delete this.splatDataTextures.baseData.covariances;\n    delete this.splatDataTextures.baseData.centers;\n    delete this.splatDataTextures.baseData.colors;\n    delete this.splatDataTextures.baseData.sphericalHarmonics;\n\n    delete this.splatDataTextures.centerColors.data;\n    delete this.splatDataTextures.covariances.data;\n    if (this.splatDataTextures.sphericalHarmonics) {\n      delete this.splatDataTextures.sphericalHarmonics.data;\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      delete this.splatDataTextures.sceneIndexes.data;\n    }\n\n    this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    this.splatDataTextures.centerColors.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.centerColors.texture);\n    };\n\n    this.splatDataTextures.covariances.texture.needsUpdate = true;\n    this.splatDataTextures.covariances.texture.onUpdate = () => {\n      deleteTextureData(this.splatDataTextures.covariances.texture);\n    };\n\n    if (this.splatDataTextures.sphericalHarmonics) {\n      if (this.splatDataTextures.sphericalHarmonics.texture) {\n        this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\n        this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\n          deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\n        };\n      } else {\n        this.splatDataTextures.sphericalHarmonics.textures.forEach(\n          (texture) => {\n            texture.needsUpdate = true;\n            texture.onUpdate = () => {\n              deleteTextureData(texture);\n            };\n          },\n        );\n      }\n    }\n    if (this.splatDataTextures.sceneIndexes) {\n      this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\n      this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\n        deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\n      };\n    }\n  }\n  /**\n   * Dispose all resources held by the splat mesh\n   */\n  dispose() {\n    this.disposeMeshData();\n    this.disposeTextures();\n    this.disposeSplatTree();\n    if (this.enableDistancesComputationOnGPU) {\n      if (this.computeDistancesOnGPUSyncTimeout) {\n        clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n        this.computeDistancesOnGPUSyncTimeout = null;\n      }\n      this.disposeDistancesComputationGPUResources();\n    }\n    this.scenes = [];\n    this.distancesTransformFeedback = {\n      id: null,\n      vertexShader: null,\n      fragmentShader: null,\n      program: null,\n      centersBuffer: null,\n      sceneIndexesBuffer: null,\n      outDistancesBuffer: null,\n      centersLoc: -1,\n      modelViewProjLoc: -1,\n      sceneIndexesLoc: -1,\n      transformsLocs: [],\n    };\n    this.renderer = null;\n\n    this.globalSplatIndexToLocalSplatIndexMap = [];\n    this.globalSplatIndexToSceneIndexMap = [];\n\n    this.lastBuildSplatCount = 0;\n    this.lastBuildScenes = [];\n    this.lastBuildMaxSplatCount = 0;\n    this.lastBuildSceneCount = 0;\n    this.firstRenderTime = -1;\n    this.finalBuild = false;\n\n    this.webGLUtils = null;\n\n    this.boundingBox = new THREE.Box3();\n    this.calculatedSceneCenter = new THREE.Vector3();\n    this.maxSplatDistanceFromSceneCenter = 0;\n    this.visibleRegionBufferRadius = 0;\n    this.visibleRegionRadius = 0;\n    this.visibleRegionFadeStartRadius = 0;\n    this.visibleRegionChanging = false;\n\n    this.splatScale = 1.0;\n    this.pointCloudModeEnabled = false;\n\n    this.disposed = true;\n    this.lastRenderer = null;\n    this.visible = false;\n  }\n\n  /**\n   * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n   */\n  disposeMeshData() {\n    if (this.geometry && this.geometry !== dummyGeometry) {\n      this.geometry.dispose();\n      this.geometry = null;\n    }\n    if (this.material) {\n      this.material.dispose();\n      this.material = null;\n    }\n  }\n\n  disposeTextures() {\n    for (let textureKey in this.splatDataTextures) {\n      if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n        const textureContainer = this.splatDataTextures[textureKey];\n        if (textureContainer.texture) {\n          textureContainer.texture.dispose();\n          textureContainer.texture = null;\n        }\n      }\n    }\n    this.splatDataTextures = null;\n  }\n\n  disposeSplatTree() {\n    if (this.splatTree) {\n      this.splatTree.dispose();\n      this.splatTree = null;\n    }\n    if (this.baseSplatTree) {\n      this.baseSplatTree.dispose();\n      this.baseSplatTree = null;\n    }\n  }\n\n  getSplatTree() {\n    return this.splatTree;\n  }\n\n  onSplatTreeReady(callback) {\n    this.onSplatTreeReadyCallback = callback;\n  }\n\n  /**\n   * Get copies of data that are necessary for splat distance computation: splat center positions and splat\n   * scene indexes (necessary for applying dynamic scene transformations during distance computation)\n   * @param {*} start The index at which to start copying data\n   * @param {*} end  The index at which to stop copying data\n   * @return {object}\n   */\n  getDataForDistancesComputation(start, end) {\n    const centers = this.integerBasedDistancesComputation ?\n      this.getIntegerCenters(start, end, true) :\n      this.getFloatCenters(start, end, true);\n    const sceneIndexes = this.getSceneIndexes(start, end);\n    return {\n      centers,\n      sceneIndexes,\n    };\n  }\n\n  /**\n   * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   * @return {object}\n   */\n  refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\n    const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n      updateStart,\n      splatCount - 1,\n    );\n    if (this.enableDistancesComputationOnGPU) {\n      this.refreshGPUBuffersForDistancesComputation(\n        centers,\n        sceneIndexes,\n        sinceLastBuildOnly,\n      );\n    }\n    return {\n      from: updateStart,\n      to: splatCount - 1,\n      count: splatCount - updateStart,\n      centers: centers,\n      sceneIndexes: sceneIndexes,\n    };\n  }\n\n  /**\n   * Update the GPU buffers that are used for computing splat distances on the GPU.\n   * @param {Array<number>} centers Splat center positions\n   * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshGPUBuffersForDistancesComputation(\n    centers,\n    sceneIndexes,\n    sinceLastBuildOnly = false,\n  ) {\n    const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\n    this.updateGPUCentersBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      centers,\n      offset,\n    );\n    this.updateGPUTransformIndexesBufferForDistancesComputation(\n      sinceLastBuildOnly,\n      sceneIndexes,\n      offset,\n    );\n  }\n\n  /**\n   * Refresh data textures with data from the splat buffers for this mesh.\n   * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\n   */\n  refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const fromSplat = this.lastBuildSplatCount;\n    const toSplat = splatCount - 1;\n\n    if (!sinceLastBuildOnly) {\n      this.setupDataTextures();\n      this.updateBaseDataFromSplatBuffers();\n    } else {\n      this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\n    }\n\n    this.updateDataTexturesFromBaseData(fromSplat, toSplat);\n    this.updateVisibleRegion(sinceLastBuildOnly);\n  }\n\n  setupDataTextures() {\n    const maxSplatCount = this.getMaxSplatCount();\n    const splatCount = this.getSplatCount(true);\n\n    this.disposeTextures();\n\n    const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\n      const texSize = new THREE.Vector2(4096, 1024);\n      while (\n        texSize.x * texSize.y * elementsPerTexel <\n        maxSplatCount * elementsPerSplat\n      ) {\n        texSize.y *= 2;\n      }\n      return texSize;\n    };\n\n    const getCovariancesElementsPertexelStored = (compressionLevel) => {\n      return compressionLevel >= 1 ?\n        COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED :\n        COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\n    };\n\n    const getCovariancesInitialTextureSpecs = (compressionLevel) => {\n      const elementsPerTexelStored =\n        getCovariancesElementsPertexelStored(compressionLevel);\n      const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\n      return { elementsPerTexelStored, texSize };\n    };\n\n    let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\n    const scaleRotationCompressionLevel = 0;\n    const shCompressionLevel =\n      this.getTargetSphericalHarmonicsCompressionLevel();\n\n    let covariances;\n    let scales;\n    let rotations;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      const initialCovTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      if (\n        initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y >\n          MAX_TEXTURE_TEXELS &&\n        covarianceCompressionLevel === 0\n      ) {\n        covarianceCompressionLevel = 1;\n      }\n      covariances = new Float32Array(\n        maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT,\n      );\n    } else {\n      scales = new Float32Array(maxSplatCount * 3);\n      rotations = new Float32Array(maxSplatCount * 4);\n    }\n\n    const centers = new Float32Array(maxSplatCount * 3);\n    const colors = new Uint8Array(maxSplatCount * 4);\n\n    let SphericalHarmonicsArrayType = Float32Array;\n    if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\n    else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\n    const shComponentCount = getSphericalHarmonicsComponentCountForDegree(\n      this.minSphericalHarmonicsDegree,\n    );\n    const shData = this.minSphericalHarmonicsDegree ?\n      new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) :\n      undefined;\n\n    // set up centers/colors data texture\n    const centersColsTexSize = computeDataTextureSize(\n      CENTER_COLORS_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedCentersCols = new Uint32Array(\n      centersColsTexSize.x *\n        centersColsTexSize.y *\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n    );\n    SplatMesh.updateCenterColorsPaddedData(\n      0,\n      splatCount - 1,\n      centers,\n      colors,\n      paddedCentersCols,\n    );\n\n    const centersColsTex = new THREE.DataTexture(\n      paddedCentersCols,\n      centersColsTexSize.x,\n      centersColsTexSize.y,\n      THREE.RGBAIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    centersColsTex.internalFormat = 'RGBA32UI';\n    centersColsTex.needsUpdate = true;\n    this.material.uniforms.centersColorsTexture.value = centersColsTex;\n    this.material.uniforms.centersColorsTextureSize.value.copy(\n      centersColsTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n\n    this.splatDataTextures = {\n      baseData: {\n        covariances: covariances,\n        scales: scales,\n        rotations: rotations,\n        centers: centers,\n        colors: colors,\n        sphericalHarmonics: shData,\n      },\n      centerColors: {\n        data: paddedCentersCols,\n        texture: centersColsTex,\n        size: centersColsTexSize,\n      },\n    };\n\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      // set up covariances data texture\n\n      const covTexSpecs = getCovariancesInitialTextureSpecs(\n        covarianceCompressionLevel,\n      );\n      const covariancesElementsPerTexelStored =\n        covTexSpecs.elementsPerTexelStored;\n      const covTexSize = covTexSpecs.texSize;\n\n      let CovariancesDataType =\n        covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\n      const covariancesElementsPerTexelAllocated =\n        covarianceCompressionLevel >= 1 ?\n          COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\n          COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\n      const covariancesTextureData = new CovariancesDataType(\n        covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated,\n      );\n\n      if (covarianceCompressionLevel === 0) {\n        covariancesTextureData.set(covariances);\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          covariances,\n          covariancesTextureData,\n          0,\n          0,\n          covariances.length,\n        );\n      }\n\n      let covTex;\n      if (covarianceCompressionLevel >= 1) {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        covTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\n      } else {\n        covTex = new THREE.DataTexture(\n          covariancesTextureData,\n          covTexSize.x,\n          covTexSize.y,\n          THREE.RGBAFormat,\n          THREE.FloatType,\n        );\n        this.material.uniforms.covariancesTexture.value = covTex;\n\n        // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\n        const dummyTex = new THREE.DataTexture(\n          new Uint32Array(32),\n          2,\n          2,\n          THREE.RGBAIntegerFormat,\n          THREE.UnsignedIntType,\n        );\n        dummyTex.internalFormat = 'RGBA32UI';\n        this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\n        dummyTex.needsUpdate = true;\n      }\n      covTex.needsUpdate = true;\n\n      this.material.uniforms.covariancesAreHalfFloat.value =\n        covarianceCompressionLevel >= 1 ? 1 : 0;\n      this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n      this.splatDataTextures['covariances'] = {\n        data: covariancesTextureData,\n        texture: covTex,\n        size: covTexSize,\n        compressionLevel: covarianceCompressionLevel,\n        elementsPerTexelStored: covariancesElementsPerTexelStored,\n        elementsPerTexelAllocated: covariancesElementsPerTexelAllocated,\n      };\n    } else {\n      // set up scale & rotations data texture\n      const elementsPerSplat = 6;\n      const scaleRotationsTexSize = computeDataTextureSize(\n        SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n        elementsPerSplat,\n      );\n      let ScaleRotationsDataType =\n        scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\n      let scaleRotationsTextureType =\n        scaleRotationCompressionLevel >= 1 ?\n          THREE.HalfFloatType :\n          THREE.FloatType;\n      const paddedScaleRotations = new ScaleRotationsDataType(\n        scaleRotationsTexSize.x *\n          scaleRotationsTexSize.y *\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n      );\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        0,\n        splatCount - 1,\n        scales,\n        rotations,\n        paddedScaleRotations,\n      );\n\n      const scaleRotationsTex = new THREE.DataTexture(\n        paddedScaleRotations,\n        scaleRotationsTexSize.x,\n        scaleRotationsTexSize.y,\n        THREE.RGBAFormat,\n        scaleRotationsTextureType,\n      );\n      scaleRotationsTex.needsUpdate = true;\n      this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\n      this.material.uniforms.scaleRotationsTextureSize.value.copy(\n        scaleRotationsTexSize,\n      );\n\n      this.splatDataTextures['scaleRotations'] = {\n        data: paddedScaleRotations,\n        texture: scaleRotationsTex,\n        size: scaleRotationsTexSize,\n        compressionLevel: scaleRotationCompressionLevel,\n      };\n    }\n\n    if (shData) {\n      const shTextureType =\n        shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\n\n      let paddedSHComponentCount = shComponentCount;\n      if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n      const shElementsPerTexel = this.minSphericalHarmonicsDegree === 2 ? 4 : 2;\n      const texelFormat =\n        shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\n      let shTexSize = computeDataTextureSize(\n        shElementsPerTexel,\n        paddedSHComponentCount,\n      );\n\n      // Use one texture for all spherical harmonics data\n      if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\n        const paddedSHArraySize =\n          shTexSize.x * shTexSize.y * shElementsPerTexel;\n        const paddedSHArray = new SphericalHarmonicsArrayType(\n          paddedSHArraySize,\n        );\n        for (let c = 0; c < splatCount; c++) {\n          const srcBase = shComponentCount * c;\n          const destBase = paddedSHComponentCount * c;\n          for (let i = 0; i < shComponentCount; i++) {\n            paddedSHArray[destBase + i] = shData[srcBase + i];\n          }\n        }\n\n        const shTexture = new THREE.DataTexture(\n          paddedSHArray,\n          shTexSize.x,\n          shTexSize.y,\n          texelFormat,\n          shTextureType,\n        );\n        shTexture.needsUpdate = true;\n        this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\n        this.splatDataTextures['sphericalHarmonics'] = {\n          componentCount: shComponentCount,\n          paddedComponentCount: paddedSHComponentCount,\n          data: paddedSHArray,\n          textureCount: 1,\n          texture: shTexture,\n          size: shTexSize,\n          compressionLevel: shCompressionLevel,\n          elementsPerTexel: shElementsPerTexel,\n        };\n        // Use three textures for spherical harmonics data, one per color channel\n      } else {\n        const shComponentCountPerChannel = shComponentCount / 3;\n        paddedSHComponentCount = shComponentCountPerChannel;\n        if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\n        shTexSize = computeDataTextureSize(\n          shElementsPerTexel,\n          paddedSHComponentCount,\n        );\n\n        const paddedSHArraySize =\n          shTexSize.x * shTexSize.y * shElementsPerTexel;\n        const textureUniforms = [\n          this.material.uniforms.sphericalHarmonicsTextureR,\n          this.material.uniforms.sphericalHarmonicsTextureG,\n          this.material.uniforms.sphericalHarmonicsTextureB,\n        ];\n        const paddedSHArrays = [];\n        const shTextures = [];\n        for (let t = 0; t < 3; t++) {\n          const paddedSHArray = new SphericalHarmonicsArrayType(\n            paddedSHArraySize,\n          );\n          paddedSHArrays.push(paddedSHArray);\n          for (let c = 0; c < splatCount; c++) {\n            const srcBase = shComponentCount * c;\n            const destBase = paddedSHComponentCount * c;\n            if (shComponentCountPerChannel >= 3) {\n              for (let i = 0; i < 3; i++) {\n                paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n              }\n              if (shComponentCountPerChannel >= 8) {\n                for (let i = 0; i < 5; i++) {\n                  paddedSHArray[destBase + 3 + i] =\n                    shData[srcBase + 9 + t * 5 + i];\n                }\n              }\n            }\n          }\n\n          const shTexture = new THREE.DataTexture(\n            paddedSHArray,\n            shTexSize.x,\n            shTexSize.y,\n            texelFormat,\n            shTextureType,\n          );\n          shTextures.push(shTexture);\n          shTexture.needsUpdate = true;\n          textureUniforms[t].value = shTexture;\n        }\n\n        this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\n        this.splatDataTextures['sphericalHarmonics'] = {\n          componentCount: shComponentCount,\n          componentCountPerChannel: shComponentCountPerChannel,\n          paddedComponentCount: paddedSHComponentCount,\n          data: paddedSHArrays,\n          textureCount: 3,\n          textures: shTextures,\n          size: shTexSize,\n          compressionLevel: shCompressionLevel,\n          elementsPerTexel: shElementsPerTexel,\n        };\n      }\n\n      this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(\n        shTexSize,\n      );\n      this.material.uniforms.sphericalHarmonics8BitMode.value =\n        shCompressionLevel === 2 ? 1 : 0;\n      for (let s = 0; s < this.scenes.length; s++) {\n        const splatBuffer = this.scenes[s].splatBuffer;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[\n          s\n        ] = splatBuffer.minSphericalHarmonicsCoeff;\n        this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[\n          s\n        ] = splatBuffer.maxSphericalHarmonicsCoeff;\n      }\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const sceneIndexesTexSize = computeDataTextureSize(\n      SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n      4,\n    );\n    const paddedTransformIndexes = new Uint32Array(\n      sceneIndexesTexSize.x *\n        sceneIndexesTexSize.y *\n        SCENE_INDEXES_ELEMENTS_PER_TEXEL,\n    );\n    for (let c = 0; c < splatCount; c++) {\n      paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = new THREE.DataTexture(\n      paddedTransformIndexes,\n      sceneIndexesTexSize.x,\n      sceneIndexesTexSize.y,\n      THREE.RedIntegerFormat,\n      THREE.UnsignedIntType,\n    );\n    sceneIndexesTexture.internalFormat = 'R32UI';\n    sceneIndexesTexture.needsUpdate = true;\n    this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\n    this.material.uniforms.sceneIndexesTextureSize.value.copy(\n      sceneIndexesTexSize,\n    );\n    this.material.uniformsNeedUpdate = true;\n    this.splatDataTextures['sceneIndexes'] = {\n      data: paddedTransformIndexes,\n      texture: sceneIndexesTexture,\n      size: sceneIndexesTexSize,\n    };\n    this.material.uniforms.sceneCount.value = this.scenes.length;\n  }\n\n  updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\n    const shCompressionLevel = shITextureDesc ?\n      shITextureDesc.compressionLevel :\n      0;\n\n    this.fillSplatDataArrays(\n      this.splatDataTextures.baseData.covariances,\n      this.splatDataTextures.baseData.scales,\n      this.splatDataTextures.baseData.rotations,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      this.splatDataTextures.baseData.sphericalHarmonics,\n      undefined,\n      covarianceCompressionLevel,\n      scaleRotationCompressionLevel,\n      shCompressionLevel,\n      fromSplat,\n      toSplat,\n      fromSplat,\n    );\n  }\n\n  updateDataTexturesFromBaseData(fromSplat, toSplat) {\n    const covarancesTextureDesc = this.splatDataTextures['covariances'];\n    const covarianceCompressionLevel = covarancesTextureDesc ?\n      covarancesTextureDesc.compressionLevel :\n      undefined;\n    const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\n    const scaleRotationCompressionLevel = scaleRotationsTextureDesc ?\n      scaleRotationsTextureDesc.compressionLevel :\n      undefined;\n    const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\n    const shCompressionLevel = shTextureDesc ?\n      shTextureDesc.compressionLevel :\n      0;\n\n    // Update center & color data texture\n    const centerColorsTextureDescriptor =\n      this.splatDataTextures['centerColors'];\n    const paddedCenterColors = centerColorsTextureDescriptor.data;\n    const centerColorsTexture = centerColorsTextureDescriptor.texture;\n    SplatMesh.updateCenterColorsPaddedData(\n      fromSplat,\n      toSplat,\n      this.splatDataTextures.baseData.centers,\n      this.splatDataTextures.baseData.colors,\n      paddedCenterColors,\n    );\n    const centerColorsTextureProps = this.renderer ?\n      this.renderer.properties.get(centerColorsTexture) :\n      null;\n    if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n      centerColorsTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedCenterColors,\n        centerColorsTextureDescriptor.texture,\n        centerColorsTextureDescriptor.size,\n        centerColorsTextureProps,\n        CENTER_COLORS_ELEMENTS_PER_TEXEL,\n        CENTER_COLORS_ELEMENTS_PER_SPLAT,\n        4,\n        fromSplat,\n        toSplat,\n      );\n    }\n\n    // update covariance data texture\n    if (covarancesTextureDesc) {\n      const covariancesTexture = covarancesTextureDesc.texture;\n      const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n      const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\n\n      if (covarianceCompressionLevel === 0) {\n        for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\n          const covariance = this.splatDataTextures.baseData.covariances[i];\n          covarancesTextureDesc.data[i] = covariance;\n        }\n      } else {\n        SplatMesh.updatePaddedCompressedCovariancesTextureData(\n          this.splatDataTextures.baseData.covariances,\n          covarancesTextureDesc.data,\n          fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\n          covarancesStartElement,\n          covariancesEndElement,\n        );\n      }\n\n      const covariancesTextureProps = this.renderer ?\n        this.renderer.properties.get(covariancesTexture) :\n        null;\n      if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n        covariancesTexture.needsUpdate = true;\n      } else {\n        if (covarianceCompressionLevel === 0) {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelStored,\n            COVARIANCES_ELEMENTS_PER_SPLAT,\n            4,\n            fromSplat,\n            toSplat,\n          );\n        } else {\n          this.updateDataTexture(\n            covarancesTextureDesc.data,\n            covarancesTextureDesc.texture,\n            covarancesTextureDesc.size,\n            covariancesTextureProps,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            covarancesTextureDesc.elementsPerTexelAllocated,\n            2,\n            fromSplat,\n            toSplat,\n          );\n        }\n      }\n    }\n\n    // update scale and rotation data texture\n    if (scaleRotationsTextureDesc) {\n      const paddedScaleRotations = scaleRotationsTextureDesc.data;\n      const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\n      const elementsPerSplat = 6;\n      const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\n\n      SplatMesh.updateScaleRotationsPaddedData(\n        fromSplat,\n        toSplat,\n        this.splatDataTextures.baseData.scales,\n        this.splatDataTextures.baseData.rotations,\n        paddedScaleRotations,\n      );\n      const scaleRotationsTextureProps = this.renderer ?\n        this.renderer.properties.get(scaleRotationsTexture) :\n        null;\n      if (\n        !scaleRotationsTextureProps ||\n        !scaleRotationsTextureProps.__webglTexture\n      ) {\n        scaleRotationsTexture.needsUpdate = true;\n      } else {\n        this.updateDataTexture(\n          paddedScaleRotations,\n          scaleRotationsTextureDesc.texture,\n          scaleRotationsTextureDesc.size,\n          scaleRotationsTextureProps,\n          SCALES_ROTATIONS_ELEMENTS_PER_TEXEL,\n          elementsPerSplat,\n          bytesPerElement,\n          fromSplat,\n          toSplat,\n        );\n      }\n    }\n\n    // update spherical harmonics data texture\n    const shData = this.splatDataTextures.baseData.sphericalHarmonics;\n    if (shData) {\n      let shBytesPerElement = 4;\n      if (shCompressionLevel === 1) shBytesPerElement = 2;\n      else if (shCompressionLevel === 2) shBytesPerElement = 1;\n\n      const updateTexture = (\n        shTexture,\n        shTextureSize,\n        elementsPerTexel,\n        paddedSHArray,\n        paddedSHComponentCount,\n      ) => {\n        const shTextureProps = this.renderer ?\n          this.renderer.properties.get(shTexture) :\n          null;\n        if (!shTextureProps || !shTextureProps.__webglTexture) {\n          shTexture.needsUpdate = true;\n        } else {\n          this.updateDataTexture(\n            paddedSHArray,\n            shTexture,\n            shTextureSize,\n            shTextureProps,\n            elementsPerTexel,\n            paddedSHComponentCount,\n            shBytesPerElement,\n            fromSplat,\n            toSplat,\n          );\n        }\n      };\n\n      const shComponentCount = shTextureDesc.componentCount;\n      const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\n\n      // Update for the case of a single texture for all spherical harmonics data\n      if (shTextureDesc.textureCount === 1) {\n        const paddedSHArray = shTextureDesc.data;\n        for (let c = fromSplat; c <= toSplat; c++) {\n          const srcBase = shComponentCount * c;\n          const destBase = paddedSHComponentCount * c;\n          for (let i = 0; i < shComponentCount; i++) {\n            paddedSHArray[destBase + i] = shData[srcBase + i];\n          }\n        }\n        updateTexture(\n          shTextureDesc.texture,\n          shTextureDesc.size,\n          shTextureDesc.elementsPerTexel,\n          paddedSHArray,\n          paddedSHComponentCount,\n        );\n        // Update for the case of spherical harmonics data split among three textures, one for each color channel\n      } else {\n        const shComponentCountPerChannel =\n          shTextureDesc.componentCountPerChannel;\n        for (let t = 0; t < 3; t++) {\n          const paddedSHArray = shTextureDesc.data[t];\n          for (let c = fromSplat; c <= toSplat; c++) {\n            const srcBase = shComponentCount * c;\n            const destBase = paddedSHComponentCount * c;\n            if (shComponentCountPerChannel >= 3) {\n              for (let i = 0; i < 3; i++) {\n                paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\n              }\n              if (shComponentCountPerChannel >= 8) {\n                for (let i = 0; i < 5; i++) {\n                  paddedSHArray[destBase + 3 + i] =\n                    shData[srcBase + 9 + t * 5 + i];\n                }\n              }\n            }\n          }\n          updateTexture(\n            shTextureDesc.textures[t],\n            shTextureDesc.size,\n            shTextureDesc.elementsPerTexel,\n            paddedSHArray,\n            paddedSHComponentCount,\n          );\n        }\n      }\n    }\n\n    // update scene index & transform data\n    const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\n    const paddedSceneIndexes = sceneIndexesTexDesc.data;\n    for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\n      paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n    }\n    const sceneIndexesTexture = sceneIndexesTexDesc.texture;\n    const sceneIndexesTextureProps = this.renderer ?\n      this.renderer.properties.get(sceneIndexesTexture) :\n      null;\n    if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\n      sceneIndexesTexture.needsUpdate = true;\n    } else {\n      this.updateDataTexture(\n        paddedSceneIndexes,\n        sceneIndexesTexDesc.texture,\n        sceneIndexesTexDesc.size,\n        sceneIndexesTextureProps,\n        1,\n        1,\n        1,\n        this.lastBuildSplatCount,\n        toSplat,\n      );\n    }\n  }\n\n  getTargetCovarianceCompressionLevel() {\n    return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\n  }\n\n  getTargetSphericalHarmonicsCompressionLevel() {\n    return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\n  }\n\n  getMaximumSplatBufferCompressionLevel() {\n    let maxCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\n        maxCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return maxCompressionLevel;\n  }\n\n  getMinimumSplatBufferCompressionLevel() {\n    let minCompressionLevel;\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\n        minCompressionLevel = splatBuffer.compressionLevel;\n      }\n    }\n    return minCompressionLevel;\n  }\n\n  static computeTextureUpdateRegion(\n    startSplat,\n    endSplat,\n    textureWidth,\n    elementsPerTexel,\n    elementsPerSplat,\n  ) {\n    const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n    const startSplatTexels = startSplat * texelsPerSplat;\n    const startRow = Math.floor(startSplatTexels / textureWidth);\n    const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n    const endSplatTexels = endSplat * texelsPerSplat;\n    const endRow = Math.floor(endSplatTexels / textureWidth);\n    const endRowEndElement =\n      endRow * textureWidth * elementsPerTexel +\n      textureWidth * elementsPerTexel;\n\n    return {\n      dataStart: startRowElement,\n      dataEnd: endRowEndElement,\n      startRow: startRow,\n      endRow: endRow,\n    };\n  }\n\n  updateDataTexture(\n    paddedData,\n    texture,\n    textureSize,\n    textureProps,\n    elementsPerTexel,\n    elementsPerSplat,\n    bytesPerElement,\n    from,\n    to,\n  ) {\n    const gl = this.renderer.getContext();\n    const updateRegion = SplatMesh.computeTextureUpdateRegion(\n      from,\n      to,\n      textureSize.x,\n      elementsPerTexel,\n      elementsPerSplat,\n    );\n    const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n    const updateDataView = new paddedData.constructor(\n      paddedData.buffer,\n      updateRegion.dataStart * bytesPerElement,\n      updateElementCount,\n    );\n    const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n    const glType = this.webGLUtils.convert(texture.type);\n    const glFormat = this.webGLUtils.convert(\n      texture.format,\n      texture.colorSpace,\n    );\n    const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n    gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n    gl.texSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      0,\n      updateRegion.startRow,\n      textureSize.x,\n      updateHeight,\n      glFormat,\n      glType,\n      updateDataView,\n    );\n    gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n  }\n\n  static updatePaddedCompressedCovariancesTextureData(\n    sourceData,\n    textureData,\n    textureDataStartIndex,\n    fromElement,\n    toElement,\n  ) {\n    let textureDataView = new DataView(textureData.buffer);\n    let textureDataIndex = textureDataStartIndex;\n    let sequentialCount = 0;\n    for (let i = fromElement; i <= toElement; i += 2) {\n      textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\n      textureDataView.setUint16(\n        textureDataIndex * 2 + 2,\n        sourceData[i + 1],\n        true,\n      );\n      textureDataIndex += 2;\n      sequentialCount++;\n      if (sequentialCount >= 3) {\n        textureDataIndex += 2;\n        sequentialCount = 0;\n      }\n    }\n  }\n\n  static updateCenterColorsPaddedData(\n    from,\n    to,\n    centers,\n    colors,\n    paddedCenterColors,\n  ) {\n    for (let c = from; c <= to; c++) {\n      const colorsBase = c * 4;\n      const centersBase = c * 3;\n      const centerColorsBase = c * 4;\n      paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(\n        colors,\n        colorsBase,\n      );\n      paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(\n        centers[centersBase],\n      );\n      paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(\n        centers[centersBase + 1],\n      );\n      paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(\n        centers[centersBase + 2],\n      );\n    }\n  }\n\n  static updateScaleRotationsPaddedData(\n    from,\n    to,\n    scales,\n    rotations,\n    paddedScaleRotations,\n  ) {\n    const combinedSize = 6;\n    for (let c = from; c <= to; c++) {\n      const scaleBase = c * 3;\n      const rotationBase = c * 4;\n      const scaleRotationsBase = c * combinedSize;\n\n      paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\n      paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\n\n      paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\n      paddedScaleRotations[scaleRotationsBase + 4] =\n        rotations[rotationBase + 1];\n      paddedScaleRotations[scaleRotationsBase + 5] =\n        rotations[rotationBase + 2];\n    }\n  }\n\n  updateVisibleRegion(sinceLastBuildOnly) {\n    const splatCount = this.getSplatCount(true);\n    const tempCenter = new THREE.Vector3();\n    if (!sinceLastBuildOnly) {\n      const avgCenter = new THREE.Vector3();\n      this.scenes.forEach((scene) => {\n        avgCenter.add(scene.splatBuffer.sceneCenter);\n      });\n      avgCenter.multiplyScalar(1.0 / this.scenes.length);\n      this.calculatedSceneCenter.copy(avgCenter);\n      this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n      this.material.uniformsNeedUpdate = true;\n    }\n\n    const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ?\n      this.lastBuildSplatCount :\n      0;\n    for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n      this.getSplatCenter(i, tempCenter, true);\n      const distFromCSceneCenter = tempCenter\n        .sub(this.calculatedSceneCenter)\n        .length();\n      if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) {\n        this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n      }\n    }\n\n    if (\n      this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius >\n      VISIBLE_REGION_EXPANSION_DELTA\n    ) {\n      this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n      this.visibleRegionRadius = Math.max(\n        this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA,\n        0.0,\n      );\n    }\n    if (this.finalBuild) {\n      this.visibleRegionRadius = this.visibleRegionBufferRadius =\n        this.maxSplatDistanceFromSceneCenter;\n    }\n    this.updateVisibleRegionFadeDistance();\n  }\n\n  updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n    const fastFadeRate =\n      SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\n    const gradualFadeRate =\n      SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\n    const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n    const fadeInRate =\n      sceneRevealMode === SceneRevealMode.Default ?\n        defaultFadeInRate :\n        gradualFadeRate;\n    this.visibleRegionFadeStartRadius =\n      (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n        fadeInRate +\n      this.visibleRegionFadeStartRadius;\n    const fadeInPercentage =\n      this.visibleRegionBufferRadius > 0 ?\n        this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius :\n        0;\n    const fadeInComplete = fadeInPercentage > 0.99;\n    const shaderFadeInComplete =\n      fadeInComplete || sceneRevealMode === SceneRevealMode.Instant ? 1 : 0;\n\n    this.material.uniforms.visibleRegionFadeStartRadius.value =\n      this.visibleRegionFadeStartRadius;\n    this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n    this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n    this.material.uniforms.currentTime.value = performance.now();\n    this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n    this.material.uniformsNeedUpdate = true;\n    this.visibleRegionChanging = !fadeInComplete;\n  }\n\n  /**\n   * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n   * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n   * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n   *                                  every splat.\n   */\n  updateRenderIndexes(globalIndexes, renderSplatCount) {\n    const geometry = this.geometry;\n    geometry.attributes.splatIndex.set(globalIndexes);\n    geometry.attributes.splatIndex.needsUpdate = true;\n    if (renderSplatCount > 0 && this.firstRenderTime === -1) {\n      this.firstRenderTime = performance.now();\n    }\n    geometry.instanceCount = renderSplatCount;\n    geometry.setDrawRange(0, renderSplatCount);\n  }\n\n  /**\n   * Update the transforms for each scene in this splat mesh from their individual components (position,\n   * quaternion, and scale)\n   */\n  updateTransforms() {\n    for (let i = 0; i < this.scenes.length; i++) {\n      const scene = this.getScene(i);\n      scene.updateTransform(this.dynamicMode);\n    }\n  }\n\n  updateUniforms = (function() {\n    const viewport = new THREE.Vector2();\n\n    return function(\n      renderDimensions,\n      cameraFocalLengthX,\n      cameraFocalLengthY,\n      orthographicMode,\n      orthographicZoom,\n      inverseFocalAdjustment,\n    ) {\n      const splatCount = this.getSplatCount();\n      if (splatCount > 0) {\n        viewport.set(\n          renderDimensions.x * this.devicePixelRatio,\n          renderDimensions.y * this.devicePixelRatio,\n        );\n        this.material.uniforms.viewport.value.copy(viewport);\n        this.material.uniforms.basisViewport.value.set(\n          1.0 / viewport.x,\n          1.0 / viewport.y,\n        );\n        this.material.uniforms.focal.value.set(\n          cameraFocalLengthX,\n          cameraFocalLengthY,\n        );\n        this.material.uniforms.orthographicMode.value = orthographicMode ?\n          1 :\n          0;\n        this.material.uniforms.orthoZoom.value = orthographicZoom;\n        this.material.uniforms.inverseFocalAdjustment.value =\n          inverseFocalAdjustment;\n        if (this.dynamicMode) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.transforms.value[i].copy(\n              this.getScene(i).transform,\n            );\n          }\n        }\n        if (this.enableOptionalEffects) {\n          for (let i = 0; i < this.scenes.length; i++) {\n            this.material.uniforms.sceneOpacity.value[i] = clamp(\n              this.getScene(i).opacity,\n              0.0,\n              1.0,\n            );\n            this.material.uniforms.sceneVisibility.value[i] = this.getScene(i)\n              .visible ?\n              1 :\n              0;\n            this.material.uniformsNeedUpdate = true;\n          }\n        }\n        this.material.uniformsNeedUpdate = true;\n      }\n    };\n  })();\n\n  setSplatScale(splatScale = 1) {\n    this.splatScale = splatScale;\n    this.material.uniforms.splatScale.value = splatScale;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getSplatScale() {\n    return this.splatScale;\n  }\n\n  setPointCloudModeEnabled(enabled) {\n    this.pointCloudModeEnabled = enabled;\n    this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n    this.material.uniformsNeedUpdate = true;\n  }\n\n  getPointCloudModeEnabled() {\n    return this.pointCloudModeEnabled;\n  }\n\n  getSplatDataTextures() {\n    return this.splatDataTextures;\n  }\n\n  getSplatCount(includeSinceLastBuild = false) {\n    if (!includeSinceLastBuild) return this.lastBuildSplatCount;\n    else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  getMaxSplatCount() {\n    return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n  }\n\n  static getTotalMaxSplatCountForScenes(scenes) {\n    let totalSplatCount = 0;\n    for (let scene of scenes) {\n      if (scene && scene.splatBuffer) {\n        totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n      }\n    }\n    return totalSplatCount;\n  }\n\n  static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n    let totalSplatCount = 0;\n    for (let splatBuffer of splatBuffers) {\n      totalSplatCount += splatBuffer.getMaxSplatCount();\n    }\n    return totalSplatCount;\n  }\n\n  disposeDistancesComputationGPUResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.vao) {\n      gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n      this.distancesTransformFeedback.vao = null;\n    }\n    if (this.distancesTransformFeedback.program) {\n      gl.deleteProgram(this.distancesTransformFeedback.program);\n      gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n      gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n      this.distancesTransformFeedback.program = null;\n      this.distancesTransformFeedback.vertexShader = null;\n      this.distancesTransformFeedback.fragmentShader = null;\n    }\n    this.disposeDistancesComputationGPUBufferResources();\n    if (this.distancesTransformFeedback.id) {\n      gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n      this.distancesTransformFeedback.id = null;\n    }\n  }\n\n  disposeDistancesComputationGPUBufferResources() {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    if (this.distancesTransformFeedback.centersBuffer) {\n      this.distancesTransformFeedback.centersBuffer = null;\n      gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n    }\n    if (this.distancesTransformFeedback.outDistancesBuffer) {\n      gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n      this.distancesTransformFeedback.outDistancesBuffer = null;\n    }\n  }\n\n  /**\n   * Set the Three.js renderer used by this splat mesh\n   * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n   */\n  setRenderer(renderer) {\n    if (renderer !== this.renderer) {\n      this.renderer = renderer;\n      const gl = this.renderer.getContext();\n      const extensions = new WebGLExtensions(gl);\n      const capabilities = new WebGLCapabilities(gl, extensions, {});\n      extensions.init(capabilities);\n      this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n      if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n        this.setupDistancesComputationTransformFeedback();\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(\n          0,\n          this.getSplatCount() - 1,\n        );\n        this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\n      }\n    }\n  }\n\n  setupDistancesComputationTransformFeedback = (function() {\n    let currentMaxSplatCount;\n\n    return function() {\n      const maxSplatCount = this.getMaxSplatCount();\n\n      if (!this.renderer) return;\n\n      const rebuildGPUObjects = this.lastRenderer !== this.renderer;\n      const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n      if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n      if (rebuildGPUObjects) {\n        this.disposeDistancesComputationGPUResources();\n      } else if (rebuildBuffers) {\n        this.disposeDistancesComputationGPUBufferResources();\n      }\n\n      const gl = this.renderer.getContext();\n\n      const createShader = (gl, type, source) => {\n        const shader = gl.createShader(type);\n        if (!shader) {\n          console.error('Fatal error: gl could not create a shader object.');\n          return null;\n        }\n\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n\n        const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!compiled) {\n          let typeName = 'unknown';\n          if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n          else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n          const errors = gl.getShaderInfoLog(shader);\n          console.error(\n            'Failed to compile ' + typeName + ' with these errors:' + errors,\n          );\n          gl.deleteShader(shader);\n          return null;\n        }\n\n        return shader;\n      };\n\n      let vsSource;\n      if (this.integerBasedDistancesComputation) {\n        vsSource = `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[sceneIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      } else {\n        vsSource = `#version 300 es\n                in vec4 center;\n                flat out float distance;`;\n        if (this.dynamicMode) {\n          vsSource += `\n                        in uint sceneIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n        } else {\n          vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n        }\n      }\n\n      const fsSource = `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.vao = gl.createVertexArray();\n      }\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n      if (rebuildGPUObjects) {\n        const program = gl.createProgram();\n        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n        if (!vertexShader || !fragmentShader) {\n          throw new Error(\n            'Could not compile shaders for distances computation on GPU.',\n          );\n        }\n        gl.attachShader(program, vertexShader);\n        gl.attachShader(program, fragmentShader);\n        gl.transformFeedbackVaryings(\n          program,\n          ['distance'],\n          gl.SEPARATE_ATTRIBS,\n        );\n        gl.linkProgram(program);\n\n        const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n          const error = gl.getProgramInfoLog(program);\n          console.error('Fatal error: Failed to link program: ' + error);\n          gl.deleteProgram(program);\n          gl.deleteShader(fragmentShader);\n          gl.deleteShader(vertexShader);\n          throw new Error(\n            'Could not link shaders for distances computation on GPU.',\n          );\n        }\n\n        this.distancesTransformFeedback.program = program;\n        this.distancesTransformFeedback.vertexShader = vertexShader;\n        this.distancesTransformFeedback.vertexShader = fragmentShader;\n      }\n\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      this.distancesTransformFeedback.centersLoc = gl.getAttribLocation(\n        this.distancesTransformFeedback.program,\n        'center',\n      );\n      if (this.dynamicMode) {\n        this.distancesTransformFeedback.sceneIndexesLoc = gl.getAttribLocation(\n          this.distancesTransformFeedback.program,\n          'sceneIndex',\n        );\n        for (let i = 0; i < this.scenes.length; i++) {\n          this.distancesTransformFeedback.transformsLocs[i] =\n            gl.getUniformLocation(\n              this.distancesTransformFeedback.program,\n              `transforms[${i}]`,\n            );\n        }\n      } else {\n        this.distancesTransformFeedback.modelViewProjLoc =\n          gl.getUniformLocation(\n            this.distancesTransformFeedback.program,\n            'modelViewProj',\n          );\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.centersBuffer,\n        );\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        if (this.integerBasedDistancesComputation) {\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.INT,\n            0,\n            0,\n          );\n        } else {\n          gl.vertexAttribPointer(\n            this.distancesTransformFeedback.centersLoc,\n            4,\n            gl.FLOAT,\n            false,\n            0,\n            0,\n          );\n        }\n\n        if (this.dynamicMode) {\n          this.distancesTransformFeedback.sceneIndexesBuffer =\n            gl.createBuffer();\n          gl.bindBuffer(\n            gl.ARRAY_BUFFER,\n            this.distancesTransformFeedback.sceneIndexesBuffer,\n          );\n          gl.enableVertexAttribArray(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n          );\n          gl.vertexAttribIPointer(\n            this.distancesTransformFeedback.sceneIndexesLoc,\n            1,\n            gl.UNSIGNED_INT,\n            0,\n            0,\n          );\n        }\n      }\n\n      if (rebuildGPUObjects || rebuildBuffers) {\n        this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n      }\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n      gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n      if (rebuildGPUObjects) {\n        this.distancesTransformFeedback.id = gl.createTransformFeedback();\n      }\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      this.lastRenderer = this.renderer;\n      currentMaxSplatCount = maxSplatCount;\n    };\n  })();\n\n  /**\n   * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} centers The splat centers data\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUCentersBufferForDistancesComputation(\n    isUpdate,\n    centers,\n    offsetSplats,\n  ) {\n    if (!this.renderer) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const ArrayType = this.integerBasedDistancesComputation ?\n      Uint32Array :\n      Float32Array;\n    const attributeBytesPerCenter = 16;\n    const subBufferOffset = offsetSplats * attributeBytesPerCenter;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.centersBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\n    } else {\n      const maxArray = new ArrayType(\n        this.getMaxSplatCount() * attributeBytesPerCenter,\n      );\n      maxArray.set(centers);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n   * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\n   * @param {Array<number>} sceneIndexes The splat scene indexes\n   * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\n   */\n  updateGPUTransformIndexesBufferForDistancesComputation(\n    isUpdate,\n    sceneIndexes,\n    offsetSplats,\n  ) {\n    if (!this.renderer || !this.dynamicMode) return;\n\n    const gl = this.renderer.getContext();\n\n    const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n    gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n    const subBufferOffset = offsetSplats * 4;\n\n    gl.bindBuffer(\n      gl.ARRAY_BUFFER,\n      this.distancesTransformFeedback.sceneIndexesBuffer,\n    );\n\n    if (isUpdate) {\n      gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\n    } else {\n      const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n      maxArray.set(sceneIndexes);\n      gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n    if (currentVao) gl.bindVertexArray(currentVao);\n  }\n\n  /**\n   * Get a typed array containing a mapping from global splat indexes to their scene index.\n   * @param {number} start Starting splat index to store\n   * @param {number} end Ending splat index to store\n   * @return {Uint32Array}\n   */\n  getSceneIndexes(start, end) {\n    let sceneIndexes;\n    const fillCount = end - start + 1;\n    sceneIndexes = new Uint32Array(fillCount);\n    for (let i = start; i <= end; i++) {\n      sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n    }\n\n    return sceneIndexes;\n  }\n\n  /**\n   * Fill 'array' with the transforms for each scene in this splat mesh.\n   * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n   */\n  fillTransformsArray = (function() {\n    const tempArray = [];\n\n    return function(array) {\n      if (tempArray.length !== array.length) tempArray.length = array.length;\n      for (let i = 0; i < this.scenes.length; i++) {\n        const sceneTransform = this.getScene(i).transform;\n        const sceneTransformElements = sceneTransform.elements;\n        for (let j = 0; j < 16; j++) {\n          tempArray[i * 16 + j] = sceneTransformElements[j];\n        }\n      }\n      array.set(tempArray);\n    };\n  })();\n\n  computeDistancesOnGPU = (function() {\n    const tempMatrix = new THREE.Matrix4();\n\n    return function(modelViewProjMatrix, outComputedDistances) {\n      if (!this.renderer) return;\n\n      // console.time(\"gpu_compute_distances\");\n      const gl = this.renderer.getContext();\n\n      const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n      const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n      const currentProgramDeleted = currentProgram ?\n        gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) :\n        false;\n\n      gl.bindVertexArray(this.distancesTransformFeedback.vao);\n      gl.useProgram(this.distancesTransformFeedback.program);\n\n      gl.enable(gl.RASTERIZER_DISCARD);\n\n      if (this.dynamicMode) {\n        for (let i = 0; i < this.scenes.length; i++) {\n          tempMatrix.copy(this.getScene(i).transform);\n          tempMatrix.premultiply(modelViewProjMatrix);\n\n          if (this.integerBasedDistancesComputation) {\n            const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n            const iTransform = [\n              iTempMatrix[2],\n              iTempMatrix[6],\n              iTempMatrix[10],\n              iTempMatrix[14],\n            ];\n            gl.uniform4i(\n              this.distancesTransformFeedback.transformsLocs[i],\n              iTransform[0],\n              iTransform[1],\n              iTransform[2],\n              iTransform[3],\n            );\n          } else {\n            gl.uniformMatrix4fv(\n              this.distancesTransformFeedback.transformsLocs[i],\n              false,\n              tempMatrix.elements,\n            );\n          }\n        }\n      } else {\n        if (this.integerBasedDistancesComputation) {\n          const iViewProjMatrix =\n            SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n          const iViewProj = [\n            iViewProjMatrix[2],\n            iViewProjMatrix[6],\n            iViewProjMatrix[10],\n          ];\n          gl.uniform3i(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            iViewProj[0],\n            iViewProj[1],\n            iViewProj[2],\n          );\n        } else {\n          const viewProj = [\n            modelViewProjMatrix.elements[2],\n            modelViewProjMatrix.elements[6],\n            modelViewProjMatrix.elements[10],\n          ];\n          gl.uniform3f(\n            this.distancesTransformFeedback.modelViewProjLoc,\n            viewProj[0],\n            viewProj[1],\n            viewProj[2],\n          );\n        }\n      }\n\n      gl.bindBuffer(\n        gl.ARRAY_BUFFER,\n        this.distancesTransformFeedback.centersBuffer,\n      );\n      gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n      if (this.integerBasedDistancesComputation) {\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.INT,\n          0,\n          0,\n        );\n      } else {\n        gl.vertexAttribPointer(\n          this.distancesTransformFeedback.centersLoc,\n          4,\n          gl.FLOAT,\n          false,\n          0,\n          0,\n        );\n      }\n\n      if (this.dynamicMode) {\n        gl.bindBuffer(\n          gl.ARRAY_BUFFER,\n          this.distancesTransformFeedback.sceneIndexesBuffer,\n        );\n        gl.enableVertexAttribArray(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n        );\n        gl.vertexAttribIPointer(\n          this.distancesTransformFeedback.sceneIndexesLoc,\n          1,\n          gl.UNSIGNED_INT,\n          0,\n          0,\n        );\n      }\n\n      gl.bindTransformFeedback(\n        gl.TRANSFORM_FEEDBACK,\n        this.distancesTransformFeedback.id,\n      );\n      gl.bindBufferBase(\n        gl.TRANSFORM_FEEDBACK_BUFFER,\n        0,\n        this.distancesTransformFeedback.outDistancesBuffer,\n      );\n\n      gl.beginTransformFeedback(gl.POINTS);\n      gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n      gl.endTransformFeedback();\n\n      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n      gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n      gl.disable(gl.RASTERIZER_DISCARD);\n\n      const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      const promise = new Promise((resolve) => {\n        const checkSync = () => {\n          if (this.disposed) {\n            resolve();\n          } else {\n            const timeout = 0;\n            const bitflags = 0;\n            const status = gl.clientWaitSync(sync, bitflags, timeout);\n            switch (status) {\n              case gl.TIMEOUT_EXPIRED:\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                return this.computeDistancesOnGPUSyncTimeout;\n              case gl.WAIT_FAILED:\n                throw new Error('should never get here');\n              default:\n                this.computeDistancesOnGPUSyncTimeout = null;\n                gl.deleteSync(sync);\n                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                gl.bindBuffer(\n                  gl.ARRAY_BUFFER,\n                  this.distancesTransformFeedback.outDistancesBuffer,\n                );\n                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                if (currentVao) gl.bindVertexArray(currentVao);\n\n                // console.timeEnd(\"gpu_compute_distances\");\n\n                resolve();\n            }\n          }\n        };\n        this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n      });\n\n      if (currentProgram && currentProgramDeleted !== true) {\n        gl.useProgram(currentProgram);\n      }\n      if (currentVao) gl.bindVertexArray(currentVao);\n\n      return promise;\n    };\n  })();\n\n  /**\n   * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n   * buffer, and the corresponding transform)\n   * @param {number} globalIndex Global splat index\n   * @param {object} paramsObj Object in which to store local data\n   * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n   *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n   *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n   *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n   *                                       be null.\n   */\n  getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n    if (returnSceneTransform === undefined || returnSceneTransform === null) {\n      returnSceneTransform = this.dynamicMode ? false : true;\n    }\n    paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n    paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n    paramsObj.sceneTransform = returnSceneTransform ?\n      this.getSceneTransformForSplat(globalIndex) :\n      null;\n  }\n\n  /**\n   * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n   * @param {Float32Array} covariances Target storage for splat covariances\n   * @param {Float32Array} scales Target storage for splat scales\n   * @param {Float32Array} rotations Target storage for splat rotations\n   * @param {Float32Array} centers Target storage for splat centers\n   * @param {Uint8Array} colors Target storage for splat colors\n   * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\n   * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n   *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n   *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n   * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\n   * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\n   * @param {number} srcStart The start location from which to pull source data\n   * @param {number} srcEnd The end location from which to pull source data\n   * @param {number} destStart The start location from which to write data\n   */\n  fillSplatDataArrays(\n    covariances,\n    scales,\n    rotations,\n    centers,\n    colors,\n    sphericalHarmonics,\n    applySceneTransform,\n    covarianceCompressionLevel = 0,\n    scaleRotationCompressionLevel = 0,\n    sphericalHarmonicsCompressionLevel = 1,\n    srcStart,\n    srcEnd,\n    destStart = 0,\n    sceneIndex,\n  ) {\n    const scaleOverride = new THREE.Vector3();\n    scaleOverride.x = undefined;\n    scaleOverride.y = undefined;\n    if (this.splatRenderMode === SplatRenderMode.ThreeD) {\n      scaleOverride.z = undefined;\n    } else {\n      scaleOverride.z = 1;\n    }\n    const tempTransform = new THREE.Matrix4();\n\n    let startSceneIndex = 0;\n    let endSceneIndex = this.scenes.length - 1;\n    if (\n      sceneIndex !== undefined &&\n      sceneIndex !== null &&\n      sceneIndex >= 0 &&\n      sceneIndex <= this.scenes.length\n    ) {\n      startSceneIndex = sceneIndex;\n      endSceneIndex = sceneIndex;\n    }\n    for (let i = startSceneIndex; i <= endSceneIndex; i++) {\n      if (applySceneTransform === undefined || applySceneTransform === null) {\n        applySceneTransform = this.dynamicMode ? false : true;\n      }\n\n      const scene = this.getScene(i);\n      const splatBuffer = scene.splatBuffer;\n      let sceneTransform;\n      if (applySceneTransform) {\n        this.getSceneTransform(i, tempTransform);\n        sceneTransform = tempTransform;\n      }\n      if (covariances) {\n        splatBuffer.fillSplatCovarianceArray(\n          covariances,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          covarianceCompressionLevel,\n        );\n      }\n      if (scales || rotations) {\n        if (!scales || !rotations) {\n          throw new Error(\n            'SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.',\n          );\n        }\n        splatBuffer.fillSplatScaleRotationArray(\n          scales,\n          rotations,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          scaleRotationCompressionLevel,\n          scaleOverride,\n        );\n      }\n      if (centers) {\n        splatBuffer.fillSplatCenterArray(\n          centers,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (colors) {\n        splatBuffer.fillSplatColorArray(\n          colors,\n          scene.minimumAlpha,\n          srcStart,\n          srcEnd,\n          destStart,\n        );\n      }\n      if (sphericalHarmonics) {\n        splatBuffer.fillSphericalHarmonicsArray(\n          sphericalHarmonics,\n          this.minSphericalHarmonicsDegree,\n          sceneTransform,\n          srcStart,\n          srcEnd,\n          destStart,\n          sphericalHarmonicsCompressionLevel,\n        );\n      }\n      destStart += splatBuffer.getSplatCount();\n    }\n  }\n\n  /**\n   * Convert splat centers, which are floating point values, to an array of integers and multiply\n   * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Int32Array}\n   */\n  getIntegerCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    let intCenters;\n    let componentCount = padFour ? 4 : 3;\n    intCenters = new Int32Array(splatCount * componentCount);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        intCenters[i * componentCount + t] = Math.round(\n          floatCenters[i * 3 + t] * 1000.0,\n        );\n      }\n      if (padFour) intCenters[i * componentCount + 3] = 1000;\n    }\n    return intCenters;\n  }\n\n  /**\n   * Returns an array of splat centers, transformed as appropriate, optionally padded.\n   * @param {number} start The index at which to start retrieving data\n   * @param {number} end The index at which to stop retrieving data\n   * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\n   * @return {Float32Array}\n   */\n  getFloatCenters(start, end, padFour = false) {\n    const splatCount = end - start + 1;\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      start,\n    );\n    if (!padFour) return floatCenters;\n    let paddedFloatCenters = new Float32Array(splatCount * 4);\n    for (let i = 0; i < splatCount; i++) {\n      for (let t = 0; t < 3; t++) {\n        paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n      }\n      paddedFloatCenters[i * 4 + 3] = 1.0;\n    }\n    return paddedFloatCenters;\n  }\n\n  /**\n   * Get the center for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n   *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n   *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n   */\n  getSplatCenter = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outCenter, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      paramsObj.splatBuffer.getSplatCenter(\n        paramsObj.localIndex,\n        outCenter,\n        paramsObj.sceneTransform,\n      );\n    };\n  })();\n\n  /**\n   * Get the scale and rotation for a splat, transformed as appropriate.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n   * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n   * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n   *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n   *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n   *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n   *                                      the default behavior will apply.\n   */\n  getSplatScaleAndRotation = (function() {\n    const paramsObj = {};\n    const scaleOverride = new THREE.Vector3();\n\n    return function(globalIndex, outScale, outRotation, applySceneTransform) {\n      this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n      scaleOverride.x = undefined;\n      scaleOverride.y = undefined;\n      scaleOverride.z = undefined;\n      if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\n      paramsObj.splatBuffer.getSplatScaleAndRotation(\n        paramsObj.localIndex,\n        outScale,\n        outRotation,\n        paramsObj.sceneTransform,\n        scaleOverride,\n      );\n    };\n  })();\n\n  /**\n   * Get the color for a splat.\n   * @param {number} globalIndex Global index of splat\n   * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n   */\n  getSplatColor = (function() {\n    const paramsObj = {};\n\n    return function(globalIndex, outColor) {\n      this.getLocalSplatParameters(globalIndex, paramsObj);\n      paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\n    };\n  })();\n\n  /**\n   * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n   */\n  getSceneTransform(sceneIndex, outTransform) {\n    const scene = this.getScene(sceneIndex);\n    scene.updateTransform(this.dynamicMode);\n    outTransform.copy(scene.transform);\n  }\n\n  /**\n   * Get the scene at 'sceneIndex'.\n   * @param {number} sceneIndex Index of the desired scene\n   * @return {SplatScene}\n   */\n  getScene(sceneIndex) {\n    if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n      throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n    }\n    return this.scenes[sceneIndex];\n  }\n\n  getSceneCount() {\n    return this.scenes.length;\n  }\n\n  getSplatBufferForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .splatBuffer;\n  }\n\n  getSceneIndexForSplat(globalIndex) {\n    return this.globalSplatIndexToSceneIndexMap[globalIndex];\n  }\n\n  getSceneTransformForSplat(globalIndex) {\n    return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex])\n      .transform;\n  }\n\n  getSplatLocalIndex(globalIndex) {\n    return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n  }\n\n  static getIntegerMatrixArray(matrix) {\n    const matrixElements = matrix.elements;\n    const intMatrixArray = [];\n    for (let i = 0; i < 16; i++) {\n      intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n    }\n    return intMatrixArray;\n  }\n\n  computeBoundingBox(applySceneTransforms = false, sceneIndex) {\n    let splatCount = this.getSplatCount();\n    if (sceneIndex !== undefined && sceneIndex !== null) {\n      if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n        throw new Error(\n          'SplatMesh::computeBoundingBox() -> Invalid scene index.',\n        );\n      }\n      splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\n    }\n\n    const floatCenters = new Float32Array(splatCount * 3);\n    this.fillSplatDataArrays(\n      null,\n      null,\n      null,\n      floatCenters,\n      null,\n      null,\n      applySceneTransforms,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      sceneIndex,\n    );\n\n    const min = new THREE.Vector3();\n    const max = new THREE.Vector3();\n    for (let i = 0; i < splatCount; i++) {\n      const offset = i * 3;\n      const x = floatCenters[offset];\n      const y = floatCenters[offset + 1];\n      const z = floatCenters[offset + 2];\n      if (i === 0 || x < min.x) min.x = x;\n      if (i === 0 || y < min.y) min.y = y;\n      if (i === 0 || z < min.z) min.z = z;\n      if (i === 0 || x > max.x) max.x = x;\n      if (i === 0 || y > max.y) max.y = y;\n      if (i === 0 || z > max.z) max.z = z;\n    }\n\n    return new THREE.Box3(min, max);\n  }\n}\n","export class InfoPanel {\n  constructor(container) {\n    this.container = container || document.body;\n\n    this.infoCells = {};\n\n    const layout = [\n      ['Camera position', 'cameraPosition'],\n      ['Camera look-at', 'cameraLookAt'],\n      ['Camera up', 'cameraUp'],\n      ['Camera mode', 'orthographicCamera'],\n      ['Cursor position', 'cursorPosition'],\n      ['FPS', 'fps'],\n      ['Rendering:', 'renderSplatCount'],\n      ['Sort time', 'sortTime'],\n      ['Render window', 'renderWindow'],\n      ['Focal adjustment', 'focalAdjustment'],\n      ['Splat scale', 'splatScale'],\n      ['Point cloud mode', 'pointCloudMode'],\n    ];\n\n    this.infoPanelContainer = document.createElement('div');\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n    this.infoPanelContainer.append(style);\n\n    this.infoPanel = document.createElement('div');\n    this.infoPanel.className = 'infoPanel';\n\n    const infoTable = document.createElement('div');\n    infoTable.style.display = 'table';\n\n    for (let layoutEntry of layout) {\n      const row = document.createElement('div');\n      row.style.display = 'table-row';\n      row.className = 'info-panel-row';\n\n      const labelCell = document.createElement('div');\n      labelCell.style.display = 'table-cell';\n      labelCell.innerHTML = `${layoutEntry[0]}: `;\n      labelCell.classList.add('info-panel-cell', 'label-cell');\n\n      const spacerCell = document.createElement('div');\n      spacerCell.style.display = 'table-cell';\n      spacerCell.style.width = '10px';\n      spacerCell.innerHTML = ' ';\n      spacerCell.className = 'info-panel-cell';\n\n      const infoCell = document.createElement('div');\n      infoCell.style.display = 'table-cell';\n      infoCell.innerHTML = '';\n      infoCell.className = 'info-panel-cell';\n\n      this.infoCells[layoutEntry[1]] = infoCell;\n\n      row.appendChild(labelCell);\n      row.appendChild(spacerCell);\n      row.appendChild(infoCell);\n\n      infoTable.appendChild(row);\n    }\n\n    this.infoPanel.appendChild(infoTable);\n    this.infoPanelContainer.append(this.infoPanel);\n    this.infoPanelContainer.style.display = 'none';\n    this.container.appendChild(this.infoPanelContainer);\n\n    this.visible = false;\n  }\n\n  update = function(\n    renderDimensions,\n    cameraPosition,\n    cameraLookAtPosition,\n    cameraUp,\n    orthographicCamera,\n    meshCursorPosition,\n    currentFPS,\n    splatCount,\n    splatRenderCount,\n    splatRenderCountPct,\n    lastSortTime,\n    focalAdjustment,\n    splatScale,\n    pointCloudMode,\n  ) {\n    const cameraPosString = `${cameraPosition.x.toFixed(\n      5,\n    )}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n    if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n      this.infoCells.cameraPosition.innerHTML = cameraPosString;\n    }\n\n    if (cameraLookAtPosition) {\n      const cla = cameraLookAtPosition;\n      const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(\n        5,\n      )}, ${cla.z.toFixed(5)}`;\n      if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n        this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n      }\n    }\n\n    const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(\n      5,\n    )}, ${cameraUp.z.toFixed(5)}`;\n    if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n      this.infoCells.cameraUp.innerHTML = cameraUpString;\n    }\n\n    this.infoCells.orthographicCamera.innerHTML = orthographicCamera ?\n      'Orthographic' :\n      'Perspective';\n\n    if (meshCursorPosition) {\n      const cursPos = meshCursorPosition;\n      const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(\n        5,\n      )}, ${cursPos.z.toFixed(5)}`;\n      this.infoCells.cursorPosition.innerHTML = cursorPosString;\n    } else {\n      this.infoCells.cursorPosition.innerHTML = 'N/A';\n    }\n\n    this.infoCells.fps.innerHTML = currentFPS;\n    this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n    this.infoCells.renderSplatCount.innerHTML = `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(\n      2,\n    )}%)`;\n\n    this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n    this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n    this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n    this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n  };\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.infoPanelContainer.parentElement === this.container\n    ) {\n      this.container.removeChild(this.infoPanelContainer);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.infoPanelContainer);\n      this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  show() {\n    this.infoPanelContainer.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.infoPanelContainer.style.display = 'none';\n    this.visible = false;\n  }\n}\n","export class LoadingProgressBar {\n  constructor(container) {\n    this.idGen = 0;\n\n    this.tasks = [];\n\n    this.container = container || document.body;\n\n    this.progressBarContainerOuter = document.createElement('div');\n    this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n    this.progressBarContainerOuter.style.display = 'none';\n\n    this.progressBarBox = document.createElement('div');\n    this.progressBarBox.className = 'progressBarBox';\n\n    this.progressBarBackground = document.createElement('div');\n    this.progressBarBackground.className = 'progressBarBackground';\n\n    this.progressBar = document.createElement('div');\n    this.progressBar.className = 'progressBar';\n\n    this.progressBarBackground.appendChild(this.progressBar);\n    this.progressBarBox.appendChild(this.progressBarBackground);\n    this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n    this.progressBarContainerOuter.appendChild(style);\n    this.container.appendChild(this.progressBarContainerOuter);\n  }\n\n  show() {\n    this.progressBarContainerOuter.style.display = 'block';\n  }\n\n  hide() {\n    this.progressBarContainerOuter.style.display = 'none';\n  }\n\n  setProgress(progress) {\n    this.progressBar.style.width = progress + '%';\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.progressBarContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.progressBarContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.progressBarContainerOuter);\n      this.progressBarContainerOuter.style.zIndex =\n        this.container.style.zIndex + 1;\n    }\n  }\n}\n","export const fadeElement = (\n  element,\n  out,\n  displayStyle,\n  duration,\n  onComplete,\n) => {\n  const startTime = performance.now();\n\n  let startOpacity =\n    element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n  if (isNaN(startOpacity)) startOpacity = 1;\n\n  const interval = window.setInterval(() => {\n    const currentTime = performance.now();\n    const elapsed = currentTime - startTime;\n\n    let t = Math.min(elapsed / duration, 1.0);\n    if (t > 0.999) t = 1;\n\n    let opacity;\n    if (out) {\n      opacity = (1.0 - t) * startOpacity;\n      if (opacity < 0.0001) opacity = 0;\n    } else {\n      opacity = (1.0 - startOpacity) * t + startOpacity;\n    }\n\n    if (opacity > 0) {\n      element.style.display = displayStyle;\n      element.style.opacity = opacity;\n    } else {\n      element.style.display = 'none';\n    }\n\n    if (t >= 1) {\n      if (onComplete) onComplete();\n      window.clearInterval(interval);\n    }\n  }, 16);\n  return interval;\n};\n\nexport const cancelFade = (interval) => {\n  window.clearInterval(interval);\n};\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n  static elementIDGen = 0;\n\n  constructor(message, container) {\n    this.taskIDGen = 0;\n    this.elementID = LoadingSpinner.elementIDGen++;\n\n    this.tasks = [];\n\n    this.message = message || 'Loading...';\n    this.container = container || document.body;\n\n    this.spinnerContainerOuter = document.createElement('div');\n    this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n    this.spinnerContainerOuter.style.display = 'none';\n\n    this.spinnerContainerPrimary = document.createElement('div');\n    this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n    this.spinnerPrimary = document.createElement('div');\n    this.spinnerPrimary.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary = document.createElement('div');\n    this.messageContainerPrimary.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerPrimary${this.elementID}`,\n    );\n    this.messageContainerPrimary.innerHTML = this.message;\n\n    this.spinnerContainerMin = document.createElement('div');\n    this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n    this.spinnerMin = document.createElement('div');\n    this.spinnerMin.classList.add(\n      `spinner${this.elementID}`,\n      `spinnerMin${this.elementID}`,\n    );\n    this.messageContainerMin = document.createElement('div');\n    this.messageContainerMin.classList.add(\n      `messageContainer${this.elementID}`,\n      `messageContainerMin${this.elementID}`,\n    );\n    this.messageContainerMin.innerHTML = this.message;\n\n    this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n    this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n    this.spinnerContainerMin.appendChild(this.spinnerMin);\n    this.spinnerContainerMin.appendChild(this.messageContainerMin);\n    this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n    const style = document.createElement('style');\n    style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n    this.spinnerContainerOuter.appendChild(style);\n    this.container.appendChild(this.spinnerContainerOuter);\n\n    this.setMinimized(false, true);\n\n    this.fadeTransitions = [];\n  }\n\n  addTask(message) {\n    const newTask = {\n      message: message,\n      id: this.taskIDGen++,\n    };\n    this.tasks.push(newTask);\n    this.update();\n    return newTask.id;\n  }\n\n  removeTask(id) {\n    let index = 0;\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        this.tasks.splice(index, 1);\n        break;\n      }\n      index++;\n    }\n    this.update();\n  }\n\n  removeAllTasks() {\n    this.tasks = [];\n    this.update();\n  }\n\n  setMessageForTask(id, message) {\n    for (let task of this.tasks) {\n      if (task.id === id) {\n        task.message = message;\n        break;\n      }\n    }\n    this.update();\n  }\n\n  update() {\n    if (this.tasks.length > 0) {\n      this.show();\n      this.setMessage(this.tasks[this.tasks.length - 1].message);\n    } else {\n      this.hide();\n    }\n  }\n\n  show() {\n    this.spinnerContainerOuter.style.display = 'block';\n    this.visible = true;\n  }\n\n  hide() {\n    this.spinnerContainerOuter.style.display = 'none';\n    this.visible = false;\n  }\n\n  setContainer(container) {\n    if (\n      this.container &&\n      this.spinnerContainerOuter.parentElement === this.container\n    ) {\n      this.container.removeChild(this.spinnerContainerOuter);\n    }\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.spinnerContainerOuter);\n      this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n  }\n\n  setMinimized(minimized, instant) {\n    const showHideSpinner = (\n      element,\n      show,\n      instant,\n      displayStyle,\n      fadeTransitionsIndex,\n    ) => {\n      if (instant) {\n        element.style.display = show ? displayStyle : 'none';\n      } else {\n        this.fadeTransitions[fadeTransitionsIndex] = fadeElement(\n          element,\n          !show,\n          displayStyle,\n          STANDARD_FADE_DURATION,\n          () => {\n            this.fadeTransitions[fadeTransitionsIndex] = null;\n          },\n        );\n      }\n    };\n    showHideSpinner(\n      this.spinnerContainerPrimary,\n      !minimized,\n      instant,\n      'block',\n      0,\n    );\n    showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n    this.minimized = minimized;\n  }\n\n  setMessage(msg) {\n    this.messageContainerPrimary.innerHTML = msg;\n    this.messageContainerMin.innerHTML = msg;\n  }\n}\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showStartAR(/* device */) {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div');\n        overlay.style.display = 'none';\n        document.body.appendChild(overlay);\n\n        const svg = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'svg',\n        );\n        svg.setAttribute('width', 38);\n        svg.setAttribute('height', 38);\n        svg.style.position = 'absolute';\n        svg.style.right = '20px';\n        svg.style.top = '20px';\n        svg.addEventListener('click', function() {\n          currentSession.end();\n        });\n        overlay.appendChild(svg);\n\n        const path = document.createElementNS(\n          'http://www.w3.org/2000/svg',\n          'path',\n        );\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28');\n        path.setAttribute('stroke', '#fff');\n        path.setAttribute('stroke-width', 2);\n        svg.appendChild(path);\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = [];\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay');\n        sessionInit.domOverlay = { root: overlay };\n      }\n\n      //\n\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        renderer.xr.setReferenceSpaceType('local');\n\n        await renderer.xr.setSession(session);\n\n        button.textContent = 'STOP AR';\n        sessionInit.domOverlay.root.style.display = '';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'START AR';\n        sessionInit.domOverlay.root.style.display = 'none';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'START AR';\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-ar', sessionInit)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-ar', sessionInit)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-ar', sessionInit)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showARNotSupported() {\n      disableButton();\n\n      button.textContent = 'AR NOT SUPPORTED';\n    }\n\n    function showARNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'AR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-ar')\n        .then(function(supported) {\n          supported ? showStartAR() : showARNotSupported();\n        })\n        .catch(showARNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n}\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function showEnterVR(/* device */) {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n\n        currentSession = session;\n      }\n\n      function onSessionEnded(/* event */) {\n        currentSession.removeEventListener('end', onSessionEnded);\n\n        button.textContent = 'ENTER VR';\n\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n\n      button.textContent = 'ENTER VR';\n\n      // WebXR's requestReferenceSpace only works if the corresponding feature\n      // was requested at session creation time. For simplicity, just ask for\n      // the interesting ones as optional features, but be aware that the\n      // requestReferenceSpace call will fail if it turns out to be unavailable.\n      // ('local' is always available for immersive sessions and doesn't need to\n      // be requested separately.)\n\n      const sessionOptions = {\n        ...sessionInit,\n        optionalFeatures: [\n          'local-floor',\n          'bounded-floor',\n          'layers',\n          ...(sessionInit.optionalFeatures || []),\n        ],\n      };\n\n      button.onmouseenter = function() {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function() {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function() {\n        if (currentSession === null) {\n          navigator.xr\n            .requestSession('immersive-vr', sessionOptions)\n            .then(onSessionStarted);\n        } else {\n          currentSession.end();\n\n          if (navigator.xr.offerSession !== undefined) {\n            navigator.xr\n              .offerSession('immersive-vr', sessionOptions)\n              .then(onSessionStarted)\n              .catch((err) => {\n                console.warn(err);\n              });\n          }\n        }\n      };\n\n      if (navigator.xr.offerSession !== undefined) {\n        navigator.xr\n          .offerSession('immersive-vr', sessionOptions)\n          .then(onSessionStarted)\n          .catch((err) => {\n            console.warn(err);\n          });\n      }\n    }\n\n    function disableButton() {\n      button.style.display = '';\n\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function showVRNotAllowed(exception) {\n      disableButton();\n\n      console.warn(\n        'Exception when trying to call xr.isSessionSupported',\n        exception,\n      );\n\n      button.textContent = 'VR NOT ALLOWED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n\n      stylizeElement(button);\n\n      navigator.xr\n        .isSessionSupported('immersive-vr')\n        .then(function(supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n\n          if (supported && VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        })\n        .catch(showVRNotAllowed);\n\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n\n      stylizeElement(message);\n\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if (typeof navigator !== 'undefined' && 'xr' in navigator) {\n      // WebXRViewer (based on Firefox) has a bug where addEventListener\n      // throws a silent exception and aborts execution entirely.\n      if (/WebXRViewer\\//i.test(navigator.userAgent)) return;\n\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","export const WebXRMode = {\n  None: 0,\n  VR: 1,\n  AR: 2,\n};\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\nimport { isIOS, getIOSSemever } from '../Util.js';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n  let wasmInstance;\n  let wasmMemory;\n  let useSharedMemory;\n  let integerBasedSort;\n  let dynamicMode;\n  let splatCount;\n  let indexesToSortOffset;\n  let sortedIndexesOffset;\n  let sceneIndexesOffset;\n  let transformsOffset;\n  let precomputedDistancesOffset;\n  let mappedDistancesOffset;\n  let frequenciesOffset;\n  let centersOffset;\n  let modelViewProjOffset;\n  let countsZero;\n  let sortedIndexesOut;\n  let distanceMapRange;\n  let uploadedSplatCount;\n  let Constants;\n\n  function sort(\n    splatSortCount,\n    splatRenderCount,\n    modelViewProj,\n    usePrecomputedDistances,\n    copyIndexesToSort,\n    copyPrecomputedDistances,\n    copyTransforms,\n  ) {\n    const sortStartTime = performance.now();\n\n    if (!useSharedMemory) {\n      const indexesToSort = new Uint32Array(\n        wasmMemory,\n        indexesToSortOffset,\n        copyIndexesToSort.byteLength / Constants.BytesPerInt,\n      );\n      indexesToSort.set(copyIndexesToSort);\n      const transforms = new Float32Array(\n        wasmMemory,\n        transformsOffset,\n        copyTransforms.byteLength / Constants.BytesPerFloat,\n      );\n      transforms.set(copyTransforms);\n      if (usePrecomputedDistances) {\n        let precomputedDistances;\n        if (integerBasedSort) {\n          precomputedDistances = new Int32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerInt,\n          );\n        } else {\n          precomputedDistances = new Float32Array(\n            wasmMemory,\n            precomputedDistancesOffset,\n            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat,\n          );\n        }\n        precomputedDistances.set(copyPrecomputedDistances);\n      }\n    }\n\n    if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\n    new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n    new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(\n      countsZero,\n    );\n    wasmInstance.exports.sortIndexes(\n      indexesToSortOffset,\n      centersOffset,\n      precomputedDistancesOffset,\n      mappedDistancesOffset,\n      frequenciesOffset,\n      modelViewProjOffset,\n      sortedIndexesOffset,\n      sceneIndexesOffset,\n      transformsOffset,\n      distanceMapRange,\n      splatSortCount,\n      splatRenderCount,\n      splatCount,\n      usePrecomputedDistances,\n      integerBasedSort,\n      dynamicMode,\n    );\n\n    const sortMessage = {\n      sortDone: true,\n      splatSortCount: splatSortCount,\n      splatRenderCount: splatRenderCount,\n      sortTime: 0,\n    };\n    if (!useSharedMemory) {\n      const sortedIndexes = new Uint32Array(\n        wasmMemory,\n        sortedIndexesOffset,\n        splatRenderCount,\n      );\n      if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n        sortedIndexesOut = new Uint32Array(splatRenderCount);\n      }\n      sortedIndexesOut.set(sortedIndexes);\n      sortMessage.sortedIndexes = sortedIndexesOut;\n    }\n    const sortEndTime = performance.now();\n\n    sortMessage.sortTime = sortEndTime - sortStartTime;\n\n    self.postMessage(sortMessage);\n  }\n\n  self.onmessage = (e) => {\n    if (e.data.centers) {\n      centers = e.data.centers;\n      sceneIndexes = e.data.sceneIndexes;\n      if (integerBasedSort) {\n        new Int32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n          e.data.range.count * 4,\n        ).set(new Int32Array(centers));\n      } else {\n        new Float32Array(\n          wasmMemory,\n          centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n          e.data.range.count * 4,\n        ).set(new Float32Array(centers));\n      }\n      if (dynamicMode) {\n        new Uint32Array(\n          wasmMemory,\n          sceneIndexesOffset + e.data.range.from * 4,\n          e.data.range.count,\n        ).set(new Uint32Array(sceneIndexes));\n      }\n      uploadedSplatCount = e.data.range.from + e.data.range.count;\n    } else if (e.data.sort) {\n      const renderCount = Math.min(\n        e.data.sort.splatRenderCount || 0,\n        uploadedSplatCount,\n      );\n      const sortCount = Math.min(\n        e.data.sort.splatSortCount || 0,\n        uploadedSplatCount,\n      );\n      const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n      let copyIndexesToSort;\n      let copyPrecomputedDistances;\n      let copyTransforms;\n      if (!useSharedMemory) {\n        copyIndexesToSort = e.data.sort.indexesToSort;\n        copyTransforms = e.data.sort.transforms;\n        if (usePrecomputedDistances) {\n          copyPrecomputedDistances = e.data.sort.precomputedDistances;\n        }\n      }\n      sort(\n        sortCount,\n        renderCount,\n        e.data.sort.modelViewProj,\n        usePrecomputedDistances,\n        copyIndexesToSort,\n        copyPrecomputedDistances,\n        copyTransforms,\n      );\n    } else if (e.data.init) {\n      // Yep, this is super hacky and gross :(\n      Constants = e.data.init.Constants;\n\n      splatCount = e.data.init.splatCount;\n      useSharedMemory = e.data.init.useSharedMemory;\n      integerBasedSort = e.data.init.integerBasedSort;\n      dynamicMode = e.data.init.dynamicMode;\n      distanceMapRange = e.data.init.distanceMapRange;\n      uploadedSplatCount = 0;\n\n      const CENTERS_BYTES_PER_ENTRY = integerBasedSort ?\n        Constants.BytesPerInt * 4 :\n        Constants.BytesPerFloat * 4;\n\n      const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n      const matrixSize = 16 * Constants.BytesPerFloat;\n      const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n      const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n      const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n        splatCount * Constants.BytesPerInt :\n        splatCount * Constants.BytesPerFloat;\n      const memoryRequiredForMappedDistances =\n        splatCount * Constants.BytesPerInt;\n      const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n      const memoryRequiredForIntermediateSortBuffers = integerBasedSort ?\n        distanceMapRange * Constants.BytesPerInt * 2 :\n        distanceMapRange * Constants.BytesPerFloat * 2;\n      const memoryRequiredforTransformIndexes = dynamicMode ?\n        splatCount * Constants.BytesPerInt :\n        0;\n      const memoryRequiredforTransforms = dynamicMode ?\n        Constants.MaxScenes * matrixSize :\n        0;\n      const extraMemory = Constants.MemoryPageSize * 32;\n\n      const totalRequiredMemory =\n        memoryRequiredForIndexesToSort +\n        memoryRequiredForCenters +\n        memoryRequiredForModelViewProjectionMatrix +\n        memoryRequiredForPrecomputedDistances +\n        memoryRequiredForMappedDistances +\n        memoryRequiredForIntermediateSortBuffers +\n        memoryRequiredForSortedIndexes +\n        memoryRequiredforTransformIndexes +\n        memoryRequiredforTransforms +\n        extraMemory;\n      const totalPagesRequired =\n        Math.floor(totalRequiredMemory / Constants.MemoryPageSize) + 1;\n      const sorterWasmImport = {\n        module: {},\n        env: {\n          memory: new WebAssembly.Memory({\n            initial: totalPagesRequired,\n            maximum: totalPagesRequired,\n            shared: true,\n          }),\n        },\n      };\n      WebAssembly.compile(sorterWasmBytes)\n        .then((wasmModule) => {\n          return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n        })\n        .then((instance) => {\n          wasmInstance = instance;\n          indexesToSortOffset = 0;\n          centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n          modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n          precomputedDistancesOffset =\n            modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n          mappedDistancesOffset =\n            precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n          frequenciesOffset =\n            mappedDistancesOffset + memoryRequiredForMappedDistances;\n          sortedIndexesOffset =\n            frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n          sceneIndexesOffset =\n            sortedIndexesOffset + memoryRequiredForSortedIndexes;\n          transformsOffset =\n            sceneIndexesOffset + memoryRequiredforTransformIndexes;\n          wasmMemory = sorterWasmImport.env.memory.buffer;\n          if (useSharedMemory) {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n              indexesToSortBuffer: wasmMemory,\n              indexesToSortOffset: indexesToSortOffset,\n              sortedIndexesBuffer: wasmMemory,\n              sortedIndexesOffset: sortedIndexesOffset,\n              precomputedDistancesBuffer: wasmMemory,\n              precomputedDistancesOffset: precomputedDistancesOffset,\n              transformsBuffer: wasmMemory,\n              transformsOffset: transformsOffset,\n            });\n          } else {\n            self.postMessage({\n              sortSetupPhase1Complete: true,\n            });\n          }\n        });\n    }\n  };\n}\n\nexport function createSortWorker(\n  splatCount,\n  useSharedMemory,\n  enableSIMDInSort,\n  integerBasedSort,\n  dynamicMode,\n  splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision,\n) {\n  const worker = new Worker(\n    URL.createObjectURL(\n      new Blob(['(', sortWorker.toString(), ')(self)'], {\n        type: 'application/javascript',\n      }),\n    ),\n  );\n\n  let sourceWasm = SorterWasm;\n\n  // iOS makes choosing the right WebAssembly configuration tricky :(\n  const iOSSemVer = isIOS() ? getIOSSemever() : null;\n  if (!enableSIMDInSort && !useSharedMemory) {\n    sourceWasm = SorterWasmNoSIMD;\n    // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\n    // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNoSIMDNonShared;\n    }\n  } else if (!enableSIMDInSort) {\n    sourceWasm = SorterWasmNoSIMD;\n  } else if (!useSharedMemory) {\n    // Same issue with shared memory as above on iOS devices\n    if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\n      sourceWasm = SorterWasmNonShared;\n    }\n  }\n\n  const sorterWasmBinaryString = atob(sourceWasm);\n  const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n  for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n    sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n  }\n\n  worker.postMessage({\n    init: {\n      sorterWasmBytes: sorterWasmBytes.buffer,\n      splatCount: splatCount,\n      useSharedMemory: useSharedMemory,\n      integerBasedSort: integerBasedSort,\n      dynamicMode: dynamicMode,\n      distanceMapRange: 1 << splatSortDistanceMapPrecision,\n      // Super hacky\n      Constants: {\n        BytesPerFloat: Constants.BytesPerFloat,\n        BytesPerInt: Constants.BytesPerInt,\n        MemoryPageSize: Constants.MemoryPageSize,\n        MaxScenes: Constants.MaxScenes,\n      },\n    },\n  });\n  return worker;\n}\n","import * as THREE from 'three';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { Constants } from './Constants.js';\nimport { LogLevel } from './LogLevel.js';\nimport { OrbitControls } from './OrbitControls.js';\nimport { RenderMode } from './RenderMode.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\nimport { SplatRenderMode } from './SplatRenderMode.js';\nimport {\n  abortablePromiseWithExtractedComponents,\n  clamp,\n  delayedExecute,\n  getCurrentTime,\n  getIOSSemever,\n  isIOS,\n  makeProgressiveFetchFunction,\n} from './Util.js';\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { GLTFLoader } from './loaders/splat/gltf/GLTFLoader.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { createSortWorker } from './worker/SortWorker.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = 0.75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n  constructor(options = {}) {\n    // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n    // when the viewer uses its own camera).\n    if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n    this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n    // The camera's initial position (only used when the viewer uses its own camera).\n    if (!options.initialCameraPosition) {\n      options.initialCameraPosition = [0, 10, 15];\n    }\n    this.initialCameraPosition = new THREE.Vector3().fromArray(\n      options.initialCameraPosition,\n    );\n\n    // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n    if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n    this.initialCameraLookAt = new THREE.Vector3().fromArray(\n      options.initialCameraLookAt,\n    );\n\n    // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n    this.dropInMode = options.dropInMode || false;\n\n    // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n    if (\n      options.selfDrivenMode === undefined ||\n      options.selfDrivenMode === null\n    ) {\n      options.selfDrivenMode = true;\n    }\n    this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n    this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n    // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n    if (options.useBuiltInControls === undefined) {\n      options.useBuiltInControls = true;\n    }\n    this.useBuiltInControls = options.useBuiltInControls;\n\n    // parent element of the Three.js renderer canvas\n    this.rootElement = options.rootElement;\n\n    // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n    // at a small cost to visual quality\n    this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n    this.devicePixelRatio = this.ignoreDevicePixelRatio ?\n      1 :\n      window.devicePixelRatio;\n\n    // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n    this.halfPrecisionCovariancesOnGPU =\n      options.halfPrecisionCovariancesOnGPU || false;\n\n    // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n    this.threeScene = options.threeScene;\n    // Allows for usage of an external Three.js renderer\n    this.renderer = options.renderer;\n    // Allows for usage of an external Three.js camera\n    this.camera = options.camera;\n\n    // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n    // Currently this means pre-computing splat distances from the camera on the GPU\n    this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n    // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n    // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n    // overflow in larger scenes.\n    if (\n      options.integerBasedSort === undefined ||\n      options.integerBasedSort === null\n    ) {\n      options.integerBasedSort = true;\n    }\n    this.integerBasedSort = options.integerBasedSort;\n\n    // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n    // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n    // https://web.dev/articles/cross-origin-isolation-guide\n    // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n    // loading the application. More information is available in the README.\n    if (\n      options.sharedMemoryForWorkers === undefined ||\n      options.sharedMemoryForWorkers === null\n    ) {\n      options.sharedMemoryForWorkers = true;\n    }\n    this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n    // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n    // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n    // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n    // SplatMesh.getSplatCenter() by default.\n    this.dynamicScene = !!options.dynamicScene;\n\n    // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n    // substantially different resolution than that at which they were rendered during training. This will only work correctly\n    // for models that were trained using a process that utilizes this compensation calculation. For more details:\n    // https://github.com/nerfstudio-project/gsplat/pull/117\n    // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n    this.antialiased = options.antialiased || false;\n\n    this.webXRMode = options.webXRMode || WebXRMode.None;\n    if (this.webXRMode !== WebXRMode.None) {\n      this.gpuAcceleratedSort = false;\n    }\n    this.webXRActive = false;\n\n    this.webXRSessionInit = options.webXRSessionInit || {};\n\n    // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n    // it will only render when something in the scene has changed.\n    this.renderMode = options.renderMode || RenderMode.Always;\n\n    // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n    // and a fast fade-in for non progressively loaded scenes.\n    // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n    // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n    this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n    // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n    // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n    this.focalAdjustment = options.focalAdjustment || 1.0;\n\n    // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n    this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\n\n    // The verbosity of console logging\n    this.logLevel = options.logLevel || LogLevel.None;\n\n    // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\n    // Valid values are 0 - 2. Default value is 0.\n    this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\n\n    // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\n    // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\n    // that are enabled by the 'dynamicScene' parameter.\n    this.enableOptionalEffects = options.enableOptionalEffects || false;\n\n    // Enable the usage of SIMD WebAssembly instructions for the splat sort\n    if (\n      options.enableSIMDInSort === undefined ||\n      options.enableSIMDInSort === null\n    ) {\n      options.enableSIMDInSort = true;\n    }\n    this.enableSIMDInSort = options.enableSIMDInSort;\n\n    // Level to compress non KSPLAT files when loading them for direct rendering\n    if (\n      options.inMemoryCompressionLevel === undefined ||\n      options.inMemoryCompressionLevel === null\n    ) {\n      options.inMemoryCompressionLevel = 0;\n    }\n    this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\n\n    // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\n    // Does not apply if splat scene is progressively loaded.\n    if (\n      options.optimizeSplatData === undefined ||\n      options.optimizeSplatData === null\n    ) {\n      options.optimizeSplatData = true;\n    }\n    this.optimizeSplatData = options.optimizeSplatData;\n\n    // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\n    // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\n    // it will need to be re-populated from the splat buffer(s). Default is false.\n    if (\n      options.freeIntermediateSplatData === undefined ||\n      options.freeIntermediateSplatData === null\n    ) {\n      options.freeIntermediateSplatData = false;\n    }\n    this.freeIntermediateSplatData = options.freeIntermediateSplatData;\n\n    // It appears that for certain iOS versions, special actions need to be taken with the\n    // usage of SIMD instructions and shared memory\n    if (isIOS()) {\n      const semver = getIOSSemever();\n      if (semver.major < 17) {\n        this.enableSIMDInSort = false;\n      }\n      if (semver.major < 16) {\n        this.sharedMemoryForWorkers = false;\n      }\n    }\n\n    // Tell the viewer how to render the splats\n    if (\n      options.splatRenderMode === undefined ||\n      options.splatRenderMode === null\n    ) {\n      options.splatRenderMode = SplatRenderMode.ThreeD;\n    }\n    this.splatRenderMode = options.splatRenderMode;\n\n    // Customize the speed at which the scene is revealed\n    this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\n\n    // Set the range for the depth map for the counting sort used to sort the splats\n    this.splatSortDistanceMapPrecision =\n      options.splatSortDistanceMapPrecision ||\n      Constants.DefaultSplatSortDistanceMapPrecision;\n    const maxPrecision = this.integerBasedSort ? 20 : 24;\n    this.splatSortDistanceMapPrecision = clamp(\n      this.splatSortDistanceMapPrecision,\n      10,\n      maxPrecision,\n    );\n\n    this.onSplatMeshChangedCallback = null;\n    this.createSplatMesh();\n\n    this.controls = null;\n    this.perspectiveControls = null;\n    this.orthographicControls = null;\n\n    this.orthographicCamera = null;\n    this.perspectiveCamera = null;\n\n    this.showMeshCursor = false;\n    this.showControlPlane = false;\n    this.showInfo = false;\n\n    this.sceneHelper = null;\n\n    this.sortWorker = null;\n    this.sortRunning = false;\n    this.splatRenderCount = 0;\n    this.splatSortCount = 0;\n    this.lastSplatSortCount = 0;\n    this.sortWorkerIndexesToSort = null;\n    this.sortWorkerSortedIndexes = null;\n    this.sortWorkerPrecomputedDistances = null;\n    this.sortWorkerTransforms = null;\n    this.preSortMessages = [];\n    this.runAfterNextSort = [];\n\n    this.selfDrivenModeRunning = false;\n    this.splatRenderReady = false;\n\n    this.raycaster = new Raycaster();\n\n    this.infoPanel = null;\n\n    this.startInOrthographicMode = false;\n\n    this.currentFPS = 0;\n    this.lastSortTime = 0;\n    this.consecutiveRenderFrames = 0;\n\n    this.previousCameraTarget = new THREE.Vector3();\n    this.nextCameraTarget = new THREE.Vector3();\n\n    this.mousePosition = new THREE.Vector2();\n    this.mouseDownPosition = new THREE.Vector2();\n    this.mouseDownTime = null;\n\n    this.resizeObserver = null;\n    this.mouseMoveListener = null;\n    this.mouseDownListener = null;\n    this.mouseUpListener = null;\n    this.keyDownListener = null;\n\n    this.sortPromise = null;\n    this.sortPromiseResolver = null;\n    this.splatSceneDownloadPromises = {};\n    this.splatSceneDownloadAndBuildPromise = null;\n    this.splatSceneRemovalPromise = null;\n\n    this.loadingSpinner = new LoadingSpinner(\n      null,\n      this.rootElement || document.body,\n    );\n    this.loadingSpinner.hide();\n    this.loadingProgressBar = new LoadingProgressBar(\n      this.rootElement || document.body,\n    );\n    this.loadingProgressBar.hide();\n    this.infoPanel = new InfoPanel(this.rootElement || document.body);\n    this.infoPanel.hide();\n\n    this.usingExternalCamera = this.dropInMode || this.camera ? true : false;\n    this.usingExternalRenderer =\n      this.dropInMode || this.renderer ? true : false;\n\n    this.initialized = false;\n    this.disposing = false;\n    this.disposed = false;\n    this.disposePromise = null;\n\n    this.fetch = options.fetch || ((url, opts) => fetch(url, opts));\n    this.fetchWithProgress = makeProgressiveFetchFunction(this.fetch);\n\n    if (!this.dropInMode) this.init();\n  }\n\n  createSplatMesh() {\n    this.splatMesh = new SplatMesh(\n      this.splatRenderMode,\n      this.dynamicScene,\n      this.enableOptionalEffects,\n      this.halfPrecisionCovariancesOnGPU,\n      this.devicePixelRatio,\n      this.gpuAcceleratedSort,\n      this.integerBasedSort,\n      this.antialiased,\n      this.maxScreenSpaceSplatSize,\n      this.logLevel,\n      this.sphericalHarmonicsDegree,\n      this.sceneFadeInRateMultiplier,\n    );\n    this.splatMesh.frustumCulled = false;\n    if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\n  }\n\n  init() {\n    if (this.initialized) return;\n\n    if (!this.rootElement) {\n      if (!this.usingExternalRenderer) {\n        this.rootElement = document.createElement('div');\n        this.rootElement.style.width = '100%';\n        this.rootElement.style.height = '100%';\n        this.rootElement.style.position = 'absolute';\n        document.body.appendChild(this.rootElement);\n      } else {\n        this.rootElement =\n          this.renderer.domElement.parentElement || document.body;\n      }\n    }\n\n    this.setupCamera();\n    this.setupRenderer();\n    this.setupWebXR(this.webXRSessionInit);\n    this.setupControls();\n    this.setupEventHandlers();\n\n    this.threeScene = this.threeScene || new THREE.Scene();\n    this.sceneHelper = new SceneHelper(this.threeScene);\n    this.sceneHelper.setupMeshCursor();\n    this.sceneHelper.setupFocusMarker();\n    this.sceneHelper.setupControlPlane();\n\n    this.loadingProgressBar.setContainer(this.rootElement);\n    this.loadingSpinner.setContainer(this.rootElement);\n    this.infoPanel.setContainer(this.rootElement);\n\n    this.initialized = true;\n  }\n\n  setupCamera() {\n    if (!this.usingExternalCamera) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.perspectiveCamera = new THREE.PerspectiveCamera(\n        THREE_CAMERA_FOV,\n        renderDimensions.x / renderDimensions.y,\n        0.1,\n        1000,\n      );\n      this.orthographicCamera = new THREE.OrthographicCamera(\n        renderDimensions.x / -2,\n        renderDimensions.x / 2,\n        renderDimensions.y / 2,\n        renderDimensions.y / -2,\n        0.1,\n        1000,\n      );\n      this.camera = this.startInOrthographicMode ?\n        this.orthographicCamera :\n        this.perspectiveCamera;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupRenderer() {\n    if (!this.usingExternalRenderer) {\n      const renderDimensions = new THREE.Vector2();\n      this.getRenderDimensions(renderDimensions);\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: false,\n        precision: 'highp',\n      });\n      this.renderer.setPixelRatio(this.devicePixelRatio);\n      this.renderer.autoClear = true;\n      this.renderer.setClearColor(new THREE.Color(0x000000), 0.0);\n      this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n      this.resizeObserver = new ResizeObserver(() => {\n        this.getRenderDimensions(renderDimensions);\n        this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        this.forceRenderNextFrame();\n      });\n      this.resizeObserver.observe(this.rootElement);\n      this.rootElement.appendChild(this.renderer.domElement);\n    }\n  }\n\n  setupWebXR(webXRSessionInit) {\n    if (this.webXRMode) {\n      if (this.webXRMode === WebXRMode.VR) {\n        this.rootElement.appendChild(\n          VRButton.createButton(this.renderer, webXRSessionInit),\n        );\n      } else if (this.webXRMode === WebXRMode.AR) {\n        this.rootElement.appendChild(\n          ARButton.createButton(this.renderer, webXRSessionInit),\n        );\n      }\n      this.renderer.xr.addEventListener('sessionstart', (e) => {\n        this.webXRActive = true;\n      });\n      this.renderer.xr.addEventListener('sessionend', (e) => {\n        this.webXRActive = false;\n      });\n      this.renderer.xr.enabled = true;\n      this.camera.position.copy(this.initialCameraPosition);\n      this.camera.up.copy(this.cameraUp).normalize();\n      this.camera.lookAt(this.initialCameraLookAt);\n    }\n  }\n\n  setupControls() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      if (!this.usingExternalCamera) {\n        this.perspectiveControls = new OrbitControls(\n          this.perspectiveCamera,\n          this.renderer.domElement,\n        );\n        this.orthographicControls = new OrbitControls(\n          this.orthographicCamera,\n          this.renderer.domElement,\n        );\n      } else {\n        if (this.camera.isOrthographicCamera) {\n          this.orthographicControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        } else {\n          this.perspectiveControls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n          );\n        }\n      }\n      for (let controls of [\n        this.orthographicControls,\n        this.perspectiveControls,\n      ]) {\n        if (controls) {\n          controls.listenToKeyEvents(window);\n          controls.rotateSpeed = 0.5;\n          controls.maxPolarAngle = Math.PI * 0.75;\n          controls.minPolarAngle = 0.1;\n          controls.enableDamping = true;\n          controls.dampingFactor = 0.05;\n          controls.target.copy(this.initialCameraLookAt);\n          controls.update();\n        }\n      }\n      this.controls = this.camera.isOrthographicCamera ?\n        this.orthographicControls :\n        this.perspectiveControls;\n      this.controls.update();\n    }\n  }\n\n  setupEventHandlers() {\n    if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n      this.mouseMoveListener = this.onMouseMove.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n        false,\n      );\n      this.mouseDownListener = this.onMouseDown.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n        false,\n      );\n      this.mouseUpListener = this.onMouseUp.bind(this);\n      this.renderer.domElement.addEventListener(\n        'pointerup',\n        this.mouseUpListener,\n        false,\n      );\n      this.keyDownListener = this.onKeyDown.bind(this);\n      window.addEventListener('keydown', this.keyDownListener, false);\n    }\n  }\n\n  removeEventHandlers() {\n    if (this.useBuiltInControls) {\n      this.renderer.domElement.removeEventListener(\n        'pointermove',\n        this.mouseMoveListener,\n      );\n      this.mouseMoveListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerdown',\n        this.mouseDownListener,\n      );\n      this.mouseDownListener = null;\n      this.renderer.domElement.removeEventListener(\n        'pointerup',\n        this.mouseUpListener,\n      );\n      this.mouseUpListener = null;\n      window.removeEventListener('keydown', this.keyDownListener);\n      this.keyDownListener = null;\n    }\n  }\n\n  setRenderMode(renderMode) {\n    this.renderMode = renderMode;\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value =\n      activeSphericalHarmonicsDegrees;\n    this.splatMesh.material.uniformsNeedUpdate = true;\n  }\n\n  onSplatMeshChanged(callback) {\n    this.onSplatMeshChangedCallback = callback;\n  }\n\n  onKeyDown = (function() {\n    const forward = new THREE.Vector3();\n    const tempMatrixLeft = new THREE.Matrix4();\n    const tempMatrixRight = new THREE.Matrix4();\n\n    return function(e) {\n      forward.set(0, 0, -1);\n      forward.transformDirection(this.camera.matrixWorld);\n      tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n      tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n      switch (e.code) {\n        case 'KeyG':\n          this.focalAdjustment += 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'KeyF':\n          this.focalAdjustment -= 0.02;\n          this.forceRenderNextFrame();\n          break;\n        case 'ArrowLeft':\n          this.camera.up.transformDirection(tempMatrixLeft);\n          break;\n        case 'ArrowRight':\n          this.camera.up.transformDirection(tempMatrixRight);\n          break;\n        case 'KeyC':\n          this.showMeshCursor = !this.showMeshCursor;\n          break;\n        case 'KeyU':\n          this.showControlPlane = !this.showControlPlane;\n          break;\n        case 'KeyI':\n          this.showInfo = !this.showInfo;\n          if (this.showInfo) {\n            this.infoPanel.show();\n          } else {\n            this.infoPanel.hide();\n          }\n          break;\n        case 'KeyO':\n          if (!this.usingExternalCamera) {\n            this.setOrthographicMode(!this.camera.isOrthographicCamera);\n          }\n          break;\n        case 'KeyP':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setPointCloudModeEnabled(\n              !this.splatMesh.getPointCloudModeEnabled(),\n            );\n          }\n          break;\n        case 'Equal':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n          }\n          break;\n        case 'Minus':\n          if (!this.usingExternalCamera) {\n            this.splatMesh.setSplatScale(\n              Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0),\n            );\n          }\n          break;\n      }\n    };\n  })();\n\n  onMouseMove(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n  }\n\n  onMouseDown() {\n    this.mouseDownPosition.copy(this.mousePosition);\n    this.mouseDownTime = getCurrentTime();\n  }\n\n  onMouseUp = (function() {\n    const clickOffset = new THREE.Vector2();\n\n    return function(mouse) {\n      clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n      const mouseUpTime = getCurrentTime();\n      const wasClick =\n        mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n      if (wasClick) {\n        this.onMouseClick(mouse);\n      }\n    };\n  })();\n\n  onMouseClick(mouse) {\n    this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    this.checkForFocalPointChange();\n  }\n\n  checkForFocalPointChange = (function() {\n    const renderDimensions = new THREE.Vector2();\n    const toNewFocalPoint = new THREE.Vector3();\n    const outHits = [];\n\n    return function() {\n      if (!this.transitioningCameraTarget) {\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          const hit = outHits[0];\n\n          const intersectionPoint = hit.origin;\n\n          toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n          if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n            this.previousCameraTarget.copy(this.controls.target);\n            this.nextCameraTarget.copy(intersectionPoint);\n            this.transitioningCameraTarget = true;\n            this.transitioningCameraTargetStartTime = getCurrentTime();\n          }\n        }\n      }\n    };\n  })();\n\n  /*\n  * Uses the raycaster to traverse the different splats and checks for collisions.\n  *\n  * @param {object} camera is the perspective camera used to render\n  * @param {object} position is the normalized position relative to the screen.\n  * @param {object} screenSize\n  * @returns {object|null} the first splat that collides with the ray.\n  */\n  getSplatPosition = (function() {\n    return function (renderDimensions, camera, position) {\n      const outHits = [];\n      this.raycaster.setFromCameraAndScreenPosition(\n        camera,\n        position,\n        renderDimensions,\n      );\n      this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n      if (outHits.length > 0) {\n        const hit = outHits[0];\n        return hit;\n      }\n      return null;\n    }\n  })()\n\n  getRenderDimensions(outDimensions) {\n    if (this.rootElement) {\n      outDimensions.x = this.rootElement.offsetWidth;\n      outDimensions.y = this.rootElement.offsetHeight;\n    } else {\n      this.renderer.getSize(outDimensions);\n    }\n  }\n\n  setOrthographicMode(orthographicMode) {\n    if (orthographicMode === this.camera.isOrthographicCamera) return;\n    const fromCamera = this.camera;\n    const toCamera = orthographicMode ?\n      this.orthographicCamera :\n      this.perspectiveCamera;\n    toCamera.position.copy(fromCamera.position);\n    toCamera.up.copy(fromCamera.up);\n    toCamera.rotation.copy(fromCamera.rotation);\n    toCamera.quaternion.copy(fromCamera.quaternion);\n    toCamera.matrix.copy(fromCamera.matrix);\n    this.camera = toCamera;\n\n    if (this.controls) {\n      const resetControls = (controls) => {\n        controls.saveState();\n        controls.reset();\n      };\n\n      const fromControls = this.controls;\n      const toControls = orthographicMode ?\n        this.orthographicControls :\n        this.perspectiveControls;\n\n      resetControls(toControls);\n      resetControls(fromControls);\n\n      toControls.target.copy(fromControls.target);\n      if (orthographicMode) {\n        Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n      } else {\n        Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n      }\n      this.controls = toControls;\n      this.camera.lookAt(this.controls.target);\n    }\n  }\n\n  static setCameraPositionFromZoom = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(positionCamera, zoomedCamera, controls) {\n      const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n      tempVector\n        .copy(controls.target)\n        .sub(positionCamera.position)\n        .normalize()\n        .multiplyScalar(toLookAtDistance)\n        .negate();\n      positionCamera.position.copy(controls.target).add(tempVector);\n    };\n  })();\n\n  static setCameraZoomFromPosition = (function() {\n    const tempVector = new THREE.Vector3();\n\n    return function(zoomCamera, positionZamera, controls) {\n      const toLookAtDistance = tempVector\n        .copy(controls.target)\n        .sub(positionZamera.position)\n        .length();\n      zoomCamera.zoom = 1 / (toLookAtDistance * 0.001);\n    };\n  })();\n\n  updateSplatMesh = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.splatMesh) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      if (splatCount > 0) {\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.splatMesh.updateTransforms();\n        this.getRenderDimensions(renderDimensions);\n        const focalLengthX =\n          this.camera.projectionMatrix.elements[0] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.x;\n        const focalLengthY =\n          this.camera.projectionMatrix.elements[5] *\n          0.5 *\n          this.devicePixelRatio *\n          renderDimensions.y;\n\n        const focalMultiplier = this.camera.isOrthographicCamera ?\n          1.0 / this.devicePixelRatio :\n          1.0;\n        const focalAdjustment = this.focalAdjustment * focalMultiplier;\n        const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n        this.adjustForWebXRStereo(renderDimensions);\n        this.splatMesh.updateUniforms(\n          renderDimensions,\n          focalLengthX * focalAdjustment,\n          focalLengthY * focalAdjustment,\n          this.camera.isOrthographicCamera,\n          this.camera.zoom || 1.0,\n          inverseFocalAdjustment,\n        );\n      }\n    };\n  })();\n\n  adjustForWebXRStereo(renderDimensions) {\n    // TODO: Figure out a less hacky way to determine if stereo rendering is active\n    if (this.camera && this.webXRActive) {\n      const xrCamera = this.renderer.xr.getCamera();\n      const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\n      const cameraProj00 = this.camera.projectionMatrix.elements[0];\n      renderDimensions.x *= cameraProj00 / xrCameraProj00;\n    }\n  }\n\n  isLoadingOrUnloading() {\n    return (\n      Object.keys(this.splatSceneDownloadPromises).length > 0 ||\n      this.splatSceneDownloadAndBuildPromise !== null ||\n      this.splatSceneRemovalPromise !== null\n    );\n  }\n\n  isDisposingOrDisposed() {\n    return this.disposing || this.disposed;\n  }\n\n  addSplatSceneDownloadPromise(promise) {\n    this.splatSceneDownloadPromises[promise.id] = promise;\n  }\n\n  removeSplatSceneDownloadPromise(promise) {\n    delete this.splatSceneDownloadPromises[promise.id];\n  }\n\n  setSplatSceneDownloadAndBuildPromise(promise) {\n    this.splatSceneDownloadAndBuildPromise = promise;\n  }\n\n  clearSplatSceneDownloadAndBuildPromise() {\n    this.splatSceneDownloadAndBuildPromise = null;\n  }\n\n  /**\n   * Add a splat scene to the viewer and display any loading UI if appropriate.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received, or other processing occurs\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    if (\n      options.progressiveLoad &&\n      this.splatMesh.scenes &&\n      this.splatMesh.scenes.length > 0\n    ) {\n      console.log(\n        'addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes',\n      );\n      options.progressiveLoad = false;\n    }\n\n    const format =\n      options.format !== undefined && options.format !== null ?\n        options.format :\n        sceneFormatFromPath(path);\n    const progressiveLoad =\n      Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\n    const showLoadingUI =\n      options.showLoadingUI !== undefined && options.showLoadingUI !== null ?\n        options.showLoadingUI :\n        true;\n\n    let loadingUITaskId = null;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n    const hideLoadingUI = () => {\n      this.loadingProgressBar.hide();\n      this.loadingSpinner.removeAllTasks();\n    };\n\n    const onProgressUIUpdate = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          if (percentComplete == 100) {\n            this.loadingSpinner.setMessageForTask(\n              loadingUITaskId,\n              'Download complete!',\n            );\n          } else {\n            if (progressiveLoad) {\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                'Downloading splats...',\n              );\n            } else {\n              const suffix = percentCompleteLabel ?\n                `: ${percentCompleteLabel}` :\n                `...`;\n              this.loadingSpinner.setMessageForTask(\n                loadingUITaskId,\n                `Downloading${suffix}`,\n              );\n            }\n          }\n        } else if (loaderStatus === LoaderStatus.Processing) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            'Processing splats...',\n          );\n        }\n      }\n    };\n\n    let downloadDone = false;\n    let downloadedPercentage = 0;\n    const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\n      if (showLoadingUI) {\n        if (\n          (firstBuild && progressiveLoad) ||\n          (finalBuild && !progressiveLoad)\n        ) {\n          this.loadingSpinner.removeTask(loadingUITaskId);\n          if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n        }\n        if (progressiveLoad) {\n          if (finalBuild) {\n            downloadDone = true;\n            this.loadingProgressBar.hide();\n          } else {\n            this.loadingProgressBar.setProgress(downloadedPercentage);\n          }\n        }\n      }\n    };\n\n    const onProgress = (\n      percentComplete,\n      percentCompleteLabel,\n      loaderStatus,\n    ) => {\n      downloadedPercentage = percentComplete;\n      onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\n      if (options.onProgress) {\n        options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\n      }\n    };\n\n    const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n      if (!progressiveLoad && options.onProgress) {\n        options.onProgress(0, '0%', LoaderStatus.Processing);\n      }\n      const addSplatBufferOptions = {\n        rotation: options.rotation || options.orientation,\n        position: options.position,\n        scale: options.scale,\n        splatAlphaRemovalThreshold: options.splatAlphaRemovalThreshold,\n      };\n      return this.addSplatBuffers(\n        [splatBuffer],\n        [addSplatBufferOptions],\n        finalBuild,\n        firstBuild && showLoadingUI,\n        showLoadingUI,\n        progressiveLoad,\n        progressiveLoad,\n      ).then(() => {\n        if (!progressiveLoad && options.onProgress) {\n          options.onProgress(100, '100%', LoaderStatus.Processing);\n        }\n        splatBuffersAddedUIUpdate(firstBuild, finalBuild);\n      });\n    };\n\n    const loadFunc = progressiveLoad ?\n      this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\n      this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\n    return loadFunc(\n      path,\n      format,\n      options.splatAlphaRemovalThreshold,\n      buildSection.bind(this),\n      onProgress,\n      hideLoadingUI.bind(this),\n    );\n  }\n\n  /**\n   * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\n   * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\n   * and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\n   * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n   * @param {function} onException Function to be called when exception occurs\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneStandardLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onProgress,\n    onException,\n  ) {\n    const downloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onProgress,\n      false,\n      undefined,\n      format,\n    );\n    const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(\n      downloadPromise.abortHandler,\n    );\n\n    downloadPromise\n      .then((splatBuffer) => {\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        return buildFunc(splatBuffer, true, true).then(() => {\n          downloadAndBuildPromise.resolve();\n          this.clearSplatSceneDownloadAndBuildPromise();\n        });\n      })\n      .catch((e) => {\n        if (onException) onException();\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(downloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(`Viewer::addSplatScene -> Could not load file ${path}`);\n        downloadAndBuildPromise.reject(error);\n      });\n\n    this.addSplatSceneDownloadPromise(downloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\n\n    return downloadAndBuildPromise.promise;\n  }\n\n  /**\n   * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\n   * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\n   * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {SceneFormat} format Format of the splat scene file\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n   * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\n   * @param {function} onDownloadProgress Function to be called as file data are received\n   * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\n   * @return {AbortablePromise}\n   */\n  downloadAndBuildSingleSplatSceneProgressiveLoad(\n    path,\n    format,\n    splatAlphaRemovalThreshold,\n    buildFunc,\n    onDownloadProgress,\n    onDownloadException,\n  ) {\n    let progressiveLoadedSectionBuildCount = 0;\n    let progressiveLoadedSectionBuilding = false;\n    const queuedProgressiveLoadSectionBuilds = [];\n\n    const checkAndBuildProgressiveLoadSections = () => {\n      if (\n        queuedProgressiveLoadSectionBuilds.length > 0 &&\n        !progressiveLoadedSectionBuilding &&\n        !this.isDisposingOrDisposed()\n      ) {\n        progressiveLoadedSectionBuilding = true;\n        const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\n        buildFunc(\n          queuedBuild.splatBuffer,\n          queuedBuild.firstBuild,\n          queuedBuild.finalBuild,\n        ).then(() => {\n          progressiveLoadedSectionBuilding = false;\n          if (queuedBuild.firstBuild) {\n            progressiveLoadFirstSectionBuildPromise.resolve();\n          } else if (queuedBuild.finalBuild) {\n            splatSceneDownloadAndBuildPromise.resolve();\n            this.clearSplatSceneDownloadAndBuildPromise();\n          }\n          if (queuedProgressiveLoadSectionBuilds.length > 0) {\n            delayedExecute(() => checkAndBuildProgressiveLoadSections());\n          }\n        });\n      }\n    };\n\n    const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\n      if (!this.isDisposingOrDisposed()) {\n        if (\n          finalBuild ||\n          queuedProgressiveLoadSectionBuilds.length === 0 ||\n          splatBuffer.getSplatCount() >\n            queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()\n        ) {\n          queuedProgressiveLoadSectionBuilds.push({\n            splatBuffer,\n            firstBuild: progressiveLoadedSectionBuildCount === 0,\n            finalBuild,\n          });\n          progressiveLoadedSectionBuildCount++;\n          checkAndBuildProgressiveLoadSections();\n        }\n      }\n    };\n\n    const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n      path,\n      splatAlphaRemovalThreshold,\n      onDownloadProgress,\n      true,\n      onProgressiveLoadSectionProgress,\n      format,\n    );\n\n    const progressiveLoadFirstSectionBuildPromise =\n      abortablePromiseWithExtractedComponents(\n        splatSceneDownloadPromise.abortHandler,\n      );\n    const splatSceneDownloadAndBuildPromise =\n      abortablePromiseWithExtractedComponents();\n\n    this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\n    this.setSplatSceneDownloadAndBuildPromise(\n      splatSceneDownloadAndBuildPromise.promise,\n    );\n\n    splatSceneDownloadPromise\n      .then(() => {\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n      })\n      .catch((e) => {\n        this.clearSplatSceneDownloadAndBuildPromise();\n        this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\n        const error =\n          e instanceof AbortedPromiseError ?\n            e :\n            new Error(\n                `Viewer::addSplatScene -> Could not load one or more scenes`,\n              );\n        progressiveLoadFirstSectionBuildPromise.reject(error);\n        if (onDownloadException) onDownloadException(error);\n      });\n\n    return progressiveLoadFirstSectionBuildPromise.promise;\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @param {function} onProgress Function to be called as file data are received\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot add splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot add splat scene after dispose() is called.');\n    }\n\n    const fileCount = sceneOptions.length;\n    const percentComplete = [];\n\n    let loadingUITaskId;\n    if (showLoadingUI) {\n      this.loadingSpinner.removeAllTasks();\n      loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\n    }\n\n    const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\n      percentComplete[fileIndex] = percent;\n      let totalPercent = 0;\n      for (let i = 0; i < fileCount; i++) {\n        totalPercent += percentComplete[i] || 0;\n      }\n      totalPercent = totalPercent / fileCount;\n      percentLabel = `${totalPercent.toFixed(2)}%`;\n      if (showLoadingUI) {\n        if (loaderStatus === LoaderStatus.Downloading) {\n          this.loadingSpinner.setMessageForTask(\n            loadingUITaskId,\n            totalPercent == 100 ?\n              `Download complete!` :\n              `Downloading: ${percentLabel}`,\n          );\n        }\n      }\n      if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\n    };\n\n    const baseDownloadPromises = [];\n    const nativeDownloadPromises = [];\n    for (let i = 0; i < sceneOptions.length; i++) {\n      const options = sceneOptions[i];\n      const format =\n        options.format !== undefined && options.format !== null ?\n          options.format :\n          sceneFormatFromPath(options.path);\n      const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(\n        options.path,\n        options.splatAlphaRemovalThreshold,\n        onLoadProgress.bind(this, i),\n        false,\n        undefined,\n        format,\n      );\n      baseDownloadPromises.push(baseDownloadPromise);\n      nativeDownloadPromises.push(baseDownloadPromise.promise);\n    }\n\n    const downloadAndBuildPromise = new AbortablePromise(\n      (resolve, reject) => {\n        Promise.all(nativeDownloadPromises)\n          .then((splatBuffers) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            this.addSplatBuffers(\n              splatBuffers,\n              sceneOptions,\n              true,\n              showLoadingUI,\n              showLoadingUI,\n              false,\n              false,\n            ).then(() => {\n              if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n              this.clearSplatSceneDownloadAndBuildPromise();\n              resolve();\n            });\n          })\n          .catch((e) => {\n            if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\n            this.clearSplatSceneDownloadAndBuildPromise();\n            const error =\n              e instanceof AbortedPromiseError ?\n                e :\n                new Error(\n                    `Viewer::addSplatScenes -> Could not load one or more splat scenes.`,\n                  );\n            reject(error);\n          })\n          .finally(() => {\n            this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\n          });\n      },\n      (reason) => {\n        for (let baseDownloadPromise of baseDownloadPromises) {\n          baseDownloadPromise.abort(reason);\n        }\n      },\n    );\n    this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\n    this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\n    return downloadAndBuildPromise;\n  }\n\n  /**\n   * Download a splat scene and convert to SplatBuffer instance.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n   *                                            value (valid range: 0 - 255), defaults to 1\n   *\n   * @param {function} onProgress Function to be called as file data are received\n   * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\n   * @param {function} onSectionBuilt Function to be called when new section is added to the file\n   * @param {string} format File format of the scene\n   * @return {AbortablePromise}\n   */\n  downloadSplatSceneToSplatBuffer(\n    path,\n    splatAlphaRemovalThreshold = 1,\n    onProgress = undefined,\n    progressiveBuild = false,\n    onSectionBuilt = undefined,\n    format,\n  ) {\n    const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\n    try {\n      if (format === SceneFormat.Splat) {\n        return SplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.KSplat) {\n        return KSplatLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.Ply) {\n        return PlyLoader.loadFromURL(\n          path,\n          onProgress,\n          progressiveBuild,\n          onSectionBuilt,\n          splatAlphaRemovalThreshold,\n          this.inMemoryCompressionLevel,\n          optimizeSplatData,\n          this.sphericalHarmonicsDegree,\n          undefined,\n          undefined,\n          undefined,\n          undefined,\n          this.fetchWithProgress,\n        );\n      } else if (format === SceneFormat.GLTF) {\n        return new GLTFLoader(this).loadFromURL(path);\n      }\n    } catch (e) {\n      if (e instanceof DirectLoadError) {\n        throw new Error(\n          'File type or server does not support progressive loading.',\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    throw new Error(\n      `Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`,\n    );\n  }\n\n  static isProgressivelyLoadable(format) {\n    return (\n      format === SceneFormat.Splat ||\n      format === SceneFormat.KSplat ||\n      format === SceneFormat.Ply\n    );\n  }\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n   * This function will terminate the existing sort worker (if there is one).\n   */\n  addSplatBuffers = (function() {\n    return function(\n      splatBuffers,\n      splatBufferOptions = [],\n      finalBuild = true,\n      showLoadingUI = true,\n      showLoadingUIForSplatTreeBuild = true,\n      replaceExisting = false,\n      enableRenderBeforeFirstSort = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n      let splatProcessingTaskId = null;\n      const removeSplatProcessingTask = () => {\n        if (splatProcessingTaskId !== null) {\n          this.loadingSpinner.removeTask(splatProcessingTaskId);\n          splatProcessingTaskId = null;\n        }\n      };\n\n      this.splatRenderReady = false;\n      return new Promise((resolve) => {\n        if (showLoadingUI) {\n          splatProcessingTaskId = this.loadingSpinner.addTask(\n            'Processing splats...',\n          );\n        }\n        delayedExecute(() => {\n          if (this.isDisposingOrDisposed()) {\n            resolve();\n          } else {\n            const buildResults = this.addSplatBuffersToMesh(\n              splatBuffers,\n              splatBufferOptions,\n              finalBuild,\n              showLoadingUIForSplatTreeBuild,\n              replaceExisting,\n              preserveVisibleRegion,\n            );\n\n            const maxSplatCount = this.splatMesh.getMaxSplatCount();\n            if (\n              this.sortWorker &&\n              this.sortWorker.maxSplatCount !== maxSplatCount\n            ) {\n              this.disposeSortWorker();\n            }\n            // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\n            // splat centers and transform indexes so that it can calculate those distance values.\n            if (!this.gpuAcceleratedSort) {\n              this.preSortMessages.push({\n                centers: buildResults.centers.buffer,\n                sceneIndexes: buildResults.sceneIndexes.buffer,\n                range: {\n                  from: buildResults.from,\n                  to: buildResults.to,\n                  count: buildResults.count,\n                },\n              });\n            }\n            const sortWorkerSetupPromise =\n              !this.sortWorker && maxSplatCount > 0 ?\n                this.setupSortWorker(this.splatMesh) :\n                Promise.resolve();\n            sortWorkerSetupPromise.then(() => {\n              if (this.isDisposingOrDisposed()) return;\n              this.runSplatSort(true, true).then((sortRunning) => {\n                if (!this.sortWorker || !sortRunning) {\n                  this.splatRenderReady = true;\n                  removeSplatProcessingTask();\n                  resolve();\n                } else {\n                  if (enableRenderBeforeFirstSort) {\n                    this.splatRenderReady = true;\n                  } else {\n                    this.runAfterNextSort.push(() => {\n                      this.splatRenderReady = true;\n                    });\n                  }\n                  this.runAfterNextSort.push(() => {\n                    removeSplatProcessingTask();\n                    resolve();\n                  });\n                }\n              });\n            });\n          }\n        }, true);\n      });\n    };\n  })();\n\n  /**\n   * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\n   * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\n   * changed by passing 'true' for 'replaceExisting'.\n   * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n   * @param {Array<object>} splatBufferOptions Array of options objects: {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n   * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\n   * @return {object} Object containing info about the splats that are updated\n   */\n  addSplatBuffersToMesh = (function() {\n    let splatOptimizingTaskId;\n\n    return function(\n      splatBuffers,\n      splatBufferOptions,\n      finalBuild = true,\n      showLoadingUIForSplatTreeBuild = false,\n      replaceExisting = false,\n      preserveVisibleRegion = true,\n    ) {\n      if (this.isDisposingOrDisposed()) return;\n      let allSplatBuffers = [];\n      let allSplatBufferOptions = [];\n      if (!replaceExisting) {\n        allSplatBuffers =\n          this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\n        allSplatBufferOptions = this.splatMesh.sceneOptions ?\n          this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) :\n          [];\n      }\n      allSplatBuffers.push(...splatBuffers);\n      allSplatBufferOptions.push(...splatBufferOptions);\n      if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n      const onSplatTreeIndexesUpload = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        const splatCount = this.splatMesh.getSplatCount();\n        if (\n          showLoadingUIForSplatTreeBuild &&\n          splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER\n        ) {\n          if (!finished && !splatOptimizingTaskId) {\n            this.loadingSpinner.setMinimized(true, true);\n            splatOptimizingTaskId = this.loadingSpinner.addTask(\n              'Optimizing data structures...',\n            );\n          }\n        }\n      };\n      const onSplatTreeReady = (finished) => {\n        if (this.isDisposingOrDisposed()) return;\n        if (finished && splatOptimizingTaskId) {\n          this.loadingSpinner.removeTask(splatOptimizingTaskId);\n          splatOptimizingTaskId = null;\n        }\n      };\n      const buildResults = this.splatMesh.build(\n        allSplatBuffers,\n        allSplatBufferOptions,\n        true,\n        finalBuild,\n        onSplatTreeIndexesUpload,\n        onSplatTreeReady,\n        preserveVisibleRegion,\n      );\n      if (finalBuild && this.freeIntermediateSplatData) {\n        this.splatMesh.freeIntermediateSplatData();\n      }\n      return buildResults;\n    };\n  })();\n\n  /**\n   * Set up the splat sorting web worker.\n   * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n   * @return {Promise}\n   */\n  setupSortWorker(splatMesh) {\n    if (this.isDisposingOrDisposed()) return;\n    return new Promise((resolve) => {\n      const DistancesArrayType = this.integerBasedSort ?\n        Int32Array :\n        Float32Array;\n      const splatCount = splatMesh.getSplatCount();\n      const maxSplatCount = splatMesh.getMaxSplatCount();\n      this.sortWorker = createSortWorker(\n        maxSplatCount,\n        this.sharedMemoryForWorkers,\n        this.enableSIMDInSort,\n        this.integerBasedSort,\n        this.splatMesh.dynamicMode,\n        this.splatSortDistanceMapPrecision,\n      );\n      this.sortWorker.onmessage = (e) => {\n        if (e.data.sortDone) {\n          this.sortRunning = false;\n          if (this.sharedMemoryForWorkers) {\n            this.splatMesh.updateRenderIndexes(\n              this.sortWorkerSortedIndexes,\n              e.data.splatRenderCount,\n            );\n          } else {\n            const sortedIndexes = new Uint32Array(\n              e.data.sortedIndexes.buffer,\n              0,\n              e.data.splatRenderCount,\n            );\n            this.splatMesh.updateRenderIndexes(\n              sortedIndexes,\n              e.data.splatRenderCount,\n            );\n          }\n\n          this.lastSplatSortCount = this.splatSortCount;\n\n          this.lastSortTime = e.data.sortTime;\n          this.sortPromiseResolver();\n          this.sortPromiseResolver = null;\n          this.forceRenderNextFrame();\n          if (this.runAfterNextSort.length > 0) {\n            this.runAfterNextSort.forEach((func) => {\n              func();\n            });\n            this.runAfterNextSort.length = 0;\n          }\n        } else if (e.data.sortCanceled) {\n          this.sortRunning = false;\n        } else if (e.data.sortSetupPhase1Complete) {\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker WASM setup complete.');\n          }\n          if (this.sharedMemoryForWorkers) {\n            this.sortWorkerSortedIndexes = new Uint32Array(\n              e.data.sortedIndexesBuffer,\n              e.data.sortedIndexesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerIndexesToSort = new Uint32Array(\n              e.data.indexesToSortBuffer,\n              e.data.indexesToSortOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              e.data.precomputedDistancesBuffer,\n              e.data.precomputedDistancesOffset,\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              e.data.transformsBuffer,\n              e.data.transformsOffset,\n              Constants.MaxScenes * 16,\n            );\n          } else {\n            this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n            this.sortWorkerPrecomputedDistances = new DistancesArrayType(\n              maxSplatCount,\n            );\n            this.sortWorkerTransforms = new Float32Array(\n              Constants.MaxScenes * 16,\n            );\n          }\n          for (let i = 0; i < splatCount; i++) {\n            this.sortWorkerIndexesToSort[i] = i;\n          }\n          this.sortWorker.maxSplatCount = maxSplatCount;\n\n          if (this.logLevel >= LogLevel.Info) {\n            console.log('Sorting web worker ready.');\n            const splatDataTextures = this.splatMesh.getSplatDataTextures();\n            const covariancesTextureSize = splatDataTextures.covariances.size;\n            const centersColorsTextureSize =\n              splatDataTextures.centerColors.size;\n            console.log(\n              'Covariances texture size: ' +\n                covariancesTextureSize.x +\n                ' x ' +\n                covariancesTextureSize.y,\n            );\n            console.log(\n              'Centers/colors texture size: ' +\n                centersColorsTextureSize.x +\n                ' x ' +\n                centersColorsTextureSize.y,\n            );\n          }\n\n          resolve();\n        }\n      };\n    });\n  }\n\n  disposeSortWorker() {\n    if (this.sortWorker) this.sortWorker.terminate();\n    this.sortWorker = null;\n    this.sortPromise = null;\n    if (this.sortPromiseResolver) {\n      this.sortPromiseResolver();\n      this.sortPromiseResolver = null;\n    }\n    this.preSortMessages = [];\n    this.sortRunning = false;\n  }\n\n  removeSplatScene(indexToRemove, showLoadingUI = true) {\n    return this.removeSplatScenes([indexToRemove], showLoadingUI);\n  }\n\n  removeSplatScenes(indexesToRemove, showLoadingUI = true) {\n    if (this.isLoadingOrUnloading()) {\n      throw new Error(\n        'Cannot remove splat scene while another load or unload is already in progress.',\n      );\n    }\n\n    if (this.isDisposingOrDisposed()) {\n      throw new Error('Cannot remove splat scene after dispose() is called.');\n    }\n\n    let sortPromise;\n\n    this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n      let revmovalTaskId;\n\n      if (showLoadingUI) {\n        this.loadingSpinner.removeAllTasks();\n        this.loadingSpinner.show();\n        revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n      }\n\n      const checkAndHideLoadingUI = () => {\n        if (showLoadingUI) {\n          this.loadingSpinner.hide();\n          this.loadingSpinner.removeTask(revmovalTaskId);\n        }\n      };\n\n      const onDone = (error) => {\n        checkAndHideLoadingUI();\n        this.splatSceneRemovalPromise = null;\n        if (!error) resolve();\n        else reject(error);\n      };\n\n      const checkForEarlyExit = () => {\n        if (this.isDisposingOrDisposed()) {\n          onDone();\n          return true;\n        }\n        return false;\n      };\n\n      sortPromise = this.sortPromise || Promise.resolve();\n      sortPromise.then(() => {\n        if (checkForEarlyExit()) return;\n        const savedSplatBuffers = [];\n        const savedSceneOptions = [];\n        const savedSceneTransformComponents = [];\n        for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n          let shouldRemove = false;\n          for (let indexToRemove of indexesToRemove) {\n            if (indexToRemove === i) {\n              shouldRemove = true;\n              break;\n            }\n          }\n          if (!shouldRemove) {\n            const scene = this.splatMesh.scenes[i];\n            savedSplatBuffers.push(scene.splatBuffer);\n            savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n            savedSceneTransformComponents.push({\n              position: scene.position.clone(),\n              quaternion: scene.quaternion.clone(),\n              scale: scene.scale.clone(),\n            });\n          }\n        }\n        this.disposeSortWorker();\n        this.splatMesh.dispose();\n        this.sceneRevealMode = SceneRevealMode.Instant;\n        this.createSplatMesh();\n        this.addSplatBuffers(\n          savedSplatBuffers,\n          savedSceneOptions,\n          true,\n          false,\n          true,\n        )\n          .then(() => {\n            if (checkForEarlyExit()) return;\n            checkAndHideLoadingUI();\n            this.splatMesh.scenes.forEach((scene, index) => {\n              scene.position.copy(\n                savedSceneTransformComponents[index].position,\n              );\n              scene.quaternion.copy(\n                savedSceneTransformComponents[index].quaternion,\n              );\n              scene.scale.copy(savedSceneTransformComponents[index].scale);\n            });\n            this.splatMesh.updateTransforms();\n            this.splatRenderReady = false;\n\n            this.runSplatSort(true).then(() => {\n              if (checkForEarlyExit()) {\n                this.splatRenderReady = true;\n                return;\n              }\n              sortPromise = this.sortPromise || Promise.resolve();\n              sortPromise.then(() => {\n                this.splatRenderReady = true;\n                onDone();\n              });\n            });\n          })\n          .catch((e) => {\n            onDone(e);\n          });\n      });\n    });\n\n    return this.splatSceneRemovalPromise;\n  }\n\n  /**\n   * Start self-driven mode\n   */\n  start() {\n    if (this.selfDrivenMode) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n      } else {\n        this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n      }\n      this.selfDrivenModeRunning = true;\n    } else {\n      throw new Error('Cannot start viewer unless it is in self driven mode.');\n    }\n  }\n\n  /**\n   * Stop self-driven mode\n   */\n  stop() {\n    if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n      if (this.webXRMode) {\n        this.renderer.setAnimationLoop(null);\n      } else {\n        cancelAnimationFrame(this.requestFrameId);\n      }\n      this.selfDrivenModeRunning = false;\n    }\n  }\n\n  /**\n   * Dispose of all resources held directly and indirectly by this viewer.\n   */\n  async dispose() {\n    if (this.isDisposingOrDisposed()) return this.disposePromise;\n\n    let waitPromises = [];\n    let promisesToAbort = [];\n    for (let promiseKey in this.splatSceneDownloadPromises) {\n      if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\n        const downloadPromiseToAbort =\n          this.splatSceneDownloadPromises[promiseKey];\n        promisesToAbort.push(downloadPromiseToAbort);\n        waitPromises.push(downloadPromiseToAbort.promise);\n      }\n    }\n    if (this.sortPromise) {\n      waitPromises.push(this.sortPromise);\n    }\n\n    this.disposing = true;\n    this.disposePromise = Promise.all(waitPromises).finally(() => {\n      this.stop();\n      if (this.orthographicControls) {\n        this.orthographicControls.dispose();\n        this.orthographicControls = null;\n      }\n      if (this.perspectiveControls) {\n        this.perspectiveControls.dispose();\n        this.perspectiveControls = null;\n      }\n      this.controls = null;\n      if (this.splatMesh) {\n        this.splatMesh.dispose();\n        this.splatMesh = null;\n      }\n      if (this.sceneHelper) {\n        this.sceneHelper.dispose();\n        this.sceneHelper = null;\n      }\n      if (this.resizeObserver) {\n        this.resizeObserver.unobserve(this.rootElement);\n        this.resizeObserver = null;\n      }\n      this.disposeSortWorker();\n      this.removeEventHandlers();\n\n      this.loadingSpinner.removeAllTasks();\n      this.loadingSpinner.setContainer(null);\n      this.loadingProgressBar.hide();\n      this.loadingProgressBar.setContainer(null);\n      this.infoPanel.setContainer(null);\n\n      this.camera = null;\n      this.threeScene = null;\n      this.splatRenderReady = false;\n      this.initialized = false;\n      if (this.renderer) {\n        if (!this.usingExternalRenderer) {\n          this.rootElement.removeChild(this.renderer.domElement);\n          this.renderer.dispose();\n        }\n        this.renderer = null;\n      }\n\n      if (!this.usingExternalRenderer) {\n        document.body.removeChild(this.rootElement);\n      }\n\n      this.sortWorkerSortedIndexes = null;\n      this.sortWorkerIndexesToSort = null;\n      this.sortWorkerPrecomputedDistances = null;\n      this.sortWorkerTransforms = null;\n      this.disposed = true;\n      this.disposing = false;\n      this.disposePromise = null;\n    });\n    promisesToAbort.forEach((toAbort) => {\n      toAbort.abort('Scene disposed');\n    });\n    return this.disposePromise;\n  }\n\n  selfDrivenUpdate() {\n    if (this.selfDrivenMode && !this.webXRMode) {\n      this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n    }\n    this.update();\n    if (this.shouldRender()) {\n      this.render();\n      this.consecutiveRenderFrames++;\n    } else {\n      this.consecutiveRenderFrames = 0;\n    }\n    this.renderNextFrame = false;\n  }\n\n  forceRenderNextFrame() {\n    this.renderNextFrame = true;\n  }\n\n  shouldRender = (function() {\n    let renderCount = 0;\n    const lastCameraPosition = new THREE.Vector3();\n    const lastCameraOrientation = new THREE.Quaternion();\n    const changeEpsilon = 0.0001;\n\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return false;\n      }\n\n      let shouldRender = false;\n      let cameraChanged = false;\n      if (this.camera) {\n        const cp = this.camera.position;\n        const co = this.camera.quaternion;\n        cameraChanged =\n          Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n          Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n          Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n          Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n          Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n          Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n          Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n      }\n\n      shouldRender =\n        this.renderMode !== RenderMode.Never &&\n        (renderCount === 0 ||\n          this.splatMesh.visibleRegionChanging ||\n          cameraChanged ||\n          this.renderMode === RenderMode.Always ||\n          this.dynamicMode === true ||\n          this.renderNextFrame);\n\n      if (this.camera) {\n        lastCameraPosition.copy(this.camera.position);\n        lastCameraOrientation.copy(this.camera.quaternion);\n      }\n\n      renderCount++;\n      return shouldRender;\n    };\n  })();\n\n  render = (function() {\n    return function() {\n      if (\n        !this.initialized ||\n        !this.splatRenderReady ||\n        this.isDisposingOrDisposed()\n      ) {\n        return;\n      }\n\n      const hasRenderables = (threeScene) => {\n        for (let child of threeScene.children) {\n          if (child.visible) return true;\n        }\n        return false;\n      };\n\n      const savedAuoClear = this.renderer.autoClear;\n      if (hasRenderables(this.threeScene)) {\n        this.renderer.render(this.threeScene, this.camera);\n        this.renderer.autoClear = false;\n      }\n      this.renderer.render(this.splatMesh, this.camera);\n      this.renderer.autoClear = false;\n      if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) {\n        this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n      }\n      if (this.showControlPlane) {\n        this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n      }\n      this.renderer.autoClear = savedAuoClear;\n    };\n  })();\n\n  update(renderer, camera) {\n    if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n\n    if (\n      !this.initialized ||\n      !this.splatRenderReady ||\n      this.isDisposingOrDisposed()\n    ) {\n      return;\n    }\n\n    if (this.controls) {\n      this.controls.update();\n      if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n        Viewer.setCameraPositionFromZoom(\n          this.camera,\n          this.camera,\n          this.controls,\n        );\n      }\n    }\n    this.runSplatSort();\n    this.updateForRendererSizeChanges();\n    this.updateSplatMesh();\n    this.updateMeshCursor();\n    this.updateFPS();\n    this.timingSensitiveUpdates();\n    this.updateInfoPanel();\n    this.updateControlPlane();\n  }\n\n  updateForDropInMode(renderer, camera) {\n    this.renderer = renderer;\n    if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n    this.camera = camera;\n    if (this.controls) this.controls.object = camera;\n    this.init();\n  }\n\n  updateFPS = (function() {\n    let lastCalcTime = getCurrentTime();\n    let frameCount = 0;\n\n    return function() {\n      if (\n        this.consecutiveRenderFrames >\n        CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION\n      ) {\n        const currentTime = getCurrentTime();\n        const calcDelta = currentTime - lastCalcTime;\n        if (calcDelta >= 1.0) {\n          this.currentFPS = frameCount;\n          frameCount = 0;\n          lastCalcTime = currentTime;\n        } else {\n          frameCount++;\n        }\n      } else {\n        this.currentFPS = null;\n      }\n    };\n  })();\n\n  updateForRendererSizeChanges = (function() {\n    const lastRendererSize = new THREE.Vector2();\n    const currentRendererSize = new THREE.Vector2();\n    let lastCameraOrthographic;\n\n    return function() {\n      if (!this.usingExternalCamera) {\n        this.renderer.getSize(currentRendererSize);\n        if (\n          lastCameraOrthographic === undefined ||\n          lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n          currentRendererSize.x !== lastRendererSize.x ||\n          currentRendererSize.y !== lastRendererSize.y\n        ) {\n          if (this.camera.isOrthographicCamera) {\n            this.camera.left = -currentRendererSize.x / 2.0;\n            this.camera.right = currentRendererSize.x / 2.0;\n            this.camera.top = currentRendererSize.y / 2.0;\n            this.camera.bottom = -currentRendererSize.y / 2.0;\n          } else {\n            this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n          }\n          this.camera.updateProjectionMatrix();\n          lastRendererSize.copy(currentRendererSize);\n          lastCameraOrthographic = this.camera.isOrthographicCamera;\n        }\n      }\n    };\n  })();\n\n  timingSensitiveUpdates = (function() {\n    let lastUpdateTime;\n\n    return function() {\n      const currentTime = getCurrentTime();\n      if (!lastUpdateTime) lastUpdateTime = currentTime;\n      const timeDelta = currentTime - lastUpdateTime;\n\n      this.updateCameraTransition(currentTime);\n      this.updateFocusMarker(timeDelta);\n\n      lastUpdateTime = currentTime;\n    };\n  })();\n\n  updateCameraTransition = (function() {\n    let tempCameraTarget = new THREE.Vector3();\n    let toPreviousTarget = new THREE.Vector3();\n    let toNextTarget = new THREE.Vector3();\n\n    return function(currentTime) {\n      if (this.transitioningCameraTarget) {\n        toPreviousTarget\n          .copy(this.previousCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        toNextTarget\n          .copy(this.nextCameraTarget)\n          .sub(this.camera.position)\n          .normalize();\n        const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n        const rotationSpeed = (rotationAngle / (Math.PI / 3)) * 0.65 + 0.3;\n        const t =\n          (rotationSpeed / rotationAngle) *\n          (currentTime - this.transitioningCameraTargetStartTime);\n        tempCameraTarget\n          .copy(this.previousCameraTarget)\n          .lerp(this.nextCameraTarget, t);\n        this.camera.lookAt(tempCameraTarget);\n        this.controls.target.copy(tempCameraTarget);\n        if (t >= 1.0) {\n          this.transitioningCameraTarget = false;\n        }\n      }\n    };\n  })();\n\n  updateFocusMarker = (function() {\n    const renderDimensions = new THREE.Vector2();\n    let wasTransitioning = false;\n\n    return function(timeDelta) {\n      this.getRenderDimensions(renderDimensions);\n      if (this.transitioningCameraTarget) {\n        this.sceneHelper.setFocusMarkerVisibility(true);\n        const currentFocusMarkerOpacity = Math.max(\n          this.sceneHelper.getFocusMarkerOpacity(),\n          0.0,\n        );\n        let newFocusMarkerOpacity = Math.min(\n          currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta,\n          1.0,\n        );\n        this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n        this.sceneHelper.updateFocusMarker(\n          this.nextCameraTarget,\n          this.camera,\n          renderDimensions,\n        );\n        wasTransitioning = true;\n        this.forceRenderNextFrame();\n      } else {\n        let currentFocusMarkerOpacity;\n        if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n        else {\n          currentFocusMarkerOpacity = Math.min(\n            this.sceneHelper.getFocusMarkerOpacity(),\n            1.0,\n          );\n        }\n        if (currentFocusMarkerOpacity > 0) {\n          this.sceneHelper.updateFocusMarker(\n            this.nextCameraTarget,\n            this.camera,\n            renderDimensions,\n          );\n          let newFocusMarkerOpacity = Math.max(\n            currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta,\n            0.0,\n          );\n          this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n          if (newFocusMarkerOpacity === 0.0) {\n            this.sceneHelper.setFocusMarkerVisibility(false);\n          }\n        }\n        if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n        wasTransitioning = false;\n      }\n    };\n  })();\n\n  updateMeshCursor = (function() {\n    const outHits = [];\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (this.showMeshCursor) {\n        this.forceRenderNextFrame();\n        this.getRenderDimensions(renderDimensions);\n        outHits.length = 0;\n        this.raycaster.setFromCameraAndScreenPosition(\n          this.camera,\n          this.mousePosition,\n          renderDimensions,\n        );\n        this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n        if (outHits.length > 0) {\n          this.sceneHelper.setMeshCursorVisibility(true);\n          this.sceneHelper.positionAndOrientMeshCursor(\n            outHits[0].origin,\n            this.camera,\n          );\n        } else {\n          this.sceneHelper.setMeshCursorVisibility(false);\n        }\n      } else {\n        if (this.sceneHelper.getMeschCursorVisibility()) {\n          this.forceRenderNextFrame();\n        }\n        this.sceneHelper.setMeshCursorVisibility(false);\n      }\n    };\n  })();\n\n  updateInfoPanel = (function() {\n    const renderDimensions = new THREE.Vector2();\n\n    return function() {\n      if (!this.showInfo) return;\n      const splatCount = this.splatMesh.getSplatCount();\n      this.getRenderDimensions(renderDimensions);\n      const cameraLookAtPosition = this.controls ? this.controls.target : null;\n      const meshCursorPosition = this.showMeshCursor ?\n        this.sceneHelper.meshCursor.position :\n        null;\n      const splatRenderCountPct =\n        splatCount > 0 ? (this.splatRenderCount / splatCount) * 100 : 0;\n      this.infoPanel.update(\n        renderDimensions,\n        this.camera.position,\n        cameraLookAtPosition,\n        this.camera.up,\n        this.camera.isOrthographicCamera,\n        meshCursorPosition,\n        this.currentFPS || 'N/A',\n        splatCount,\n        this.splatRenderCount,\n        splatRenderCountPct,\n        this.lastSortTime,\n        this.focalAdjustment,\n        this.splatMesh.getSplatScale(),\n        this.splatMesh.getPointCloudModeEnabled(),\n      );\n    };\n  })();\n\n  updateControlPlane() {\n    if (this.showControlPlane) {\n      this.sceneHelper.setControlPlaneVisibility(true);\n      this.sceneHelper.positionAndOrientControlPlane(\n        this.controls.target,\n        this.camera.up,\n      );\n    } else {\n      this.sceneHelper.setControlPlaneVisibility(false);\n    }\n  }\n\n  runSplatSort = (function() {\n    const mvpMatrix = new THREE.Matrix4();\n    const cameraPositionArray = [];\n    const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n    const sortViewDir = new THREE.Vector3(0, 0, -1);\n    const lastSortViewPos = new THREE.Vector3();\n    const sortViewOffset = new THREE.Vector3();\n    const queuedSorts = [];\n\n    const partialSorts = [\n      {\n        angleThreshold: 0.55,\n        sortFractions: [0.125, 0.33333, 0.75],\n      },\n      {\n        angleThreshold: 0.65,\n        sortFractions: [0.33333, 0.66667],\n      },\n      {\n        angleThreshold: 0.8,\n        sortFractions: [0.5],\n      },\n    ];\n\n    return function(force = false, forceSortAll = false) {\n      if (!this.initialized) return Promise.resolve(false);\n      if (this.sortRunning) return Promise.resolve(true);\n      if (this.splatMesh.getSplatCount() <= 0) {\n        this.splatRenderCount = 0;\n        return Promise.resolve(false);\n      }\n\n      let angleDiff = 0;\n      let positionDiff = 0;\n      let needsRefreshForRotation = false;\n      let needsRefreshForPosition = false;\n\n      sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n      angleDiff = sortViewDir.dot(lastSortViewDir);\n      positionDiff = sortViewOffset\n        .copy(this.camera.position)\n        .sub(lastSortViewPos)\n        .length();\n\n      if (!force) {\n        if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n          if (angleDiff <= 0.99) needsRefreshForRotation = true;\n          if (positionDiff >= 1.0) needsRefreshForPosition = true;\n          if (!needsRefreshForRotation && !needsRefreshForPosition) {\n            return Promise.resolve(false);\n          }\n        }\n      }\n\n      this.sortRunning = true;\n      let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n      shouldSortAll = shouldSortAll || forceSortAll;\n      this.splatRenderCount = splatRenderCount;\n\n      mvpMatrix.copy(this.camera.matrixWorld).invert();\n      const mvpCamera = this.perspectiveCamera || this.camera;\n      mvpMatrix.premultiply(mvpCamera.projectionMatrix);\n      mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n      let gpuAcceleratedSortPromise = Promise.resolve(true);\n      if (\n        this.gpuAcceleratedSort &&\n        (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)\n      ) {\n        gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(\n          mvpMatrix,\n          this.sortWorkerPrecomputedDistances,\n        );\n      }\n\n      gpuAcceleratedSortPromise.then(() => {\n        if (queuedSorts.length === 0) {\n          if (this.splatMesh.dynamicMode || shouldSortAll) {\n            queuedSorts.push(this.splatRenderCount);\n          } else {\n            for (let partialSort of partialSorts) {\n              if (angleDiff < partialSort.angleThreshold) {\n                for (let sortFraction of partialSort.sortFractions) {\n                  queuedSorts.push(\n                    Math.floor(this.splatRenderCount * sortFraction),\n                  );\n                }\n                break;\n              }\n            }\n            queuedSorts.push(this.splatRenderCount);\n          }\n        }\n        let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n        this.splatSortCount = sortCount;\n\n        cameraPositionArray[0] = this.camera.position.x;\n        cameraPositionArray[1] = this.camera.position.y;\n        cameraPositionArray[2] = this.camera.position.z;\n\n        const sortMessage = {\n          modelViewProj: mvpMatrix.elements,\n          cameraPosition: cameraPositionArray,\n          splatRenderCount: this.splatRenderCount,\n          splatSortCount: sortCount,\n          usePrecomputedDistances: this.gpuAcceleratedSort,\n        };\n        if (this.splatMesh.dynamicMode) {\n          this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n        }\n        if (!this.sharedMemoryForWorkers) {\n          sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n          sortMessage.transforms = this.sortWorkerTransforms;\n          if (this.gpuAcceleratedSort) {\n            sortMessage.precomputedDistances =\n              this.sortWorkerPrecomputedDistances;\n          }\n        }\n\n        this.sortPromise = new Promise((resolve) => {\n          this.sortPromiseResolver = resolve;\n        });\n\n        if (this.preSortMessages.length > 0) {\n          this.preSortMessages.forEach((message) => {\n            this.sortWorker.postMessage(message);\n          });\n          this.preSortMessages = [];\n        }\n        this.sortWorker.postMessage({\n          sort: sortMessage,\n        });\n\n        if (queuedSorts.length === 0) {\n          lastSortViewPos.copy(this.camera.position);\n          lastSortViewDir.copy(sortViewDir);\n        }\n\n        return true;\n      });\n\n      return gpuAcceleratedSortPromise;\n    };\n  })();\n\n  /**\n   * Determine which splats to render by checking which are inside or close to the view frustum\n   */\n  gatherSceneNodesForSort = (function() {\n    const nodeRenderList = [];\n    let allSplatsSortBuffer = null;\n    const tempVectorYZ = new THREE.Vector3();\n    const tempVectorXZ = new THREE.Vector3();\n    const tempVector = new THREE.Vector3();\n    const modelView = new THREE.Matrix4();\n    const baseModelView = new THREE.Matrix4();\n    const sceneTransform = new THREE.Matrix4();\n    const renderDimensions = new THREE.Vector3();\n    const forward = new THREE.Vector3(0, 0, -1);\n\n    const tempMax = new THREE.Vector3();\n    const nodeSize = (node) => {\n      return tempMax.copy(node.max).sub(node.min).length();\n    };\n\n    return function(gatherAllNodes = false) {\n      this.getRenderDimensions(renderDimensions);\n      const cameraFocalLength =\n        renderDimensions.y /\n        2.0 /\n        Math.tan((this.camera.fov / 2.0) * THREE.MathUtils.DEG2RAD);\n      const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n      const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n      const cosFovXOver2 = Math.cos(fovXOver2);\n      const cosFovYOver2 = Math.cos(fovYOver2);\n\n      const splatTree = this.splatMesh.getSplatTree();\n\n      if (splatTree) {\n        baseModelView.copy(this.camera.matrixWorld).invert();\n        baseModelView.multiply(this.splatMesh.matrixWorld);\n\n        let nodeRenderCount = 0;\n        let splatRenderCount = 0;\n\n        for (let s = 0; s < splatTree.subTrees.length; s++) {\n          const subTree = splatTree.subTrees[s];\n          modelView.copy(baseModelView);\n          if (this.splatMesh.dynamicMode) {\n            this.splatMesh.getSceneTransform(s, sceneTransform);\n            modelView.multiply(sceneTransform);\n          }\n          const nodeCount = subTree.nodesWithIndexes.length;\n          for (let i = 0; i < nodeCount; i++) {\n            const node = subTree.nodesWithIndexes[i];\n            if (\n              !node.data ||\n              !node.data.indexes ||\n              node.data.indexes.length === 0\n            ) {\n              continue;\n            }\n            tempVector.copy(node.center).applyMatrix4(modelView);\n\n            const distanceToNode = tempVector.length();\n            tempVector.normalize();\n\n            tempVectorYZ.copy(tempVector).setX(0).normalize();\n            tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n            const cameraAngleXZDot = forward.dot(tempVectorXZ);\n            const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n            const ns = nodeSize(node);\n            const outOfFovY = cameraAngleYZDot < cosFovYOver2 - 0.6;\n            const outOfFovX = cameraAngleXZDot < cosFovXOver2 - 0.6;\n            if (\n              !gatherAllNodes &&\n              (outOfFovX || outOfFovY) &&\n              distanceToNode > ns\n            ) {\n              continue;\n            }\n            splatRenderCount += node.data.indexes.length;\n            nodeRenderList[nodeRenderCount] = node;\n            node.data.distanceToNode = distanceToNode;\n            nodeRenderCount++;\n          }\n        }\n\n        nodeRenderList.length = nodeRenderCount;\n        nodeRenderList.sort((a, b) => {\n          if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n          else return 1;\n        });\n\n        let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n        for (let i = 0; i < nodeRenderCount; i++) {\n          const node = nodeRenderList[i];\n          const windowSizeInts = node.data.indexes.length;\n          const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n          let destView = new Uint32Array(\n            this.sortWorkerIndexesToSort.buffer,\n            currentByteOffset - windowSizeBytes,\n            windowSizeInts,\n          );\n          destView.set(node.data.indexes);\n          currentByteOffset -= windowSizeBytes;\n        }\n\n        return {\n          splatRenderCount: splatRenderCount,\n          shouldSortAll: false,\n        };\n      } else {\n        const totalSplatCount = this.splatMesh.getSplatCount();\n        if (\n          !allSplatsSortBuffer ||\n          allSplatsSortBuffer.length !== totalSplatCount\n        ) {\n          allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n          for (let i = 0; i < totalSplatCount; i++) {\n            allSplatsSortBuffer[i] = i;\n          }\n        }\n        this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n        return {\n          splatRenderCount: totalSplatCount,\n          shouldSortAll: true,\n        };\n      }\n    };\n  })();\n\n  getSplatMesh() {\n    return this.splatMesh;\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.splatMesh.getScene(sceneIndex);\n  }\n\n  getSceneCount() {\n    return this.splatMesh.getSceneCount();\n  }\n\n  isMobile() {\n    return navigator.userAgent.includes('Mobi');\n  }\n}\n","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n  constructor(options = {}) {\n    super();\n    options.selfDrivenMode = false;\n    options.useBuiltInControls = false;\n    options.rootElement = null;\n    options.ignoreDevicePixelRatio = false;\n    options.dropInMode = true;\n    options.camera = undefined;\n    options.renderer = undefined;\n\n    this.viewer = new Viewer(options);\n    this.splatMesh = null;\n    this.updateSplatMesh();\n\n    this.callbackMesh = DropInViewer.createCallbackMesh();\n    this.add(this.callbackMesh);\n    this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(\n      this,\n      this.viewer,\n    );\n\n    this.viewer.onSplatMeshChanged(() => {\n      this.updateSplatMesh();\n    });\n  }\n\n  updateSplatMesh() {\n    if (this.splatMesh !== this.viewer.splatMesh) {\n      if (this.splatMesh) {\n        this.remove(this.splatMesh);\n      }\n      this.splatMesh = this.viewer.splatMesh;\n      this.add(this.viewer.splatMesh);\n    }\n  }\n\n  /*\n  * Modifies the uniforms of the shader to render the splats reflecting their\n  * ids, it also removes the transparency mode.\n  * @param {status} boolean value used to set if the shader renders IDs or the splats in regular mode\n  */\n  setupIDMode = (function() {\n    return function(status) {\n      if (this.splatMesh !== null) {\n        this.splatMesh.setupIDMode(status);\n      }\n    }\n  })()\n\n  /**\n   * Add a single splat scene to the viewer.\n   * @param {string} path Path to splat scene to be loaded\n   * @param {object} options {\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   *\n   *         onProgress:                 Function to be called as file data are received\n   *\n   * }\n   * @return {AbortablePromise}\n   */\n  addSplatScene(path, options = {}) {\n    if (options.showLoadingUI !== false) options.showLoadingUI = true;\n    return this.viewer.addSplatScene(path, options);\n  }\n\n  /**\n   * Add multiple splat scenes to the viewer.\n   * @param {Array<object>} sceneOptions Array of per-scene options: {\n   *\n   *         path: Path to splat scene to be loaded\n   *\n   *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n   *                                     value (valid range: 0 - 255), defaults to 1\n   *\n   *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n   *\n   *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n   *\n   *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n   * }\n   * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n   * @return {AbortablePromise}\n   */\n  addSplatScenes(sceneOptions, showLoadingUI) {\n    if (showLoadingUI !== false) showLoadingUI = true;\n    return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n  }\n\n  /**\n   * Get a reference to a splat scene.\n   * @param {number} sceneIndex The index of the scene to which the reference will be returned\n   * @return {SplatScene}\n   */\n  getSplatScene(sceneIndex) {\n    return this.viewer.getSplatScene(sceneIndex);\n  }\n\n  removeSplatScene(index, showLoadingUI = true) {\n    return this.viewer.removeSplatScene(index, showLoadingUI);\n  }\n\n  removeSplatScenes(indexes, showLoadingUI = true) {\n    return this.viewer.removeSplatScenes(indexes, showLoadingUI);\n  }\n\n  getSceneCount() {\n    return this.viewer.getSceneCount();\n  }\n\n  setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\n    this.viewer.setActiveSphericalHarmonicsDegrees(\n      activeSphericalHarmonicsDegrees,\n    );\n  }\n\n  /*\n  * Uses the raycaster to traverse the different splats and checks for collisions.\n  *\n  * @param {object} camera is the perspective camera used to render\n  * @param {object} position is the normalized position relative to the screen.\n  * @param {object} screenSize\n  * @returns {object|null} the first splat that collides with the ray.\n  */\n  getSplatPosition = (function() {\n    return function(rendererSize, camera, position) {\n      return this.viewer.getSplatPosition(rendererSize, camera, position);\n    }\n  })();\n  \n  async dispose() {\n    return await this.viewer.dispose();\n  }\n\n  static onBeforeRender(viewer, renderer, threeScene, camera) {\n    viewer.update(renderer, camera);\n  }\n\n  static createCallbackMesh() {\n    const geometry = new THREE.SphereGeometry(1, 8, 8);\n    const material = new THREE.MeshBasicMaterial();\n    material.colorWrite = false;\n    material.depthWrite = false;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.frustumCulled = false;\n    return mesh;\n  }\n}\n"],"names":["fromHalfFloat","finalize","fetchWithProgress","defaultFetchWithProgress","Ray"],"mappings":"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3B,QAAQ,EAAE,UAAU,CAAC;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,EAAE,SAAS,CAAC,SAAS,CAAC;AACtF,gEAAgE,EAAE,SAAS,CAAC,SAAS,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;AACA,IAAI,IAAI,qBAAqB,EAAE;AAC/B,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd,KAAK;AACL;AACA,IAAI,IAAI,WAAW,EAAE;AACrB,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA;AACA,YAAY,CAAC,CAAC;AACd,KAAK,MAAM;AACX,MAAM,kBAAkB,IAAI,CAAC,gDAAgD,CAAC,CAAC;AAC/E,KAAK;AACL;AACA,IAAI,kBAAkB,IAAI,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA;AACA,IAAI,IAAI,2BAA2B,IAAI,CAAC,EAAE;AAC1C,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA,YAAY,CAAC,CAAC;AACd;AACA,MAAM,IAAI,WAAW,EAAE;AACvB,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA,gBAAgB,CAAC,CAAC;AAClB,OAAO,MAAM;AACb,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA,gBAAgB,CAAC,CAAC;AAClB,OAAO;AACP;AACA,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;AACA,MAAM,IAAI,2BAA2B,IAAI,CAAC,EAAE;AAC5C,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,2BAA2B,KAAK,CAAC,EAAE;AAC7C,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB;AACA,OAAO,MAAM,IAAI,2BAA2B,KAAK,CAAC,EAAE;AACpD,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB,OAAO;AACP;AACA;AACA,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;AACA;AACA,MAAM,IAAI,2BAA2B,IAAI,CAAC,EAAE;AAC5C,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB;AACA;AACA;AACA,QAAQ,IAAI,2BAA2B,KAAK,CAAC,EAAE;AAC/C,UAAU,kBAAkB,IAAI,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,CAAC,CAAC;AACtB,SAAS;AACT;AACA;AACA,QAAQ,kBAAkB,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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F,EAAE,QAAQ;AACrG,cAAc,uBAAuB;AACrC,aAAa,CAAC;AACd,2FAA2F,EAAE,QAAQ;AACrG,cAAc,uBAAuB;AACrC,aAAa,CAAC;AACd,YAAY,CAAC,CAAC;AACd;AACA,IAAI,IAAI,qBAAqB,EAAE;AAC/B,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA,YAAY,CAAC,CAAC;AACd,KAAK;AACL;AACA,IAAI,kBAAkB,IAAI,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,kBAAkB,IAAI,aAAa,CAAC,qBAAqB,EAAE,CAAC;AAChE,IAAI,kBAAkB,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9B;AACA,IAAI,OAAO,kBAAkB,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,OAAO,mBAAmB,GAAG;AAC/B,IAAI,IAAI,oBAAoB,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,oBAAoB,IAAI,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,OAAO,oBAAoB,CAAC;AAChC,GAAG;AACH;;AChTO,MAAM,eAAe,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,KAAK;AACd,IAAI,WAAW,GAAG,KAAK;AACvB,IAAI,qBAAqB,GAAG,KAAK;AACjC,IAAI,UAAU,GAAG,GAAG;AACpB,IAAI,qBAAqB,GAAG,KAAK;AACjC,IAAI,2BAA2B,GAAG,CAAC;AACnC,IAAI;AACJ,IAAI,MAAM,gBAAgB,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,IAAI,kBAAkB,GAAG,aAAa,CAAC,qBAAqB;AAChE,MAAM,WAAW;AACjB,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,gBAAgB;AACtB,KAAK,CAAC;AACN,IAAI,kBAAkB,IAAI,eAAe,CAAC,2BAA2B,EAAE,CAAC;AACxE,IAAI,MAAM,oBAAoB,GAAG,eAAe,CAAC,mBAAmB,EAAE,CAAC;AACvE;AACA,IAAI,MAAM,QAAQ,GAAG,aAAa,CAAC,WAAW;AAC9C,MAAM,WAAW;AACjB,MAAM,qBAAqB;AAC3B,MAAM,2BAA2B;AACjC,MAAM,UAAU;AAChB,MAAM,qBAAqB;AAC3B,KAAK,CAAC;AACN;AACA,IAAI,QAAQ,CAAC,uBAAuB,CAAC,GAAG;AACxC,MAAM,IAAI,EAAE,GAAG;AACf,MAAM,KAAK,EAAE,IAAI;AACjB,KAAK,CAAC;AACN,IAAI,QAAQ,CAAC,2BAA2B,CAAC,GAAG;AAC5C,MAAM,IAAI,EAAE,IAAI;AAChB,MAAM,KAAK,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AAC1C,KAAK,CAAC;AACN;AACA,IAAI,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC;AAC9C,MAAM,QAAQ,EAAE,QAAQ;AACxB,MAAM,YAAY,EAAE,kBAAkB;AACtC,MAAM,cAAc,EAAE,oBAAoB;AAC1C,MAAM,WAAW,EAAE,IAAI;AACvB,MAAM,SAAS,EAAE,GAAG;AACpB,MAAM,QAAQ,EAAE,KAAK,CAAC,cAAc;AACpC,MAAM,SAAS,EAAE,IAAI;AACrB,MAAM,UAAU,EAAE,KAAK;AACvB,MAAM,IAAI,EAAE,KAAK,CAAC,UAAU;AAC5B,KAAK,CAAC,CAAC;AACP;AACA,IAAI,OAAO,QAAQ,CAAC;AACpB,GAAG;AACH;AACA,EAAE,OAAO,2BAA2B,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,kBAAkB,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,uBAAuB,GAAG,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,MAAM,oBAAoB,GAAG,KAAK,CAAC;AACvC,IAAI,IAAI,oBAAoB,EAAE;AAC9B,MAAM,kBAAkB,IAAI,uBAAuB,CAAC;AACpD,KAAK,MAAM;AACX;AACA;AACA;AACA;AACA,MAAM,kBAAkB,IAAI,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE,uBAAuB,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd,KAAK;AACL;AACA,IAAI,kBAAkB,IAAI,aAAa,CAAC,qBAAqB,EAAE,CAAC;AAChE,IAAI,kBAAkB,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9B;AACA,IAAI,OAAO,kBAAkB,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,OAAO,mBAAmB,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,oBAAoB,GAAG,CAAC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;AACA,IAAI,OAAO,oBAAoB,CAAC;AAChC,GAAG;AACH;;ACnWO,MAAM,aAAa,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,KAAK,CAAC,aAAa,EAAE;AAC9B,IAAI,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;AACpD,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9C;AACA;AACA,IAAI,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACnD,IAAI,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;AACnE,IAAI,YAAY,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AACrD,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,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"}